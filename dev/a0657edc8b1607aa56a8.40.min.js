webpackJsonp([40],{

/***/ 153:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//这边基本上引入需要使用的资源less，api，需要使用的模块等等。

var taskdetail = function (_Interstellar$pagesBa) {
    _inherits(taskdetail, _Interstellar$pagesBa);

    function taskdetail() {
        _classCallCheck(this, taskdetail);

        return _possibleConstructorReturn(this, (taskdetail.__proto__ || Object.getPrototypeOf(taskdetail)).apply(this, arguments));
    }

    _createClass(taskdetail, [{
        key: 'complete',
        value: function complete() {
            var _this2 = this;

            ES.selctorDoc('head title').html(this.app.languageMode.getTranslate(this.app.language, 'index', 'mine'));
            this.uploadalgdata = __webpack_require__(806);
            this.app.header.showcrube();
            this.dom.find('.back').on('click', function () {
                _this2.app.model.del('taskdetail');
                _this2.app.changePage('personalaccount');
            });
            this.resize();
            this.styleModel(1);
            this.type = 'doctor';
            this.loadMoudel();
            this.userInfo = JSON.parse(this.app.local.get('all'));
            // this.listData()
            this.dom.find('.series .search').on('click', function () {
                _this2.model.listInfo.serialNumber = _this2.dom.find('input[api="serialNumber"]').val();
                _this2.listInfo();
            });
            console.log(this.app.model.taskdetail);
        }

        //加载当前任务数据

    }, {
        key: 'loadDataTask',
        value: function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var value;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.app.loading.show();
                                _context.next = 3;
                                return this.api.task_read({
                                    taskId: this.app.parpam['taskId'],
                                    userId: JSON.parse(this.app.local.get('all')).userId
                                });

                            case 3:
                                value = _context.sent;

                                this.taskRead = value.data;
                                this.app.loading.hide();
                                this.useinfo = JSON.parse(this.app.local.get('all'));
                                this.projectId = value.data.projectId;
                                this.model.listInfo.taskId = this.app.parpam['taskId'];
                                this.model.listInfo.userId = this.useinfo.userId;
                                this.newList = true;
                                this.studyAnno = value.data.studyAnno;
                                this.tasktype = value.data.type;
                                if (value.data.type == 2) {
                                    value.data.algPreAnnotation = "审核任务";
                                } else {
                                    if (value.data.algPreAnnotation && value.data.status == 2) {
                                        this.seriesTotalNum = value.data.seriesTotalNum;
                                        this.status = value.data.status;
                                    }
                                    value.data.algPreAnnotation = value.data.algPreAnnotation ? '算法标注' : '人工标注';
                                }
                                console.log(this.app.model.get('taskdetail'), 'taskdetail');
                                if (this.app.model.get('taskdetail')) {
                                    this.model.setData('listInfo', this.app.model.get('taskdetail'));
                                    if (this.app.model.get('taskdetail').serialNumber) {
                                        this.dom.find('.filterarea input[api="serialNumber"]').val(this.app.model.get('taskdetail').serialNumber);
                                    }
                                } else {
                                    this.model.setData('listInfo', this.model.listInfo);
                                }
                                this.setData(value.data);
                                if (this.app.parpam['type'] == 'view') {
                                    this.dom.find('.biaozhubtn').remove();
                                }

                            case 18:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function loadDataTask() {
                return _ref.apply(this, arguments);
            }

            return loadDataTask;
        }()
    }, {
        key: 'loadMoudel',
        value: function loadMoudel() {
            var _this3 = this;

            var obj = {};
            obj['icon'] = {
                serialNumber: {
                    name: '<span data-i18n="date" data-name="检查时间">序号</span>',
                    type: 'text',
                    code: 'date',
                    w: '65%',
                    ww: '65%',
                    n: 40
                },
                submitTime: {
                    name: '<span data-i18n="action" data-name="操作">提交时间</span>',
                    type: 'text',
                    code: 'action',
                    w: '35%',
                    ww: '35%'
                }
            };
            obj['actionulwidth'] = 100;
            obj['tablewidth'] = ES.selctorDoc('.taskdetail .series').box().clientWidth - 210;
            obj['type'] = 'center';
            obj['actionicon'] = {
                operation: {
                    name: '<span data-i18n="action" data-name="操作">操作</span>',
                    type: 'action',
                    code: 'action',
                    w: '100%',
                    ww: '100%'
                }
            };
            __webpack_require__.e/* require.ensure */(54/* duplicate */).then((function () {
                var cont_table = __webpack_require__(643);
                console.log(_this3.dom.find('.seriestable'));
                _this3.table = _this3.app.loadModule(cont_table, _this3.dom.find('.seriestable'), {
                    id: 'seriestable',
                    header: obj
                });
                _this3.table.event._addEvent('table.action', function (value) {
                    _this3.app.model.set('taskdetail', _this3.model.listInfo);
                    console.log(_this3.app.model, _this3.model.listInfo);
                    value.id = Base64.encode(value.id);
                    if (value.classname == 'viewmark') {
                        if (_this3.taskRead.seriesImgFileType == 3) {
                            var json = {
                                taskId: _this3.app.parpam['taskId'] * 1,
                                userId: JSON.parse(_this3.app.local.get('all')).userId,
                                accessToken: _this3.app.local.get('accessToken'),
                                serviceHost: window.location.origin,
                                serialNumber: value.id.split('$$')[0],
                                type: 2,
                                projectId: _this3.projectId
                            };
                            console.log(JSON.stringify(json));
                            window.open('annotation://' + Base64.encoder(JSON.stringify(json)));
                            return;
                        }

                        //alert(value.id)
                        if (_this3.tasktype == 2) {
                            var page = _this3.largeFigure ? 'drapCanvasAud' : 'markauditview';
                            var temp = _this3.app.parpam['type'] == 'view' ? 'check_viewer_taskdetail_view' : 'check_viewer_taskdetail';
                            // window.location.href = 'http://' + window.location.host + '/#!/' + page + '/' + this.app.parpam['taskId'] + '/' + value.id + temp
                            // window.location.reload()
                            _this3.app.changePage(page, {
                                taskId: _this3.app.parpam['taskId'],
                                taskInfo: value.id,
                                type: temp
                            });
                        } else {
                            var _page = _this3.largeFigure ? 'drapCanvasCheck' : 'markview';
                            // window.location.href = 'http://' + window.location.host + '/#!/' + page + '/' + this.app.parpam['taskId'] + '/' + this.projectId + '/viewer' + '/' + JSON.parse(this.app.local.get('all')).userId + '/' + value.id + '/' + this.app.parpam['type']
                            // window.location.reload()
                            _this3.app.changePage(_page, {
                                taskId: _this3.app.parpam['taskId'],
                                projectId: _this3.projectId,
                                type: 'viewer',
                                uid: JSON.parse(_this3.app.local.get('all')).userId,
                                sid: value.id,
                                rid: _this3.app.parpam['type']
                            });
                        }
                    }
                    if (value.classname == 'edit') {
                        var _page2 = _this3.largeFigure ? 'drapCanvasCheck' : 'doctorAudEdit';
                        // window.location.href = `http://${window.location.host}/#!/${page}/${this.app.parpam.taskId}/${this.projectId}/editor/${JSON.parse(this.app.local.get('all')).userId}/${value.id}/${this.app.parpam.type}`
                        // window.location.reload()
                        _this3.app.changePage(_page2, {
                            taskId: _this3.app.parpam['taskId'],
                            projectId: _this3.projectId,
                            type: 'editor',
                            uid: JSON.parse(_this3.app.local.get('all')).userId,
                            sid: value.id,
                            rid: _this3.app.parpam['type']
                        });
                    }
                });
                _this3.table.event._addEvent('table.pagenumber', function (value) {
                    var json = _this3.model.listInfo;
                    _this3.newList = false;
                    json.page = parseInt(value);
                    _this3.model.setData('listInfo', json);
                    _this3.table.changenum(json.page);
                });
                _this3.table.event._addEvent('table.pagesize', function (value) {
                    var json = _this3.model.listInfo;
                    json.page = 1;
                    json.pageSize = value.num;
                    _this3.newList = true;
                    _this3.model.setData('listInfo', json);
                });
                _this3.dom.find('.list-content').removeClass('hide');
                _this3.loadDataTask();
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
        }
    }, {
        key: 'listInfo',
        value: function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                var _this4 = this;

                var value;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                this.table.showloading();
                                _context2.next = 3;
                                return this.api.task_user_series_search(this.model.listInfo);

                            case 3:
                                value = _context2.sent;

                                this.list(value.data);
                                if (value.data.total >= this.seriesTotalNum && this.status == 2) {
                                    this.dom.find('.algdone').removeClass('disabled');
                                    this.dom.find('.algdone').on('click', function () {
                                        _this4.api.import_complete({
                                            taskId: 1 * _this4.app.parpam['taskId']
                                        }).done(function (res) {
                                            if (res.code == 0) {
                                                _this4.app.changePage('personalaccount');
                                            }
                                        });
                                    });
                                }

                            case 6:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function listInfo() {
                return _ref2.apply(this, arguments);
            }

            return listInfo;
        }()

        //根据接口赋值

    }, {
        key: 'setData',
        value: function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(value) {
                var _this5 = this;

                var res;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                this.dom.find('.infoarea label[data=name]').html(value.name); //任务名称
                                if (value.costVisible) {
                                    this.dom.find('.cost').removeClass('hide'); //标注单价
                                    this.dom.find('.infoarea label[data=cost]').html(value.cost); //标注单价
                                }
                                this.dom.find('.infoarea label[data=algPreAnnotation]').html(value.studyAnno ? value.algPreAnnotation + '（以检查号为维度）' : value.algPreAnnotation); //任务类型
                                this.dom.find('.infoarea label[data=startTime]').html(Tool.time(value.startTime, 'yyyy-mm-dd')); //开始时间
                                this.dom.find('.infoarea label[data=seriesTotalNum]').html(value.seriesTotalNum); //标注数量
                                this.dom.find('.infoarea label[data=endTime]').html(Tool.time(value.endTime, 'yyyy-mm-dd')); //结束时间
                                this.dom.find('.infoarea label[data=remark]').html(value.remark ? JSON.parse('"' + value.remark + '"') : ''); //任务备注
                                //项目的信息填写
                                this.app.loading.show();
                                _context3.next = 10;
                                return this.api.project_basic_read({
                                    id: value.projectId
                                });

                            case 10:
                                res = _context3.sent;

                                this.largeFigure = res.data.largeFigure;
                                this.taskRead.seriesImgFileType = res.data.seriesImgFileType;
                                this.app.loading.hide();
                                this.dom.find('label[data="pname"]').html(res.data.name); //所属项目,项目名称
                                this.dom.find('.proinfo label[data=pmark]').html(value.remark ? JSON.parse('"' + res.data.remark + '"') : ''); //项目描述
                                // this.dom.find('.infoarea label[data=modality]').html(res.data.modality) //样本类型
                                this.dom.find('.btnall').on('click', function () {
                                    if (res.data.seriesImgFileType == 3) {
                                        var json = {
                                            taskId: value.id,
                                            userId: JSON.parse(_this5.app.local.get('all')).userId,
                                            accessToken: _this5.app.local.get('accessToken'),
                                            serviceHost: window.location.origin,
                                            type: 1
                                        };
                                        console.log(json, encodeURI(JSON.stringify(json)));
                                        window.open('annotation://' + Base64.encoder(JSON.stringify(json)));
                                        return;
                                    }
                                    if (value.type == 2) {
                                        var _page3 = _this5.largeFigure ? 'drapCanvasAudEdit' : 'markaudit'; //审核
                                        window.location.href = 'http://' + window.location.host + '/#!/' + _page3 + '/' + value.id + '/' + value.projectId + '/check';
                                        window.location.reload();
                                        return;
                                    }
                                    // 标注任务
                                    var page = _this5.largeFigure ? 'drapCanvas' : 'mark';
                                    window.location.href = 'http://' + window.location.host + '/#!/' + page + '/' + value.id + '/' + value.projectId + '/editor';
                                    window.location.reload();
                                });

                            case 17:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function setData(_x) {
                return _ref3.apply(this, arguments);
            }

            return setData;
        }()
    }, {
        key: 'list',
        value: function list(value) {
            var _this6 = this;

            var data2 = [];
            this.dom.find('.infoarea label[data=total]').html(value.total); //项目描述
            if (value.list.length > 0) {
                value.list.forEach(function (val) {
                    for (var i in val) {
                        val[i] = val[i] == null ? '' : val[i];
                    }
                    var obj = {};
                    val.id = val.serialNumber + (_this6.tasktype == 2 ? '$$' + val.id + '$$' + val.userId : "");
                    obj.id = val.id;
                    if (_this6.studyAnno) {
                        val.imageTotalNum = '';
                    }
                    val.disabled = false;
                    var edit = {
                        dis: 'inline',
                        link: 'noLink',
                        content: '编辑'
                    };
                    obj.operation = {
                        viewmark: {
                            dis: 'inline',
                            link: 'noLink',
                            content: '查看'
                        }
                        // if (this.useinfo.roles&&this.useinfo.roles[0].code == 'doctor.research' && this.taskRead.editable) {
                    };obj.operation.edit = edit;
                    // }
                    console.log(obj.operation, '我是哈哈哈');
                    data2.push(obj);
                    if (val.submitTime) {
                        val.submitTime = Tool.time(val.submitTime, 'yyyy-mm-dd HH:MM:ss');
                    } else {
                        val.submitTime = '无';
                    }
                });
                this.table.setData(value.list, data2);
            } else {
                this.table.noData();
            }
            if (this.newList) {
                this.table.getTotal(value.pages, 2, value.total);
                this.table.changenum(this.model.listInfo.page, this.model.listInfo.pageSize);
            }
            this.initscroll();
        }
    }, {
        key: 'initscroll',
        value: function initscroll() {
            if (this.myScroll) {
                this.myScroll.refresh();
                return;
            }
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            this.dom.find('.infoscorll').attr('id', rid);
            this.myScroll = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }, {
        key: 'dicomresize',
        value: function dicomresize() {
            var ch = ES.selctorDoc(window).box().clientHeight;
            //ES.selctorDoc('.left').css({ 'height': ch - 70 });
            ES.selctorDoc('.infoscorll').css({
                'height': ch - 130
            });
            // this.initscroll();
        }
    }, {
        key: 'resize',
        value: function resize() {
            this.dicomresize();
        }
    }, {
        key: 'getFileType',
        value: function getFileType(filePath) {
            var startIndex = filePath.lastIndexOf(".");
            if (startIndex != -1) return filePath.substring(startIndex + 1, filePath.length).toLowerCase();else return "";
        }
    }]);

    return taskdetail;
}(Interstellar.pagesBase);

module.exports = taskdetail;

/***/ }),

/***/ 481:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(865);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./taskdetail.less", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./taskdetail.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 482:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var urlDict = {
  task_read: '/task/user/read',
  project_basic_read: '/project/basic/read',
  task_user_series_search: '/task/user/series/search',
  import_complete: '/alg/sar/import_complete'
};
var api = {
  task_read: function task_read(value) {
    return this.HttpRequest.POST(urlDict.task_read, value);
  },
  project_basic_read: function project_basic_read(value) {
    return this.HttpRequest.POST(urlDict.project_basic_read, value);
  },
  task_user_series_search: function task_user_series_search(value) {
    return this.HttpRequest.POST(urlDict.task_user_series_search, value);
  },
  import_complete: function import_complete(value) {
    return this.HttpRequest.POST(urlDict.import_complete, value);
  }
};
module.exports = api;

/***/ }),

/***/ 483:
/***/ (function(module, exports) {

module.exports = "<div class=taskdetail> <div class=left> <div class=scroll> <div class=breadcrumb> <span class=back><i class=\"iconfont icon-icon-test3\" style=font-size:12px></i></span><span>医生主页|任务详情</span> </div> <div class=infoscorll> <div> <div class=basicinfo> <div class=infoarea> <p> <span>任务名称：<label data=name></label></span> <span class=\"cost hide\">标注单价：<label data=cost></label></span> </p> <p> <span>所属项目：<label data=pname></label></span> <span>任务类型：<label data=algPreAnnotation></label></span> </p> <p> <span>开始时间：<label data=startTime></label></span> <span>结束时间：<label data=endTime></label></span> </p> <p> <span>样本总量：<label data=seriesTotalNum></label></span> <span>已标注数量：<label data=total></label></span> </p> <p><span style=width:auto>任务备注：<label data=remark></label></span></p> </div> <a class=\"btnall biaozhubtn\">开始任务</a> </div> <div class=series> <p class=seriestitle>序列跟进列表</p> <div class=filterarea> 序号：<input type=text api=serialNumber /> <a class=\"strokeBtn search\">查询</a> </div> <div class=seriestable> </div> </div> </div> </div> </div> </div> </div> ";

/***/ }),

/***/ 484:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//这边基本上引入需要使用的资源less，api，需要使用的模块等等。

var taskdetail = function (_Interstellar$modelBa) {
    _inherits(taskdetail, _Interstellar$modelBa);

    function taskdetail(app) {
        _classCallCheck(this, taskdetail);

        var _this = _possibleConstructorReturn(this, (taskdetail.__proto__ || Object.getPrototypeOf(taskdetail)).call(this, app));

        _this.___auto = true;
        _this.listInfo = { taskId: '', userId: '', page: 1, pageSize: 10 };
        return _this;
    }

    return taskdetail;
}(Interstellar.modelBase);

module.exports = taskdetail;

/***/ }),

/***/ 806:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(807);

var uploadalgdata = function (_Interstellar$modalBa) {
  _inherits(uploadalgdata, _Interstellar$modalBa);

  function uploadalgdata(app, dom, value, addMode) {
    _classCallCheck(this, uploadalgdata);

    var _this = _possibleConstructorReturn(this, (uploadalgdata.__proto__ || Object.getPrototypeOf(uploadalgdata)).call(this, app, dom, value, addMode));

    _this.html = __webpack_require__(809);
    _this.name = 'uploadalgdata';
    _this.flag = true;
    _this.code = '';
    _this.data = value;
    _this.apiData = { transferNii: false };
    _this.api.toolList.forEach(function (item) {
      _this.app.toolList.forEach(function (cn) {
        if (item.val == cn.idx) {
          item.val = cn.val;
        }
      });
    });
    return _this;
  }

  _createClass(uploadalgdata, [{
    key: 'complete',
    value: function complete() {
      var that = this;
      this.dom.find('.icon-guanbi').on('click', function () {
        that.close();
      });
      this.dom.find('.cancel').on('click', function () {
        that.close();
      });
      this.dom.find('.filechoose').on('click', function () {
        that.dom.find('.file').click();
      });
      that.dom.find('.file').on('change', function () {
        var filePath = ES.selctorDoc("#file1").val();
        that.dom.find('.filename').val(filePath);
      });
      that.dom.find('.catelog .check-box').on('click', function () {
        if (!ES.selctorDoc(this).hasClass('choose')) {
          ES.selctorDoc(this).addClass('choose');
          that.apiData.transferNii = true;
        } else {
          ES.selctorDoc(this).removeClass('choose');
          that.apiData.transferNii = false;
        }
      });
      this.dom.find('.upload').on('click', function () {
        that.dom.find('.inputLine').dom.forEach(function (val, idx) {
          val.find('.' + val.attr('redlabel')).removeClass('redborder');
          val.find('.required').remove();
          if (Tool.checkForm(ES.selctorDoc(val).dom, 'red') !== '') {
            val.find('.' + val.attr('redlabel')).addClass('redborder');
            val.find('.' + val.attr('redlabel')).after('<span class="required">' + Tool.checkForm(ES.selctorDoc(val).dom, 'red') + '</span>');
          }
        });
        if (that.dom.find('.redborder').dom && that.dom.find('.redborder').dom.some(function (item) {
          return item.box().clientHeight !== 0;
        })) {
          return false;
        } else {
          that.event._dispatch('uploadalgdata.upload', { data: that.apiData });
        }
      });
      this.render();
    }
  }, {
    key: 'render',
    value: function render(value) {
      var _this2 = this;

      var dropConfig = [{ name: 'type', className: 'xlk', firstSelect: { val: '请选择标注结果类型', idx: '' }, data: [{ idx: '1', val: '序列标注结果' }, { idx: '2', val: '影像标注结果' }], maxshownum: 5 }, { name: 'toolType', className: 'xlk', firstSelect: { val: '请选择标注所需工具', idx: '' }, data: this.api.toolList, maxshownum: 5 }, { name: 'dataType', className: 'xlk', firstSelect: { val: '数据类型', idx: '' }, data: [{ idx: '1', val: 'nii' }, { idx: '2', val: '点位' }], maxshownum: 5 }];
      __webpack_require__.e/* require.ensure */(52/* duplicate */).then((function () {
        var dropdown = __webpack_require__(638);
        var dropObj = {};
        dropConfig.forEach(function (val, idx) {
          dropObj[val.name] = _this2.app.loadModule(dropdown, _this2.dom.find('.' + val.name), {
            className: 'xlk',
            firstSelect: val.firstSelect,
            data: val.data,
            maxshownum: val.maxshownum
          });
          dropObj[val.name].event._addEvent('dropDown.clear', function () {
            _this2.apiData[val.name] = null;
          });
          dropObj[val.name].event._addEvent('option.click', function (value) {
            _this2.apiData[val.name] = value.idx;
          });
        });
        dropObj['type'].event._addEvent('option.click', function (value) {
          if (value.idx == 1) {
            _this2.dom.find('.tool').addClass('hide');
            _this2.dom.find('.mask').addClass('hide');
            if (_this2.api.type == 'project') {
              _this2.dom.find('.dataType').parent().addClass('hide');
            }
          } else {
            _this2.dom.find('.tool').removeClass('hide');
            _this2.dom.find('.mask').removeClass('hide');
            if (_this2.api.type == 'project') {
              _this2.dom.find('.dataType').parent().removeClass('hide');
            }
          }
          _this2.apiData['type'] = parseInt(value.idx);
        });
        if (_this2.api.type == 'project') {
          dropObj['dataType'].event._addEvent('option.click', function (value) {
            _this2.apiData['dataType'] = parseInt(value.idx);
          });
        }
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
    }
  }]);

  return uploadalgdata;
}(Interstellar.modalBase);

//原型链一定要有的


module.exports = uploadalgdata;

/***/ }),

/***/ 807:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(808);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./uploadalgdata.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./uploadalgdata.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 808:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".uploadalgdata {\n  box-sizing: border-box;\n  background: #fff;\n  border-radius: 4px;\n  font-family: \"Microsoft YaHei\";\n  font-size: 16px;\n  width: 600px;\n  height: 450px;\n  margin-left: -300px;\n  position: relative;\n}\n.uploadalgdata .toparea .title {\n  margin: 20px;\n}\n.uploadalgdata .toparea .icon-guanbi {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  cursor: pointer;\n}\n.uploadalgdata .catelog {\n  position: relative;\n  margin-top: 20px;\n}\n.uploadalgdata .catelog .inputLine {\n  margin-bottom: 10px;\n}\n.uploadalgdata .catelog .inputLine > .names {\n  width: 180px;\n  text-align: left;\n  margin-left: 40px;\n}\n.uploadalgdata .catelog .inputLine .check-box {\n  margin: 10px 10px 0 50px;\n}\n.uploadalgdata .catelog input {\n  width: 240px;\n  padding-left: 10px;\n  height: 32px;\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n}\n.uploadalgdata .catelog .required {\n  left: 230px;\n  top: 50px;\n  font-size: 14px;\n}\n.uploadalgdata .catelog .type,\n.uploadalgdata .catelog .toolType,\n.uploadalgdata .catelog .dataType {\n  display: inline-block;\n}\n.uploadalgdata .catelog .xlk {\n  width: 180px;\n  height: 32px;\n  line-height: 32px;\n}\n.uploadalgdata .catelog .filechoose {\n  padding: 0 20px;\n  background: #4c9fa9;\n  color: #fff;\n  height: 32px;\n  line-height: 32px;\n}\n.uploadalgdata .catelog .file {\n  position: fixed;\n  top: 2000px;\n  left: 3000px;\n}\n.uploadalgdata .catelog .check-box {\n  margin-left: 40px;\n}\n.uploadalgdata .btnarea {\n  text-align: center;\n  margin-top: 55px;\n}\n.uploadalgdata .btnarea .biaozhubtn {\n  padding: 0 20px;\n  height: 32px;\n  line-height: 32px;\n  text-align: center;\n}\n.uploadalgdata .btnarea .upload {\n  background: #4c9fa9;\n  color: #fff;\n  margin-right: 20px;\n}\n.uploadalgdata .btnarea .cancel {\n  border: 1px solid #4c9fa9;\n}\n", ""]);

// exports


/***/ }),

/***/ 809:
/***/ (function(module, exports) {

module.exports = "<div class=\"uploadalgdata modal\"> <div class=toparea> <span class=title>导入算法标注结果</span> <i class=\"iconfont icon-guanbi\"></i> </div> <div class=catelog> <div class=inputLine redlabel=xlk> <span class=names><label class=redstar>*</label>请选择标注结果类型：</span> <div class=type check=empty></div> </div> <div class=\"inputLine hide\" redlabel=xlk> <span class=names><label class=redstar>*</label>数据类型：</span> <div class=dataType check=empty></div> </div> <div class=inputLine redlabel=inputBox> <span class=names><label class=redstar>*</label>指定上传文件：</span> <input class=\"filename inputBox\" type=text check=empty readonly=readonly /> <a class=\"biaozhubtn filechoose\">浏览</a> <input class=file type=file id=file1 name=file /> </div> <div class=\"inputLine tool hide\" redlabel=xlk> <span class=names><label class=redstar>*</label>标注所需的工具：</span> <div class=toolType check=empty></div> </div> <div class=\"mask hide\"> <i class=check-box></i> <span>是否转换成mask</span> </div> </div> <div class=btnarea> <a class=\"upload biaozhubtn\">导入</a> <a class=\"cancel biaozhubtn\">取消</a> </div> </div> ";

/***/ }),

/***/ 865:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".taskdetail {\n  margin: 20px 40px;\n}\n.taskdetail .left {\n  width: 100%;\n  clear: both;\n  position: relative;\n  border-right: 1px solid #e8e8e8;\n}\n.taskdetail .left > .scroll {\n  overflow: hidden;\n}\n.taskdetail .left > .scroll .infoscorll {\n  overflow: hidden;\n  clear: both;\n}\n.taskdetail .left .breadcrumb {\n  font-size: 20px;\n  font-weight: bolder;\n  margin: 10px 0;\n  width: 98%;\n}\n.taskdetail .left .breadcrumb .back {\n  transform: rotate(-90deg);\n  margin-right: 10px;\n}\n.taskdetail .left .basicinfo {\n  width: 98%;\n  font-size: 14px;\n  position: relative;\n}\n.taskdetail .left .basicinfo .tasktitle {\n  font-size: 16px;\n  margin-bottom: 15px;\n}\n.taskdetail .left .btnall {\n  background: #4c9fa9;\n  color: #fff;\n  top: 20px;\n}\n.taskdetail .left .importalg {\n  top: 20px;\n  background: #4c9fa9;\n  color: #fff;\n}\n.taskdetail .left .algdone {\n  top: 70px;\n  border: 1px solid #4c9fa9;\n  color: #4c9fa9;\n}\n.taskdetail .left .biaozhubtn {\n  padding: 0 20px;\n  position: absolute;\n  right: 20px;\n  height: 36px;\n  font-size: 16px;\n  text-align: center;\n  line-height: 36px;\n  display: inline-block;\n  border-radius: 4px;\n}\n.taskdetail .left .disabled {\n  color: #E8E8E8;\n  border: 1px solid #E8E8E8;\n  cursor: not-allowed;\n}\n.taskdetail .left .infoarea {\n  background: #fff;\n  padding: 20px 30px;\n}\n.taskdetail .left .infoarea p {\n  line-height: 45px;\n}\n.taskdetail .left .infoarea p span {\n  width: 48%;\n}\n.taskdetail .left .infoarea .fujian {\n  height: 80px;\n  line-height: 80px;\n}\n.taskdetail .left .series {\n  width: 98%;\n  font-size: 14px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.taskdetail .left .series .seriestitle {\n  font-size: 16px;\n  margin-bottom: 15px;\n}\n.taskdetail .left .series .filterarea {\n  padding-left: 20px;\n  margin-bottom: 10px;\n}\n.taskdetail .left .series .filterarea input {\n  height: 32px;\n  border: 1px solid #e8e8e8;\n  border-radius: 4px;\n  margin-right: 10px;\n}\n.taskdetail .left .series .seriestable {\n  background: #fff;\n}\n.taskdetail .right {\n  width: 20%;\n  float: right;\n  font-size: 18px;\n  font-weight: bold;\n  margin: 20px;\n}\n.taskdetail .right a {\n  width: 160px;\n  height: 40px;\n  line-height: 40px;\n  background: #4c9fa9;\n  color: #fff;\n}\n.taskdetail .right p {\n  margin: 20px 0 40px 0;\n}\n", ""]);

// exports


/***/ })

});
//# sourceMappingURL=a0657edc8b1607aa56a8.40.min.js.map