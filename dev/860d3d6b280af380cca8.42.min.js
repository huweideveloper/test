webpackJsonp([42],{

/***/ 163:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//这边基本上引入需要使用的资源less，api，需要使用的模块等等。

var ytjtaskdetail = function (_Interstellar$pagesBa) {
    _inherits(ytjtaskdetail, _Interstellar$pagesBa);

    function ytjtaskdetail() {
        _classCallCheck(this, ytjtaskdetail);

        return _possibleConstructorReturn(this, (ytjtaskdetail.__proto__ || Object.getPrototypeOf(ytjtaskdetail)).apply(this, arguments));
    }

    _createClass(ytjtaskdetail, [{
        key: 'complete',
        value: function complete() {
            var _this2 = this;

            this.styleModel(1);
            this.type = this.app.parpam.type;
            this.taskId = this.app.parpam.taskid * 1;
            this.taskType = this.app.parpam.taskType;
            console.log(this.app.model.get('ytjtaskdetail'), 'xxx');
            this.model._event._addEvent('taskid.change', function () {
                _this2.settaskdata();
            });
            this.action = {
                viewmark: {
                    dis: 'inline',
                    link: 'noLink',
                    content: '查看标注结果'
                }
            };
            this.action1 = {
                viewseries: {
                    dis: 'inline',
                    link: 'noLink',
                    content: '查看序列'
                }
            };
            this.render();
            this.resize();
            this.setTitle();
            this.task_read();
            this.dom.find('.breadcrumb .lastlink').on('click', function () {
                _this2.app.model.del('ytjtaskdetail');
                _this2.app.changePage(_this2.taskType == 1 ? 'taskmanage' : 'backflowtask', {
                    type: 'fs'
                });
            });
            this.model._event._addEvent('querylist.change', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var temp, res;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                temp = _this2.model.getData('querylist').reset;

                                _this2.app.loading.show();
                                _context.next = 4;
                                return _this2.api.getuserseries(_this2.model.getData('querylist'));

                            case 4:
                                res = _context.sent;

                                _this2.app.loading.hide();
                                if (res.code == 0) {
                                    _this2.dom.find('label[api="seriesEndNum"]').html(parseInt(res.data.total) - parseInt(_this2.doingnum));
                                    _this2.setMain(res, temp);
                                }

                            case 7:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this2);
            })));
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            __webpack_require__.e/* require.ensure */(58/* duplicate */).then((function () {
                var menu = __webpack_require__(814);
                _this3.menutree = _this3.app.loadModule(menu, _this3.dom.find('.personarea .left'), {
                    config: ['venderName', 'mobile_phone', 'discardNum', 'workNum']
                });
                _this3.model.setData('taskid', _this3.taskId);
                _this3.menutree.event._addEvent('navFirst.choosed', function (value) {
                    _this3.doingnum = value.config.split(',')[3];
                    _this3.dom.find('label[api="venderName"]').html(value.config.split(',')[0] !== 'null' ? value.config.split(',')[0] : '');
                    _this3.dom.find('label[api="username"]').html(value.config.split(',')[1]);
                    _this3.dom.find('label[api="discardNum"]').html(value.config.split(',')[2]);
                    _this3.dom.find('label[api="workNum"]').html(value.config.split(',')[3]);
                    // this.dom.find('input[api="serialNumber"]').val('')
                    _this3.model.querylist.userId = parseInt(value.id);
                    _this3.model.querylist.serialNumber = _this3.dom.find('input[api="serialNumber"]').val();
                    _this3.model.setData('querylist', _this3.model.querylist);
                    // this.model.setData('querylist', {
                    //   taskId: parseInt(this.taskId),
                    //   userId: parseInt(value.id),
                    //   page: 1,
                    //   pageSize: 10,
                    //   reset: true,
                    // })
                });
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
            this.dom.find('.biaozhubtn').on('click', function () {
                // if(this.seriesImgFileType == 3){
                //   let json={
                //     taskId:this.taskId,
                //     userId:JSON.parse(this.app.local.get('all')).userId,
                //     accessToken:this.app.local.get('accessToken'),
                //     serviceHost:window.location.origin,
                //     type:1
                //   }
                //   console.log(json,Base64.encoder(JSON.stringify(json)))
                //   window.open('annotation://'+Base64.encoder(JSON.stringify(json)))
                //   return
                // }
                _this3.model.querylist.reset = true;
                _this3.app.model.set('ytjtaskdetail', _this3.model.querylist);
                _this3.app.changePage(_this3.largeFigure ? 'drapCanvasCheck' : 'markview', {
                    taskId: _this3.app.parpam['taskid'],
                    projectId: _this3.projectId,
                    type: 'viewer_all',
                    uid: _this3.model.querylist.userId,
                    sid: Base64.encode('1'),
                    taskType: _this3.taskType
                });
                // let page = this.largeFigure ? 'drapCanvasCheck':'markview'
                // let url = 'http://' + window.location.host + '/#!/'+page+'/' + this.app.parpam['taskid'] + '/' + this.projectId + '/viewer_all/' + this.model.querylist.userId + '/1//'+this.taskType
                // let link = document.createElement('a')
                // link.target = "_blank";
                // link.href = url;
                // document.body.appendChild(link);
                // link.click();
                // document.body.removeChild(link);
            });
            this.dom.find('.taskdetail .export').on('click', function () {
                var url = _this3.app.domain1 + 'v1/task/series/discard/export/?taskId=' + _this3.taskId;
                Tool.downfile(url, _this3.app);
            });
            this.dom.find('.sequencearea .search').on('click', function () {
                _this3.model.setData('querylist', {
                    taskId: parseInt(_this3.taskId),
                    userId: parseInt(_this3.dom.find('.choosedks').attr('did')),
                    page: 1,
                    pageSize: 10,
                    reset: true,
                    serialNumber: _this3.dom.find('input[api="serialNumber"]').val()
                });
            });
        }
    }, {
        key: 'setTitle',
        value: function setTitle() {
            var _this4 = this;

            var obj = {};
            obj['icon'] = {
                "serialNumber": {
                    name: '<span data-i18n="date" data-name="检查时间">序号</span>',
                    type: 'text',
                    code: 'date',
                    w: '55%',
                    ww: '55%',
                    n: 40
                },
                "discarded": {
                    name: '<span data-i18n="action" data-name="操作">是否废片</span>',
                    type: 'text',
                    code: 'action',
                    w: '10%',
                    ww: '10%'
                },
                "status": {
                    name: '<span data-i18n="action" data-name="操作">标注状态</span>',
                    type: 'text',
                    code: 'action',
                    w: '10%',
                    ww: '10%'
                },
                "submitTime": {
                    name: '<span data-i18n="action" data-name="操作">提交时间</span>',
                    type: 'text',
                    code: 'action',
                    w: '25%',
                    ww: '25%'
                }
            };
            obj['actionulwidth'] = 200;
            obj['tablewidth'] = ES.selctorDoc('.ytjtaskdetail').box().clientWidth - 471;
            obj['type'] = 'center';
            obj['actionicon'] = {
                "operation": {
                    name: '<span data-i18n="action" data-name="操作">操作</span>',
                    type: 'action',
                    code: 'action',
                    w: '100%',
                    ww: '100%'
                }
            };
            __webpack_require__.e/* require.ensure */(54/* duplicate */).then((function () {
                var cont_table = __webpack_require__(643);
                _this4.table = _this4.app.loadModule(cont_table, _this4.dom.find('.serieslist'), {
                    id: 'serieslist',
                    header: obj
                });
                _this4.table.event._addEvent('table.action', function (value) {
                    var page = _this4.largeFigure ? 'drapCanvasCheck' : 'markview';
                    // if (this.seriesImgFileType == 3) {
                    //   let json={
                    //     taskId:this.app.parpam['taskId']*1,
                    //     userId:JSON.parse(this.app.local.get('all')).userId,
                    //     accessToken:this.app.local.get('accessToken'),
                    //     serviceHost:window.location.origin,
                    //     serialNumber:value.id,
                    //     type:2
                    //   }
                    //   window.open('annotation://'+Base64.encoder(JSON.stringify(json)))
                    //   return
                    // }
                    if (value.classname == 'viewmark') {
                        // let url = 'http://' + window.location.host + '/#!/'+page+'/' + this.app.parpam['taskid'] + '/' + this.projectId + '/viewer_admin/' + this.model.querylist.userId + '/' + value.id+'//'+this.taskType
                        // let link = document.createElement('a');
                        // link.target = "_blank";
                        // link.href = url;
                        // document.body.appendChild(link);
                        // link.click();
                        // document.body.removeChild(link);
                        _this4.model.querylist.reset = true;
                        _this4.app.model.set('ytjtaskdetail', _this4.model.querylist);
                        _this4.app.changePage(_this4.largeFigure ? 'drapCanvasCheck' : 'markview', {
                            taskId: _this4.app.parpam['taskid'],
                            projectId: _this4.projectId,
                            type: 'viewer_admin',
                            uid: _this4.model.querylist.userId,
                            sid: Base64.encode(value.id),
                            taskType: _this4.taskType
                        });
                    } else if (value.classname == 'viewseries') {
                        // let url = 'http://' + window.location.host + '/#!/'+page+'/' + this.app.parpam['taskid'] + '/' + this.projectId + '/viewer_admin/' + this.model.querylist.userId + '/' + value.id+'//'+this.taskType
                        // let link = document.createElement('a');
                        // link.target = "_blank";
                        // link.href = url;
                        // document.body.appendChild(link);
                        // link.click();
                        // document.body.removeChild(link);
                        _this4.model.querylist.reset = true;
                        _this4.app.model.set('ytjtaskdetail', _this4.model.querylist);
                        _this4.app.changePage(_this4.largeFigure ? 'drapCanvasCheck' : 'markview', {
                            taskId: _this4.app.parpam['taskid'],
                            projectId: _this4.projectId,
                            type: 'viewer_admin',
                            uid: _this4.model.querylist.userId,
                            sid: Base64.encode(value.id),
                            taskType: _this4.taskType
                        });
                    }
                });
                _this4.table.event._addEvent('table.pagenumber', function (value) {
                    var json = _this4.model.getData('querylist');
                    json.reset = false;
                    json.page = parseInt(value);
                    _this4.table.changenum(parseInt(value));
                    _this4.model.setData('querylist', json);
                });
                _this4.table.event._addEvent('table.pagesize', function (value) {
                    var json = _this4.model.getData('querylist');
                    json.page = 1;
                    json.pageSize = value.num;
                    json.reset = true;
                    _this4.model.setData('querylist', json);
                });
                _this4.dom.find('.list-content').removeClass('hide');
                _this4.resize();
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
        }
    }, {
        key: 'setMain',
        value: function setMain(res, bool) {
            var _this5 = this;

            var data2 = [];
            if (res.code == 0) {
                if (res.data.list.length > 0) {
                    res.data.list.forEach(function (val) {
                        var obj = {};
                        val.id = val.serialNumber;
                        obj.id = val.id;
                        if (val.discarded == true) {
                            obj.operation = _this5.action1;
                            val.discarded = '是';
                        } else {
                            obj.operation = _this5.action;
                            val.discarded = '否';
                        }
                        if (_this5.studyAnno) {
                            val.imageTotalNum = '';
                        }
                        data2.push(obj);
                        if (String(val.status) == '2' || String(val.status) == '1') {
                            val.status = "标注进行中";
                        } else {
                            val.status = "已提交";
                        }
                        val.submitTime = val.submitTime ? Tool.time(val.submitTime, 'yyyy-mm-dd HH:MM:ss') : '无';
                    });
                    this.table.setData(res.data.list, data2);
                } else {
                    this.table.noData();
                }
            }
            if (bool) {
                this.table.getTotal(res.data.pages, 2, res.data.total);
                this.table.changenum(this.model.querylist.page, this.model.querylist.pageSize);
            }
            this.initscroll();
        }
    }, {
        key: 'settaskdata',
        value: function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                var _this6 = this;

                var json, temp, res, num;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                json = {
                                    id: this.taskId
                                };
                                temp = ['name', 'projectName', 'startTime', 'endTime', 'algPreAnnotation', 'seriesTotalNum', 'seriesSubmittedNum', 'seriesDiscardNum', 'seriesProcessNum', 'discardNum', 'workNum'];
                                _context2.next = 4;
                                return this.api.gettask(json);

                            case 4:
                                res = _context2.sent;

                                if (res.code == 0) {
                                    res.data.startTime = Tool.time(res.data.startTime, 'yyyy-mm-dd');
                                    res.data.endTime = Tool.time(res.data.endTime, 'yyyy-mm-dd');
                                    if (res.data.studyAnno) {
                                        this.studyAnno = true;
                                        res.data.algPreAnnotation = res.data.algPreAnnotation ? '算法标注（以检查号为维度）' : '人工标注（以检查号为维度）';
                                    } else {
                                        res.data.algPreAnnotation = res.data.algPreAnnotation ? '算法标注' : '人工标注';
                                    }
                                    if (res.data.seriesDiscardNum > 0) {
                                        this.dom.find('.taskdetail .export').removeClass('hide');
                                    }
                                    num = res.data.crossMarkNum ? res.data.crossMarkNum : 1;

                                    temp.forEach(function (val, idx) {
                                        if (val == 'seriesTotalNum') {
                                            var _temp = res.data[val] / num + '(*' + num + ')';
                                            _this6.dom.find('label[apidata="' + val + '"]').html(_temp);
                                        } else {
                                            _this6.dom.find('label[apidata="' + val + '"]').html(res.data[val]);
                                        }
                                    });
                                    this.projectId = res.data.projectId;
                                    this.menutree.changeMenu(res.data.userList, 'single');
                                    if (this.app.model.get('ytjtaskdetail')) {
                                        this.model.setData('querylist', this.app.model.get('ytjtaskdetail'));
                                        if (this.app.model.get('ytjtaskdetail').serialNumber) {
                                            console.log(this.dom.find('.filterarea input[api="serialNumber"]').dom, this.app.model.get('ytjtaskdetail').serialNumber);
                                            this.dom.find('.filterarea input[api="serialNumber"]').val(this.app.model.get('ytjtaskdetail').serialNumber);
                                        }
                                        if (this.app.model.get('ytjtaskdetail').userId) {
                                            this.dom.find('.treeArea .navFirst[did="' + this.app.model.get('ytjtaskdetail').userId + '"]').click();
                                        }
                                    } else {
                                        console.log(this.dom.find('.treeArea .navFirst').dom);
                                        this.dom.find('.treeArea .navFirst').eq(0).click();
                                    }
                                    this.menutree.resize(ES.selctorDoc(window).box().clientHeight - 360);
                                }

                            case 6:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function settaskdata() {
                return _ref2.apply(this, arguments);
            }

            return settaskdata;
        }()
    }, {
        key: 'task_read',
        value: function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                var res;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return this.api.task_read({
                                    id: this.taskId
                                });

                            case 2:
                                res = _context3.sent;

                                console.log(res, 'res');
                                if (res.code == 0) {
                                    this.seriesImgFileType = res.data.seriesImgFileType;
                                    this.largeFigure = res.data.largeFigure;
                                }

                            case 5:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function task_read() {
                return _ref3.apply(this, arguments);
            }

            return task_read;
        }()
    }, {
        key: 'initscroll',
        value: function initscroll() {
            if (this.myScroll) {
                this.myScroll.refresh();
                return;
            }
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            this.dom.find('.serieslist .scrolltable').attr('id', rid);
            this.myScroll = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }, {
        key: 'resize',
        value: function resize() {
            var ch = ES.selctorDoc(window).box().clientHeight;
            var cw = ES.selctorDoc(window).box().clientWidth - 40;
            ES.selctorDoc('.ytjtaskdetail').css({
                'height': ch - 100,
                'width': cw
            });
            this.dom.find('.personarea').css({
                'height': ch - 360
            });
            this.dom.find('.listarea').css({
                'width': cw - 231
            });
            this.dom.find('.scrolltable').css({
                'height': ch - 510,
                'width': cw - 231
            });
        }
    }]);

    return ytjtaskdetail;
}(Interstellar.pagesBase);

module.exports = ytjtaskdetail;

/***/ }),

/***/ 511:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(899);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./ytjtaskdetail.less", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./ytjtaskdetail.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 512:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var urlDict = {
  gettask: '/task/user/list',
  getuserseries: '/task/user/series/search',
  task_read: '/task/read'

};
var api = {
  gettask: function gettask(value) {
    return this.HttpRequest.POST(urlDict.gettask, value);
  },
  getuserseries: function getuserseries(value) {
    return this.HttpRequest.POST(urlDict.getuserseries, value);
  },
  task_read: function task_read(value) {
    return this.HttpRequest.POST(urlDict.task_read, value);
  }
};
module.exports = api;

/***/ }),

/***/ 513:
/***/ (function(module, exports) {

module.exports = "<div class=ytjtaskdetail> <div class=breadcrumb> <span class=lastlink link=taskmanage>任务列表</span>> <span class=nowlink>查阅已提交任务</span> </div> <div class=taskdetail> <span>任务名称：<label apidata=name></label></span> <span>所属项目：<label apidata=projectName></label></span> <span>任务开始时间：<label apidata=startTime></label></span> <span>任务结束时间：<label apidata=endTime></label></span> <span>任务类型：<label apidata=algPreAnnotation></label></span> <span>序号总量（*交叉次数）：<label apidata=seriesTotalNum></label></span> <span>已提交序号数量（含交叉次数）：<label apidata=seriesSubmittedNum></label></span> <span>废片数量（不含交叉次数）：<label apidata=seriesDiscardNum></label><a class=\"fillBtn export hide\">废片信息导出</a></span> <span>标注中序号数量：<label apidata=seriesProcessNum></label></span> </div> <div class=sequencearea> <div class=personarea> <span class=menutitle>提交人姓名</span> <div class=left> </div> </div> <div class=listarea> <div class=filterarea> 序号：<input type=text api=serialNumber /> <a class=\"strokeBtn search\">查询</a> </div> <div class=personinfo> <span class=\"\">提交人用户名:<label api=username></label></span> <span class=\"\" style=width:16%>所属供应商:<label api=venderName></label></span> <span class=\"\" style=width:15%>已提交序号数量:<label api=seriesEndNum></label></span> <span class=\"\" style=width:12%>废片数量:<label api=discardNum></label></span> <span class=\"\" style=width:14%>正在执行中:<label api=workNum></label></span> <a class=\"viewall biaozhubtn\">查看所有标注结果</a> </div> <div class=scrollright> <div class=serieslist> </div> </div> </div> </div> </div> ";

/***/ }),

/***/ 514:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//这边基本上引入需要使用的资源less，api，需要使用的模块等等。

var ytjtaskdetail = function (_Interstellar$modelBa) {
    _inherits(ytjtaskdetail, _Interstellar$modelBa);

    function ytjtaskdetail(app) {
        _classCallCheck(this, ytjtaskdetail);

        var _this = _possibleConstructorReturn(this, (ytjtaskdetail.__proto__ || Object.getPrototypeOf(ytjtaskdetail)).call(this, app));

        _this.taskid = {};
        _this.userlist = {};
        _this.querylist = { page: 1, pageSize: 10, taskId: parseInt(_this.app.parpam['taskid']), reset: true };
        return _this;
    }

    return ytjtaskdetail;
}(Interstellar.modelBase);

module.exports = ytjtaskdetail;

/***/ }),

/***/ 899:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".ytjtaskdetail {\n  margin: 20px;\n  background: #fff;\n  font-size: 14px;\n}\n.ytjtaskdetail .breadcrumb {\n  padding: 40px 0 0 70px;\n  font-size: 16px;\n  margin-right: 10px;\n}\n.ytjtaskdetail .breadcrumb .lastlink {\n  color: #ccc;\n  cursor: pointer;\n}\n.ytjtaskdetail .taskdetail {\n  margin: 20px 0 20px 70px;\n}\n.ytjtaskdetail .taskdetail > span {\n  width: 40%;\n  line-height: 30px;\n}\n.ytjtaskdetail .taskdetail .export {\n  margin-left: 20px;\n}\n.ytjtaskdetail .sequencearea {\n  margin-left: 70px;\n}\n.ytjtaskdetail .sequencearea .personarea {\n  float: left;\n  width: 160px;\n  border-right: 1px solid #e8e8e8;\n}\n.ytjtaskdetail .sequencearea .personarea .menutitle {\n  height: 60px;\n  line-height: 60px;\n}\n.ytjtaskdetail .sequencearea .personarea .left .navFirst {\n  padding-left: 20px;\n  height: 40px;\n  line-height: 40px;\n  cursor: pointer;\n}\n.ytjtaskdetail .sequencearea .personarea .left .choosedks {\n  background: #ECF3F4;\n}\n.ytjtaskdetail .sequencearea .listarea {\n  float: right;\n}\n.ytjtaskdetail .sequencearea .listarea .filterarea {\n  padding-left: 20px;\n}\n.ytjtaskdetail .sequencearea .listarea .filterarea input {\n  height: 32px;\n  border: 1px solid #e8e8e8;\n  border-radius: 4px;\n  margin-right: 10px;\n}\n.ytjtaskdetail .sequencearea .listarea .personinfo {\n  margin: 10px 0;\n}\n.ytjtaskdetail .sequencearea .listarea .personinfo span {\n  width: 20%;\n}\n.ytjtaskdetail .sequencearea .listarea .personinfo .viewall {\n  background: #4c9fa9;\n  color: #fff;\n  padding: 0 20px;\n  height: 40px;\n  line-height: 40px;\n}\n", ""]);

// exports


/***/ })

});
//# sourceMappingURL=860d3d6b280af380cca8.42.min.js.map