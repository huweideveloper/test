webpackJsonp([43],{

/***/ 207:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//这边基本上引入需要使用的资源less，api，需要使用的模块等等。

var viewaudittask = function (_Interstellar$pagesBa) {
    _inherits(viewaudittask, _Interstellar$pagesBa);

    function viewaudittask() {
        _classCallCheck(this, viewaudittask);

        return _possibleConstructorReturn(this, (viewaudittask.__proto__ || Object.getPrototypeOf(viewaudittask)).apply(this, arguments));
    }

    _createClass(viewaudittask, [{
        key: 'complete',
        value: function complete() {
            var _this2 = this;

            this.styleModel(1);
            this.id = this.app.parpam.id;
            console.log(this.app.model, this.app.model.get('viewaudittask'), '222');

            this.total = 0;
            this.model._event._addEvent('taskid.change', function () {
                _this2.settaskdata();
            });
            this.action = {
                viewmark: {
                    dis: 'inline',
                    link: 'noLink',
                    content: '查看审核结果'
                }
            };
            this.render();
            this.resize();
            this.setTitle();
            this.dom.find('.breadcrumb .lastlink').on('click', function () {
                _this2.app.model.del('viewaudittask');
                _this2.app.changePage('audittask');
            });
            this.model._event._addEvent('querylist.change', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var temp, res;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                temp = _this2.model.getData('querylist').reset;

                                _this2.app.loading.show();
                                _context.next = 4;
                                return _this2.api.audit_task_user_series_search(_this2.model.getData('querylist'));

                            case 4:
                                res = _context.sent;

                                _this2.app.loading.hide();
                                if (res.code == 0) {
                                    _this2.setMain(res, temp);
                                }

                            case 7:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this2);
            })));
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            __webpack_require__.e/* require.ensure */(58/* duplicate */).then((function () {
                var menu = __webpack_require__(814);
                _this3.menutree = _this3.app.loadModule(menu, _this3.dom.find('.personarea .left'), {
                    config: ['mobilePhone', 'venderName', 'seriesAuditNum', 'imageAnnoNum']
                });
                _this3.model.setData('taskid', _this3.taskId);
                _this3.menutree.event._addEvent('navFirst.choosed', function (value) {
                    //that.dom.find('label[api="seriesEndNum"]').html(parseInt(that.perseriesnum)-parseInt(value.config.split(',')[3]))
                    _this3.doingnum = value.config.split(',')[3];
                    _this3.dom.find('label[api="username"]').html(value.config.split(',')[0]);
                    _this3.dom.find('label[api="venderName"]').html(value.config.split(',')[1]);
                    _this3.dom.find('label[api="seriesAuditNum"]').html(value.config.split(',')[2]);
                    _this3.dom.find('label[api="imageAnnoNum"]').html(value.config.split(',')[3]);
                    // this.dom.find('input[api="serialNumber"]').val('')
                    _this3.chooseUserId = parseInt(value.id);
                    _this3.model.querylist.userId = parseInt(value.id);
                    _this3.model.querylist.serialNumber = _this3.dom.find('input[api="serialNumber"]').val();
                    _this3.model.setData('querylist', _this3.model.querylist);
                    // this.model.setData('querylist', {
                    //   id: parseInt(this.id),
                    //   userId: parseInt(value.id),
                    //   serialNumber:this.dom.find('input[api="serialNumber"]').val(),
                    //   page: 1,
                    //   pageSize: 10,
                    //   reset: true,
                    // })
                });
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
            this.dom.find('.viewall').on('click', function () {
                _this3.app.model.set('viewaudittask', _this3.model.querylist);
                _this3.app.changePage(_this3.taskInfo.data.largeFigure ? 'drapCanvasAud' : 'markauditview', {
                    taskId: _this3.app.parpam['id'],
                    taskInfo: Base64.encode(_this3.total + '$$0'),
                    type: 'check_viewer_all',
                    uid: _this3.model.querylist.userId
                });
                // let url = this.taskInfo.data.largeFigure ? 'drapCanvasAud' : 'markauditview'
                // window.location.href = 'http://' + window.location.host + `/#!/${url}/` + this.app.parpam['id'] + '/' + this.total + '_0/check_viewer_all/' + this.model.querylist.userId
                // window.location.reload()
            });
            this.dom.find('.sequencearea .search').on('click', function () {
                _this3.model.setData('querylist', {
                    id: parseInt(_this3.id),
                    userId: parseInt(_this3.dom.find('.choosedks').attr('did')),
                    page: 1,
                    pageSize: 10,
                    reset: true,
                    serialNumber: _this3.dom.find('input[api="serialNumber"]').val()
                });
            });
        }
    }, {
        key: 'setTitle',
        value: function setTitle() {
            var _this4 = this;

            var obj = {};
            obj['icon'] = {
                "serialNumber": {
                    name: '<span data-i18n="date" data-name="检查时间">序列名称</span>',
                    type: 'text',
                    code: 'date',
                    w: '40%',
                    ww: '40%',
                    n: 40
                },
                "imageAnnoNum": {
                    name: '<span data-i18n="action" data-name="操作">病灶数量</span>',
                    type: 'text',
                    code: 'action',
                    w: '20%',
                    ww: '20%'
                },
                "status": {
                    name: '<span data-i18n="action" data-name="操作">序列状态</span>',
                    type: 'text',
                    code: 'action',
                    w: '15%',
                    ww: '15%'
                },
                "auditTime": {
                    name: '<span data-i18n="action" data-name="操作">审核时间</span>',
                    type: 'text',
                    code: 'action',
                    w: '25%',
                    ww: '25%'
                }
            };
            obj['actionulwidth'] = 200;
            obj['tablewidth'] = ES.selctorDoc('.viewaudittask').box().clientWidth - 471;
            obj['type'] = 'center';
            obj['actionicon'] = {
                "operation": {
                    name: '<span data-i18n="action" data-name="操作">操作</span>',
                    type: 'action',
                    code: 'action',
                    w: '100%',
                    ww: '100%'
                }
            };
            __webpack_require__.e/* require.ensure */(54/* duplicate */).then((function () {
                var cont_table = __webpack_require__(643);
                _this4.table = _this4.app.loadModule(cont_table, _this4.dom.find('.serieslist'), {
                    id: 'serieslist',
                    header: obj
                });
                _this4.table.event._addEvent('table.action', function (value) {
                    _this4.app.model.set('viewaudittask', _this4.model.querylist);
                    _this4.app.changePage(_this4.taskInfo.data.largeFigure ? 'drapCanvasAud' : 'markauditview', {
                        taskId: _this4.app.parpam['id'],
                        taskInfo: Base64.encode(value.id),
                        type: 'check_viewer'
                    });
                    // let url = this.taskInfo.data.largeFigure ? 'drapCanvasAud' : 'markauditview'
                    // window.location.href = 'http://' + window.location.host + `/#!/${url}/` + this.app.parpam['id'] + '/' + value.id + '/check_viewer/'
                    // window.location.reload()
                });
                _this4.table.event._addEvent('table.pagenumber', function (value) {
                    var json = _this4.model.getData('querylist');
                    json.reset = false;
                    json.page = parseInt(value);
                    _this4.model.setData('querylist', json);
                });
                _this4.table.event._addEvent('table.pagesize', function (value) {
                    var json = _this4.model.getData('querylist');
                    json.page = 1;
                    json.pageSize = value.num;
                    json.reset = true;
                    _this4.model.setData('querylist', json);
                });
                _this4.dom.find('.list-content').removeClass('hide');
                _this4.resize();
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
        }
    }, {
        key: 'setMain',
        value: function setMain(res, bool) {
            var _this5 = this;

            var data2 = [];
            if (res.code == 0) {
                this.total = res.data.total;
                if (res.data.list.length > 0) {
                    res.data.list.forEach(function (val) {
                        for (var i in val) {
                            val[i] = val[i] == null ? '' : val[i];
                        }
                        var obj = {};
                        val.id = val.serialNumber + '$$' + val.sarId + '$$' + _this5.model.querylist.userId;
                        obj.id = val.id;
                        if (String(val.status) == '2' || String(val.status) == '1') {
                            val.status = "审核进行中";
                            obj.operation = _this5.action;
                        } else {
                            val.status = "已提交";
                            obj.operation = _this5.action;
                        }
                        data2.push(obj);
                        val.auditTime = val.auditTime ? Tool.time(val.auditTime, 'yyyy-mm-dd HH:MM:ss') : '无';
                    });
                    this.table.setData(res.data.list, data2);
                } else {
                    this.table.noData();
                }
            }
            if (bool) {
                this.table.getTotal(res.data.pages, 2, res.data.total);
                this.table.changenum(this.model.querylist.page, this.model.querylist.pageSize);
            }
            this.initscroll();
        }
    }, {
        key: 'settaskdata',
        value: function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                var _this6 = this;

                var json, temp, res, temp1, userlist, hei;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                json = {
                                    id: this.id
                                };
                                temp = ['name', 'projectName', 'joinTaskList', 'remark', 'seriesTotalNum', 'seriesAuditNum', 'auditChoose', 'clusterType'];

                                this.app.loading.show();
                                _context2.next = 5;
                                return this.api.audit_task_read(json);

                            case 5:
                                res = _context2.sent;

                                this.taskInfo = res;
                                this.app.loading.hide();

                                if (!(res.code == 0)) {
                                    _context2.next = 50;
                                    break;
                                }

                                temp1 = '';

                                res.data.description = JSON.parse('"' + res.data.description + '"');
                                res.data.joinTaskList.forEach(function (val) {
                                    temp1 += val.name + '   ';
                                });
                                res.data.joinTaskList = temp1;
                                _context2.t0 = res.data.auditChoose;
                                _context2.next = _context2.t0 === 1 ? 16 : _context2.t0 === 2 ? 18 : _context2.t0 === 3 ? 20 : 22;
                                break;

                            case 16:
                                res.data.auditChoose = '一致部分';
                                return _context2.abrupt('break', 22);

                            case 18:
                                res.data.auditChoose = '不一致部分';
                                return _context2.abrupt('break', 22);

                            case 20:
                                res.data.auditChoose = '全集';
                                return _context2.abrupt('break', 22);

                            case 22:
                                _context2.t1 = res.data.clusterType;
                                _context2.next = _context2.t1 === 1 ? 25 : _context2.t1 === 2 ? 27 : _context2.t1 === 3 ? 29 : 31;
                                break;

                            case 25:
                                res.data.clusterType = '序列征象';
                                return _context2.abrupt('break', 31);

                            case 27:
                                res.data.clusterType = '影像标注';
                                return _context2.abrupt('break', 31);

                            case 29:
                                res.data.clusterType = '阴阳性';
                                return _context2.abrupt('break', 31);

                            case 31:
                                temp.forEach(function (val) {
                                    if (val == 'remark') {
                                        _this6.dom.find('label[apidata="' + val + '"]').html(res.data[val] ? JSON.parse('"' + res.data[val] + '"') : '');
                                    } else if (val == 'name') {
                                        _this6.dom.find('label[apidata="' + val + '"]').html(res.data[val] + (res.data.studyAnno ? '(以检查号为维度)' : ''));
                                    } else {
                                        _this6.dom.find('label[apidata="' + val + '"]').html(res.data[val]);
                                    }
                                });
                                this.projectId = res.data.projectId;

                                if (!(res.data.status == 3 || res.data.status == 4)) {
                                    _context2.next = 49;
                                    break;
                                }

                                _context2.t2 = res.data.joinAuditProjectStatus;
                                _context2.next = _context2.t2 === 0 ? 37 : _context2.t2 === 1 ? 40 : _context2.t2 === 2 ? 42 : _context2.t2 === 3 ? 44 : 47;
                                break;

                            case 37:
                                this.dom.find('.joinpro').html('合并结果');
                                this.clickevent();
                                return _context2.abrupt('break', 47);

                            case 40:
                                this.dom.find('.joinpro').html('合并中');
                                return _context2.abrupt('break', 47);

                            case 42:
                                this.dom.find('.joinpro').html('合并完成');
                                return _context2.abrupt('break', 47);

                            case 44:
                                this.dom.find('.joinpro').html('合并结果');
                                this.clickevent();
                                return _context2.abrupt('break', 47);

                            case 47:
                                _context2.next = 50;
                                break;

                            case 49:
                                this.dom.find('.joinpro').addClass('hide');

                            case 50:
                                _context2.next = 52;
                                return this.api.audit_task_user_list(json);

                            case 52:
                                userlist = _context2.sent;

                                if (userlist.code == 0) {
                                    this.menutree.changeMenu(userlist.data.userList, 'single');
                                    if (this.app.model.get('viewaudittask')) {
                                        this.model.setData('querylist', this.app.model.get('viewaudittask'));
                                        if (this.app.model.get('viewaudittask').serialNumber) {
                                            console.log(this.dom.find('.filterarea input[api="serialNumber"]').dom, this.app.model.get('viewaudittask').serialNumber);
                                            this.dom.find('.filterarea input[api="serialNumber"]').val(this.app.model.get('viewaudittask').serialNumber);
                                        }
                                        if (this.app.model.get('viewaudittask').userId) {
                                            this.dom.find('.treeArea .navFirst[did="' + this.app.model.get('viewaudittask').userId + '"]').click();
                                        }
                                    } else {
                                        this.dom.find('.treeArea .navFirst').eq(0).click();
                                    }
                                    hei = ES.selctorDoc(window).box().clientHeight - 460 > this.dom.find('.sequencearea').box().clientHeight ? ES.selctorDoc(window).box().clientHeight - 460 : this.dom.find('.sequencearea').box().clientHeight;

                                    this.menutree.resize(hei);
                                    this.initscroll1();
                                }

                            case 54:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function settaskdata() {
                return _ref2.apply(this, arguments);
            }

            return settaskdata;
        }()
    }, {
        key: 'clickevent',
        value: function clickevent() {
            var _this7 = this;

            this.dom.find('.joinpro').on('click', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                var res;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return _this7.api.series_result_task_join({
                                    taskId: _this7.id
                                });

                            case 2:
                                res = _context3.sent;

                                if (res.code == 0) {
                                    _this7.dom.find('.joinpro').html('合并中');
                                    _this7.dom.find('.joinpro').off('click');
                                } else {
                                    _this7.app.alert.show({
                                        title: ' ',
                                        msg: res.msg,
                                        close: false
                                    });
                                }

                            case 4:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, _this7);
            })));
        }
    }, {
        key: 'initscroll',
        value: function initscroll() {
            if (this.myScroll) {
                this.myScroll.refresh();
                return;
            }
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            this.dom.find('.serieslist .scrolltable').attr('id', rid);
            this.myScroll = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }, {
        key: 'initscroll1',
        value: function initscroll1() {
            if (this.myScroll1) {
                this.myScroll1.refresh();
                return;
            }
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            this.dom.find('.viewaudittask').attr('id', rid);
            this.myScroll1 = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }, {
        key: 'resize',
        value: function resize() {
            var ch = ES.selctorDoc(window).box().clientHeight;
            var cw = ES.selctorDoc(window).box().clientWidth - 40;
            ES.selctorDoc('.viewaudittask').css({
                'height': ch - 90,
                'width': cw
            });
            this.dom.find('.personarea').css({
                'height': ch - 440 > 300 ? ch - 440 : 300
            });
            this.dom.find('.listarea').css({
                'width': cw - 231
            });
            this.dom.find('.scrolltable').css({
                'height': ch - 590 > 115 ? ch - 590 : 115,
                'width': cw - 231
            });
        }
    }]);

    return viewaudittask;
}(Interstellar.pagesBase);

module.exports = viewaudittask;

/***/ }),

/***/ 603:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(984);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./viewaudittask.less", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./viewaudittask.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 604:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var urlDict = {
  audit_task_read: '/audit/task/read',
  audit_task_user_list: '/audit/task/user/list',
  audit_task_user_series_search: '/audit/task/user/series/search',
  series_result_task_join: '/audit/project/series/result/task/join'
};
var api = {
  audit_task_read: function audit_task_read(value) {
    return this.HttpRequest.POST(urlDict.audit_task_read, value);
  },
  audit_task_user_list: function audit_task_user_list(value) {
    return this.HttpRequest.POST(urlDict.audit_task_user_list, value);
  },
  audit_task_user_series_search: function audit_task_user_series_search(value) {
    return this.HttpRequest.POST(urlDict.audit_task_user_series_search, value);
  },
  series_result_task_join: function series_result_task_join(value) {
    return this.HttpRequest.POST(urlDict.series_result_task_join, value);
  }
};
module.exports = api;

/***/ }),

/***/ 605:
/***/ (function(module, exports) {

module.exports = "<div class=viewaudittask> <div> <div class=breadcrumb> <span class=lastlink link=taskmanage>返回审核任务列表</span>> <span class=nowlink>审核任务</span> </div> <a class=\"joinpro biaozhubtn\">合并结果</a> <div class=taskdetail> <p> <span>审核任务名称：<label apidata=name></label></span> <span>所属审核项目：<label apidata=projectName></label></span> </p> <p> <span class=single>被审核源匹配项：<label apidata=joinTaskList></label></span> </p> <p> <span class=single>审核任务备注：<label apidata=remark></label></span> </p> <p> <span>可审核序列：<label apidata=seriesTotalNum></label></span> <span>已审核序列：<label apidata=seriesAuditNum></label></span> </p> <p> <span>审核集：<label apidata=auditChoose></label></span> <span>数据匹配项：<label apidata=clusterType></label></span> </p> </div> <div class=sequencearea> <div class=personarea> <span class=menutitle>提交人姓名</span> <div class=left> </div> </div> <div class=listarea> <div class=filterarea> 序号：<input type=text api=serialNumber /> <a class=\"strokeBtn search\">查询</a> </div> <div class=personinfo> <span class=\"\">提交人用户名:<label api=username></label></span> <span class=\"\" style=width:16%>所属供应商:<label api=venderName></label></span> <span class=\"\" style=width:15%>共已审核序列数量:<label api=seriesAuditNum></label></span> <span class=\"\" style=width:12%>病灶数量:<label api=imageAnnoNum></label></span> <a class=\"viewall biaozhubtn\">查看所有审核结果</a> </div> <div class=scrollright> <div class=serieslist> </div> </div> </div> </div> </div> </div> ";

/***/ }),

/***/ 606:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//这边基本上引入需要使用的资源less，api，需要使用的模块等等。

var viewaudittask = function (_Interstellar$modelBa) {
    _inherits(viewaudittask, _Interstellar$modelBa);

    function viewaudittask(app) {
        _classCallCheck(this, viewaudittask);

        var _this = _possibleConstructorReturn(this, (viewaudittask.__proto__ || Object.getPrototypeOf(viewaudittask)).call(this, app));

        _this.taskid = {};
        _this.userlist = {};
        _this.querylist = { id: parseInt(_this.app.parpam['id']), page: 1, pageSize: 10, reset: true };
        return _this;
    }

    return viewaudittask;
}(Interstellar.modelBase);

module.exports = viewaudittask;

/***/ }),

/***/ 984:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".viewaudittask {\n  margin: 20px;\n  background: #fff;\n  font-size: 14px;\n  overflow: hidden;\n}\n.viewaudittask .breadcrumb {\n  padding: 40px 0 0 70px;\n  font-size: 16px;\n  margin-right: 10px;\n}\n.viewaudittask .breadcrumb .lastlink {\n  color: #ccc;\n  cursor: pointer;\n}\n.viewaudittask .joinpro {\n  position: absolute;\n  right: 40px;\n  top: 50px;\n  height: 35px;\n  line-height: 35px;\n  background: #4c9fa9;\n  color: #fff;\n  padding: 0 20px;\n}\n.viewaudittask .taskdetail {\n  margin: 40px 0 40px 70px;\n}\n.viewaudittask .taskdetail p {\n  line-height: 40px;\n}\n.viewaudittask .taskdetail p span {\n  width: 40%;\n}\n.viewaudittask .taskdetail p .single {\n  width: 90%;\n}\n.viewaudittask .sequencearea {\n  margin-left: 70px;\n  min-height: 300px;\n}\n.viewaudittask .sequencearea .personarea {\n  float: left;\n  width: 160px;\n  border-right: 1px solid #e8e8e8;\n}\n.viewaudittask .sequencearea .personarea .menutitle {\n  height: 60px;\n  line-height: 60px;\n}\n.viewaudittask .sequencearea .personarea .left .navFirst {\n  padding-left: 20px;\n  height: 40px;\n  line-height: 40px;\n  cursor: pointer;\n}\n.viewaudittask .sequencearea .personarea .left .choosedks {\n  background: #ECF3F4;\n}\n.viewaudittask .sequencearea .listarea {\n  float: right;\n}\n.viewaudittask .sequencearea .listarea .filterarea {\n  padding-left: 20px;\n}\n.viewaudittask .sequencearea .listarea .filterarea input {\n  height: 32px;\n  border: 1px solid #e8e8e8;\n  border-radius: 4px;\n  margin-right: 10px;\n}\n.viewaudittask .sequencearea .listarea .personinfo {\n  margin: 10px 0;\n}\n.viewaudittask .sequencearea .listarea .personinfo span {\n  width: 20%;\n  overflow: hidden;\n  white-space: nowrap;\n}\n.viewaudittask .sequencearea .listarea .personinfo .viewall {\n  background: #4c9fa9;\n  color: #fff;\n  padding: 0 20px;\n  height: 40px;\n  line-height: 40px;\n}\n", ""]);

// exports


/***/ })

});
//# sourceMappingURL=f39c579f8a9543db36f8.43.min.js.map