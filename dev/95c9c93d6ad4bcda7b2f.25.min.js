webpackJsonp([25],{

/***/ 143:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(832);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./createtask2.less", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./createtask2.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 144:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//这边基本上引入需要使用的资源less，api，需要使用的模块等等。

var createtask2 = function (_Interstellar$modelBa) {
    _inherits(createtask2, _Interstellar$modelBa);

    function createtask2(app) {
        _classCallCheck(this, createtask2);

        var _this = _possibleConstructorReturn(this, (createtask2.__proto__ || Object.getPrototypeOf(createtask2)).call(this, app));

        _this.proseriesdata = { page: 1, pageSize: 10, assigned: false };
        _this.querytask = { page: 1, pageSize: 10 };
        return _this;
    }

    return createtask2;
}(Interstellar.modelBase);

module.exports = createtask2;

/***/ }),

/***/ 158:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//这边基本上引入需要使用的资源less，api，需要使用的模块等等。

var createtask2 = function (_Interstellar$pagesBa) {
    _inherits(createtask2, _Interstellar$pagesBa);

    function createtask2() {
        _classCallCheck(this, createtask2);

        return _possibleConstructorReturn(this, (createtask2.__proto__ || Object.getPrototypeOf(createtask2)).apply(this, arguments));
    }

    _createClass(createtask2, [{
        key: "complete",
        value: function complete() {
            var _this3 = this;

            var that = this;
            this.apidata = {};
            this.apidata.condition = null;
            this.apidata.remark = '';
            this.type = this.app.parpam.type;
            this.taskId = this.app.parpam.taskid;
            this.projectId = this.app.parpam.projectid;
            this.prodata = __webpack_require__(779);
            this.exportdata = __webpack_require__(879);
            this.listshow = __webpack_require__(883);
            this.app.header.openControl('taskmanage');
            this.app.header.changeselected(2);
            this.styleModel(1);
            this.initscroll('createtask2');
            this.task_series_count();
            this.task_read();
            this.dom.find('.yrdata').on('click', function () {
                var _this2 = this;

                if (!ES.selctorDoc(this).hasClass('disabled')) {
                    that.prodatapoll = that.app.loadModal(that.prodata, { adv: true }, { type: 'add', id: that.taskId });
                    that.resetPage = true;
                    that.prodatapoll.event._addEvent('projectdata.addall', function () {
                        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(value) {
                            var res;
                            return regeneratorRuntime.wrap(function _callee$(_context) {
                                while (1) {
                                    switch (_context.prev = _context.next) {
                                        case 0:
                                            that.apidata.condition = value.query;
                                            that.apidata.operation = 1;
                                            that.apidata.taskId = that.taskId;
                                            that.apidata.randomAddNum = parseInt(value.randomAddNum);
                                            that.apidata.currentSearchReqId = value.currentSearchReqId;
                                            delete that.apidata.condition.page;
                                            delete that.apidata.condition.pageSize;
                                            that.app.loading.show();
                                            _context.next = 10;
                                            return that.api.updateseries(that.apidata);

                                        case 10:
                                            res = _context.sent;

                                            that.app.loading.hide();
                                            if (res.code == 0) {
                                                that.task_series_count();
                                            }
                                            if (value.total > 0) {
                                                that.dom.find('.yyrarea').removeClass('hide');
                                                that.dom.find('.yyr .num').html(value.total);
                                            }
                                            that.prodatapoll.close();

                                        case 15:
                                        case "end":
                                            return _context.stop();
                                    }
                                }
                            }, _callee, _this2);
                        }));

                        return function (_x) {
                            return _ref.apply(this, arguments);
                        };
                    }());
                    that.prodatapoll.event._addEvent('projectdata.search', function (value) {
                        that.resetPage = true;
                        that.model.setData('proseriesdata', value.data);
                    });
                    that.prodatapoll.event._addEvent('projectdata.datachange', function () {
                        that.resetPage = true;
                        that.task_series_count();
                    });
                    that.prodatapoll.event._addEvent('hospital.input', function (value) {
                        that.getxlvalue(value);
                    });
                    that.prodatapoll.event._addEvent('projectdata.taskinput', function (value) {
                        that.gettask(value);
                    });
                    that.prodatapoll.event._addEvent('prodata.pagenumber', function (value) {
                        that.resetPage = false;
                        that.model.setData('proseriesdata', value.data);
                    });
                    that.prodatapoll.event._addEvent('prodata.pagesize', function (value) {
                        that.resetPage = true;
                        that.model.setData('proseriesdata', value.data);
                    });
                    that.getxlvalue('');
                    that.model.setData('proseriesdata', { page: 1, pageSize: 10, assigned: false, needCache: true });
                }
            });
            this.model._event._addEvent('proseriesdata.change', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                var json, res;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                json = _this3.model.getData('proseriesdata');

                                json['projectId'] = _this3.projectId;
                                json['needCache'] = true;
                                _this3.app.loading.show();
                                _context2.next = 6;
                                return _this3.api.getproseries(json);

                            case 6:
                                res = _context2.sent;

                                _this3.app.loading.hide();
                                if (res.code == 0) {
                                    if (_this3.resetPage) {
                                        _this3.prodatapoll.setMain(res, true);
                                    } else {
                                        _this3.prodatapoll.setMain(res);
                                    }
                                }

                            case 9:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, _this3);
            })));
            this.model._event._addEvent('querytask.change', function () {
                _this3.gettaskseries();
            });
            this.dom.find('.yyr').on('click', function () {
                _this3.prodatapoll = _this3.app.loadModal(_this3.prodata, { adv: true }, {
                    type: 'view',
                    candel: _this3.type === 'view' ? false : true
                });
                _this3.prodatapoll.event._addEvent('prodata.pagenumber', function (value) {
                    _this3.resetPage = false;
                    _this3.model.setData('querytask', value.data);
                });
                _this3.prodatapoll.event._addEvent('prodata.pagesize', function (value) {
                    _this3.resetPage = true;
                    _this3.model.setData('querytask', value.data);
                });
                _this3.prodatapoll.event._addEvent('hospital.input', function (value) {
                    _this3.getxlvalue(value);
                });
                _this3.prodatapoll.event._addEvent('projectdata.search', function (value) {
                    delete value.data.assigned;
                    delete value.data.taskIdList;
                    value.data.seriesSubmitCount = value.data.seriSubmitCount;
                    //delete value.data.seriSubmitCount;
                    value.data.taskId = _this3.taskId;
                    value.data.needCache = true;
                    _this3.resetPage = true;
                    _this3.model.setData('querytask', value.data);
                });
                _this3.prodatapoll.event._addEvent('projectdata.deleteresult', function () {
                    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(value) {
                        var json, res;
                        return regeneratorRuntime.wrap(function _callee3$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        if (!(value.totalnum == 0)) {
                                            _context3.next = 4;
                                            break;
                                        }

                                        _this3.app.alert.show({
                                            title: ' ',
                                            msg: '查询结果为空',
                                            close: true,
                                            footer: true
                                        });
                                        _context3.next = 15;
                                        break;

                                    case 4:
                                        _this3.apidata.condition = null;
                                        delete value.data.page;
                                        delete value.data.pageSize;
                                        json = {
                                            taskId: _this3.taskId,
                                            condition: value.data,
                                            currentSearchReqId: value.currentSearchReqId
                                        };

                                        _this3.app.loading.show();
                                        _context3.next = 11;
                                        return _this3.api.searchresult_remove(json);

                                    case 11:
                                        res = _context3.sent;

                                        _this3.app.loading.hide();
                                        if (res.code == 0) {
                                            _this3.task_series_count();
                                        } else {
                                            alert('清空失败');
                                        }
                                        _this3.model.setData('proseriesdata', { page: 1, pageSize: 10, assigned: false });

                                    case 15:
                                    case "end":
                                        return _context3.stop();
                                }
                            }
                        }, _callee3, _this3);
                    }));

                    return function (_x2) {
                        return _ref3.apply(this, arguments);
                    };
                }());
                _this3.prodatapoll.event._addEvent('projectdata.exportresult', function (value) {
                    if (value.totalnum == 0) {
                        _this3.app.alert.show({
                            title: ' ',
                            msg: '查询结果为空，不支持导出。',
                            close: true,
                            footer: true
                        });
                    } else {
                        delete value.data.assigned;
                        delete value.data.taskIdList;
                        delete value.data.page;
                        delete value.data.pageSize;
                        var json = {
                            taskId: _this3.taskId,
                            condition: value.data,
                            currentSearchReqId: value.currentSearchReqId,
                            operation: 'URL'
                        };
                        var url = _this3.app.domain1 + 'v1/task/series/searchresult/export?param=' + encodeURI(JSON.stringify(json) + '&accessToken=' + window.localStorage.accessToken);
                        _this3.api.HttpRequest.downLoadFile(url, { "key": "accessToken", 'val': _this3.app.local.get('accessToken') });
                    }
                });
                _this3.getxlvalue('');
                _this3.resetPage = true;
                _this3.model.setData('querytask', { page: 1, pageSize: 10 });
            });
            this.dom.find('.choosePart .radio-box').on('click', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                var _this4 = this;

                var dom, res;
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                dom = ES.selctorDoc(this);

                                if (!dom.hasClass('choose')) {
                                    _context5.next = 5;
                                    break;
                                }

                                that.app.alert.show({
                                    title: '',
                                    template: '<span style="font-size: 18px;margin-left:20px;">确认取消部分标注吗</span>',
                                    sure: function () {
                                        var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                                            var res;
                                            return regeneratorRuntime.wrap(function _callee4$(_context4) {
                                                while (1) {
                                                    switch (_context4.prev = _context4.next) {
                                                        case 0:
                                                            dom.removeClass('choose');
                                                            that.dom.find('.exportArea').addClass('hide');
                                                            _context4.next = 4;
                                                            return that.api.task_portionAnno({ taskId: that.taskId * 1, portionAnno: false });

                                                        case 4:
                                                            res = _context4.sent;

                                                            if (res.code == 0) {} else {
                                                                alert('更新失败');
                                                            }

                                                        case 6:
                                                        case "end":
                                                            return _context4.stop();
                                                    }
                                                }
                                            }, _callee4, _this4);
                                        }));

                                        function sure() {
                                            return _ref5.apply(this, arguments);
                                        }

                                        return sure;
                                    }(),
                                    close: true
                                });
                                _context5.next = 11;
                                break;

                            case 5:
                                dom.addClass('choose');
                                that.dom.find('.exportArea').removeClass('hide');
                                _context5.next = 9;
                                return that.api.task_portionAnno({ taskId: that.taskId * 1, portionAnno: true });

                            case 9:
                                res = _context5.sent;

                                if (res.code == 0) {} else {
                                    alert('更新失败');
                                }

                            case 11:
                            case "end":
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            })));
            this.dom.find('.choosePart .export').on('click', function () {
                _this3.exportData = _this3.app.loadModal(_this3.exportdata, { adv: true }, {});
                _this3.exportData.event._addEvent('uploadalgdata.upload', function (value) {
                    if (_this3.seriesCount <= 0) {
                        that.app.alert.show({
                            title: '',
                            template: '<span style="font-size: 18px;margin-left:20px;">请先引入影像文件</span>',
                            sure: false,
                            close: true,
                            footer: true
                        });
                        return;
                    }
                    var filePath = ES.selctorDoc("#file1").val();
                    var fileType = Tool.getFileType(filePath);
                    if ('xlsx' !== fileType && 'xls' !== fileType) {
                        ES.selctorDoc("#filechoose").val("");
                        _this3.app.alert.show({
                            title: '',
                            template: '<span style="font-size: 18px;margin-left:20px;">格式错误，上传失败。</span>',
                            close: false,
                            sure: function sure() {
                                _this3.app.alert.hide();
                            }
                        });
                    } else {
                        _this3.app.loading.show();
                        $.ajaxFileUpload({
                            url: '/aaa/v1/task/series/import/needAnno', // that.app.domain+'/ccc/user/import',
                            secureuri: false,
                            dataType: "JSON",
                            async: false,
                            data: {
                                taskId: _this3.taskId * 1,
                                accessToken: window.localStorage.accessToken
                            },
                            type: 'post',
                            fileElementId: 'file1',
                            success: function success(data, status, e) {
                                _this3.app.loading.hide();
                                var jsonArr = JSON.parse(data.match(/{.+}/g)[0]);
                                that.exportData.close();
                                console.log(jsonArr, 'jsonAee');
                                if (jsonArr.code == 0) {
                                    _this3.app.alert.show({
                                        title: '',
                                        template: '<span style="font-size: 18px;margin-left:20px;">成功导入' + jsonArr.data.successCount + '条，失败' + jsonArr.data.errorCount + '条</span>',
                                        sure: false,
                                        close: true,
                                        footer: true
                                    });
                                    _this3.event._dispatch('projectdata.datachange');
                                } else {
                                    var msg = jsonArr.code == -1 ? '繁忙' : jsonArr.msg;
                                    _this3.app.alert.show({
                                        title: '',
                                        template: '<span style="font-size: 18px;margin-left:20px;">' + msg + '</span>',
                                        sure: false,
                                        close: true,
                                        footer: true
                                    });
                                }
                                _this3.close();
                                _this3.dom.find('.file').remove();
                                _this3.dom.find('.btnarea').append('<input class="file" type="file" id="file" name="file"/>');
                                // that.bindchangefile();
                            }
                        });
                    }
                });
            });
            var config = {
                icon: {
                    "seriesTotalCount": { name: '<span data-i18n="age" data-name="年龄">总序列数</span>', type: 'text', code: 'checkid', w: '20%', ww: '20%', n: "40" },
                    "successCount": { name: '<span data-i18n="age" data-name="年龄">匹配序列数</span>', type: 'text', code: 'checkid', w: '20%', ww: '20%' },
                    "errorCount": { name: '<span data-i18n="age" data-name="年龄">未匹配序列数</span>', type: 'text', code: 'pid', w: '20%', ww: '20%' },
                    "importTime": { name: '<span data-i18n="age" data-name="年龄">导入时间</span>', type: 'text', code: 'pname', w: '20%', ww: '20%' },
                    "action": { name: '<span data-i18n="age" data-name="年龄">操作</span>', type: 'action', code: 'pname', w: '20%', ww: '20%' }
                },
                type: 'center',
                tablewidth: 800,
                operation: {
                    export: { dis: 'inline', link: 'noLink', content: '导出' }
                }
            };
            this.dom.find('.choosePart .viewexported').on('click', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                var res;
                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                _this3.listShow = _this3.app.loadModal(_this3.listshow, { adv: true }, { headerconfig: config, title: '查看指定序列' });
                                _context8.next = 3;
                                return _this3.api.task_series_import_infoList({ taskId: that.taskId, page: 1, pageSize: 10 });

                            case 3:
                                res = _context8.sent;

                                _this3.listShow.setMain(res, true);
                                _this3.listShow.event._addEvent('listshow.change', function () {
                                    var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(value) {
                                        var res;
                                        return regeneratorRuntime.wrap(function _callee6$(_context6) {
                                            while (1) {
                                                switch (_context6.prev = _context6.next) {
                                                    case 0:
                                                        _context6.next = 2;
                                                        return _this3.api.task_series_import_infoList({ taskId: that.taskId, page: value.page, pageSize: value.pageSize });

                                                    case 2:
                                                        res = _context6.sent;

                                                        _this3.listShow.setMain(res, value.refreshPage);

                                                    case 4:
                                                    case "end":
                                                        return _context6.stop();
                                                }
                                            }
                                        }, _callee6, _this3);
                                    }));

                                    return function (_x3) {
                                        return _ref7.apply(this, arguments);
                                    };
                                }());
                                _this3.listShow.event._addEvent('listshow.action', function () {
                                    var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(value) {
                                        return regeneratorRuntime.wrap(function _callee7$(_context7) {
                                            while (1) {
                                                switch (_context7.prev = _context7.next) {
                                                    case 0:
                                                        console.log(value, 'value');
                                                        that.api.HttpRequest.downLoadFile(that.app.domain1 + "v1/task/series/import/infoList/export?id=" + value.id + "&accessToken=" + window.localStorage.accessToken);

                                                    case 2:
                                                    case "end":
                                                        return _context7.stop();
                                                }
                                            }
                                        }, _callee7, _this3);
                                    }));

                                    return function (_x4) {
                                        return _ref8.apply(this, arguments);
                                    };
                                }());

                            case 7:
                            case "end":
                                return _context8.stop();
                        }
                    }
                }, _callee8, _this3);
            })));
            if (this.type == 'view') {
                this.dom.find('.yrdata').addClass('hide');
                this.dom.find('.exportArea .export').addClass('hide');
                this.dom.find('.choosePart .radio-box').off('click');
            }
        }
    }, {
        key: "gettaskseries",
        value: function () {
            var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                var json, res;
                return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:
                                json = this.model.getData('querytask');

                                json.taskId = parseInt(this.taskId);
                                this.app.loading.show();
                                _context9.next = 5;
                                return this.api.querytaskseries(json);

                            case 5:
                                res = _context9.sent;

                                this.app.loading.hide();
                                if (res.code == 0) {
                                    if (this.resetPage) {
                                        this.prodatapoll.setMain(res, true);
                                    } else {
                                        this.prodatapoll.setMain(res);
                                    }
                                }

                            case 8:
                            case "end":
                                return _context9.stop();
                        }
                    }
                }, _callee9, this);
            }));

            function gettaskseries() {
                return _ref9.apply(this, arguments);
            }

            return gettaskseries;
        }()
    }, {
        key: "task_series_count",
        value: function () {
            var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                var res;
                return regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                this.app.loading.show();
                                _context10.next = 3;
                                return this.api.task_series_count({ taskId: parseInt(this.taskId) });

                            case 3:
                                res = _context10.sent;

                                this.app.loading.hide();
                                if (res.code == 0) {
                                    this.seriesCount = res.data.count;
                                    if (res.data.count > 0) {
                                        this.dom.find('.yyrarea').removeClass('hide');
                                        this.dom.find('.yyr .num').html(res.data.count);
                                    } else {
                                        this.dom.find('.yyrarea').addClass('hide');
                                    }
                                }

                            case 6:
                            case "end":
                                return _context10.stop();
                        }
                    }
                }, _callee10, this);
            }));

            function task_series_count() {
                return _ref10.apply(this, arguments);
            }

            return task_series_count;
        }()
    }, {
        key: "getxlvalue",
        value: function () {
            var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(value) {
                var _this5 = this;

                var json1, res;
                return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                        switch (_context11.prev = _context11.next) {
                            case 0:
                                json1 = { service: 'DR', method: '/v1/hospital/search', params: JSON.stringify({ code: value }) };

                                if (this.prodatapoll.yymc) {
                                    this.prodatapoll.yymc.loading(true);
                                }
                                _context11.next = 4;
                                return this.api.hospitalName(json1);

                            case 4:
                                res = _context11.sent;

                                this.prodatapoll.yymc.loading(false);
                                this.hospital = [];
                                res.data.list.forEach(function (val) {
                                    var obj = {};
                                    obj.idx = val['code'];
                                    obj.val = val['code'];
                                    _this5.hospital.push(obj);
                                });
                                this.prodatapoll.resetxlk(this.hospital);

                            case 9:
                            case "end":
                                return _context11.stop();
                        }
                    }
                }, _callee11, this);
            }));

            function getxlvalue(_x5) {
                return _ref11.apply(this, arguments);
            }

            return getxlvalue;
        }()
    }, {
        key: "gettask",
        value: function () {
            var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(value) {
                var json, res;
                return regeneratorRuntime.wrap(function _callee12$(_context12) {
                    while (1) {
                        switch (_context12.prev = _context12.next) {
                            case 0:
                                json = {
                                    taskNameKey: value,
                                    projectId: parseInt(this.projectId),
                                    type: 1
                                };
                                _context12.next = 3;
                                return this.api.task_like_query(json);

                            case 3:
                                res = _context12.sent;

                                if (res.code == 0) {
                                    this.prodatapoll.tasklist(res.data.list);
                                }

                            case 5:
                            case "end":
                                return _context12.stop();
                        }
                    }
                }, _callee12, this);
            }));

            function gettask(_x6) {
                return _ref12.apply(this, arguments);
            }

            return gettask;
        }()
    }, {
        key: "setData",
        value: function () {
            var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
                var json, res;
                return regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                        switch (_context13.prev = _context13.next) {
                            case 0:
                                json = {
                                    id: parseInt(this.taskId)
                                };
                                _context13.next = 3;
                                return this.api.querytaskseries(json);

                            case 3:
                                res = _context13.sent;

                                if (res.code == 0) {}
                                this.model.setData('querytask', this.model.getData('querytask'));

                            case 6:
                            case "end":
                                return _context13.stop();
                        }
                    }
                }, _callee13, this);
            }));

            function setData() {
                return _ref13.apply(this, arguments);
            }

            return setData;
        }()
    }, {
        key: "task_read",
        value: function () {
            var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
                var res;
                return regeneratorRuntime.wrap(function _callee14$(_context14) {
                    while (1) {
                        switch (_context14.prev = _context14.next) {
                            case 0:
                                _context14.next = 2;
                                return this.api.task_read({ id: parseInt(this.taskId) });

                            case 2:
                                res = _context14.sent;

                                if (res.code == 0) {
                                    if (res.data.portionAnno) {
                                        this.dom.find('.choosePart .radio-box').addClass('choose');
                                        this.dom.find('.exportArea').removeClass('hide');
                                    }
                                    if (!res.data.studyAnno) {
                                        this.dom.find('.choosePart').addClass('hide');
                                    }
                                } else {
                                    alert('失败');
                                }

                            case 4:
                            case "end":
                                return _context14.stop();
                        }
                    }
                }, _callee14, this);
            }));

            function task_read() {
                return _ref14.apply(this, arguments);
            }

            return task_read;
        }()
    }, {
        key: "resize",
        value: function resize() {
            var ch = ES.selctorDoc(window).box().clientHeight - 100;
            var cw = ES.selctorDoc(window).box().clientWidth - 40;
            ES.selctorDoc('.createtask').css({ 'height': ch, 'width': cw });
            this.initscroll('createtask');
        }
    }, {
        key: "initscroll",
        value: function initscroll(val) {
            if (this.myScroll) {
                this.myScroll.refresh();
                return;
            }
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            ES.selctorDoc('.' + val).attr('id', rid);
            this.myScroll = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                scrollX: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }]);

    return createtask2;
}(Interstellar.pagesBase);

module.exports = createtask2;

/***/ }),

/***/ 485:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var urlDict = {
  createtask: '/task/create',
  updatetask: '/task/update',
  updateseries: '/task/series/update',
  searchresult_remove: '/task/series/searchresult/remove',
  projectdetail: '/project/basic/read',
  getproseries: '/project/series/search',
  querytaskseries: '/task/series/search',
  hospitalName: '/sys/transfer',
  task_search: '/task/search',
  task_like_query: '/task/like/query',
  task_series_count: '/task/series/count',
  task_portionAnno: '/task/portionAnno',
  task_series_import_infoList: '/task/series/import/infoList',
  task_read: '/task/read'
};
var api = {
  createtask: function createtask(value) {
    return this.HttpRequest.POST(urlDict.createtask, value);
  },
  updateseries: function updateseries(value) {
    return this.HttpRequest.POST(urlDict.updateseries, value);
  },
  searchresult_remove: function searchresult_remove(value) {
    return this.HttpRequest.POST(urlDict.searchresult_remove, value);
  },
  projectdetail: function projectdetail(value) {
    return this.HttpRequest.POST(urlDict.projectdetail, value);
  },
  getproseries: function getproseries(value) {
    return this.HttpRequest.POST(urlDict.getproseries, value);
  },
  querytaskseries: function querytaskseries(value) {
    return this.HttpRequest.POST(urlDict.querytaskseries, value);
  },
  hospitalName: function hospitalName(value) {
    return this.HttpRequest.POST(urlDict.hospitalName, value);
  },
  task_search: function task_search(value) {
    return this.HttpRequest.POST(urlDict.task_search, value);
  },
  task_like_query: function task_like_query(value) {
    return this.HttpRequest.POST(urlDict.task_like_query, value);
  },
  task_series_count: function task_series_count(value) {
    return this.HttpRequest.POST(urlDict.task_series_count, value);
  },
  task_portionAnno: function task_portionAnno(value) {
    return this.HttpRequest.POST(urlDict.task_portionAnno, value);
  },
  task_series_import_infoList: function task_series_import_infoList(value) {
    return this.HttpRequest.POST(urlDict.task_series_import_infoList, value);
  },
  task_read: function task_read(value) {
    return this.HttpRequest.POST(urlDict.task_read, value);
  }
};
module.exports = api;

/***/ }),

/***/ 486:
/***/ (function(module, exports) {

module.exports = "<div class=createtask2> <div class=btnline> <a class=\"biaozhubtn yrdata\">点击引入影像数据</a> <div class=\"yyrarea hide\"> <a class=yyr>已引入<label class=num></label>个影像文件</a> </div> </div> <div class=choosePart> <i class=radio-box></i>只允许部分序列进行标注 <div class=\"exportArea hide\"> <a class=\"biaozhubtn export\">导入指定序列</a> <a class=viewexported>查看已导入序列</a> </div> </div> </div> ";

/***/ }),

/***/ 761:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(762);

var addpart = function (_Interstellar$modalBa) {
    _inherits(addpart, _Interstellar$modalBa);

    function addpart(app, dom, value, addMode) {
        _classCallCheck(this, addpart);

        var _this = _possibleConstructorReturn(this, (addpart.__proto__ || Object.getPrototypeOf(addpart)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(764);
        _this.name = 'addpart';
        _this.apidata = {};
        return _this;
    }

    _createClass(addpart, [{
        key: 'complete',
        value: function complete() {
            var that = this;
            this.initView();
            if (that.api.title) {
                that.dom.find('.modal-title').html(that.api.title);
            }
        }
    }, {
        key: 'initView',
        value: function initView() {
            var that = this;
            that.dom.find('.inputBox').on('change', function () {
                that.apidata[ES.selctorDoc(this).attr('api')] = ES.selctorDoc(this).val();
                console.log(that.apidata, 'that.apidata');
            });
            this.dom.find('.icon-guanbi').on('click', function () {
                that.close();
            });
            this.dom.find('.btn-cancel').on('click', function () {
                that.close();
            });
            this.dom.find('.btn-confirm').on('click', function () {
                that.dom.find('.tips').css({ color: '#666' });
                that.dom.find('.inputLine').dom.forEach(function (val, idx) {
                    val.find('.' + val.attr('redlabel')).removeClass('redborder');
                    val.find('.required').remove();
                    if (Tool.checkForm(ES.selctorDoc(val).dom, 'red') !== '') {
                        val.find('.' + val.attr('redlabel')).addClass('redborder');
                        val.find('.' + val.attr('redlabel')).after('<span class="required">' + Tool.checkForm(ES.selctorDoc(val).dom, 'red') + '</span>');
                    }
                });
                if (that.dom.find('.redborder').dom) {
                    return false;
                } else {
                    console.log(that.apidata.number, that.api.total, 'that.api.total');
                    if (that.apidata.number > that.api.total) {
                        that.dom.find('.tips').css({ color: 'red' });
                        return false;
                    }
                    that.event._dispatch('addpart.submit', that.apidata);
                }
            });
        }
    }]);

    return addpart;
}(Interstellar.modalBase);
//原型链一定要有的


module.exports = addpart;

/***/ }),

/***/ 762:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(763);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./addpart.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./addpart.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 763:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".addpart {\n  margin-left: -250px;\n  width: 500px;\n  height: 300px;\n  font-size: 16px;\n}\n.addpart .modal-header {\n  padding: 40px 0 40px 30px;\n}\n.addpart .modal-header .modal-title {\n  font-family: MicrosoftYaHei;\n  font-weight: bold;\n  font-size: 18px;\n  color: #333333;\n  letter-spacing: 0;\n}\n.addpart .modal-header i {\n  font-size: 15px;\n  position: absolute;\n  right: 20px;\n  top: 20px;\n  cursor: pointer;\n}\n.addpart .modal-body {\n  padding: 0px !important;\n  margin: 0 30px;\n}\n.addpart .modal-body span {\n  margin-left: 0px;\n}\n.addpart .modal-body .inputLine {\n  position: relative;\n  height: 70px;\n}\n.addpart .modal-body .inputLine > div {\n  display: inline-block;\n}\n.addpart .modal-body .inputLine .confirm {\n  margin-right: 0;\n}\n.addpart .modal-body .inputLine .inputBox {\n  width: 305px;\n  height: 38px;\n  line-height: 38px;\n  border: 1px solid #E8E8E8;\n  border-radius: 4px;\n  outline: none;\n  padding-left: 5px;\n}\n.addpart .modal-body .inputLine .names {\n  font-family: \"MicrosoftYaHei\";\n  font-size: 14px;\n  color: #333333;\n  letter-spacing: 0;\n  margin-right: 17px;\n  width: 100px;\n}\n.addpart .modal-body .inputLine .tips {\n  margin-left: 123px;\n  font-size: 14px;\n  margin-top: 8px;\n}\n.addpart .modal-body .inputLine .forget {\n  color: #448E97;\n}\n.addpart .modal-body .inputLine .errorMessage {\n  color: red;\n}\n.addpart .modal-footer {\n  margin: 40px 20px 0 0;\n}\n.addpart .btn:hover {\n  background: #1F474C !important;\n  color: #fff;\n  border-color: #1F474C !important;\n}\n.addpart .required {\n  position: relative;\n  margin-left: 120px!important;\n}\n", ""]);

// exports


/***/ }),

/***/ 764:
/***/ (function(module, exports) {

module.exports = "<div class=\"modal addpart\"> <div class=modal-header> <i class=\"iconfont icon-guanbi\"></i> </div> <div class=modal-body> <div class=inputLine redlabel=inputBox> <span class=names>请填写序列数量</span> <input type=text class=inputBox check=empty|int api=number /> <span class=tips>该数量必须小于等于查询结果数量</span> </div> </div> <div class=modal-footer> <a class=\"btn btn-confirm\" data-i18n=qd data-name=继续添加>确认数量添加</a> <a class=\"btn btn-cancel\" data-i18n=qx data-name=保存>取消</a> </div> </div>";

/***/ }),

/***/ 779:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(780);
// var html = require('./tpl.html')
//type:custom   createprothree页面查看序列列表弹窗
//type:add      createtask2页面添加序列弹窗
//type:view     createtask2页面查看序列弹窗

var projectdata = function (_Interstellar$modalBa) {
    _inherits(projectdata, _Interstellar$modalBa);

    function projectdata(app, dom, value, addMode) {
        _classCallCheck(this, projectdata);

        var _this = _possibleConstructorReturn(this, (projectdata.__proto__ || Object.getPrototypeOf(projectdata)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(782);
        _this.name = 'biaozhulist';
        _this.flag = true;
        _this.code = '';
        return _this;
    }

    _createClass(projectdata, [{
        key: 'complete',
        value: function complete() {
            var that = this;
            that.apidata = {
                hospitalCode: '',
                studyDateBegin: '',
                studyDateEnd: '',
                assigned: '',
                taskIdList: [],
                page: 1,
                pageSize: 10
            };
            that.finalquery = {};
            //this.bodypart=[{idx:'LUNG',val:'肺部'},{idx:'RIB',val:'肋骨'},{idx:'KNEE_JOINT',val:'膝关节'},{idx:'COXA_JOINT',val:'髋关节'},{idx:'HAND',val:'手'},{idx:'FOOT',val:'足'},{idx:'SKULL_BRAIN',val:'颅脑'},{idx:'HEART',val:'心脏'},{val:'眼底',idx:'EYEGROUND'}]
            this.bodypart = Tool.configxlkformat(that.app.constmap['BODY_PART']);
            that.totalnum = 0;
            switch (that.api.type) {
                case 'view':
                    that.dom.find('.isselected').addClass('hide');
                    that.dom.find('.usecondition').addClass('hide');
                    that.dom.find('.btnarea').addClass('hide');
                    that.dom.find('.modelArea').addClass('hide');
                    that.dom.find('.title').html('已引入项目序列池');
                    that.setTitle('view');
                    that.dom.find('.viewdelete').removeClass('hide');
                    if (that.api.candel == true) {
                        that.dom.find('.deleteresult').removeClass('hide');
                    }
                    that.dom.find('.deleteresult').on('click', function () {
                        that.app.alert.show({
                            title: ' ',
                            msg: '确认要删除序列？',
                            close: true,
                            sure: function sure() {
                                that.event._dispatch('projectdata.deleteresult', { data: that.apidata, total: that.totalnum, currentSearchReqId: that.currentSearchReqId });
                                that.close();
                            }
                        });
                    });
                    this.dom.find('.exportresult').on('click', function () {
                        that.event._dispatch('projectdata.exportresult', { data: that.apidata, total: that.totalnum, currentSearchReqId: that.currentSearchReqId });
                    });
                    break;
                case 'add':
                    that.firstSelect = { val: '否', idx: '0' };
                    that.apidata['assigned'] = false;
                    that.setTitle('add');
                    break;
                case 'custom':
                    that.setTitle('custom');
                    that.dom.find('.btnarea').html(that.api.html);
                    that.dom.find('.modelArea').addClass('hide');
                    if (that.api.del == 'view') {
                        that.dom.find('.deleteres').addClass('hide');
                    }
                    that.dom.find('.deleteres').on('click', function () {
                        that.event._dispatch('projectdata.deleteres', { condition: that.finalquery, currentSearchReqId: that.currentSearchReqId });
                    });
                    that.dom.find('.exportname').on('click', function () {
                        that.event._dispatch('projectdata.export', { condition: that.finalquery, currentSearchReqId: that.currentSearchReqId });
                    });
                    break;
            }
            this.dom.find('.icon-guanbi').on('click', function () {
                that.close();
            });
            this.dom.find('.addcustom').on('click', function () {
                that.exportData = {
                    url: '/aaa/v1/task/series/import',
                    data: {
                        taskId: that.api.id,
                        accessToken: window.localStorage.accessToken
                    }
                };
                that.dom.find('.file').click();
            });
            this.dom.find('.addImageID').on('click', function () {
                that.exportData = {
                    url: '/aaa/v1/task/series/import/seriesImageID',
                    data: {
                        taskId: that.api.id,
                        accessToken: window.localStorage.accessToken
                    }
                };
                that.dom.find('.file').click();
            });
            this.dom.find('.inputBox').on('change', function () {
                that.apidata['seriSubmitCount'] = ES.selctorDoc(this).val();
            });
            this.dom.find('.downmodel').on('click', function () {
                that.app.loading.show();
                setTimeout(function () {
                    that.app.loading.hide();
                }, 1000);
                var a = document.createElement("a");
                // var url = '/images/page/任务添加项目序列模板.xlsx';
                var url = ES.selctorDoc(this).attr('url');
                a.href = url;
                a.download = '模板.xlsx';
                a.click();
            });
            that.dom.find('.file').on('change', function () {
                console.log(that.api.id, 'that.api.id');
                var filePath = ES.selctorDoc("#file").val();
                var fileType = that.getFileType(filePath);
                if ("xls" != fileType && "xlsx" != fileType) {
                    ES.selctorDoc("#filechoose").val("");
                    that.app.alert.show({
                        title: '',
                        template: '<span style="font-size: 18px;margin-left:20px;">格式错误，上传失败。</span>',
                        close: false,
                        sure: function sure() {
                            that.app.alert.hide();
                        }
                    });
                } else {
                    that.app.loading.show();
                    $.ajaxFileUpload({
                        url: that.exportData.url, // that.app.domain+'/ccc/user/import',
                        secureuri: false,
                        dataType: "JSON",
                        async: false,
                        data: that.exportData.data,
                        type: 'post',
                        fileElementId: 'file',
                        success: function success(data, status, e) {
                            that.app.loading.hide();
                            var jsonArr = JSON.parse(data.match(/{.+}/g)[0]);
                            if (jsonArr.code == 0) {
                                console.log('success');
                                that.app.alert.show({
                                    title: '',
                                    template: '<span style="font-size: 18px;margin-left:20px;">成功导入' + jsonArr.data.successCount + '条，' + jsonArr.data.errorCount + '条不在此项目影像数据中或未被识别或重复</span>',
                                    sure: false,
                                    close: true,
                                    footer: true
                                });
                                that.event._dispatch('projectdata.datachange');
                            } else {
                                that.app.alert.show({
                                    title: '',
                                    template: '<span style="font-size: 18px;margin-left:20px;">上传失败</span>',
                                    sure: false,
                                    close: true,
                                    footer: true
                                });
                            }
                            that.close();
                            that.dom.find('.file').remove();
                            that.dom.find('.btnarea').append('<input class="file" type="file" id="file" name="file"/>');
                            // that.bindchangefile();
                        }
                    });
                }
            });
            this.dom.find('.addall').on('click', function () {
                that.event._dispatch('projectdata.addall', { query: that.finalquery, total: that.totalnum, currentSearchReqId: that.currentSearchReqId });
            });
            this.dom.find('.addpartbtn').on('click', function () {
                var addpart = __webpack_require__(761);
                that.addpart1 = that.app.loadModal(addpart, { adv: true }, { total: that.totalnum });
                that.addpart1.event._addEvent('addpart.submit', function (value) {
                    that.addpart1.close();
                    that.event._dispatch('projectdata.addall', { query: that.finalquery, total: that.totalnum, randomAddNum: value.number, currentSearchReqId: that.currentSearchReqId });
                });
            });

            this.dom.find('.searchbtn').on('click', function () {
                console.log(that.apidata, 'that.apidata');
                if (that.apidata.seriSubmitCount != 0) {
                    if (that.apidata.compareSymbol && !that.apidata.seriSubmitCount) {
                        that.dom.find('.seriSubmitCount').css({ border: '1px solid red' });
                        that.dom.find('.seriSubmitCount').after('<span class="required">请输入大于等于0的整数</span>');
                        return;
                    } else if (!/^[0-9]\d*$/.test(that.apidata.seriSubmitCount) && that.apidata.seriSubmitCount) {
                        that.dom.find('.seriSubmitCount').css({ border: '1px solid red' });
                        that.dom.find('.seriSubmitCount').after('<span class="required">请输入大于等于0的整数</span>');
                        return;
                    }
                }
                that.dom.find('.seriSubmitCount').css({ border: '1px solid #e8e8e8' });
                that.dom.find('.required').remove();
                that.apidata.page = 1;
                if (that.apidata.seriSubmitCount != 0) {
                    that.apidata.seriSubmitCount = that.apidata.seriSubmitCount ? parseInt(that.apidata.seriSubmitCount) : '';
                } else {
                    that.apidata.seriSubmitCount = 0;
                }
                that.event._dispatch('projectdata.search', { data: that.apidata });
            });
            this.render();
        }
    }, {
        key: 'render',
        value: function render() {
            var that = this;
            __webpack_require__.e/* require.ensure */(52/* duplicate */).then((function () {
                var dropdown = __webpack_require__(638);
                that.yymc = that.app.loadModule(dropdown, that.dom.find('.yymc'), {
                    className: 'xlk',
                    firstSelect: {
                        val: '医院名称',
                        idx: ''
                    },
                    data: [],
                    input: true
                });
                that.yymc.event._addEvent('option.click', function (value) {
                    that.apidata['hospitalCode'] = value.idx;
                    console.log(that.apidata, 'apidata');
                });
                that.yymc.event._addEvent('drop.input', function (value) {
                    setTimeout(function () {
                        that.event._dispatch('hospital.input', value.data);
                    }, 1500);
                });
                that.yymc.event._addEvent('dropDown.clear', function (value) {
                    that.apidata['hospitalCode'] = '';
                    that.event._dispatch('hospital.input', '');
                });
                that.rwxq = that.app.loadModule(dropdown, that.dom.find('.rwxq'), {
                    className: 'xlk',
                    firstSelect: { val: '', idx: '' },
                    data: [{ val: '是', idx: '1' }, { val: '否', idx: '0' }]
                });
                that.rwxq.event._addEvent('option.click', function (value) {
                    that.apidata['assigned'] = value.idx == 1 ? true : false;
                });
                that.rwxq.event._addEvent('dropDown.clear', function (value) {
                    that.apidata['assigned'] = '';
                });
                if (that.api.type === 'add') {
                    that.dom.find('.rwxq .option[data-idx="0"]').click();
                }
                that.compareSymbol = that.app.loadModule(dropdown, that.dom.find('.times'), {
                    className: 'kxlk',
                    firstSelect: { val: '', idx: '' },
                    data: [{ val: '大于', idx: '2' }, { val: '小于', idx: '3' }, { val: '等于', idx: '1' }]
                });
                that.compareSymbol.event._addEvent('option.click', function (value) {
                    that.apidata['compareSymbol'] = parseInt(value.idx);
                });
                that.compareSymbol.event._addEvent('dropDown.clear', function (value) {
                    that.apidata['compareSymbol'] = '';
                    that.apidata['seriSubmitCount'] = '';
                });
                that.exist = that.app.loadModule(dropdown, that.dom.find('.exist'), {
                    className: 'kxlk',
                    firstSelect: { val: '', idx: '' },
                    data: [{ val: '存在', idx: '1' }, { val: '不存在', idx: '0' }]
                });
                that.exist.event._addEvent('option.click', function (value) {
                    that.apidata['exist'] = value.idx == 1 ? true : false;
                });
                that.exist.event._addEvent('dropDown.clear', function (value) {
                    that.apidata['exist'] = '';
                });
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
            __webpack_require__.e/* require.ensure */(61).then((function () {
                var calendar = __webpack_require__(644);
                that.startTime = that.app.loadModule(calendar, that.dom.find('.timefilter'), { titleShow: false, defaultword: '查询检查时间段' });
                that.startTime.event._addEvent('times1.day', function (value) {
                    if (value.st) that.apidata.studyDateBegin = value.st + " 00:00:00";
                    if (value.et) that.apidata.studyDateEnd = value.et + " 23:59:59";
                    console.log(that.apidata);
                });
                that.startTime.event._addEvent('times.dele', function (value) {
                    if (value.dom.hasClass('day_left')) {
                        that.apidata.studyDateBegin = '';
                    } else {
                        that.apidata.studyDateEnd = '';
                    }
                    console.log(that.apidata);
                });
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
            __webpack_require__.e/* require.ensure */(57/* duplicate */).then((function () {
                var inputarea1 = __webpack_require__(751);
                that.inputarea = that.app.loadModule(inputarea1, that.dom.find('.usedtask'), {});
                that.inputarea.event._addEvent('inputarea.input', function (value) {
                    that.event._dispatch('projectdata.taskinput', value);
                });
                that.inputarea.event._addEvent('inputarea.createitem', function (value) {
                    that.apidata.taskIdList.push(parseInt(value));
                });
                that.inputarea.event._addEvent('inputarea.deleteitem', function (value) {
                    that.apidata.taskIdList = that.apidata.taskIdList.filter(function (item) {
                        return item !== parseInt(value);
                    });
                });
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
        }
    }, {
        key: 'tasklist',
        value: function tasklist(value) {
            var that = this;
            value.forEach(function (val, idx) {
                val.id = val.taskId;
                val.name = val.taskName;
            });
            that.inputarea.setlist(value);
        }
    }, {
        key: 'resetxlk',
        value: function resetxlk(value) {
            var that = this;
            that.yymc.renderHtml(value);
        }
        //判断文件类型

    }, {
        key: 'getFileType',
        value: function getFileType(filePath) {
            var startIndex = filePath.lastIndexOf(".");
            if (startIndex != -1) return filePath.substring(startIndex + 1, filePath.length).toLowerCase();else return "";
        }
    }, {
        key: 'setTitle',
        value: function setTitle(type) {
            var obj = {};
            var that = this;
            that.obj = {};
            switch (type) {
                case 'add':
                    that.obj['icon'] = {
                        "hospitalCode": { name: '<span>医院名称</span>', type: 'text', code: 'checkid', w: '12%', ww: '12%', n: "40" },
                        "bodyPart": { name: '<span>部位</span>', type: 'text', code: 'pid', w: '3%', ww: '3%' },
                        "modality": { name: '<span>检查机型</span>', type: 'text', code: 'pname', w: '3%', ww: '3%' },
                        "studyDate": { name: '<span>检查时间</span>', type: 'text', code: 'psex', w: '6%', ww: '6%' },
                        "studyInstanceUID": { name: '<span>检查号</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "seriesInstanceUID": { name: '<span>序列号</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "assigned": { name: '<span>是否曾被任务选取</span>', type: 'text', code: 'age', w: '6%', ww: '6%' },
                        "tasksubmit": { name: '<span style="line-height: 20px;">&nbsp;曾存在任务<br>（已提交次数：废片次数）</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "prosubmit": { name: '<span style="line-height: 20px;">项目下被提交次<br>数：废片次数</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "keyword": { name: '<span>关键字</span>', type: 'text', code: 'age', w: '12%', ww: '12%' },
                        "finding": { name: '<span>检查所见</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "conclusion": { name: '<span>诊断</span>', type: 'text', code: 'age', w: '10%', ww: '10%' }
                    };
                    break;
                case 'custom':
                    that.obj['icon'] = {
                        "hospitalCode": { name: '<span>医院名称</span>', type: 'text', code: 'checkid', w: '8%', ww: '8%', n: "40" },
                        "bodyPart": { name: '<span>部位</span>', type: 'text', code: 'pid', w: '4%', ww: '4%' },
                        "modality": { name: '<span>检查机型</span>', type: 'text', code: 'pname', w: '5%', ww: '5%' },
                        "studyDate": { name: '<span>检查时间</span>', type: 'text', code: 'psex', w: '6%', ww: '6%' },
                        "studyInstanceUID": { name: '<span>检查号</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "seriesInstanceUID": { name: '<span>序列号</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "patientAge": { name: '<span data-i18n="handler" data-name="状态">年龄</span>', type: 'text', code: 'handler', w: '3%', ww: '3%' },
                        "patientSex": { name: '<span data-i18n="action" data-name="操作">性别</span>', type: 'text', code: 'action', w: '3%', ww: '3%' },
                        "importDate": { name: '<span data-i18n="action" data-name="操作">上传时间</span>', type: 'text', code: 'action', w: '6%', ww: '6%' },
                        "tasksubmit": { name: '<span style="line-height: 20px;">&nbsp;曾存在任务<br>（已提交次数：废片次数）</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "prosubmit": { name: '<span style="line-height: 20px;">项目下被提交次<br>数：废片次数</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "assigned": { name: '<span>是否曾被任务选取</span>', type: 'text', code: 'age', w: '7%', ww: '7%' },
                        "keyword": { name: '<span>关键字</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "finding": { name: '<span>检查所见</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "conclusion": { name: '<span>诊断</span>', type: 'text', code: 'age', w: '8%', ww: '8%' }
                    };
                    break;
                case 'view':
                    that.obj['icon'] = {
                        "hospitalCode": { name: '<span>医院名称</span>', type: 'text', code: 'checkid', w: '12%', ww: '12%', n: "40" },
                        "bodyPart": { name: '<span>部位</span>', type: 'text', code: 'pid', w: '7%', ww: '7%' },
                        "modality": { name: '<span>检查机型</span>', type: 'text', code: 'pname', w: '7%', ww: '7%' },
                        "studyDate": { name: '<span>检查时间</span>', type: 'text', code: 'psex', w: '8%', ww: '8%' },
                        "studyInstanceUID": { name: '<span>检查号</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "seriesInstanceUID": { name: '<span>序列号</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "imageIdStr": { name: '<span>层数</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "prosubmit": { name: '<span style="line-height: 20px;">项目下被提交次<br>数：废片次数</span>', type: 'text', code: 'age', w: '6%', ww: '6%' },
                        "keyword": { name: '<span>关键字</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "finding": { name: '<span>检查所见</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "conclusion": { name: '<span>诊断</span>', type: 'text', code: 'age', w: '10%', ww: '10%' }
                    };
                    break;
            }
            that.obj['type'] = 'center';
            that.obj['minwidth'] = 1900;
            that.obj['tablewidth'] = ES.selctorDoc('.projectdata').box().clientWidth - 60;
            __webpack_require__.e/* require.ensure */(53/* duplicate */).then((function () {
                var cont_table = __webpack_require__(640);
                that.table = that.app.loadModule(cont_table, that.dom.find('.projecttable'), {
                    id: 'biaozhutable',
                    header: that.obj
                });
                that.table.event._addEvent('table.pagenumber', function (value) {
                    that.apidata.page = parseInt(value);
                    that.table.changenum(that.apidata.page);
                    that.event._dispatch('prodata.pagenumber', { data: that.apidata });
                });
                that.table.event._addEvent('table.pagesize', function (value) {
                    that.apidata.pageSize = value.num;
                    that.apidata.page = 1;
                    that.event._dispatch('prodata.pagesize', { data: that.apidata });
                });
                that.initscrollmenu();
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
        }
    }, {
        key: 'setMain',
        value: function setMain(value, bool) {
            var that = this;
            that.finalquery = that.apidata;
            that.currentSearchReqId = value.data.currentSearchReqId;
            var data2 = [];
            if (value.data.list && value.data.list.length > 0) {
                that.totalnum = value.data.total;
                value.data.list.forEach(function (val, idx) {
                    for (var i in val) {
                        val[i] = val[i] == null ? '' : val[i];
                    }
                    for (var _i in that.obj.icon) {
                        val[_i] = val[_i] ? val[_i] : '';
                    }
                    var prosub = 0;
                    var prodiscurd = 0;
                    that.bodypart.forEach(function (a, b) {
                        if (a.idx == val.bodyPart) {
                            val.bodyPart = a.val;
                        }
                    });
                    Tool.configxlkformat(that.app.constmap['MODALITY']).forEach(function (a, b) {
                        if (a.idx == val.modality) {
                            val.modality = a.val;
                        }
                    });
                    if (val.seriesAnnoStatusHistory) {
                        val.tasksubmit = '';
                        val.seriesAnnoStatusHistory.forEach(function (val1, idx) {
                            val.tasksubmit += val1.taskName + '(' + (val1.submitCount + val1.discardCount) + ':' + val1.discardCount + ')<br>';
                            prosub += val1.submitCount + val1.discardCount;
                            prodiscurd += val1.discardCount;
                        });
                        val.prosubmit = prosub + ':' + prodiscurd;
                    }
                    switch (val.patientSex) {
                        case 'M':
                            val.patientSex = '男';
                            break;
                        case 'F':
                            val.patientSex = '女';
                            break;
                        default:
                            val.patientSex = '';
                    }
                    if (val.createDate) val.createDate = Tool.time(val.createDate, 'yyyy-mm-dd');
                    if (val.importDate) val.importDate = Tool.time(val.importDate, 'yyyy-mm-dd');
                    if (val.studyDate) val.studyDate = Tool.time(val.studyDate, 'yyyy-mm-dd');
                    if (val.patientAge) val.patientAge = Math.floor(val.patientAge / 12);
                    val.assigned = val.assigned == false ? '否' : '是';
                    val.id = val.taskId;
                });
                that.table.setData(value.data.list);
                that.dom.find('.addall').removeClass('hide');
                that.dom.find('.addpartbtn').removeClass('hide');
            } else {
                that.totalnum = 0;
                that.table.noData();
                that.dom.find('.addall').addClass('hide');
                that.dom.find('.addpartbtn').addClass('hide');
            }
            if (bool) {
                that.table.getTotal(value.data.pages, 2, value.data.total);
            }
            that.initscroll_vertical();
        }
    }, {
        key: 'initscrollmenu',
        value: function initscrollmenu() {
            if (this.myScroll) {
                this.myScroll.refresh();
                return;
            }
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            this.dom.find('.maintable').attr('id', rid);
            this.myScroll = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                scrollX: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }, {
        key: 'initscroll_vertical',
        value: function initscroll_vertical() {
            if (this.myScroll1) {
                this.myScroll1.refresh();
                return;
            }
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            this.dom.find('.projectdata').attr('id', rid);
            this.myScroll1 = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }]);

    return projectdata;
}(Interstellar.modalBase);

//原型链一定要有的


module.exports = projectdata;

/***/ }),

/***/ 780:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(781);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./projectdata.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./projectdata.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 781:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".projectdata {\n  box-sizing: border-box;\n  background: #fff;\n  border-radius: 4px;\n  font-family: \"Microsoft YaHei\";\n  font-size: 16px;\n  width: 1000px;\n  min-height: 300px;\n  height: 600px;\n  margin-left: -500px;\n  margin-top: -300px;\n  position: relative;\n  overflow: hidden;\n}\n.projectdata .title {\n  font-size: 20px;\n}\n.projectdata .icon-guanbi {\n  position: absolute;\n  right: 20px;\n  top: 20px;\n  cursor: pointer;\n}\n.projectdata .filterarea {\n  margin: 10px 0 20px 20px;\n  position: relative;\n}\n.projectdata .filterarea > div {\n  display: inline-block;\n  position: relative;\n}\n.projectdata .filterarea .rwxq {\n  display: inline-block;\n}\n.projectdata .filterarea .showData {\n  width: 130px;\n  height: 30px;\n  line-height: 30px;\n  border-radius: 4px;\n  font-size: 12px;\n}\n.projectdata .filterarea .xlk {\n  width: 160px;\n  height: 30px;\n  line-height: 30px;\n  font-size: 12px;\n  margin: 0 10px;\n}\n.projectdata .filterarea .xlk input {\n  width: 93%;\n}\n.projectdata .filterarea .submittimes {\n  width: 600px;\n  margin-top: 10px;\n}\n.projectdata .filterarea .submittimes > div {\n  display: inline-block;\n}\n.projectdata .filterarea .submittimes > input {\n  border: 1px solid #e8e8e8;\n  border-radius: 4px;\n  height: 30px;\n}\n.projectdata .filterarea .usecondition {\n  margin-top: 10px;\n}\n.projectdata .filterarea .usecondition > div {\n  display: inline-block;\n}\n.projectdata .filterarea .usecondition .usedtask {\n  vertical-align: top;\n}\n.projectdata .projectmain {\n  padding: 30px 0 20px 10px;\n  font-size: 14px;\n}\n.projectdata .projectmain .searchbtn {\n  width: 100px;\n  height: 30px;\n  border: 1px solid #4c9fa9;\n  line-height: 30px;\n  color: #4c9fa9;\n  position: absolute;\n  top: 0;\n  right: 40px;\n}\n.projectdata .projectmain .bzmc {\n  border-radius: 4px;\n  width: 170px;\n  border: 1px solid #e8e8e8;\n  height: 30px;\n}\n.projectdata .projectmain .projecttable {\n  clear: both;\n  overflow: hidden;\n  position: relative;\n}\n.projectdata .projectmain > span {\n  font-size: 16px;\n}\n.projectdata .projectmain .btnarea {\n  height: 30px;\n  margin: 20px 0;\n  margin-right: 20px;\n  text-align: right;\n}\n.projectdata .projectmain .btnarea .biaozhubtn {\n  padding: 0 10px;\n  height: 30px;\n  line-height: 30px;\n  background: #4c9fa9;\n  color: #fff;\n  margin-right: 20px;\n}\n.projectdata .projectmain .btnarea .cancel {\n  background: #fff;\n  border: 1px solid #4c9fa9;\n  color: #4c9fa9;\n}\n.projectdata .projectmain .btnarea .file {\n  position: fixed;\n  left: 4000px;\n  top: 3000px;\n}\n.projectdata .projectmain .modelArea {\n  position: absolute;\n  right: 30px;\n}\n.projectdata .projectmain .modelArea .downmodel {\n  color: #4c9fa9;\n  text-decoration: underline;\n  margin-left: 20px;\n}\n.projectdata .projectmain .viewdelete {\n  text-align: right;\n  margin-right: 20px;\n}\n.projectdata .projectmain .viewdelete a {\n  height: 30px;\n  line-height: 30px;\n  background: #4c9fa9;\n  color: #fff;\n  padding: 0 20px;\n}\n.projectdata .w145 {\n  width: 145px;\n}\n.projectdata .kxlk {\n  width: 100px;\n  height: 30px;\n  line-height: 30px;\n}\n.projectdata .kxlk input {\n  width: 89% !important;\n}\n", ""]);

// exports


/***/ }),

/***/ 782:
/***/ (function(module, exports) {

module.exports = "<div class=\"modal projectdata\"> <div class=projectmain> <div class=title>项目序列池</div> <i class=\"iconfont icon-guanbi\"></i> <div class=filterarea> <div class=yymc></div> <div class=timefilter></div> <div class=isselected>是否曾被任务选取：<div class=rwxq></div></div> <br> <div class=submittimes> <span class=w145>项目下序列被提交次数</span> <div class=times></div> <input type=text class=\"seriSubmitCount inputBox\" api=seriSubmitCount /> </div> <br> <div class=usecondition> <span class=w145>序列使用情况</span> <div class=exist></div> <div class=usedtask></div> </div> <a class=\"searchbtn biaozhubtn\">查询</a> </div> <div class=\"viewdelete hide\"> <a class=\"biaozhubtn deleteresult hide\">一键删除查询结果中序列</a> <a class=\"biaozhubtn exportresult\">导出结果序列名</a> </div> <div class=projecttable> </div> <div class=btnarea> <a class=\"biaozhubtn addall\">一键添加查询结果</a> <a class=\"biaozhubtn addpartbtn\">从查询结果中选取部分</a> <a class=\"biaozhubtn addcustom\">序列号导入</a> <a class=\"biaozhubtn addImageID\">imageID导入</a> <input class=file type=file id=file name=file /> </div> <div class=modelArea> <a class=\"downmodel seriesDown\" url=/images/page/任务添加项目序列模板.xlsx>序列号导入模板</a> <a class=\"downmodel imageidDown\" url=/images/page/imageID.xlsx>imageID导入模板</a> </div> </div> </div> ";

/***/ }),

/***/ 832:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".createtask2 .btnline span .disabled {\n  background: #ccc;\n  cursor: not-allowed;\n  border: 1px solid #ccc;\n  color: #fff;\n}\n.createtask2 .btnline {\n  margin: 40px 0px 20px 70px;\n}\n.createtask2 .btnline > span {\n  width: 457px;\n}\n.createtask2 .btnline .biaozhubtn {\n  color: #4c9fa9;\n  border: 1px solid #4c9fa9;\n  height: 35px;\n  line-height: 35px;\n  padding: 0 20px;\n  margin-right: 10px;\n}\n.createtask2 .btnline .yyr {\n  text-decoration: underline;\n  color: #4c9fa9;\n}\n.createtask2 .btnline .yyrarea {\n  display: inline-block;\n}\n.createtask2 .btnline > div {\n  margin: 70px 0;\n  width: 457px;\n}\n.createtask2 .btnline .donetask {\n  background: #4c9fa9;\n  color: #fff;\n  position: absolute;\n  top: 0;\n  right: 30px;\n}\n.createtask2 .choosePart {\n  margin-left: 70px;\n}\n.createtask2 .choosePart .exportArea .export {\n  color: #4c9fa9;\n  border: 1px solid #4c9fa9;\n  height: 35px;\n  line-height: 35px;\n  padding: 0 20px;\n  margin: 20px 0 0 0px;\n}\n.createtask2 .choosePart .exportArea .viewexported {\n  text-decoration: underline;\n  color: #4c9fa9;\n}\n", ""]);

// exports


/***/ }),

/***/ 879:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(880);

var exportdata = function (_Interstellar$modalBa) {
  _inherits(exportdata, _Interstellar$modalBa);

  function exportdata(app, dom, value, addMode) {
    _classCallCheck(this, exportdata);

    var _this = _possibleConstructorReturn(this, (exportdata.__proto__ || Object.getPrototypeOf(exportdata)).call(this, app, dom, value, addMode));

    _this.html = __webpack_require__(882);
    _this.name = 'exportdata';
    _this.flag = true;
    _this.code = '';
    _this.data = value;
    _this.apiData = { transferNii: false };
    return _this;
  }

  _createClass(exportdata, [{
    key: 'complete',
    value: function complete() {
      var that = this;
      this.dom.find('.icon-guanbi').on('click', function () {
        that.close();
      });
      this.dom.find('.cancel').on('click', function () {
        that.close();
      });
      this.dom.find('.filechoose').on('click', function () {
        that.dom.find('.file').click();
      });
      that.dom.find('.file').on('change', function () {
        var filePath = ES.selctorDoc("#file1").val();
        that.dom.find('.filename').val(filePath);
      });
      this.dom.find('.upload').on('click', function () {
        that.dom.find('.inputLine').dom.forEach(function (val, idx) {
          val.find('.' + val.attr('redlabel')).removeClass('redborder');
          val.find('.required').remove();
          if (Tool.checkForm(ES.selctorDoc(val).dom, 'red') !== '') {
            val.find('.' + val.attr('redlabel')).addClass('redborder');
            val.find('.' + val.attr('redlabel')).after('<span class="required">' + Tool.checkForm(ES.selctorDoc(val).dom, 'red') + '</span>');
          }
        });
        if (that.dom.find('.redborder').dom && that.dom.find('.redborder').dom.some(function (item) {
          return item.box().clientHeight !== 0;
        })) {
          return false;
        } else {
          that.event._dispatch('uploadalgdata.upload', { data: that.apiData });
        }
      });
      this.render();
    }
  }, {
    key: 'render',
    value: function render(value) {}
  }]);

  return exportdata;
}(Interstellar.modalBase);

//原型链一定要有的


module.exports = exportdata;

/***/ }),

/***/ 880:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(881);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./exportdata.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./exportdata.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 881:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".exportdata {\n  box-sizing: border-box;\n  background: #fff;\n  border-radius: 4px;\n  font-family: \"Microsoft YaHei\";\n  font-size: 16px;\n  width: 540px;\n  height: 280px;\n  margin-left: -220px;\n  position: relative;\n}\n.exportdata .toparea .title {\n  margin: 20px;\n}\n.exportdata .toparea .icon-guanbi {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  cursor: pointer;\n}\n.exportdata .catelog {\n  position: relative;\n  margin-top: 20px;\n}\n.exportdata .catelog .inputLine {\n  margin-bottom: 20px;\n}\n.exportdata .catelog .inputLine > .names {\n  text-align: left;\n  margin-left: 40px;\n}\n.exportdata .catelog .inputLine .check-box {\n  margin: 10px 10px 0 50px;\n}\n.exportdata .catelog input {\n  width: 240px;\n  padding-left: 10px;\n  height: 40px;\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n}\n.exportdata .catelog .required {\n  left: 230px;\n  top: 50px;\n  font-size: 14px;\n}\n.exportdata .catelog .type,\n.exportdata .catelog .toolType {\n  display: inline-block;\n}\n.exportdata .catelog .xlk {\n  width: 180px;\n  height: 40px;\n  line-height: 40px;\n  margin-top: 10px;\n}\n.exportdata .catelog .filechoose {\n  padding: 0 20px;\n  background: #4c9fa9;\n  color: #fff;\n  height: 40px;\n  line-height: 40px;\n}\n.exportdata .catelog .file {\n  position: fixed;\n  top: 2000px;\n  left: 3000px;\n}\n.exportdata .catelog .check-box {\n  margin-left: 40px;\n}\n.exportdata .btnarea {\n  text-align: center;\n  margin-top: 70px;\n}\n.exportdata .btnarea .biaozhubtn {\n  width: 120px;\n  height: 40px;\n  line-height: 40px;\n  text-align: center;\n}\n.exportdata .btnarea .upload {\n  background: #4c9fa9;\n  color: #fff;\n  margin-right: 20px;\n}\n.exportdata .btnarea .cancel {\n  border: 1px solid #4c9fa9;\n}\n", ""]);

// exports


/***/ }),

/***/ 882:
/***/ (function(module, exports) {

module.exports = "<div class=\"exportdata modal\"> <div class=toparea> <span class=title>导入指定标注序列</span> <i class=\"iconfont icon-guanbi\"></i> </div> <div class=catelog> <div class=inputLine redlabel=inputBox> <span class=names><label class=redstar>*</label>指定上传文件：</span> <input class=\"filename inputBox\" type=text check=empty readonly=readonly /> <a class=\"biaozhubtn filechoose\">浏览</a> <input class=file type=file id=file1 name=file /> </div> </div> <div class=btnarea> <a class=\"upload biaozhubtn\">导入</a> <a class=\"cancel biaozhubtn\">取消</a> </div> </div> ";

/***/ }),

/***/ 883:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(884);

var listshow = function (_Interstellar$modalBa) {
  _inherits(listshow, _Interstellar$modalBa);

  function listshow(app, value, api, addMode) {
    _classCallCheck(this, listshow);

    var _this = _possibleConstructorReturn(this, (listshow.__proto__ || Object.getPrototypeOf(listshow)).call(this, app, value, api, addMode));

    _this.html = __webpack_require__(886);
    _this.name = "listshow";
    return _this;
  }

  _createClass(listshow, [{
    key: "complete",
    value: function complete() {
      var that = this;
      console.log(this.api);
      this.apidata = {};
      this.dom.find('.icon-guanbi').on('click', function () {
        that.close();
      });
      this.dom.find('.upload').on('click', function () {
        that.event._dispatch('listshow.sure');
      });
      this.dom.find('.cancel').on('click', function () {
        that.close();
        that.event._dispatch('listshow.cancel');
      });

      that.render();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      this.dom.find('.modal-title').html(this.api.title);
      var width = this.api.headerconfig.tablewidth + 60;
      this.dom.find('.listshow').css({ 'width': width, 'margin-left': -(width / 2) });
      __webpack_require__.e/* require.ensure */(53/* duplicate */).then((function () {
        var cont_table = __webpack_require__(640);
        _this2.table = _this2.app.loadModule(cont_table, _this2.dom.find('.list'), {
          id: 'biaozhutable',
          header: _this2.api.headerconfig
        });
        _this2.table.event._addEvent('table.pagenumber', function (value) {
          _this2.apidata.page = parseInt(value);
          _this2.apidata.refreshPage = false;
          _this2.table.changenum(_this2.apidata.page);
          _this2.event._dispatch('listshow.change', _this2.apidata);
        });
        _this2.table.event._addEvent('table.pagesize', function (value) {
          _this2.apidata.pageSize = value.num;
          _this2.apidata.page = 1;
          _this2.apidata.refreshPage = true;
          _this2.event._dispatch('listshow.change', _this2.apidata);
        });
        _this2.table.event._addEvent('table.action', function (value) {
          _this2.event._dispatch('listshow.action', value);
        });
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
      this.initscroll();
    }
  }, {
    key: "setMain",
    value: function setMain(value, bool) {
      var _this3 = this;

      if (value.data.list.length > 0) {
        value.data.list.forEach(function (val, i) {
          for (var _i in val) {
            val[_i] = val[_i] == null ? '' : val[_i];
          }
          if (val.importTime) val.importTime = Tool.time(val.importTime, 'yyyy-mm-dd');
          val.action = _this3.api.headerconfig.operation;
        });
        this.table.setData(value.data.list);
      } else {
        this.table.noData();
      }
      if (bool) {
        this.table.getTotal(value.data.pages, 2, value.data.total);
      }
      this.initscroll();
    }
  }, {
    key: "initscroll",
    value: function initscroll() {
      if (this.myScroll) {
        this.myScroll.refresh();
        return;
      }
      var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
      this.dom.find('.modal-content').attr('id', rid);
      this.myScroll = new IScroll('#' + rid, {
        scrollbars: true,
        mouseWheel: true,
        interactiveScrollbars: true,
        hideScrollbar: false,
        vScrollbar: true,
        shrinkScrollbars: 'scale',
        fadeScrollbars: false,
        disableMouse: true,
        disablePointer: true
      });
    }
  }]);

  return listshow;
}(Interstellar.modalBase);
//原型链一定要有的


module.exports = listshow;

/***/ }),

/***/ 884:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(885);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./listshow.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./listshow.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 885:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".listshow {\n  box-sizing: border-box;\n  background: #fff;\n  border-radius: 4px;\n  font-family: \"Microsoft YaHei\";\n  font-size: 16px;\n  width: 600px;\n  margin-left: -300px;\n  height: 500px;\n}\n.listshow .modal-header {\n  line-height: unset;\n}\n.listshow .modal-header .modal-title {\n  font-size: 16px;\n  letter-spacing: 0;\n}\n.listshow .icon-guanbi {\n  position: absolute;\n  right: 20px;\n  top: 20px;\n  cursor: pointer;\n}\n.listshow .modal-content {\n  overflow: hidden;\n  height: 375px;\n  margin: 0 20px;\n  position: relative;\n}\n.listshow .modal-content .list {\n  line-height: 40px;\n}\n.listshow .modal-content .list .left {\n  width: 40%;\n}\n.listshow .modal-footer .biaozhubtn {\n  height: 40px;\n  line-height: 40px;\n  padding: 0 20px;\n}\n.listshow .modal-footer .upload {\n  background: #4c9fa9;\n  color: #fff;\n  margin-right: 20px;\n}\n.listshow .modal-footer .cancel {\n  border: 1px solid #4c9fa9;\n  color: #4c9fa9;\n}\n", ""]);

// exports


/***/ }),

/***/ 886:
/***/ (function(module, exports) {

module.exports = "<div class=\"modal listshow\"> <div class=modal-header> <p class=modal-title></p> <i class=\"icon-guanbi iconfont\"></i> </div> <div class=modal-content> <div class=list> </div> </div> </div> ";

/***/ })

});
//# sourceMappingURL=95c9c93d6ad4bcda7b2f.25.min.js.map