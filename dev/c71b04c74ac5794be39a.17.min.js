webpackJsonp([17],{

/***/ 106:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var drapCanvasM = function (_MarkModel) {
    _inherits(drapCanvasM, _MarkModel);

    function drapCanvasM(app) {
        _classCallCheck(this, drapCanvasM);

        var _this = _possibleConstructorReturn(this, (drapCanvasM.__proto__ || Object.getPrototypeOf(drapCanvasM)).call(this, app));

        _this._orginImgSizes = {};
        return _this;
    }

    _createClass(drapCanvasM, [{
        key: "makeJsonToBackend",
        value: function makeJsonToBackend(value) {
            var arr = [];
            var num = 0;
            var frist = {};
            var str = JSON.stringify(value);
            arr = null;
            return str;
        }
    }, {
        key: "translateDataReslut",
        value: function translateDataReslut(value, sId, needbian) {
            value.map(function (item) {
                console.log(item);
                if (typeof item.result == "string") {
                    var res = void 0;
                    try {
                        res = JSON.parse(item.result);
                    } catch (err) {
                        res = item.result;
                    }
                    item.uuid = item.backId = item.id;
                    item.setDataType = "number";
                    item.sId = sId ? sId : null;
                    switch (item.imageAnnotationToolType) {
                        case "LINE":
                            item.type = 'length';
                            if (needbian) {
                                res.point1.x = res.point1.x / 2;
                                res.point1.y = res.point1.y / 2;
                                res.point2.x = res.point2.x / 2;
                                res.point2.y = res.point2.y / 2;
                            }
                            item.result = res;
                            item.layerNumber = res.point1.z;
                            item.tooltype = 'length';
                            item.toolType = {
                                id: item.imageAnnotationToolId,
                                imageAnnotation: item.imageAnnotationType,
                                imageAnnotationId: item.imageAnnotationId,
                                type: item.imageAnnotationToolType
                            };
                            break;
                        case "FREEHANDLINE":
                            item.type = 'freehandline';
                            item.path = {};
                            item.path = res;
                            item.layerNumber = 1;
                            item.tooltype = 'freehandline';
                            item.toolType = {
                                id: item.imageAnnotationToolId,
                                imageAnnotation: item.imageAnnotationType,
                                imageAnnotationId: item.imageAnnotationId,
                                type: item.imageAnnotationToolType
                            };
                            break;
                        case "FREEHAND":
                            item.type = 'freehand';
                            item.path = {};
                            res.map(function (p) {
                                item.path[p.x + '_' + p.y] = p;
                            });
                            item.tooltype = 'freehand';
                            item.layerNumber = 1;
                            item.toolType = {
                                id: item.imageAnnotationToolId,
                                imageAnnotation: item.imageAnnotationType,
                                imageAnnotationId: item.imageAnnotationId,
                                type: item.imageAnnotationToolType
                            };
                            break;
                        case "QSELECT":
                            item.type = 'quickselect';
                            item.result = item.result;
                            item.tooltype = 'quickselect';
                            item.toolType = {
                                id: item.imageAnnotationToolId,
                                imageAnnotation: item.imageAnnotationType,
                                imageAnnotationId: item.imageAnnotationId,
                                type: item.imageAnnotationToolType
                            };
                            break;
                        case "REGION_PAINT":
                            item.type = 'regionpaint';
                            item.result = item.result;
                            item.tooltype = 'regionpaint';
                            item.toolType = {
                                id: item.imageAnnotationToolId,
                                imageAnnotation: item.imageAnnotationType,
                                imageAnnotationId: item.imageAnnotationId,
                                type: item.imageAnnotationToolType
                            };
                            break;
                    }
                }
            });
        }
    }, {
        key: "changeItemDataToBackendCheck",
        value: function changeItemDataToBackendCheck(value) {
            var postData = [];
            if ((typeof value === "undefined" ? "undefined" : _typeof(value)) == 'object' && (value.length != null || value.length != undefined)) {
                value.map(function (item) {
                    postData.push({
                        componentId: item.formComponentId,
                        result: item.result
                    });
                });
            } else {
                for (var i in value) {
                    if (value[i].formComponentId != 'check_reslut') {
                        var data = String(value[i].result).split(',').filter(function (item) {
                            return item || item == '0';
                        }).toString();
                        postData.push({
                            componentId: value[i].formComponentId,
                            result: data
                        });
                    }
                }
            }
            return postData;
        }
    }, {
        key: "changeItemDataToBackend",
        value: function changeItemDataToBackend(id, value) {
            var postData = {};
            postData.id = id;
            postData.annotationItemResultList = [];
            for (var i in value) {
                var data = value[i].result;
                if (String(value[i].result).lastIndexOf(',') != -1) {
                    data = value[i].result.split(',').filter(function (item) {
                        return item;
                    }).toString();
                }
                postData.annotationItemResultList.push({
                    annotationItemId: i,
                    formComponentId: value[i].formComponentId,
                    result: data
                });
            }
            return postData;
        }
        //转变后端数据格式

    }, {
        key: "translateBackData",
        value: function translateBackData(value, beiyong) {
            var databack = value.data;
            databack.annotationItemResultList = databack.annotationItemResultList ? databack.annotationItemResultList : [];
            databack.imageAnnotationResultList = databack.imageAnnotationResultList ? databack.imageAnnotationResultList : [];
            databack.doctorNidduleAll = {};
            var check_doctordone = this.check_data_deal(databack);
            //console.log(databack.annoResultList)
            var tempid = {};
            databack.annoResultList.map(function (item) {
                if (!databack.doctorNidduleAll[item.doctorName]) {
                    databack.doctorNidduleAll[item.doctorName] = item.annotationItemResultList;
                }
                item.imageAnnotationResultList.map(function (res) {
                    res.doctorName = item.doctorName;
                    res.id = res.iarClusterId + '_' + res.annoIarId; //Tool.guid(item.doctorName).substr(0, 8)
                    res.annotationItemResultList.map(function (item1) {
                        item1.id = item1.formComponentId;
                        item1.annotationItemId = item1.formComponentId;
                    });
                    res.orginannotationItemResultList = JSON.parse(JSON.stringify(res.annotationItemResultList));
                    res.annotationItemResultList = check_doctordone[res.iarClusterId] ? check_doctordone[res.iarClusterId].annotationItemResultList : [];
                    res.auditResult = check_doctordone[res.iarClusterId] ? check_doctordone[res.iarClusterId].auditResult : null;
                    databack.auditResult.imageAnnotationResultList.map(function (item3) {
                        if (res.iarClusterId == item3.iarClusterId) {
                            res.imageRemark = item3.imageRemark;
                        }
                    });
                });
                databack.imageAnnotationResultList = databack.imageAnnotationResultList.concat(item.imageAnnotationResultList);
                item.annotationItemResultList.map(function (item2) {
                    if (!tempid[item2.formComponentId]) {

                        tempid[item2.formComponentId] = item2.result.split(',').sort(function (a, b) {
                            return a - b;
                        }).toString();
                    } else {
                        if (tempid[item2.formComponentId] != null) {
                            if (tempid[item2.formComponentId] != item2.result.split(',').sort(function (a, b) {
                                return a - b;
                            }).toString()) {
                                tempid[item2.formComponentId] = null;
                            }
                        }
                    }
                });
            });
            databack.imageAnnotationResultList = databack.imageAnnotationResultList.sort(function (a, b) {
                return a.iarClusterId - b.iarClusterId;
            });
            var checkdoctorscore = {};
            databack.auditResult.annotationItemResultList.map(function (item) {
                checkdoctorscore[item.formComponentId] = item.result;
                //item.annotationItemId = item.formComponentId
            });

            //databack.annotationItemResultList = databack.auditResult.annotationItemResultList
            beiyong.map(function (item3) {
                var rest = "";
                if (checkdoctorscore[item3.componentId]) {
                    rest = checkdoctorscore[item3.componentId];
                }
                if (tempid[item3.formComponentId] && !rest) {
                    rest = tempid[item3.formComponentId];
                }
                databack.annotationItemResultList.push({
                    formComponentId: item3.componentId,
                    annotationItemId: item3.componentId,
                    id: item3.componentId,
                    result: rest
                });
            });
            console.log(databack.annotationItemResultList, '=====================', tempid, value);
        }
    }, {
        key: "check_data_deal",
        value: function check_data_deal(value) {
            var tempData = {};
            //console.log(value.auditResult)
            value.auditResult.imageAnnotationResultList.map(function (item) {
                if (!tempData[item.iarClusterId]) {
                    //console.log(item.annotationItemResultList,'==============')
                    if (item.annotationItemResultList) {
                        item.annotationItemResultList.map(function (res) {
                            res.id = res.formComponentId;
                            res.annotationItemId = res.formComponentId;
                        });

                        var auditResult = "";
                        if (item.auditResult == false) {
                            auditResult = "1";
                        }
                        if (item.auditResult == true) {
                            auditResult = "0";
                        }
                        item.annotationItemResultList.splice(0, 0, {
                            formComponentId: 'check_reslut',
                            result: auditResult,
                            id: 'check_reslut',
                            annotationItemId: 'check_reslut'
                        });
                    }
                    tempData[item.iarClusterId] = item;
                }
            });
            return tempData;
        }
    }, {
        key: "returnSelectComponent",
        value: function returnSelectComponent() {
            return {
                componentCode: "check_reslut",
                componentData: '[{"text":"对","code":"0"},{"text":"错","code":"1"}]',
                componentId: "check_reslut",
                componentName: "正确与否",
                componentParameter: '{"isdefault ":false}',
                componentType: "select",
                optional: true,
                sequence: 0
            };
        }
    }, {
        key: "orginImgSizes",
        set: function set(value) {
            this.setPrivate(this, { _orginImgSizes: value });
        }
    }]);

    return drapCanvasM;
}(MarkModel);

module.exports = drapCanvasM;

/***/ }),

/***/ 12:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MarkModel = function (_Interstellar$modelBa) {
    _inherits(MarkModel, _Interstellar$modelBa);

    function MarkModel(app) {
        _classCallCheck(this, MarkModel);

        //taskInfo任务详情
        //projectInfo项目详情
        //cachelist缓存列表

        //series_result_id 标注列表的id和对应的序列id

        //seriesInfo序列详情
        //seriesResult这个序列下面的标注结果

        //loadData根据用户标注了多少钙化灶的信息，然后进行加载。整体加载完了，关闭弹框

        //taskInfo里面会记录他隶属的项目是否按照检查号标注
        var _this = _possibleConstructorReturn(this, (MarkModel.__proto__ || Object.getPrototypeOf(MarkModel)).call(this, app));

        _this.___auto = true;

        _this.taskInfo = {};
        _this.projectInfo = {};
        _this.cachelist = {};
        _this.seriesInfo = {};
        _this.seriesResult = {};
        _this.series_result_id = {
            seriesAnnotationResultId: "",
            seriesInstanceUid: ""
        };
        _this.userInfo = {};
        _this.doneNum = 0;
        _this.toolInfo = {};

        _this.loadData = {
            total: 0,
            num: 0
        };

        return _this;
    }

    //将后端还回来的数据转换成画图控件可以用的数据，根据不同类型进行相应的装换


    _createClass(MarkModel, [{
        key: "translateDataReslut",
        value: function translateDataReslut(value, sId, needbian) {
            var _this2 = this;

            value.map(function (item) {
                if (typeof item.result == "string") {
                    var res = void 0;
                    try {
                        res = JSON.parse(item.result);
                    } catch (err) {
                        res = item.result;
                    }
                    //let res=JSON.parse('{"point1":{"x":897.2789968652032,"y":2016.5360501567397,"highlight":true,"active":false,"z":1},"point2":{"x":1479.833855799373,"y":1236.808777429467,"highlight":true,"active":true,"z":1}}')
                    item.uuid = item.backId = item.id;
                    item.setDataType = "number";
                    item.sId = sId ? sId : null;
                    switch (item.imageAnnotationToolType) {
                        case "LINE":
                            item.type = 'length';
                            if (needbian) {
                                res.point1.x = res.point1.x / 2;
                                res.point1.y = res.point1.y / 2;
                                res.point2.x = res.point2.x / 2;
                                res.point2.y = res.point2.y / 2;
                            }
                            item.result = res;
                            item.layerNumber = res.point1.z * 1;
                            item.tooltype = 'length';
                            item.toolType = {
                                id: item.imageAnnotationToolId,
                                imageAnnotation: item.imageAnnotationType,
                                imageAnnotationId: item.imageAnnotationId,
                                type: item.imageAnnotationToolType
                            };
                            break;
                        case "COBB":
                            item.type = 'cobb';
                            res.lineA.map(function (item) {
                                if (needbian) {
                                    item.point1.x = item.point1.x / 2;
                                    item.point1.y = item.point1.y / 2;
                                    item.point2.x = item.point2.x / 2;
                                    item.point2.y = item.point2.y / 2;
                                }
                            });
                            item.result = res;
                            item.lineA = [];
                            res.lineA.map(function (itemw) {
                                item.lineA.push({
                                    end: {
                                        x: itemw.point2.x,
                                        y: itemw.point2.y
                                    },
                                    start: {
                                        x: itemw.point1.x,
                                        y: itemw.point1.y
                                    }
                                });
                            });
                            item.layerNumber = res.lineA[0].point1.z;
                            item.tooltype = 'cobb';
                            item.toolType = {
                                id: item.imageAnnotationToolId,
                                imageAnnotation: item.imageAnnotationType,
                                imageAnnotationId: item.imageAnnotationId,
                                type: item.imageAnnotationToolType
                            };
                            break;
                        case "ALIGNMENT":
                            item.type = 'alignment';
                            if (needbian) {
                                res.point1.x = res.point1.x / 2;
                                res.point1.y = res.point1.y / 2;
                                res.point2.x = res.point2.x / 2;
                                res.point2.y = res.point2.y / 2;
                                res.point3.x = res.point3.x / 2;
                                res.point3.y = res.point3.y / 2;
                                res.point4.x = res.point4.x / 2;
                                res.point4.y = res.point4.y / 2;
                            }
                            item.result = res;
                            item.layerNumber = res.point1.z;
                            //item.layerNumber = res.pointA[0].point1.z
                            item.tooltype = 'alignment';
                            item.toolType = {
                                id: item.imageAnnotationToolId,
                                imageAnnotation: item.imageAnnotationType,
                                imageAnnotationId: item.imageAnnotationId,
                                type: item.imageAnnotationToolType
                            };
                            break;
                        case "FREEHANDLINE":
                            item.type = 'freehandline';
                            if (needbian) {
                                res.point1.x = res.point1.x / 2;
                                res.point1.y = res.point1.y / 2;
                                res.point2.x = res.point2.x / 2;
                                res.point2.y = res.point2.y / 2;
                            }
                            item.result = res;
                            item.layerNumber = res.point1.z;
                            item.tooltype = 'freehandline';
                            item.toolType = {
                                id: item.imageAnnotationToolId,
                                imageAnnotation: item.imageAnnotationType,
                                imageAnnotationId: item.imageAnnotationId,
                                type: item.imageAnnotationToolType
                            };
                            break;
                        case "ELLIPSE":
                            var sp = _this2.seriesInfo[sId].info.data.pixelSpacing ? _this2.seriesInfo[sId].info.data.pixelSpacing[0] : 1;
                            item.type = 'ellipticalRoi';
                            if (needbian) {
                                res.x = res.x / 2;
                                res.y = res.y / 2;
                                res.maxd = res.maxd / 2;
                                res.mind = res.mind / 2;
                            }
                            console.log(res.z);
                            item.layerNumber = res.z;
                            item.result = {};
                            item.result = {
                                point1: {
                                    x: res.x - 0.5 * res.maxd / sp,
                                    y: res.y - 0.5 * res.maxd / sp
                                },
                                point2: {
                                    x: res.x + 0.5 * res.maxd / sp,
                                    y: res.y + 0.5 * res.maxd / sp
                                }
                            };

                            item.tooltype = 'ellipticalRoi';
                            item.toolType = {
                                id: item.imageAnnotationToolId,
                                imageAnnotation: item.imageAnnotationType,
                                imageAnnotationId: item.imageAnnotationId,
                                type: item.imageAnnotationToolType
                            };
                            break;
                        case "RECTANGLE":
                            item.type = 'rectangleRoi';
                            if (needbian) {
                                res.point1.x = res.point1.x / 2;
                                res.point1.y = res.point1.y / 2;
                                res.point2.x = res.point2.x / 2;
                                res.point2.y = res.point2.y / 2;
                            }
                            item.result = res;
                            item.layerNumber = res.point1.z;
                            item.tooltype = 'rectangleRoi';
                            item.toolType = {
                                id: item.imageAnnotationToolId,
                                imageAnnotation: item.imageAnnotationType,
                                imageAnnotationId: item.imageAnnotationId,
                                type: item.imageAnnotationToolType
                            };
                            break;
                        case "ANGLE":
                            item.type = 'simpleAngle';
                            if (needbian) {
                                res.point1.x = res.point1.x / 2;
                                res.point1.y = res.point1.y / 2;
                                res.point2.x = res.point2.x / 2;
                                res.point2.y = res.point2.y / 2;
                                res.point3.x = res.point3.x / 2;
                                res.point3.y = res.point3.y / 2;
                            }
                            item.result = res;
                            item.layerNumber = res.point1.z;
                            item.tooltype = 'simpleAngle';
                            item.toolType = {
                                id: item.imageAnnotationToolId,
                                imageAnnotation: item.imageAnnotationType,
                                imageAnnotationId: item.imageAnnotationId,
                                type: item.imageAnnotationToolType
                            };
                            break;
                        case "MAGIC_STICK_SINGLE":
                            item.type = 'magicStickSingle';
                            item.result = item.result;
                            item.tooltype = 'magicStickSingle';
                            item.toolType = {
                                id: item.imageAnnotationToolId,
                                imageAnnotation: item.imageAnnotationType,
                                imageAnnotationId: item.imageAnnotationId,
                                type: item.imageAnnotationToolType
                            };
                            break;
                        case "POLYGON":
                            item.type = 'polygon';
                            item.result = item.result;
                            item.tooltype = 'polygon';
                            item.toolType = {
                                id: item.imageAnnotationToolId,
                                imageAnnotation: item.imageAnnotationType,
                                imageAnnotationId: item.imageAnnotationId,
                                type: item.imageAnnotationToolType
                            };
                            break;
                        case "FREEHAND":
                            item.type = 'freehand';
                            item.result = item.result;
                            item.tooltype = 'freehand';
                            item.toolType = {
                                id: item.imageAnnotationToolId,
                                imageAnnotation: item.imageAnnotationType,
                                imageAnnotationId: item.imageAnnotationId,
                                type: item.imageAnnotationToolType
                            };
                            break;
                        case "QSELECT":
                            item.type = 'quickselect';
                            item.result = item.result;
                            item.tooltype = 'quickselect';
                            item.toolType = {
                                id: item.imageAnnotationToolId,
                                imageAnnotation: item.imageAnnotationType,
                                imageAnnotationId: item.imageAnnotationId,
                                type: item.imageAnnotationToolType
                            };
                            break;
                        case "REGION_PAINT":
                            item.type = 'regionpaint';
                            item.result = item.result;
                            item.tooltype = 'regionpaint';
                            item.toolType = {
                                id: item.imageAnnotationToolId,
                                imageAnnotation: item.imageAnnotationType,
                                imageAnnotationId: item.imageAnnotationId,
                                type: item.imageAnnotationToolType
                            };
                            break;
                    }
                }
            });
        }
    }, {
        key: "getpoints",
        value: function getpoints(value, length, num) {
            var points = [];
            if (num == 1) {
                return [[Math.round(value.x), Math.round(value.y), value.z]];
            }
            for (var i = 0; i < num; i++) {
                var point = [Math.round(value.x - length + 2 * Math.random() * length), Math.round(value.y - length + 2 * Math.random() * length), value.z];
                points.push(point);
            }
            return points;
        }
    }, {
        key: "getImages",
        value: function getImages(images, flag, total) {
            if (!images) {
                return [];
            }
            var newImages = [];
            images.map(function (item) {
                var num = item.number;
                if (flag == 0) {
                    newImages[num - 1] = item.urlWAN || item.urlWan;
                } else {
                    newImages[total - num + 1] = item.urlWAN || item.urlWan;
                }
            });
            return newImages;
        }
    }, {
        key: "getImagesBack",
        value: function getImagesBack(images, flag, total) {
            if (!images) {
                return [];
            }
            var newImages = [];
            images.map(function (item) {
                //console.log(item)
                //let num = Tool.changeToName(item.urlWAN || item.urlWan, 'png')
                newImages[item.number] = item.urlWAN || item.urlWan;
            });
            return newImages;
        }
        //判断是不是x光

    }, {
        key: "judgeX",
        value: function judgeX(fileType, modality) {
            if (fileType == "DCM" && (modality == 'DX' || modality == 'DR' || modality == 'CR' || modality == 'CX')) {
                return true;
            }
            return false;
        }
        //判断是不是CT，MR，MRI

    }, {
        key: "judgeCT",
        value: function judgeCT(fileType, modality) {
            if (fileType == "DCM" && modality != 'DX' && modality != 'DR' && modality != 'CR' && modality != 'CX') {
                return true;
            }
            return false;
        }
    }]);

    return MarkModel;
}(Interstellar.modelBase);

window.MarkModel = window.MarkModel || MarkModel;
module.exports = MarkModel;

/***/ }),

/***/ 621:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(989);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./drapCanvasAudEdit.less", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./drapCanvasAudEdit.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 622:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var api = {
    sys_transfer: function sys_transfer(value) {
        return this.HttpRequest.POST('/sys/transfer', value);
    },

    //项目读取
    annoitem_task_read: function annoitem_task_read(value) {
        var st = api.app.tokentime();
        if (!st) {
            delete value.token;
        }
        var deferred = ES.Deferred();
        //deferred.resolve({aa:'aa'});
        ES.ajax({
            url: api.app.domain1 + 'v1/audit/annoitem/task/read',
            type: "POST",
            dataType: "json",
            contentType: "application/json;charset=UTF-8",
            questring: value
        }).then(function (response) {
            if (!api.app.apiresult(response)) {
                return;
            }
            deferred.resolve(response);
        }, function () {
            deferred.reject(true);
        });
        return deferred;
    },
    audit_task_updateRemake: function audit_task_updateRemake(value) {
        var st = api.app.tokentime();
        if (!st) {
            delete value.token;
        }
        var deferred = ES.Deferred();
        //deferred.resolve({aa:'aa'});
        ES.ajax({
            url: api.app.domain1 + 'v1/audit/task/updateRemark',
            type: "POST",
            dataType: "json",
            contentType: "application/json;charset=UTF-8",
            questring: value
        }).then(function (response) {
            if (!api.app.apiresult(response)) {
                return;
            }
            deferred.resolve(response);
        }, function () {
            deferred.reject(true);
        });
        return deferred;
    },
    //任务读取
    task_read: function task_read(value) {
        var st = api.app.tokentime();
        if (!st) {
            delete value.token;
        }
        var deferred = ES.Deferred();
        //deferred.resolve({aa:'aa'});
        ES.ajax({
            url: api.app.domain1 + 'v1/audit/task/read',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function (response) {
            if (!api.app.apiresult(response)) {
                return;
            }
            deferred.resolve(response);
        }, function () {
            deferred.reject(true);
        });
        return deferred;
    },
    //序列详情
    series_read: function series_read(value) {
        var st = api.app.tokentime();
        if (!st) {
            delete value.token;
        }
        var deferred = ES.Deferred();
        //deferred.resolve({aa:'aa'});
        ES.ajax({
            url: api.app.domain + 'v1/series/read',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function (response) {
            if (!api.app.apiresult(response)) {
                return;
            }
            deferred.resolve(response);
        }, function () {
            deferred.reject(true);
        });
        return deferred;
    },
    //序列图片地址
    image_query: function image_query(value) {
        var st = api.app.tokentime();
        if (!st) {
            delete value.token;
        }
        var deferred = ES.Deferred();
        //deferred.resolve({aa:'aa'});
        ES.ajax({
            url: api.app.domain + 'v1/image/query',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function (response) {
            if (!api.app.apiresult(response)) {
                return;
            }
            deferred.resolve(response);
        }, function () {
            deferred.reject(true);
        });
        return deferred;
    },

    //获取下一个序列
    series_get: function series_get(value) {
        var deferred = ES.Deferred();
        ES.ajax({
            url: api.app.domain1 + 'v1/anno/user/series/get',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function (response) {
            if (!api.app.apiresult(response)) {
                return;
            }
            deferred.resolve(response);
        }, function () {
            deferred.reject(true);
        });
        return deferred;
    },
    //****************为每一个序列创建一个标注结果集合*********************
    series_result_create: function series_result_create(value) {
        var deferred = ES.Deferred();
        ES.ajax({
            url: api.app.domain1 + 'v1/anno/series_result/create',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function (response) {
            if (!api.app.apiresult(response)) {
                return;
            }
            deferred.resolve(response);
        }, function () {
            deferred.reject(true);
        });
        return deferred;
    },
    series_result_read: function series_result_read(value) {
        var deferred = ES.Deferred();
        ES.ajax({
            url: api.app.domain1 + 'v1/audit/task/series/result/read',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function (response) {
            if (!api.app.apiresult(response)) {
                return;
            }
            deferred.resolve(response);
        }, function () {
            deferred.reject(true);
        });
        return deferred;
    },
    series_result_submit: function series_result_submit(value) {
        var deferred = ES.Deferred();
        ES.ajax({
            url: api.app.domain1 + 'v1/anno/series_result/submit',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function (response) {
            if (!api.app.apiresult(response)) {
                return;
            }
            deferred.resolve(response);
        }, function () {
            deferred.reject(true);
        });
        return deferred;
    },
    series_result_query: function series_result_query(value) {
        var deferred = ES.Deferred();
        ES.ajax({
            url: api.app.domain1 + 'v1/anno/series_result/query',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function (response) {
            if (!api.app.apiresult(response)) {
                return;
            }
            deferred.resolve(response);
        }, function () {
            deferred.reject(true);
        });
        return deferred;
    },
    series_result_item_edit: function series_result_item_edit(value) {
        var deferred = ES.Deferred();
        ES.ajax({
            url: api.app.domain1 + 'v1/anno/series_result/item/edit',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function (response) {
            if (!api.app.apiresult(response)) {
                return;
            }
            deferred.resolve(response);
        }, function () {
            deferred.reject(true);
        });
        return deferred;
    },
    //****************为每一个序列创建一个标注结果集合*********************
    //****************单个标注结果*********************
    image_result_create: function image_result_create(value) {
        var deferred = ES.Deferred();
        ES.ajax({
            url: api.app.domain1 + 'v1/anno/image_result/create',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function (response) {
            if (!api.app.apiresult(response)) {
                return;
            }
            deferred.resolve(response);
        }, function () {
            deferred.reject(true);
        });
        return deferred;
    },
    audit_imganno_audit: function audit_imganno_audit(value) {
        var deferred = ES.Deferred();
        ES.ajax({
            url: api.app.domain1 + 'v1/audit/imganno/audit',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function (response) {
            if (!api.app.apiresult(response)) {
                return;
            }
            deferred.resolve(response);
        }, function () {
            deferred.reject(true);
        });
        return deferred;
    },
    //通用mask保存接口
    anno_iar_read: function anno_iar_read(value) {
        var deferred = ES.Deferred();
        ES.ajax({
            url: api.app.domain1 + 'v1/anno/iar/read',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function (response) {
            if (!api.app.apiresult(response)) {
                return;
            }
            deferred.resolve(response);
        }, function () {
            deferred.reject(true);
        });
        return deferred;
    },
    audit_annoitem_update: function audit_annoitem_update(value) {
        var deferred = ES.Deferred();
        console.log('wwwwww');
        ES.ajax({
            url: api.app.domain1 + 'v1/audit/annoitem/update',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function (response) {
            console.log(response);
            if (!api.app.apiresult(response)) {
                return;
            }
            deferred.resolve(response);
        }, function () {
            deferred.reject(true);
        });
        return deferred;
    },
    series_audit_submit: function series_audit_submit(value) {
        var deferred = ES.Deferred();
        ES.ajax({
            url: api.app.domain1 + 'v1/audit/series/audit/submit',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function (response) {
            if (!api.app.apiresult(response)) {
                return;
            }
            deferred.resolve(response);
        }, function () {
            deferred.reject(true);
        });
        return deferred;
    },
    series_result_yayAttributes: function series_result_yayAttributes(value) {
        var deferred = ES.Deferred();
        ES.ajax({
            url: api.app.domain1 + 'v1/anno/series_result/yayAttributes',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function (response) {
            if (!api.app.apiresult(response)) {
                return;
            }
            deferred.resolve(response);
        }, function () {
            deferred.reject(true);
        });
        return deferred;
    }
    //****************单个标注结果*********************
    //组件结果上传
    /*image_result_item_edit: function(value) {
        var deferred = ES.Deferred()
        ES.ajax({
            url: api.app.domain1 + 'v1/anno/image_result/item/edit',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function(response) {
            if (!api.app.apiresult(response)) {
                return
            }
            deferred.resolve(response);
        }, function() {
            deferred.reject(true);
        });
        return deferred
    },
    //废片结果
    series_discard: function(value) {
        var deferred = ES.Deferred()
        ES.ajax({
            url: api.app.domain1 + 'v1/project/series/discard',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function(response) {
            if (!api.app.apiresult(response)) {
                return
            }
            deferred.resolve(response);
        }, function() {
            deferred.reject(true);
        });
        return deferred
    },
    series_result_search: function(value) {
        var deferred = ES.Deferred()
        ES.ajax({
            url: api.app.domain1 + 'v1/anno/series_result/search',
            type: "post",
            dataType: "json",
            questring: value,
            contentType: "application/json",
        }).then(function(response) {
            if (!api.app.apiresult(response)) {
                return
            }
            deferred.resolve(response);
        }, function() {
            deferred.reject(true);
        });
        return deferred
    },
    task_user_series_search: function(value) {
        var deferred = ES.Deferred()
        ES.ajax({
            url: api.app.domain1 + 'v1/task/user/series/search',
            type: "post",
            dataType: "json",
            questring: value,
            contentType: "application/json",
        }).then(function(response) {
            if (!api.app.apiresult(response)) {
                return
            }
            deferred.resolve(response);
        }, function() {
            deferred.reject(true);
        });
        return deferred
    },//魔法棒接口
    image_process_create: function(value) {
        var deferred = ES.Deferred()
        ES.ajax({
            url: api.app.domain + 'v1/image_process/create',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function(response) {
            if (!api.app.apiresult(response)) {
                return
            }
            deferred.resolve(response);
        }, function() {
            deferred.reject(true);
        });
        return deferred
    },
    //魔法棒批量查看
    image_process_batch_read: function(value) {
        var deferred = ES.Deferred()
        ES.ajax({
            url: api.app.domain + 'v1/image_process/batch_read',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function(response) {
            if (!api.app.apiresult(response)) {
                return
            }
            deferred.resolve(response);
        }, function() {
            deferred.reject(true);
        });
        return deferred
    },
    //魔法棒接口
    image_process_item_edit: function(value) {
        var deferred = ES.Deferred()
        ES.ajax({
            url: api.app.domain + 'v1/image_process/item/edit',
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            questring: value
        }).then(function(response) {
            if (!api.app.apiresult(response)) {
                return
            }
            deferred.resolve(response);
        }, function() {
            deferred.reject(true);
        });
        return deferred
    }*/

};
module.exports = api;

/***/ }),

/***/ 623:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @class CanvasBase
 * @classdesc 初始化createJS，挂载event事件，渲染画布
 * 
 * 对外事件
 * @event 鼠标按下 stageMousedown
 * @event 鼠标松开 stageMouseup
 * @event 鼠标移动 stageMove
 * 
 * 暂时只兼容Chrome
 */
var CanvasBase = function (_MarkBase) {
    _inherits(CanvasBase, _MarkBase);

    function CanvasBase(app, api, dom, model) {
        _classCallCheck(this, CanvasBase);

        return _possibleConstructorReturn(this, (CanvasBase.__proto__ || Object.getPrototypeOf(CanvasBase)).call(this, app, api, dom, model));
    }
    //接口调用，获取信息


    _createClass(CanvasBase, [{
        key: 'baseApi',
        value: function baseApi() {
            var _this2 = this;

            //获取项目信息
            this.app.loading.show();
            this.api.annoitem_task_read({
                taskId: this.app.parpam['taskId']
            }).done(function (value) {
                _this2.model.setData('projectInfo', value.data);
            });

            //获取
            this.api.task_read({
                id: this.app.parpam['taskId']
            }).done(function (value) {
                _this2.dom.find('.task-name span').eq(1).html(value.data.name);
                _this2.model.taskInfo = value.data;
            });
        }
    }, {
        key: 'annotationIteminit',
        value: function annotationIteminit() {
            var _this3 = this;

            //console.log(this.model.projectInfo,'this.model.projectInfothis.model.projectInfo')
            var projectInfo = this.model.projectInfo;
            var tool = {};
            //翻译所有的标注组件信息
            var nidusinfo = {
                all: {}
            };
            var xu1 = 0;
            projectInfo.annotationItemList.map(function (item) {
                item.id = item.componentId;
                item.sequence = xu1;
                item.formComponentId = item.componentId;
                xu1++;
            });
            nidusinfo.all = this.translateData(projectInfo.annotationItemList);
            //console.log(nidusinfo.all)
            //console.log(projectInfo.imageAnnotationList)

            var _loop = function _loop(i) {
                var teampData = projectInfo.imageAnnotationList[i].annotationItemList;
                var xu = 0;
                projectInfo.imageAnnotationList[i].annotationItemList.splice(0, 0, _this3.model.returnSelectComponent());
                projectInfo.imageAnnotationList[i].annotationItemList.map(function (item) {
                    item.sequence = xu;
                    item.id = item.componentId;
                    xu++;
                });
                console.log('========');
                if (teampData.length != 0) {
                    nidusinfo[projectInfo.imageAnnotationList[i].type] = _this3.translateData(projectInfo.imageAnnotationList[i].annotationItemList);
                }
            };

            for (var i = 0; i < projectInfo.imageAnnotationList.length; i++) {
                _loop(i);
            }
            console.log(nidusinfo, 'nidusinfo');
            this.cornerstoneContorl.model.nidusComponentInfo = Tool.clone(nidusinfo);
            nidusinfo = null;
            //=========根据不同类型来拿series=============
            if (this.app.parpam['type'] != 'viewer_all') {
                this.series_get(this.app.parpam['sid']);
            }
        }
        //************************标注相关*************************
        //获取需要标注的序列

    }, {
        key: 'series_get',
        value: function series_get(sid) {
            var _this4 = this;

            if (this.cornerstoneContorl) {
                this.cornerstoneContorl.close();
            }
            if (this.dicommenu) {
                this.dicommenu.resetAll();
            }
            console.log(sid, '=========');
            this.api.series_get({
                taskId: this.app.parpam['taskId'],
                userId: this.useinfo.userId //5088
            }).done(function (value) {
                if (value.code == 1001) {
                    window.location.href = 'http://' + window.location.host + '/#!/personalaccount'; //this.app.changePage('personalaccount')
                    window.location.reload();
                }
                if (!value.data) {
                    window.location.href = 'http://' + window.location.host + '/#!/personalaccount';
                    window.location.reload();
                }
                var seriesInstanceUids = [];
                for (var i = 0; i < value.data.sarIdList.length; i++) {
                    seriesInstanceUids.push({
                        seriesAnnotationResultId: value.data.sarIdList[i],
                        seriesInstanceUid: value.data.seriesList[i]
                    });
                }
                //let endInfo = { studyInstanceUid: value.data.studyInstanceUid, seriesInstanceUids: seriesInstanceUids }
                var endInfo = {
                    studyInstanceUid: value.data.seriesList[0],
                    seriesInstanceUids: seriesInstanceUids
                };
                endInfo.remark = value.data.remark;
                _this4.model.setData('series_result_id', endInfo);
            });
        }
    }, {
        key: 'start_series',
        value: function start_series() {
            var data = this.model.series_result_id;
            //console.log(data, 'data')
            for (var i = 0; i < data.seriesInstanceUids.length; i++) {
                //console.log(data.seriesInstanceUids[i])
                //let aa =typeof data.seriesInstanceUids[i].seriesInstanceUid=="object"?data.seriesInstanceUids[i].seriesInstanceUid// JSON.parse(JSON.stringify(data.seriesInstanceUids[i]))
                //console.log(data.seriesInstanceUids[i])
                this.getSeriesAllImage(data.seriesInstanceUids[i]);
                //this.getSeriesAllImage(data.seriesInstanceUids[i])
            }
            this.result_get_fromback();
        }
    }, {
        key: 'getSeriesAllImage',
        value: function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data) {
                var ssId, value;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                ssId = _typeof(data.seriesInstanceUid) == 'object' ? data.seriesInstanceUid.series : data.seriesInstanceUid;

                                this.model.seriesInfo[ssId] = {};
                                this.app.loading.show();
                                _context.next = 5;
                                return this.api.sys_transfer({
                                    service: "DR",
                                    method: '/v1/series/read',
                                    params: JSON.stringify({
                                        "seriesInstanceUID": ssId
                                    })
                                    //this.api.series_read({
                                    //seriesInstanceUID: data.seriesInstanceUid
                                });

                            case 5:
                                value = _context.sent;


                                this.app.loading.hide();
                                this.model.seriesInfo[ssId].info = value;

                                if (this.model.taskInfo) {
                                    _context.next = 11;
                                    break;
                                }

                                this.app.alert.show({
                                    title: ' ',
                                    msg: '数据异常,点击确认进入下一个序列',
                                    close: false,
                                    sure: function sure() {
                                        that.discaseToDone({
                                            type: 98,
                                            des: '序列加载异常'
                                        });
                                    }
                                });
                                return _context.abrupt('return');

                            case 11:
                                //console.log(this.model._orginImgSizes, '==============')
                                this.formatOrigin(value.data.segmentationInfo);
                                //console.log(numlist,'numlistnumlist')
                                this.model.seriesInfo[ssId].imgs = []; //res.data.list
                                this.model.seriesInfo[ssId].orginImgSizes = JSON.parse(JSON.stringify(this.model._orginImgSizes));
                                this.model.orginImgSizes = null;
                                /*this.getimage({
                                    "group": data.seriesInstanceUid,
                                    "fileType": this.imageType,
                                    'windowType': "1x",
                                    "numberList": numlist.split(',')
                                }, true)*/
                                console.log(this.model.seriesInfo[ssId], 'this.model.seriesInfothis.model.seriesInfo');
                                this.model.series_result_id.conclusion = value.data.conclusion;
                                this.model.series_result_id.finding = value.data.finding;
                                this.model.setData('seriesInfo', this.model.seriesInfo);

                            case 19:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getSeriesAllImage(_x) {
                return _ref.apply(this, arguments);
            }

            return getSeriesAllImage;
        }()
    }, {
        key: 'getAllimageData',
        value: function getAllimageData(imageAnnotationResultList) {}
        //

    }, {
        key: 'getimage',
        value: function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(data) {
                var res;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return this.api.sys_transfer({
                                    service: "DR",
                                    method: '/v1/image/query',
                                    params: JSON.stringify(data)
                                });

                            case 2:
                                res = _context2.sent;


                                this.cornerstoneContorl.makeImage(res);

                            case 4:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function getimage(_x2) {
                return _ref2.apply(this, arguments);
            }

            return getimage;
        }()
    }, {
        key: 'cornerstoneContorlOther',
        value: function cornerstoneContorlOther() {
            var _this5 = this;

            var that = this;
            this.cornerstoneContorl.event._addEvent('ctcornerstone.loadImage', function (value) {
                _this5.getimage(value);
            });
            this.cornerstoneContorl.event._addEvent('ctcornerstone.addNode', function (value) {});
            this.cornerstoneContorl.event._addEvent('ctcornerstone.editNode', function (value) {});
            this.cornerstoneContorl.event._addEvent('ctcornerstone.deleteNode', function (value) {});

            this.cornerstoneContorl.event._addEvent('ctcornerstone.brushfirstload', function (value) {});
            this.cornerstoneContorl.event._addEvent('ctcornerstone.Allthing', function (value) {
                that.app.loading.show();
                var sarId = '';
                for (var i in that.model.seriesResult) {
                    sarId += that.model.seriesResult[i].data.sarId;
                }
                console.log(value, that.model.seriesResult);
                that.api.audit_annoitem_update({
                    sarIdList: that.getSarIds(), //sarId, //that.model.seriesResult.data.sarId,
                    type: "ANNOITEM",
                    resultList: that.model.changeItemDataToBackendCheck(value)
                }).done(function () {
                    that.app.loading.hide();
                });
            });

            //获取某一个病症的征象信息
            this.cornerstoneContorl.event._addEvent('ctcornerstone.editNodeItem', function (value) {
                //console.log(value, that.model.seriesResult)//,that.model.changeItemDataToBackend(value.chooseData))
                //return
                console.log(value, that.model.series_result_id);
                var arr = that.model.changeItemDataToBackendCheck(value.chooseData);
                var auditResult = null;
                if (value.chooseData['check_reslut'].result == "0") {
                    auditResult = true;
                }
                if (value.chooseData['check_reslut'].result == "1") {
                    auditResult = false;
                }
                if (value.jiangui) {
                    if (auditResult == null) {
                        var temp = that.cornerstoneContorl.model.nidusComponentData[that.dom.find('.nodeInfolist .choose').attr('bid')];
                        for (var i in temp) {
                            if (temp[i].result) {
                                temp[i].result = '';
                            }
                        }
                        return;
                    }
                }

                if (value.jiangui) {
                    if (auditResult == null) {
                        var _temp = that.cornerstoneContorl.model.nidusComponentData[that.dom.find('.nodeInfolist .choose').attr('bid')];
                        for (var _i in _temp) {
                            if (_temp[_i].result) {
                                _temp[_i].result = '';
                            }
                        }
                        return;
                    }
                }
                that.app.loading.show();
                that.api.audit_imganno_audit({
                    sarId: that.model.seriesResult[value.sId].data.sarId,
                    iarClusterId: value.backId.split('_')[0] * 1,
                    auditResult: auditResult
                }).done(function (res) {
                    ///console.log(res,value)
                    that.app.loading.hide();
                    if (res.data) {
                        that.app.loading.show();
                        that.api.audit_annoitem_update({
                            sarIdList: String(that.model.seriesResult[value.sId].data.sarId),
                            type: "IMGITEM",
                            "imgAnnoResultId": res.data.imgAnnoResultId,
                            resultList: arr
                        }).done(function (item) {
                            that.app.loading.hide();
                            that.cornerstoneContorl.groupMakeSame(value);
                        });
                    } else {
                        that.app.alert.show({
                            title: ' ',
                            msg: '请先选择正确与否',
                            sure: function sure() {
                                var temp = that.cornerstoneContorl.model.nidusComponentData[that.dom.find('.nodeInfolist .choose').attr('bid')];
                                for (var _i2 in temp) {
                                    if (temp[_i2].result) {
                                        temp[_i2].result = '';
                                    }
                                }
                                that.dom.find('.nodeInfolist .choose .nname').click();
                            }
                        });
                    }
                });
            });
            this.cornerstoneContorl.event._addEvent('ctcornerstone.NodeRemark', function (value) {
                console.log(value, that.model.seriesResult[value.sId]);
                that.app.loading.show();
                that.api.audit_task_updateRemake({
                    id: value.backId.split('_')[0], //sarId, //that.model.seriesResult.data.sarId,
                    type: 2,
                    remark: value.remarkRes
                }).done(function (res) {
                    that.app.loading.hide();
                    if (res.msg) {
                        that.cornerstoneContorl.clearRemark(value);
                        that.app.alert.show({
                            title: ' ',
                            msg: '请先选择正确与否',
                            sure: function sure() {
                                var temp = that.cornerstoneContorl.model.nidusComponentData[that.dom.find('.nodeInfolist .choose').attr('bid')];
                                for (var i in temp) {
                                    if (temp[i].result) {
                                        temp[i].result = '';
                                    }
                                }
                                that.dom.find('.nodeInfolist .choose .nname').click();
                            }
                        });
                    }
                });
            });
            this.cornerstoneContorl.event._addEvent('ctcornerstone.AllRemark', function (value) {
                that.app.loading.show();

                that.api.audit_task_updateRemake({
                    id: that.getSarIds(), //sarId, //that.model.seriesResult.data.sarId,
                    type: 1,
                    remark: value
                }).done(function () {
                    that.app.loading.hide();
                });
            });
        }

        /*result_get_fromback() {
            let lists = this.model.series_result_id.seriesInstanceUids
            for (let i = 0; i < lists.length; i++) {
                this.api.series_result_read({
                    sarId: lists[i].seriesAnnotationResultId
                }).done((res) => {
                    //this.model.seriesResult[lists[i].seriesAnnotationResultId] = res
                    this.model.seriesResult[lists[i].seriesAnnotationResultId] = res
                    this.model.setData('seriesResult', this.model.seriesResult)
                })
            }
        }*/
        //格式化原图数据

    }, {
        key: 'formatOrigin',
        value: function formatOrigin(data) {
            data.length = 1;
            for (var i in data) {
                if (i != 'thumbnail' && i != 'length') {
                    data[i] = JSON.parse(data[i]);
                    //console.log(data[i])
                    data[i].row = data[i].rows;
                    data[i].colnum = data[i].columns;
                    data[i].height = data[i].hieght || data[i].height;
                    if (i.replace('x', '') * 1 > data.length) {
                        data.length = i.replace('x', '') * 1;
                    }
                }
            }
            this.model.orginImgSizes = data;
        }
        //提交整个序列事件

    }, {
        key: 'btnEvent',
        value: function btnEvent() {
            var _this6 = this;

            this.dom.find('.back-icon').on('click', function () {
                window.location.href = 'http://' + window.location.host + '/#!/personalaccount'; //this.app.changePage('personalaccount')
                window.location.reload();
            });
            var that = this;
            this.dom.find('.cotrol-btn .btn-submit').on('click', function () {
                _this6.alertSubmit.show({
                    title: ' ',
                    msg: '确认提交该序列？提交后该序列将不再修改',
                    closeSure: function closeSure() {
                        that.model.doneNum = -1;
                        that.submitSeries();
                    },
                    sure: function sure() {
                        that.model.doneNum += 1;
                        that.submitSeries();
                    }
                });

                //window.location.reload()
            });
            switch (this.app.parpam['type']) {
                case 'check':
                    this.dom.find('.cotrol-btn .btn-submit1').remove();
                    this.dom.find('.cotrol-btn .btn-submit2').remove();
                    break;
                case 'check_viewer':
                    this.dom.find('.cotrol-btn .btn-submit').remove();
                    this.dom.find('.cotrol-btn .btn-submit1').remove();
                    this.dom.find('.cotrol-btn .btn-submit2').remove();
                    break;
                case 'check_viewer_all':
                    this.dom.find('.cotrol-btn .btn-submit').remove();
                    break;
            }
            this.dom.find('.toolsImg li[fun="remove_xu"]').find('.btn').remove();
        }
    }, {
        key: 'submitSeries',
        value: function submitSeries() {
            var _this7 = this;

            this.app.loading.show();
            /*let sarId = ''
            for (let i in this.model.seriesResult) {
                sarId += this.model.seriesResult[i].data.sarId+','
            }*/
            this.api.series_audit_submit({
                sarIdList: this.getSarIds() //sarId //this.model.seriesResult.data.sarId
            }).done(function (value) {
                _this7.app.loading.hide();
                if (value.code != 0) {
                    _this7.app.alert.show({
                        title: ' ',
                        msg: value.msg
                    });
                } else {
                    if (_this7.model.doneNum == -1) {
                        window.location.href = 'http://' + window.location.host + '/#!/personalaccount';
                        window.location.reload();
                        //this.app.changePage('personalaccount')
                        return;
                    }
                    window.location.reload();
                }
            });
        }
    }, {
        key: 'getSarIds',
        value: function getSarIds() {
            var ids = [];
            for (var i in this.model.seriesResult) {
                ids.push(this.model.seriesResult[i].data.sarId);
            }
            return ids.toString();
        }
    }]);

    return CanvasBase;
}(MarkBase);

module.exports = CanvasBase;

/***/ }),

/***/ 624:
/***/ (function(module, exports) {

module.exports = "<div class=dragCanvas> <ul class=mark-header> <li class=\"back-icon fl\"> <span><span class=lefta><i class=\"iconfont icon-icon-test3\" style=font-size:12px></i></span><span class=infojian>医生主页</span></span> </li> <li class=\"task-name fl\"> <span>|</span> <span>Cassiel0705标注4</span> </li> <li class=\"cotrol-btn fr\"> <div class=\"btn btn-submit\">提交审核</div> <div class=\"btn btn-submit1\">上一个序列</div> <div class=\"btn btn-submit2\">下一个序列</div> </li> </ul> <div class=mark-menu></div> <div class=mark-content> </div> </div>";

/***/ }),

/***/ 639:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//计算公式 获取cornerstone.getViewport(element)里面的translation和scale计算
/*
1.当前的dicom文件距离canvas的0的位置 translation*scale+(外面的canvas的宽度-512*scale）/2
2.cornerstone.pixelToCanvas(element, splitHandle)这个里面的x，y是针对外部cavans的0,0为标准
3.上面2-1就是为当前元素和dicom文件基于现在比例的差值
4.随后拿3/scale,这样就可以有元素相对于dicom的512的相对距离
 5.半径也是用widthCanvas/scale,换算出相对于512的半径
*/
var Cornerstone_Class = function () {
    function Cornerstone_Class(initData) {
        _classCallCheck(this, Cornerstone_Class);

        var that = this;

        this.colwDefault = this.colcDefault = null;

        this.removeId = "";

        this.thickness;
        this.distanceStart;

        this.newImgOrender = "";
        this.spsec;
        this.calculationCars = new Array();

        this.event = new Interstellar.event();
        this.stepPage = initData.stepPage || 5;
        this.scroll = initData.scroll != undefined || initData.scroll != null ? initData.scroll : true;
        this.imgType = initData.type || 'png';

        this.moveAllElementData = {};
        this.modifyCount1 = new Object();
        this.modifyCount2 = new Object();
        this.modifyDate1 = new Object();
        this.element = initData.element;

        this.nodeArray = [];

        this.imageAddress = initData.imageAddress;

        this.axialStack1 = {
            currentImageIdIndex: initData.index || 0,
            imageIds: this.imageAddress,
            preventCache: true
        };
        this.nowloadNum = 0;
        this.perload = initData.perload != undefined || initData.perload != null ? initData.perload : true;
        this.burshChoose = false;
        this.movelist = false;
        this.init();
    }

    _createClass(Cornerstone_Class, [{
        key: "init",
        value: function init() {
            var that = this;
            //让多屏可以同时滚动的
            //let synchronizer1 = new cornerstoneTools.Synchronizer("CornerstoneNewImage", cornerstoneTools.stackImageIndexSynchronizer);
            var dom = cornerstone.getEnabledElements();

            var nnowE = false;
            for (var i = 0; i < dom.length; i++) {
                var temp = dom[i];
                if (temp.element.id == ES.selctorDoc(this.element).attr('id')) {
                    nnowE = true;
                }
            }
            //console.log(nnowE,this.element)
            if (!nnowE) {
                this.loadAndViewImage(this.axialStack1.currentImageIdIndex, true, true);
            } else {
                var url = this.buildUrl(this.axialStack1.currentImageIdIndex);
                this.loadImage(url, this.element, true);
            }
            if (this.perload) {
                setTimeout(function () {
                    //this.beforehandCacheLoad(true, 1, this.imageAddress, this.imageAddress.length)
                }, 0);
            }
        }
    }, {
        key: "beforehandCacheLoad",
        value: function beforehandCacheLoad(flag, loadCurrentCount, baseUrl, maxCount) {
            if (flag) {
                for (var i = 1; i < this.stepPage; i++) {
                    this.loadCache(i, baseUrl);
                }
            } else {
                if (null == this.calculationCars[loadCurrentCount + 1] && loadCurrentCount < maxCount) {
                    this.loadCache(loadCurrentCount + 1, baseUrl);
                }
                if (null == this.calculationCars[loadCurrentCount - 1] && loadCurrentCount > 1) {
                    this.loadCache(loadCurrentCount - 1, baseUrl);
                }
            }
        }
    }, {
        key: "funcNodiuCacheLoad",
        value: function funcNodiuCacheLoad(loadCurrentCount, baseUrl, maxCount) {
            var after = this.imageAddress.length - loadCurrentCount;
            if (after != 0) {
                var loadAfterCount = void 0;
                if (after < this.stepPage) loadAfterCount = after;else {
                    loadAfterCount = this.stepPage;
                }
                var afterMax = loadCurrentCount * 1 + loadAfterCount * 1;
                for (var i = loadCurrentCount; i < afterMax; i++) {
                    if (null == this.calculationCars[i] && loadCurrentCount < maxCount) {
                        this.loadCache(i, baseUrl);
                    }
                }
            }
            if (loadCurrentCount > this.stepPage) {
                var befor = loadCurrentCount - this.stepPage;
                for (var i = befor; i < loadCurrentCount; i++) {
                    if (null == this.calculationCars[i] && loadCurrentCount > 1) {
                        this.loadCache(i, baseUrl);
                    }
                }
            }
        }
    }, {
        key: "funcNodule",
        value: function funcNodule(layerCount, noduleId) {
            var that = this;
            this.axialStack1.currentImageIdIndex = layerCount - 1;

            var url = this.buildUrl(layerCount - 1);
            //console.log(url, layerCount)
            //cornerstoneTools.scrollToIndex(this.element,this.axialStack1.currentImageIdIndex)
            this.loadImage(url, this.element);
            //this.loadAndViewImage(layerCount*1 - 1, false, false);
            //this.deleteOtherCanv('dicomImage')
            setTimeout(function () {
                // that.funcNodiuCacheLoad(layerCount, that.imageAddress, that.imageAddress.length);
            }, 0);
        }
    }, {
        key: "loadCache",
        value: function loadCache(page, baseUrl) {
            var url = this.buildUrlLoad(page, baseUrl);
            //cornerstoneWADOImageLoader.wadouri.dataSetCacheManager.load(url);
            //this.calculationCars[page] = true;
        }
        //处理url

    }, {
        key: "buildUrl",
        value: function buildUrl(index) {
            if (_typeof(this.imageAddress) == "object") {
                if (this.imageAddress[0].lastIndexOf('glayImage') != -1 || this.imageAddress[0].lastIndexOf('pixImage') != -1) {
                    this.axialStack1.currentImageIdIndex = index;
                    return this.imageAddress[index];
                }
                for (var i = 0; i < this.imageAddress.length; i++) {
                    //console.log(this.imageAddress[i])
                    var name = this.imageAddress[i].split('?')[0];
                    var num = '/' + ("000000" + (index * 1 + 1)).slice(-6) + '.';
                    // console.log(num,'numnumnumnumnumnumnumnum',name)
                    if (name.lastIndexOf(num) != -1) {
                        this.axialStack1.currentImageIdIndex = i;
                        return this.imageAddress[i];
                    }
                }
                return null;
            }
        }
    }, {
        key: "getIndex",
        value: function getIndex(layer) {
            for (var i = 0; i < this.imageAddress.length; i++) {
                //console.log(this.imageAddress[i])
                var name = this.imageAddress[i].split('?')[0];
                var num = '/' + ("000000" + layer * 1).slice(-6) + '.';
                // console.log(num,'numnumnumnumnumnumnumnum',name)
                if (name.lastIndexOf(num) != -1) {
                    //this.axialStack1.currentImageIdIndex = i
                    return i;
                }
            }
        }
    }, {
        key: "getLayerNum",
        value: function getLayerNum(index) {
            var tempA = this.imageAddress[index].split('?')[0].split('/');
            return tempA[tempA.length - 1].split('.')[0] * 1;
        }
    }, {
        key: "buildUrlLoad",
        value: function buildUrlLoad(index, baseUrl) {
            if (_typeof(this.imageAddress) == "object") {
                return this.imageAddress[index];
            }
            //alert($("#imageAddress").text());
            if (this.imgType == "dcm") {
                return baseUrl + '/' + this.getLenStr(6, index) + '.dcm';
            } else {
                return baseUrl + '/' + this.getLenStr(6, index) + '.png';
            }
        }
    }, {
        key: "getLenStr",
        value: function getLenStr(n, s) {
            if ((s + '').length < n) {
                return (String(Math.pow(10, n)) + s).slice(-n);
            }
            return s;
        }
        //-------------
        //添加测量事件

    }, {
        key: "GenNonDuplicateID",
        value: function GenNonDuplicateID(randomLength) {
            return Number(Math.random().toString().substr(3, randomLength) + Date.now()).toString(36);
        }
    }, {
        key: "cornerstonetoolsmeasurementadded",
        value: function cornerstonetoolsmeasurementadded(e) {
            e.detail.measurementData.id = this.GenNonDuplicateID(12);
            this.event._dispatch('Cornerstone_Class.MeasurementAdded', e);
        }
    }, {
        key: "cornerstonetoolsmouseup",
        value: function cornerstonetoolsmouseup(e) {
            if (this.moveAllElementData) {
                if (this.removeId && this.removeId == this.moveAllElementData.id) {
                    this.moveAllElementData = null;
                    this.removeId = null;
                }
                var tempHandles = this.moveAllElementData.handles;
                if (tempHandles) {
                    var _tempHandles$start = tempHandles.start,
                        x1 = _tempHandles$start.x,
                        y1 = _tempHandles$start.y;
                    var _tempHandles$end = tempHandles.end,
                        x2 = _tempHandles$end.x,
                        y2 = _tempHandles$end.y;

                    var dx = (x1 - x2) * (this.spsecX || 1);
                    var dy = (y1 - y2) * (this.spsecY || 1);
                    this.moveAllElementData.handles.length = Math.sqrt(dx * dx + dy * dy).toFixed(2);
                }
            }
            this.event._dispatch('Cornerstone_Class.MeasurementEnd', this.moveAllElementData);
        }
    }, {
        key: "cornerstonetoolsmousedown",
        value: function cornerstonetoolsmousedown(e) {
            this.event._dispatch('Cornerstone_Class.mousedown', {
                e: e
            });
        }
    }, {
        key: "cornerstonetoolsmouseclick",
        value: function cornerstonetoolsmouseclick(e) {
            this.event._dispatch('Cornerstone_Class.click', {
                e: e
            });
        }
    }, {
        key: "cornerstonemeasurementremoved",
        value: function cornerstonemeasurementremoved(e) {
            var id = e.detail.measurementData.uuid;
            this.removeId = id;
            this.event._dispatch('Cornerstone_Class.MeasurementRemove', {
                id: id,
                layerNumber: this.getLayerNum(this.axialStack1.currentImageIdIndex) //this.axialStack1.currentImageIdIndex + 1
            });
        }
    }, {
        key: "cornerstonetoolsmeasurementmodified",
        value: function cornerstonetoolsmeasurementmodified(e) {
            var id = e.detail.measurementData.id;
            if (this.removeId == id) {
                return;
            }
            // console.log(e.detail.measurementData)
            //var definitionStartX = Math.min(e.detail.measurementData.handles.start.x, e.detail.measurementData.handles.end.x)
            //var definitionStartY = Math.min(e.detail.measurementData.handles.start.y, e.detail.measurementData.handles.end.y)
            /*var splitHandle = {
                "x": definitionStartX,
                "y": definitionStartY,
                "highlight": true,
                "active": false
            };*/
            var splitHandle = e.detail.measurementData;
            this.event._dispatch('Cornerstone_Class.ModifiedFinsh', {
                element: this.element,
                e: e,
                splitHandle: splitHandle,
                spsec: this.spsec
            });
        }
    }, {
        key: "cornerstonetoolsmousedrag",
        value: function cornerstonetoolsmousedrag(e) {
            this.event._dispatch('Cornerstone_Class.MouseDrag', {
                element: this.element,
                e: e,
                layerNumber: this.getLayerNum(this.axialStack1.currentImageIdIndex) // this.axialStack1.currentImageIdIndex + 1
            });
        }
    }, {
        key: "cornerstonetoolsmousewheel",
        value: function cornerstonetoolsmousewheel(e) {
            this.event._dispatch('Cornerstone_Class.cornerstonetoolsmousewheel');
            //let nowUrl = this.buildUrl(this.axialStack1.currentImageIdIndex);
            //this.loadImage(nowUrl, this.element)
        }
        //图片加载

    }, {
        key: "loadImage",
        value: function loadImage(url, elementT, changewindow) {
            var that = this;
            cornerstone.loadImage(url).then(function (image) {
                //console.log('---------------------')
                //cornerstone.loadAndCacheImage(url).then(function(image) {
                // console.log('aaaaa', that.axialStack1.currentImageIdIndex)
                if (cornerstoneTools.getToolState(that.element, 'stack')) {
                    cornerstoneTools.getToolState(that.element, 'stack').data[0].currentImageIdIndex = that.axialStack1.currentImageIdIndex;
                }
                if (changewindow) {
                    that.zoomFan();
                }
                cornerstone.displayImage(elementT, image);
                setTimeout(function () {
                    that.event._dispatch('Cornerstone_Class.LoadFinish', {
                        el: that.element
                    });
                }, 0);
            }, function (err) {
                alert(err);
            });
        }
    }, {
        key: "loadAndViewImage",
        value: function loadAndViewImage(imageId, isLoad, isInit) {
            var offsets = new Map();
            this.axialStack1.currentImageIdIndex = imageId < 0 ? 0 : imageId;
            cornerstone.enable(this.element);
            cornerstoneTools.mouseInput.enable(this.element);
            cornerstoneTools.mouseWheelInput.enable(this.element);
            //cornerstoneTools.keyboardInput.enable(this.element);
            var url = this.buildUrl(imageId);
            console.log(url, imageId);
            var that = this;
            var mousePos = 0;
            this.element.addEventListener('cornerstonenewimage', function (e) {
                that.onNewImage(e);
            });
            this.element.addEventListener('cornerstoneimagerendered', function (e) {
                that.onImageRendered(e);
            });
            this.element.addEventListener('cornerstonetoolsmeasurementmodified', function (e) {
                //console.log('aaaaa',e)
                that.cornerstonetoolsmeasurementmodified(e);
            });
            this.element.addEventListener('cornerstonetoolsmeasurementadded', function (e) {
                that.cornerstonetoolsmeasurementadded(e);
            });
            this.element.addEventListener('cornerstonemeasurementremoved', function (e) {
                ///console.log('aaa',e)
                if (that.onlyClose) {
                    return;
                }
                that.cornerstonemeasurementremoved(e);
            });
            this.element.addEventListener('cornerstonetoolsmousewheel', function (e) {
                that.cornerstonetoolsmousewheel(e);
            });
            this.element.addEventListener('cornerstonetoolsmouseclick', function (e) {
                mousePos = e.detail.event.buttons || e.detail.event.button;
                if (mousePos == 2) {
                    return;
                }
                that.cornerstonetoolsmouseclick(e);
                // console.log('aaaaaaaa',e)
            });
            this.element.addEventListener('cornerstonetoolsmousedownactivate', function (e) {
                that.cornerstonetoolsmousedownactivate(e);
            });
            this.element.addEventListener('cornerstoneimageloadfailed', function (e) {});
            this.element.addEventListener('cornerstonetoolsmousemove', function (e) {
                //console.log(e)
                that.cornerstonetoolsmousemove(e);
            });
            //for brush
            this.element.addEventListener('cornerstonetoolsmousedrag', function (e) {
                e.mousePos = mousePos;
                //console.log('cornerstonetoolsmousemove', e)
                that.cornerstonetoolsmousedrag(e);
            });
            this.element.addEventListener('cornerstonetoolsmousedown', function (e) {
                //console.log(e)
                mousePos = e.detail.event.buttons || e.detail.event.button;
                if (mousePos == 2) {
                    return;
                }
                that.cornerstonetoolsmousedown(e);
            });
            this.element.addEventListener('cornerstonetoolsmouseup', function (e) {
                //console.log('cornerstonetoolsmouseup')
                that.cornerstonetoolsmouseup(e);
            });
            this.element.addEventListener('cornerstoneactivelayerchanged', function (e) {
                // console.log('cornerstoneactivelayerchanged', e)
                that.cornerstoneactivelayerchanged(e);
                // that.cornerstonetoolsmouseup(e)
            });
            this.element.addEventListener('cornerstonelayeradded', function (e) {
                that.cornerstonelayeradded(e);
            });
            //console.log(url)
            cornerstone.loadImage(url).then(function (image) {
                //cornerstone.loadAndCacheImage(url).then(function(image) {
                //console.log('initinitinitinitinitinit')
                var viewport = cornerstone.getDefaultViewportForImage(that.element, image);
                if (!isLoad) {
                    if (null != that.colcDefault && null != that.colwDefault) {
                        viewport.voi.windowWidth = that.colwDefault;
                        viewport.voi.windowCenter = that.colcDefault;
                    }
                } else {
                    that.colcDefault = viewport.voi.windowCenter;
                    that.colwDefault = viewport.voi.windowWidth;
                }
                cornerstone.displayImage(that.element, image, viewport);
                cornerstoneTools.addStackStateManager(that.element, ['stack']);
                cornerstoneTools.addToolState(that.element, 'stack', that.axialStack1);
                if (isInit) {
                    //cornerstoneTools.zoom.activate(that.element, 1);
                    cornerstoneTools.ellipticalRoi.deactivate(that.element, 1);
                    cornerstoneTools.pan.activate(that.element, 4);
                    // console.log(that.scroll, 'scrollscrollscrollscroll', that.axialStack1)
                    if (that.scroll) {
                        cornerstoneTools.stackScrollWheel.activate(that.element);
                    }
                }
                setTimeout(function () {
                    that.event._dispatch('Cornerstone_Class.LoadFinish', {
                        el: that.element
                    });
                }, 0);
            }, function (err) {
                alert(err);
            });
        }
    }, {
        key: "cornerstonetoolsmousemove",
        value: function cornerstonetoolsmousemove(e) {
            this.event._dispatch('Cornerstone_Class.cornerstonetoolsmousemove', e);
        }
    }, {
        key: "cornerstoneactivelayerchanged",
        value: function cornerstoneactivelayerchanged(e) {
            this.event._dispatch('Cornerstone_Class.ActiveLayerChanged', e);
        }
    }, {
        key: "cornerstonelayeradded",
        value: function cornerstonelayeradded(e) {
            this.event._dispatch('Cornerstone_Class.LayerAdded', e);
        }
    }, {
        key: "cornerstonetoolsmousedownactivate",
        value: function cornerstonetoolsmousedownactivate(e) {
            this.event._dispatch('Cornerstone_Class.brushDown', e);
        }
    }, {
        key: "onImageRendered",
        value: function onImageRendered(e) {
            this.removePartData();
            var image = e.detail.image;
            var eventData = e.detail;
            // let str=new RegExp("(\\/0*\\d."+this.imgType+"$){1,}","g")
            // let layerNumber=this.imageAddress[this.axialStack1.currentImageIdIndex].split('?')[0].match(str)
            // console.log(layerNumber,'layerNumberlayerNumber',this.imageAddress[this.axialStack1.currentImageIdIndex].split('?')[0],str)
            // let ymd = String(image.data.string('x00080022'))
            // let hms = String(image.data.string('x00080030')) //image.data.string('x00080022')+image.data.string('x00080030') * 1000;
            // let xDate = ymd.substr(0, 4) + '-' + ymd.substr(4, 2) + '-' + ymd.substr(6) + ' ' + hms.substr(0, 2) + ':' + hms.substr(2, 2) + ':' + hms.substr(4, 2)
            var data = {
                // ABDCMENA: image.data.string('x00180015'),
                // slicethickness: image.data.string('x00180050'),
                // convolutionKernel: image.data.string('x00181210'),
                // KVP: image.data.string('x00180060'),
                // rayTubeCurrent: image.data.string('x00181151'),
                // seriesNumber: image.data.string('x00200011'),
                // pixelSpacing: parseFloat(image.data.string('x00280030')),
                viewport: cornerstone.getViewport(this.element).voi,
                // xDate,
                e: e,
                canvasContext: eventData.canvasContext,
                element: this.element,
                image: image,
                currentCount: this.axialStack1.currentImageIdIndex
            };
            this.spsecX = image.columnPixelSpacing;
            this.spsecY = image.rowPixelSpacing;
            this.event._dispatch('Cornerstone_Class.ImageRendered', data);
        }
    }, {
        key: "onNewImage",
        value: function onNewImage(e) {
            var v = this.axialStack1.currentImageIdIndex + 1;
            if (this.perload) {
                this.beforehandCacheLoad(false, v, this.imageAddress, this.imageAddress.length);
            }
        }

        //----------------
        //获取视窗

    }, {
        key: "getViewport",
        value: function getViewport() {
            var viewport = cornerstone.getViewport(this.element);
            return viewport;
        }
    }, {
        key: "setViewport",
        value: function setViewport(value) {
            cornerstone.setViewport(this.element, value);
        }

        /*getState() {
            return cornerstoneTools.getToolState(this.element, 'ellipticalRoi')
        }*/

    }, {
        key: "getAllState",
        value: function getAllState() {
            var rectangleRoi = cornerstoneTools.getToolState(this.element, 'rectangleRoi');
            var simpleAngle = cornerstoneTools.getToolState(this.element, 'simpleAngle');
            var ellipticalRoi = cornerstoneTools.getToolState(this.element, 'ellipticalRoi');
            var length = cornerstoneTools.getToolState(this.element, 'length');
            var alignment = cornerstoneTools.getToolState(this.element, 'alignment');
            var arr = [];
            if (rectangleRoi) {
                this.setUUidData(rectangleRoi, arr, 'rectangleRoi');
            }
            if (simpleAngle) {
                this.setUUidData(simpleAngle, arr, 'simpleAngle');
            }
            if (alignment) {
                this.setUUidData(alignment, arr, 'alignment');
            }
            if (ellipticalRoi) {
                this.setUUidData(ellipticalRoi, arr, 'ellipticalRoi');
            }
            if (length) {
                this.setUUidData(length, arr, 'length');
            }
            return arr;
        }
    }, {
        key: "setUUidData",
        value: function setUUidData(value, arr, type) {
            value.data.map(function (item) {
                if (item.uuid) {
                    item.tooltype = type;
                    arr.push(item);
                }
            });
        }
    }, {
        key: "geSiglneState",
        value: function geSiglneState(name) {
            return cornerstoneTools.getToolState(this.element, name);
        }
        //--------------
        //所有的工具

    }, {
        key: "resetAfter",
        value: function resetAfter() {}
    }, {
        key: "disableAllTools",
        value: function disableAllTools(isdis) {
            if (isdis) {
                cornerstoneTools.zoom.disable(this.element, 1);
                // cornerstoneTools.pan.disable(this.element, 1);
                cornerstoneTools.wwwc.disable(this.element, 1);
                cornerstoneTools.magnify.disable(this.element, 1);
                cornerstoneTools.probe.disable(this.element, 1);
                cornerstoneTools.brush.disable(this.element, 1);
            }
            if (this.burshChoose) {
                cornerstoneTools.brush.deactivate(this.element, 1);
            }
            this.burshChoose = false;
            cornerstoneTools.length.deactivate(this.element, 1);
            cornerstoneTools.alignment.deactivate(this.element, 1);
            cornerstoneTools.simpleAngle.deactivate(this.element, 1);
            cornerstoneTools.ellipticalRoi.deactivate(this.element, 1);
            cornerstoneTools.rectangleRoi.deactivate(this.element, 1);
            //  this.resetAfter();
        }
    }, {
        key: "removePartData",
        value: function removePartData() {
            cornerstone.imageCache.cachedImages.map(function (item) {
                if (item.image) {
                    if (item.image.data) {
                        item.image.data = {};
                    }
                }
            });
        }
    }, {
        key: "resizeCon",
        value: function resizeCon() {
            if (this.element) {
                cornerstone.resize(this.element, true);
            }
        }
    }, {
        key: "lungWindown",
        value: function lungWindown(c, w, id) {
            var viewport = cornerstone.getViewport(this.element);
            viewport.voi.windowWidth = w;
            viewport.voi.windowCenter = c;
            cornerstone.setViewport(this.element, viewport);
            //this.event._dispatch('Cornerstone_Class.wlChange')
        }
    }, {
        key: "ellipticalRoiFan",
        value: function ellipticalRoiFan() {
            this.disableAllTools(true);
            cornerstoneTools.ellipticalRoi.activate(this.element, 1);
            //cornerstoneTools.ellipticalRoiTouch.activate(this.element);
        }
    }, {
        key: "rectangleRoiFan",
        value: function rectangleRoiFan() {
            this.disableAllTools(true);
            cornerstoneTools.rectangleRoi.activate(this.element, 1);
            //cornerstoneTools.rectangleRoiTouch.activate(this.element);
        }
    }, {
        key: "magicStickSingleFan",
        value: function magicStickSingleFan() {
            this.disableAllTools(true);
            // cornerstoneTools.rectangleRoi.activate(this.element, 1);
        }
    }, {
        key: "probeFan",
        value: function probeFan() {
            this.disableAllTools(true);
            cornerstoneTools.probe.activate(this.element, 1);
            //cornerstoneTools.ellipticalRoiTouch.activate(this.element);
        }
    }, {
        key: "setcolDefault",
        value: function setcolDefault(c, w) {
            this.colwDefault = w;
            this.colcDefault = c;
        }
    }, {
        key: "restFan",
        value: function restFan() {
            console.log('restFanrestFanrestFan');
            //cornerstone.reset(this.element);
            cornerstone.resize(this.element, true);
            var viewport = cornerstone.getViewport(this.element);
            //console.log(viewport, this.colcDefault)
            viewport.voi.windowWidth = this.colwDefault;
            viewport.voi.windowCenter = this.colcDefault;
            cornerstone.setViewport(this.element, viewport);
            //this.resizeCon()
        }
    }, {
        key: "wlFan",
        value: function wlFan() {
            this.disableAllTools(true);
            cornerstoneTools.wwwc.activate(this.element, 1);
        }
    }, {
        key: "panFan",
        value: function panFan() {
            this.disableAllTools(true);
            cornerstoneTools.pan.activate(this.element, 1);
        }
    }, {
        key: "lengthFan",
        value: function lengthFan() {
            this.disableAllTools(true);
            cornerstoneTools.length.activate(this.element, 1);
            //cornerstoneTools.lengthTouch.activate(this.element);
        }
    }, {
        key: "simpleAngleFan",
        value: function simpleAngleFan() {
            this.disableAllTools(true);
            cornerstoneTools.simpleAngle.activate(this.element, 1);
            //cornerstoneTools.simpleAngleTouch.activate(this.element);
        }

        //POLYGON

    }, {
        key: "polygonFan",
        value: function polygonFan() {
            this.disableAllTools(true);
            console.log(this.element);
            this.burshChoose = false;
            //var url = this.buildUrl(this.axialStack1.currentImageIdIndex);
            //this.burshImageLoad(url, this.element)
            //cornerstoneTools.freehand.activate(this.element, 1);
            //cornerstoneTools.simpleAngleTouch.activate(this.element);
        }

        //quickselect

    }, {
        key: "quickselectFan",
        value: function quickselectFan() {
            this.disableAllTools(true);
            console.log(this.element);
            this.burshChoose = false;
            //var url = this.buildUrl(this.axialStack1.currentImageIdIndex);
            //this.burshImageLoad(url, this.element)
            //cornerstoneTools.freehand.activate(this.element, 1);
            //cornerstoneTools.simpleAngleTouch.activate(this.element);
        }

        //regionpaint

    }, {
        key: "regionpaintFan",
        value: function regionpaintFan() {
            this.disableAllTools(true);
            console.log(this.element);
            this.burshChoose = false;
            //var url = this.buildUrl(this.axialStack1.currentImageIdIndex);
            //this.burshImageLoad(url, this.element)
            //cornerstoneTools.freehand.activate(this.element, 1);
            //cornerstoneTools.simpleAngleTouch.activate(this.element);
        }
    }, {
        key: "freehandFan",
        value: function freehandFan() {
            this.disableAllTools(true);
            console.log(this.element);
            this.burshChoose = false;
            //var url = this.buildUrl(this.axialStack1.currentImageIdIndex);
            //this.burshImageLoad(url, this.element)

            //cornerstoneTools.freehand.activate(this.element, 1);
            //cornerstoneTools.simpleAngleTouch.activate(this.element);
        }
    }, {
        key: "magnifyFan",
        value: function magnifyFan() {
            this.disableAllTools(true);
            cornerstoneTools.magnify.activate(this.element, 1);
        }
    }, {
        key: "brushFan",
        value: function brushFan() {
            this.disableAllTools(true);
            var url = this.buildUrl(this.axialStack1.currentImageIdIndex);
            //cornerstoneTools.brush.activate(this.element, 1);
            //this.burshChoose = true
            //this.burshImageLoad(url, this.element)
        }
    }, {
        key: "brushFanTe",
        value: function brushFanTe() {
            console.log('brushFanTebrushFanTebrushFanTebrushFanTe');
            this.disableAllTools(true);
            var url = this.buildUrl(this.axialStack1.currentImageIdIndex);
            cornerstone.updateImage(this.element);
            //cornerstoneTools.brush.activate(this.element, 1);
            //this.disableAllTools(true);
            // this.restFan()
            //this.burshChoose = true
            //this.burshImageLoad(url, this.element)
        }
    }, {
        key: "burshImageLoad",
        value: function burshImageLoad(url, elementT) {
            var that = this;
            cornerstone.loadImage(url).then(function (image) {
                if (cornerstoneTools.getToolState(that.element, 'stack')) {
                    cornerstoneTools.getToolState(that.element, 'stack').data[0].currentImageIdIndex = that.axialStack1.currentImageIdIndex;
                }
                cornerstone.displayImage(elementT, image);
                //cornerstoneTools.brush.activate(elementT, 1);
                setTimeout(function () {
                    that.event._dispatch('Cornerstone_Class.LoadFinish', {
                        el: that.element
                    });
                }, 0);
            }, function (err) {
                alert(err);
            });
        }
    }, {
        key: "clearSigleFan",
        value: function clearSigleFan(name) {
            cornerstoneTools.clearToolState(this.element, name);
            cornerstone.updateImage(this.element);
        }

        //name为工具类型，data为画图数据，可以通过getToolState方法获取

    }, {
        key: "clearSigleData",
        value: function clearSigleData(name, data, onlyClose) {
            this.onlyClose = onlyClose;
            cornerstoneTools.removeToolState(this.element, name, data);
            cornerstone.updateImage(this.element);
        }
    }, {
        key: "clearFan",
        value: function clearFan() {
            cornerstoneTools.clearToolState(this.element, "length");
            cornerstoneTools.clearToolState(this.element, "simpleAngle");
            cornerstoneTools.clearToolState(this.element, "ellipticalRoi");
            cornerstoneTools.clearToolState(this.element, "rectangleRoi");
            cornerstoneTools.clearToolState(this.element, "probe");
            cornerstoneTools.clearToolState(this.element, "alignment");
            cornerstone.updateImage(this.element);
        }
    }, {
        key: "cobbFan",
        value: function cobbFan() {
            this.disableAllTools(true);
            cornerstoneTools.length.activate(this.element, 1);
        }
    }, {
        key: "alignmentFan",
        value: function alignmentFan() {
            this.disableAllTools(true);
            //cornerstoneTools.freehand.activate(this.element, 1);
            cornerstoneTools.alignment.activate(this.element, 1);
        }
    }, {
        key: "zoomFan",
        value: function zoomFan() {
            this.disableAllTools(true);
            cornerstoneTools.zoom.activate(this.element, 1);
            //this.resetAfter();
        }
    }, {
        key: "setNode",
        value: function setNode(value) {
            this.nodeArray = value;
        }
    }, {
        key: "deleteOtherCanv",
        value: function deleteOtherCanv(id) {
            ES.selctorDoc("#" + id).remove();
        }
    }, {
        key: "close",
        value: function close() {
            console.log('eowqwipewq');
            //this.disableAllTools(true)
            //cornerstoneTools.brush.clear()
            cornerstoneTools.clearToolState(this.element, "brush");
            cornerstoneTools.clearToolState(this.element, "length");
            cornerstoneTools.clearToolState(this.element, "simpleAngle");
            cornerstoneTools.clearToolState(this.element, "ellipticalRoi");
            cornerstoneTools.clearToolState(this.element, "rectangleRoi");
            cornerstoneTools.clearToolState(this.element, "alignment");
            console.log('eowqwipewq', this.element);
            cornerstone.disable(this.element);
        }
    }]);

    return Cornerstone_Class;
}();

module.exports = Cornerstone_Class;

/***/ }),

/***/ 641:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(649);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./ctcornerstone.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./ctcornerstone.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 642:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(663);

var crossline = function (_Interstellar$moduleB) {
    _inherits(crossline, _Interstellar$moduleB);

    function crossline(app, value, api, addMode) {
        _classCallCheck(this, crossline);

        var _this = _possibleConstructorReturn(this, (crossline.__proto__ || Object.getPrototypeOf(crossline)).call(this, app, value, api, addMode));

        _this.html = __webpack_require__(665);
        _this.name = 'crossline';
        return _this;
    }

    _createClass(crossline, [{
        key: 'complete',
        value: function complete() {
            var _this2 = this;

            var st = false;
            this.dom.find('.yline').on('mousedown', function (e) {
                var xy = _this2.xyChange({ x: e.pageX, y: e.pageY });
                _this2.nowpos = xy;
                //e.offsetY
                console.log(xy, e.pageX, e.pageY);
                _this2.dom.find('.xline').css({ transform: "translate(0px," + xy.y + "px)" });
                _this2.dom.find('.yline').css({ transform: "translate(" + xy.x + "px,0px)" });
                st = true;
            });
            this.dom.find('.xline').on('mousedown', function (e) {
                var xy = _this2.xyChange({ x: e.pageX, y: e.pageY });
                _this2.nowpos = xy;
                //e.offsetY
                _this2.dom.find('.xline').css({ transform: "translate(0px," + xy.y + "px)" });
                _this2.dom.find('.yline').css({ transform: "translate(" + xy.x + "px,0px)" });
                st = true;
            });
            this.dom.parent().on('mousemove', function (e) {
                //console.log(e)
                if (st) {
                    var xy = _this2.xyChange({ x: e.pageX, y: e.pageY });
                    _this2.nowpos = xy;
                    //e.offsetY
                    //console.log(xy)
                    _this2.dom.find('.xline').css({ transform: "translate(0px," + xy.y + "px)" });
                    _this2.dom.find('.yline').css({ transform: "translate(" + xy.x + "px,0px)" });
                    _this2.event._dispatch('crossline.move');
                }
            });
            this.dom.parent().on('mouseup', function (e) {
                st = false;
                _this2.event._dispatch('crossline.mouseup');
            });

            this.dom.find('.yline').on('mouseup', function (e) {
                st = false;
                _this2.event._dispatch('crossline.mouseup');
                //this.dom.off('mousemove')
            });
            this.dom.find('.xline').on('mouseup', function (e) {
                st = false;
                _this2.event._dispatch('crossline.mouseup');
                //this.dom.off('mousemove')
            });
        }
    }, {
        key: 'setYHeight',
        value: function setYHeight(h) {
            this.dom.find('.yline').css({ 'height': h });
        }
    }, {
        key: 'setXYLinePos',
        value: function setXYLinePos(data) {
            //this.xylinepos=data
            this.dom.find('.xline').css({ transform: "translate(0px," + data.y + "px)" });
            this.dom.find('.yline').css({ transform: "translate(" + data.x + "px,0px)" });
        }
    }, {
        key: 'xyChange',
        value: function xyChange(point) {
            var cWidth = ES.selctorDoc(window).box().clientWidth - 180 - 290;
            var cHeight = ES.selctorDoc(window).box().clientHeight - 60 - 64;
            //console.log(this.type)
            var x = point.x - (this.type == "z" ? 180 : 180 + cWidth / 2);
            var y = point.y - (this.type != "x" ? 124 : 124 + cHeight / 2);
            return { x: x, y: y };
        }
    }, {
        key: 'setPos',
        value: function setPos(point, scaleT) {
            // console.log(this.dom.box())
            this.nowpos = point;
            this.dom.find('.xline').css({ transform: "translate(0px," + point.y + "px)" });
            this.dom.find('.yline').css({ transform: "translate(" + point.x + "px,0px)" });
            //this.dom.find('xline')
            //this.dom.find('yline')
        }
    }, {
        key: 'returnXY',
        value: function returnXY(dom) {
            var transform = dom.dom[0].dom.style.transform;
            var x = transform.split(",")[0].split("(")[1].split("px")[0] * 1;
            var y = transform.split(",")[1].split(")")[0].split("px")[0] * 1;
            return { x: x, y: y };
        }
    }, {
        key: 'close',
        value: function close() {}
    }, {
        key: 'setPostion',
        value: function setPostion() {}
    }]);

    return crossline;
}(Interstellar.moduleBase);

module.exports = crossline;

/***/ }),

/***/ 645:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(730);

var progress = function (_Interstellar$modalBa) {
    _inherits(progress, _Interstellar$modalBa);

    function progress(app, dom, value, addMode) {
        _classCallCheck(this, progress);

        var _this = _possibleConstructorReturn(this, (progress.__proto__ || Object.getPrototypeOf(progress)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(732);
        _this.name = 'magicloading';
        return _this;
    }

    _createClass(progress, [{
        key: 'complete',
        value: function complete() {
            this.initDate.title = this.initDate.title ? this.initDate.title : '正在努力运算中，请耐心等待';
            this.dom.find('.p-name').html(this.initDate.title);
        }
    }]);

    return progress;
}(Interstellar.modalBase);

module.exports = progress;

/***/ }),

/***/ 646:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(723);

var progress = function (_Interstellar$modalBa) {
    _inherits(progress, _Interstellar$modalBa);

    function progress(app, dom, value, addMode) {
        _classCallCheck(this, progress);

        var _this = _possibleConstructorReturn(this, (progress.__proto__ || Object.getPrototypeOf(progress)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(725);
        _this.name = 'progress';
        return _this;
    }

    _createClass(progress, [{
        key: 'makeprogress',
        value: function makeprogress(value) {
            var pr = Number(value.rate).toFixed(2) + '%';
            this.dom.find('.blue').css({ width: 4 * value.rate });
            this.dom.find('.p-name').html(pr);
        }
    }, {
        key: 'autoprogress',
        value: function autoprogress() {
            var _this2 = this;

            if (this.timeSt) {
                return;
            }
            var rate = 5;
            this.timeSt = setInterval(function () {
                rate = rate + 1;
                if (rate < 95) {
                    _this2.makeprogress({ rate: rate });
                }
            }, 500);
        }
    }, {
        key: 'stopAll',
        value: function stopAll() {
            var _this3 = this;

            //console.log(this.timeSt)
            if (this.timeSt) {
                clearInterval(this.timeSt);
            } else {
                return;
            }
            //console.log('aaaaaaaaaaaaa')
            this.dom.find('.blue').css({ width: 400 });
            this.dom.find('.p-name').html('100%');
            setTimeout(function () {
                _this3.close();
            }, 200);
        }
    }]);

    return progress;
}(Interstellar.modalBase);

module.exports = progress;

/***/ }),

/***/ 648:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(641);

/**/

var ctcornerstone_base = function (_Interstellar$moduleB) {
    _inherits(ctcornerstone_base, _Interstellar$moduleB);

    function ctcornerstone_base(app, dom, value, addMore) {
        _classCallCheck(this, ctcornerstone_base);

        var _this = _possibleConstructorReturn(this, (ctcornerstone_base.__proto__ || Object.getPrototypeOf(ctcornerstone_base)).call(this, app, dom, value, addMore));

        _this.sceen = 0;
        _this.choosescreen = 0;
        _this.cornerstoneArray = [];
        _this.nowWWC = [];
        _this.html = __webpack_require__(650);
        _this.makeStudy = true;
        _this.nidusSigle = false;
        //获取配置
        _this.cornerstoneTools_config = __webpack_require__(651);
        _this.drawInfo = __webpack_require__(652);
        _this.ctProgress = __webpack_require__(653);
        _this.brushManage = __webpack_require__(657);
        _this.setoolconfig = __webpack_require__(658);
        _this.baseLine = __webpack_require__(659);
        _this.crossLine = __webpack_require__(660);
        __webpack_require__(661);
        _this.clearLayer = [];
        _this.nodeInfo = {};
        _this.initFrist = {};
        _this.brushC = [];
        var model = __webpack_require__(662);
        _this.nodeShow = true; //是否显示影像标注，如果是true就要显示，如果是false就不显示
        _this.model = new model(_this.app);
        _this.crossline = __webpack_require__(642);

        return _this;
    }

    _createClass(ctcornerstone_base, [{
        key: "complete",
        value: function complete() {
            //进行工具配置
            cornerstoneTools.toolColors.setToolColor("#fbb03b");
            //重写了画椭球型，矩形，长度，放大镜的功能
            __webpack_require__(666);
            __webpack_require__(667);
            __webpack_require__(668);
            __webpack_require__(669);
            __webpack_require__(671);
            __webpack_require__(672);
            __webpack_require__(673);
            __webpack_require__(674);
            //cornerstoneTools.ellipticalRoi.setConfiguration(this.cornerstoneTools_config.ellipticalRoi_config);
            var that = this;
            this.setoolconfig.setconfig('ellipticalRoiFan', this.cornerstoneTools_config.ellipticalRoi_config);
            this.setoolconfig.setconfig('rectangleRoiFan', this.cornerstoneTools_config.rectangleRoi_config);
            cornerstoneTools.magnify.setConfiguration(this.cornerstoneTools_config.magnify_config);
            //
            cornerstoneWADOImageLoader.external.cornerstone = cornerstone;
            //cornerstone.registerImageLoader('myImageLoader', loadImage);
            this.mprClass = __webpack_require__(675);
            this.moduleLoad();
        }
    }, {
        key: "moduleLoad",
        value: function moduleLoad() {
            var sequenceC = __webpack_require__(680);
            this.ctmenu(sequenceC);
            var sequenceList = __webpack_require__(684);
            this.initSeriesLists(sequenceList);

            this.deferred = ES.Deferred();
            var that = this;
            new Promise(function(resolve) { resolve(); }).then((function () {
                that.class_c = __webpack_require__(639);
                that.deferred.resolve({});
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
            var nidusinfo = __webpack_require__(688);
            this.nidusControl = this.app.loadModule(nidusinfo, this.dom.find('.ctcornerstone .nidus_content'));
            this.nidusControl.event._addEvent('nidusinfo.finish', function (value) {
                if (!that.model.nidusChoose) {
                    return;
                }
                for (var i in that.nidusControl.chooseData) {
                    //console.log(that.model.nidusComponentData[that.nidusControl.backId],that.model.nidusComponentData)
                    that.model.nidusComponentData[that.nidusControl.backId] = that.model.nidusComponentData[that.nidusControl.backId] ? that.model.nidusComponentData[that.nidusControl.backId] : {};
                    that.model.nidusComponentData[that.nidusControl.backId][i] = that.nidusControl.chooseData[i];
                }
                //console.log(that.model.nidusChoose)
                //that.model.nidusComponentData[that.nidusControl.backId] = that.nidusControl.chooseData
                that.event._dispatch('ctcornerstone.editNodeItem', {
                    chooseData: that.nidusControl.chooseData,
                    backId: that.nidusControl.backId,
                    sId: that.model.nidusChoose.sId,
                    jiangui: value
                });
            });
            this.nidusControl.event._addEvent('nidusinfo.remarkFinish', function (value) {
                if (!that.model.nidusChoose) {
                    return;
                }
                for (var i in that.nidusControl.chooseData) {
                    //console.log(that.model.nidusComponentData[that.nidusControl.backId],that.model.nidusComponentData)
                    that.model.nidusComponentData[that.nidusControl.backId] = that.model.nidusComponentData[that.nidusControl.backId] ? that.model.nidusComponentData[that.nidusControl.backId] : {};
                    that.model.nidusComponentData[that.nidusControl.backId][i] = that.nidusControl.chooseData[i];
                }
                //console.log(that.model.nidusChoose)
                //that.model.nidusComponentData[that.nidusControl.backId] = that.nidusControl.chooseData
                that.model.nidusComponentData[that.nidusControl.backId].imageRemark = that.nidusControl.remarkRes;
                that.event._dispatch('ctcornerstone.NodeRemark', {
                    chooseData: that.nidusControl.chooseData,
                    remarkRes: that.nidusControl.remarkRes,
                    backId: that.nidusControl.backId,
                    sId: that.model.nidusChoose.sId,
                    jiangui: value
                });
            });
            this.nidusControlAll = this.app.loadModule(nidusinfo, this.dom.find('.ctcornerstone .info'));
            this.nidusControlAll.show();
            this.nidusControlAll.event._addEvent('nidusinfo.finish', function () {
                //that.nidusControlAll.chooseData.sId=that.model.nidusChoose.sId
                that.event._dispatch('ctcornerstone.Allthing', that.nidusControlAll.chooseData);
            });
            this.nidusControlAll.event._addEvent('nidusinfo.remarkFinish', function () {
                //that.nidusControlAll.chooseData.sId=that.model.nidusChoose.sId
                that.event._dispatch('ctcornerstone.AllRemark', that.nidusControlAll.remarkRes);
            });
        }
    }, {
        key: "openmpr",
        value: function openmpr() {
            var _this2 = this;

            if (this.cornerstoneArray[this.choosescreen]) {
                this.app.loading.show();
                var sId = this.cornerstoneArray[this.choosescreen].sId;
                var serinfo = this.model.seriesInfo[sId];
                this.nowmpr = this.app.loadModule(this.mprClass, this.dom.find('.ctcornerstone .mpr'), {
                    info: serinfo
                });
                this.nowmpr.openS(this.cornerstoneArray[this.choosescreen].axialStack1.imageIds, this.nodeInfo, this.brushManage);
                this.nowmpr.sId = sId;
                this.nowmpr.event._addEvent('mpr.closeAll', function () {
                    _this2.nowmpr = null;
                    _this2.dom.find('.ctcornerstone .mpr').hide();
                    _this2.dom.find('.ctcornerstone .mpr').html('');
                    _this2.mpr = false;
                });
            } else {
                this.app.alert.show({
                    title: ' ',
                    msg: '请先选择一个序列',
                    close: true,
                    sure: function sure() {
                        window.location.reload();
                    }
                });
            }
        }
    }, {
        key: "groupMakeSame",
        value: function groupMakeSame(value) {
            var gid = value.backId.split('_')[0] * 1 + '_';
            for (var _i in this.model.nidusComponentData) {
                if (_i.lastIndexOf(gid) != -1 && _i != value.backId) {
                    console.log(this.model.nidusComponentData[_i], 'this.model.nidusComponentData[i]this.model.nidusComponentData[i]');
                    for (var j in value.chooseData) {
                        this.model.nidusComponentData[_i][j] = value.chooseData[j];
                    }
                }
            }
        }
    }, {
        key: "baseLineSt",
        value: function baseLineSt(value, type) {
            if (type == 'cross') {
                this.crossOpen = value;
                this.baseLineOpen = false;
                for (var _i2 = 0; _i2 < this.sceen; _i2++) {
                    if (this.cornerstoneArray[_i2]) {
                        this.gotoLayer(null, this.cornerstoneArray[_i2].sId);
                    }
                }
                this.creatCrossLine();
                //this.gotoLayer()
            } else {
                this.baseLineOpen = value;
                this.crossOpen = false;
                this.removeCrossLine();
            }
            //    this.baseLineOpen = value
        }
    }, {
        key: "creatCrossLine",
        value: function creatCrossLine() {
            var _this3 = this;

            this.crossArray = [];
            for (var i = 0; i < this.sceen; i++) {
                if (this.cornerstoneArray[i]) {
                    (function () {
                        var id = i;
                        var box = _this3.dom.find('#ct' + id).box();
                        _this3.crossArray[id] = _this3.app.loadModule(_this3.crossline, _this3.dom.find('.ct' + id + ' .line'));
                        _this3.crossArray[id].type = 'z';
                        var screenPoint = _this3.model.returnScreenPoint({
                            x: box.clientWidth / 2,
                            y: box.clientHeight / 2
                        }, id, _this3.sceen, {
                            w: box.clientWidth,
                            h: box.clientHeight
                        });
                        _this3.crossArray[id].setPos(screenPoint);
                        _this3.crossArray[id].setXYLinePos({
                            x: box.clientWidth / 2,
                            y: box.clientHeight / 2
                        });
                        _this3.crossArray[id].setYHeight(box.clientHeight);
                        var point = _this3.crossArray[id].nowpos;
                        point = _this3.model.returnRealPoint(point, id, _this3.sceen, {
                            w: box.clientWidth,
                            h: box.clientHeight
                        });
                        _this3.crossArray[id].setXYLinePos(point);
                        var getViewport = _this3.cornerstoneArray[id].getViewport();
                        var stPos = _this3.getStartPos(getViewport, box);
                        var x = (point.x - stPos.x) / getViewport.scale;
                        var y = (point.y - stPos.y) / getViewport.scale;
                        _this3.crossArray[id].imagePoint = {
                            x: x,
                            y: y
                        };
                        _this3.crossArray[id].event._addEvent('crossline.move', function () {
                            _this3.crossmove = true;
                            if (_this3.cornerstoneArray[id]) {
                                _this3.changePOint(id, box);
                            }
                        });
                        _this3.crossArray[id].event._addEvent('crossline.mouseup', function () {
                            _this3.crossmove = false;
                        });
                    })();
                }
            }
        }
    }, {
        key: "changePOint",
        value: function changePOint(id, box) {
            var getViewport = this.cornerstoneArray[id].getViewport();
            var point = this.crossArray[id].nowpos;
            console.log(point, '===========');
            point = this.model.returnRealPoint(point, id, this.sceen, {
                w: box.clientWidth,
                h: box.clientHeight
            });
            this.crossArray[id].setXYLinePos(point);
            var stPos = this.getStartPos(getViewport, box);
            var x = (point.x - stPos.x) / getViewport.scale;
            var y = (point.y - stPos.y) / getViewport.scale;
            this.crossArray[id].imagePoint = {
                x: x,
                y: y
            };
            var z = this.nowLayNum(id);
            console.log(x, y, z, id);
            for (var _i3 = 0; _i3 < this.sceen; _i3++) {
                if (this.cornerstoneArray[_i3] && _i3 != id) {
                    this.calCrossLine({
                        x: x,
                        y: y,
                        z: z
                    }, this.cornerstoneArray[id].sId, _i3);
                }
            }
        }
    }, {
        key: "calflow",
        value: function calflow(sort) {
            var box = this.dom.find('#ct' + sort).box();
            var point = this.crossArray[sort].imagePoint;
            console.log(point);
            var newXY = this.returnXY(point, this.cornerstoneArray[sort].getViewport(), box);
            var screenPoint1 = this.model.returnScreenPoint(newXY, sort, this.sceen, {
                w: box.clientWidth,
                h: box.clientHeight
            });
            this.crossArray[sort].setPos(screenPoint1);
            this.crossArray[sort].setXYLinePos(newXY);

            //let screenPoint1 = this.model.returnScreenPoint(newxy, sort, this.sceen, { w: box.clientWidth, h: box.clientHeight })
            //this.crossArray[sort].setPos(screenPoint1)
            //this.crossArray[sort].setXYLinePos(newxy)
        }
    }, {
        key: "calCrossLine",
        value: function calCrossLine(point, nowSid, sort) {
            var box = this.dom.find('#ct' + sort).box();
            var getViewport = this.cornerstoneArray[sort].getViewport();
            var endXYZ = {};
            if (nowSid == this.cornerstoneArray[sort].sId) {
                endXYZ.z = point.z;
                var newxy1 = this.returnXY(point, getViewport, box);
                endXYZ.x = newxy1.x;
                endXYZ.y = newxy1.y;
                //this.crossArray[sort].setPos(newxy1)
            } else {
                var sId = this.cornerstoneArray[sort].sId;
                var disInfo = null;
                for (var _i4 = 1; _i4 < this.model.seriesInfo[sId].people.length; _i4++) {
                    var data = {
                        referent: {
                            imageOrientationPatient: this.model.seriesInfo[nowSid].people[point.z].ImageOrientationPatient.toString(), //"1,0,0,0,1,0",
                            imagePositionPatient: this.model.seriesInfo[nowSid].people[point.z].imagePositionPatient.toString(), // "-178.689453125,-335.189453125,113.5",
                            pixelSpacing: this.model.seriesInfo[nowSid].info.data.pixelSpacing.toString(), // "0.62109375,0.62109375",
                            x: Math.round(point.x),
                            y: Math.round(point.y),
                            z: point.z
                        },
                        convert: {
                            imageOrientationPatient: this.model.seriesInfo[sId].people[_i4].ImageOrientationPatient.toString(),
                            imagePositionPatient: this.model.seriesInfo[sId].people[_i4].imagePositionPatient.toString(),
                            pixelSpacing: this.model.seriesInfo[sId].info.data.pixelSpacing.toString(),
                            width: this.model.seriesInfo[sId].info.data.column,
                            height: this.model.seriesInfo[sId].info.data.row
                        }
                    };
                    if (!disInfo) {
                        disInfo = {
                            data: new this.crossLine(data),
                            num: _i4
                        };
                    } else {
                        var newDis = new this.crossLine(data);
                        if (newDis.dis < disInfo.data.dis) {
                            disInfo = {
                                data: newDis,
                                num: _i4
                            };
                        }
                    }
                }
                var endData = new this.crossLine();
                var xy = endData.getSagPoint(disInfo.data);
                console.log(xy);
                //this.crossmove = true
                //this.cornerstoneArray[sort].funcNodule(disInfo.num)
                endXYZ.z = disInfo.num;
                //this.crossmove = false
                var newxy = this.returnXY({
                    x: xy.x,
                    y: xy.y
                }, getViewport, box);
                endXYZ.x = newxy.x;
                endXYZ.y = newxy.y;
            }
            var screenPoint1 = this.model.returnScreenPoint(endXYZ, sort, this.sceen, {
                w: box.clientWidth,
                h: box.clientHeight
            });
            this.crossArray[sort].setPos(screenPoint1);
            this.crossArray[sort].setXYLinePos(endXYZ);
            var stPos = this.getStartPos(getViewport, box);
            var x = (endXYZ.x - stPos.x) / getViewport.scale;
            var y = (endXYZ.y - stPos.y) / getViewport.scale;
            this.crossArray[sort].imagePoint = {
                x: x,
                y: y
            };
            this.cornerstoneArray[sort].funcNodule(endXYZ.z);
        }
    }, {
        key: "getStartPos",
        value: function getStartPos(getViewport, box) {
            var orw = getViewport.displayedArea.brhc.x;
            var orh = getViewport.displayedArea.brhc.y;
            var x = 0;
            var y = 0;
            if (orw / orh > box.clientWidth / box.clientHeight) {
                y = (box.clientHeight - box.clientWidth * orh / orw) / 2;
            } else {
                x = (box.clientWidth - box.clientHeight * orw / orh) / 2;
            }
            return {
                x: x,
                y: y
            };
        }
    }, {
        key: "returnXY",
        value: function returnXY(point, getViewport, box) {
            var stPos = this.getStartPos(getViewport, box);
            //console.log(stPos,'stPosstPosstPosstPos',getViewport, box,point)
            var x = Math.floor(stPos.x + (getViewport.translation.x + point.x) * getViewport.scale);
            var y = Math.floor(stPos.y + (getViewport.translation.y + point.y) * getViewport.scale);
            //console.log(x, y)
            stPos = null;
            return {
                x: x,
                y: y
            };
        }
    }, {
        key: "removeCrossLine",
        value: function removeCrossLine() {
            for (var i = 0; i < this.sceen; i++) {
                this.dom.find('.ct' + i + ' .line').html('');
            }
        }

        //********************************************征象部分****************************************
        //对于每个节点进行赋值
        //设置每个病症在后台保存的组件值

    }, {
        key: "setSeriesNidusData",
        value: function setSeriesNidusData(value, report, markdoctor) {
            var tt = {};
            value.map(function (item) {
                tt[item.annotationItemId] = item;
            });
            console.log(value, 'setSeriesNidusData', markdoctor);
            this.model.allresult = markdoctor;
            this.model.nidusComponentInfo.all.annotationItemResultList = tt;
            console.log(this.model.nidusComponentInfo);
            var doctorNidduleAll = null;
            for (var _i5 in markdoctor) {
                if (!doctorNidduleAll) {
                    doctorNidduleAll = markdoctor[_i5].data.doctorNidduleAll;
                } else {
                    doctorNidduleAll = Object.assign(doctorNidduleAll, markdoctor[_i5].data.doctorNidduleAll);
                }
                report.seriesRemark = markdoctor[_i5].data.auditResult ? markdoctor[_i5].data.auditResult.seriesRemark : "";
            }
            if (report.remark && (report.remark == 2 || report.remark == 3)) {
                this.nidusSigle = true;
            }
            if (report.remark && (report.remark == 1 || report.remark == 3)) {
                report.remark = true;
            } else {
                report.remark = false;
            }
            console.log(report.remark);
            console.log(doctorNidduleAll, 'doctorNidduleAlldoctorNidduleAlldoctorNidduleAll');
            this.nidusControlAll.setData(this.model.nidusComponentInfo.all, '序列标注信息', report, doctorNidduleAll);
            //this.nidusControlAll.setData(this.model.nidusComponentInfo.all, '序列标注信息', report, markdoctor.doctorNidduleAll)
        }
    }, {
        key: "makeAllInfo",
        value: function makeAllInfo() {
            if (this.model.nidusComponentInfo.all) {
                this.nidusControlAll.setData(this.model.nidusComponentInfo.all, '序列标注信息');
            }
        }

        //根据当前滚动的序列来做基准线

    }, {
        key: "makeBaseLine",
        value: function makeBaseLine(sId, layer) {
            this.nowLine = {};
            for (var _i6 = 0; _i6 < this.sceen; _i6++) {
                if (this.cornerstoneArray[_i6]) {
                    if (this.cornerstoneArray[_i6].sId != sId) {
                        console.log(sId, 'sId');
                        var convertData = this.model.seriesInfo[sId];
                        var referent = this.model.seriesInfo[this.cornerstoneArray[_i6].sId];
                        var referentLay = this.nowLayNum(_i6);
                        //console.log(this.model.seriesInfo[this.cornerstoneArray[i].sId])
                        console.log(referent.people[referentLay].ImageOrientationPatient.toString());
                        var data = {
                            referent: {
                                imageOrientationPatient: referent.people[referentLay].ImageOrientationPatient.toString(),
                                imagePositionPatient: referent.people[referentLay].imagePositionPatient.toString(),
                                pixelSpacing: referent.info.data.columnPixelSpacing + "," + referent.info.data.rowPixelSpacing,
                                width: referent.info.data.column,
                                height: referent.info.data.row
                            },
                            convert: {
                                imageOrientationPatient: convertData.people[layer].ImageOrientationPatient.toString(),
                                imagePositionPatient: convertData.people[layer].imagePositionPatient.toString(),
                                pixelSpacing: convertData.info.data.columnPixelSpacing + "," + convertData.info.data.rowPixelSpacing,
                                width: convertData.info.data.column,
                                height: convertData.info.data.row
                            }
                        };
                        console.log(data);
                        this.nowLine[this.cornerstoneArray[_i6].sId] = new this.baseLine(data);
                        console.log(referentLay, this.nowLine, _i6);
                        this.gotoLayer(referentLay, this.cornerstoneArray[_i6].sId);
                    }
                }
            }
        }

        //编辑结节信息

    }, {
        key: "makeInfo",
        value: function makeInfo(value, bid) {
            //console.log('makeInfomakeInfomakeInfomakeInfomakeInfo',value)
            if (value) {
                console.log(value);
                this.nidusControlAll.closeMark();
                this.nidusControl.show();
                this.nidusControl.showClose();
                this.nidusControl.backId = bid;
                console.log(value, '我是病症裱糊信息');
                this.nidusControl.setData(value, '病症标注信息', {
                    remark: this.nidusSigle,
                    seriesRemark: value.annotationItemResultList ? value.annotationItemResultList.imageRemark : null
                });
            } else {
                this.nidusControl.hide();
            }
        }

        //********************************************征象部分****************************************

        //********************************************多序列部分****************************************

    }, {
        key: "initSeriesLists",
        value: function initSeriesLists(classValue) {
            var _this4 = this;

            this.sequencelists = this.app.loadModule(classValue, this.dom.find('.ctcornerstone .slist'));
            this.sequencelists.event._addEvent('serieslist.clcik', function (value) {
                var data = _this4.model.seriesInfo[value.sid];
                if (_this4.choosescreen <= _this4.sceen) {
                    _this4.initsingle(_this4.choosescreen, data.imgs, {
                        length: data.imgsTotal,
                        major: 'master',
                        sId: value.sid
                    });
                    _this4.model.nidusChoose = null;
                    _this4.sequencelist.showNowData(value.sid);
                }
            });
        }
    }, {
        key: "closeSequenceLists",
        value: function closeSequenceLists() {
            this.makeStudy = false;
            this.dom.find('.ctcornerstone .slist').remove();
            this.resize();
        }
    }, {
        key: "clearRemark",
        value: function clearRemark(value) {
            this.nidusControl.clearRemark(value);
        }
    }, {
        key: "setSequenceLists",
        value: function setSequenceLists(value, type) {
            this.sequencelists.setData(value, type);
        }

        //********************************************多序列部分****************************************


        //********************************************列表部分****************************************
        //初始化病兆列表

    }, {
        key: "ctmenu",
        value: function ctmenu(classValue) {
            var _this5 = this;

            var that = this;
            this.sequencelist = this.app.loadModule(classValue, this.dom.find('.ctcornerstone .xulielist'));
            this.sequencelist.event._addEvent('sequencelist.choose', function () {
                var changeD = that.sequencelist.chooseData;
                that.initsingle(0, changeD.imageAddress, {
                    length: changeD.axialImageIdss.length,
                    major: changeD.major
                });
            });
            this.sequencelist.event._addEvent('sequencelist.fillWho', function (value) {
                console.log(value);
                that.brushManage.restSignleIdFill(value);
                var rSId = that.brushManage.getInfo(value).sId;
                //that.brushManage.allrest((that.model.nidusChoose ? that.model.nidusChoose : {}), 1, null, value)
                that.brushManage.doneSingleChange(that.model.nidusChoose ? that.model.nidusChoose : {}, value, 'fill');
                //that.brushManage.doneSingleChange((that.model.nidusChoose ? that.model.nidusChoose : {}), value, 'color')
                for (var _i7 = 0; _i7 < that.sceen; _i7++) {
                    //console.log(that.cornerstoneArray[i].sId)
                    var sIdA = rSId.split('_');
                    if (that.cornerstoneArray[_i7] && sIdA.lastIndexOf(that.cornerstoneArray[_i7].sId) != -1) {
                        //console.log('+++++++++++++')
                        var layerid = that.nowLayNum(_i7);
                        //console.log('+++++++++++++')
                        //that.brushManage.allrest((that.model.nidusChoose ? that.model.nidusChoose : {}), layerid,null,value)
                        that.gotoLayer(layerid, that.cornerstoneArray[_i7].sId);
                    }
                }
            });
            this.sequencelist.event._addEvent('sequencelist.changeColor', function (value) {

                //let changeD = that.sequencelist.chooseData
                console.log(value);
                that.brushManage.restSignleId(value);
                var rSId = that.brushManage.getInfo(value).sId;
                //that.brushManage.allrest((that.model.nidusChoose ? that.model.nidusChoose : {}), 1, null, value)
                that.brushManage.doneSingleChange(that.model.nidusChoose ? that.model.nidusChoose : {}, value, 'color');
                //that.brushManage.doneSingleChange((that.model.nidusChoose ? that.model.nidusChoose : {}), 1, null, value)
                for (var _i8 = 0; _i8 < that.sceen; _i8++) {
                    //console.log(that.cornerstoneArray[i].sId)
                    var sIdA = rSId.split('_');
                    if (that.cornerstoneArray[_i8] && sIdA.lastIndexOf(that.cornerstoneArray[_i8].sId) != -1) {
                        //console.log('+++++++++++++')
                        var layerid = that.nowLayNum(_i8);
                        //console.log('+++++++++++++')
                        that.gotoLayer(layerid, that.cornerstoneArray[_i8].sId);
                    }
                }
                //that.restNowImageOnLayer(that.sequencelist.chooseData)
                //let layernum=that.nowLayNum(value.sId)
                //that.gotoLayer(layernum,value.sId)
            });
            this.sequencelist.event._addEvent('sequencelist.closeWho', function (value) {
                console.log(value, that.nodeInfo);
                that.brushManage.restSignleIdShow(value);
                var data = void 0;
                if (that.nodeInfo) {
                    for (var _i9 in that.nodeInfo) {
                        for (var j = 0; j < that.nodeInfo[_i9].length; j++) {
                            if (that.nodeInfo[_i9][j].nodeInfo.uuid == value.uuid || that.nodeInfo[_i9][j].nodeInfo.id == value.uuid) {
                                data = that.nodeInfo[_i9][j];
                                that.nodeInfo[_i9][j].show = value.show;
                            }
                        }
                    }
                }
                console.log(data, 'datadatadatadatadata', that.sceen);
                if (data && window.location.hash.lastIndexOf('drapCanvas') != -1) {
                    that.drawNode(true);
                    that.renderStage();
                    return;
                }
                var rSId = that.brushManage.getInfo(value) ? that.brushManage.getInfo(value).sId : value.sId;

                var _loop = function _loop(_i10) {
                    console.log();
                    var sIdA = rSId.split('_');
                    if (that.cornerstoneArray[_i10] && sIdA.lastIndexOf(that.cornerstoneArray[_i10].sId) != -1) {
                        //console.log('+++++++++++++')
                        var layerid = that.nowLayNum(_i10);
                        //console.log('+++++++++++++')
                        //that.brushManage.allrest((that.model.nidusChoose ? that.model.nidusChoose : {}), layerid)
                        if (data && window.location.hash.lastIndexOf('markview') == -1 && window.location.hash.lastIndexOf('markaudit') == -1) {
                            var toolData = that.cornerstoneArray[_i10].getAllState();
                            toolData.map(function (item) {
                                console.log(item, 'itemitemitem');
                                if (item.uuid && item.uuid == data.nodeInfo.uuid) {
                                    that.cornerstoneArray[_i10].clearSigleData(item.tooltype, item, true);
                                }
                            });
                            console.log(that.cornerstoneArray[_i10].getAllState(), 'toolDatatoolDatatoolData');
                            // that.cornerstoneArray[i].clearSigleData(data.type, data.nodeInfo, true)
                        }
                        console.log('===================');
                        that.gotoLayer(layerid, that.cornerstoneArray[_i10].sId);
                    }
                };

                for (var _i10 = 0; _i10 < that.sceen; _i10++) {
                    _loop(_i10);
                }
                //that.restNowImageOnLayer(that.sequencelist.chooseData)
                //let layernum=that.nowLayNum(value.sId)
                //that.gotoLayer(layernum,value.sId)
            });
            this.sequencelist.event._addEvent('sequencelist.niddclick', function (value) {
                var info1 = that.model.nidusComponentInfo[value.niddtype] ? Tool.objetClone(that.model.nidusComponentInfo[value.niddtype]) : null;

                var layerNum = value.layerNumber; // that.nowLayNum()
                console.log(value);
                var cancel = that.model.nidusChoose ? Tool.clone(that.model.nidusChoose) : null;

                if (!value.bid || !value.uuid) {
                    //that.brushManage.allrest(value, layerNum)
                    that.brushManage.restChooseColor(null, cancel);
                    that.gotoLayer(layerNum, value.sId);
                    that.model.nidusChoose = null;
                    if (window.location.hash.lastIndexOf('markpreview') != -1) {
                        that.makeInfo(info1, value.bid);
                    } else {
                        that.makeInfo(null, value.bid);
                    }
                    console.log(that.model.seriesInfo);
                    var orginFileType = that.model.seriesInfo[value.sId].info.data.fileType;
                    if (!that.model.seriesInfo[value.sId].infoAll && orginFileType != "DCM" && orginFileType != "NII") {
                        that.drawNode(true);
                        that.renderStage();
                    }
                    return;
                }
                var data = void 0;
                var tt = value.toolType;
                if (isNaN(layerNum) || !layerNum) {
                    layerNum = null;
                }
                that.app.loading.show();
                var rSId = that.brushManage.getInfo(value) ? that.brushManage.getInfo(value).sId : value.sId;
                if (value.type == 'nobrush' && cancel && cancel.type == 'brush') {
                    that.brushManage.restChooseColor(null, cancel);
                }
                switch (tt) {
                    case 'MAGIC_STICK_SINGLE':
                        that.model.nidusChoose = data = value;
                        data.toolType = {
                            imageAnnotation: value.niddtype,
                            imageAnnotationToolType: tt
                        };
                        if (layerNum) {
                            that.brushManage.restChooseColor(data, cancel);
                            //that.brushManage.allrest(data, layerNum)
                            that.gotoLayer(null, rSId);
                        } else {
                            that.restNowImageOnLayer(data, cancel);
                        }
                        break;
                    case 'POLYGON':
                        that.model.nidusChoose = data = value;
                        data.toolType = {
                            imageAnnotation: value.niddtype,
                            imageAnnotationToolType: tt
                        };
                        console.log(layerNum, 'layerNum', data);
                        if (layerNum) {
                            that.brushManage.restChooseColor(data, cancel);

                            //that.brushManage.allrest(data, layerNum)
                            that.gotoLayer(null, rSId);
                            //that.gotoLayer(layerNum, value.sId)
                        } else {
                            that.restNowImageOnLayer(data, cancel);
                        }
                        break;
                    case 'FREEHAND':
                        console.log(new Date().getTime());
                        that.model.nidusChoose = data = value;
                        data.toolType = {
                            imageAnnotation: value.niddtype,
                            imageAnnotationToolType: tt
                        };
                        console.log(layerNum, 'layerNum', data);
                        if (layerNum) {
                            that.brushManage.restChooseColor(data, cancel);
                            //that.brushManage.allrest(data, layerNum)
                            that.gotoLayer(null, rSId);
                            // that.gotoLayer(layerNum, value.sId)
                        } else {
                            that.restNowImageOnLayer(data, cancel);
                        }
                        console.log(new Date().getTime());
                        break;
                    case 'QSELECT':
                        that.model.nidusChoose = data = value;
                        data.toolType = {
                            imageAnnotation: value.niddtype,
                            imageAnnotationToolType: tt
                        };
                        console.log(layerNum, 'layerNum', data);
                        if (layerNum) {
                            that.brushManage.restChooseColor(data, cancel);

                            //that.brushManage.allrest(data, layerNum)
                            that.gotoLayer(null, rSId);
                            //that.gotoLayer(layerNum, value.sId)
                        } else {
                            that.restNowImageOnLayer(data, cancel);
                        }
                        break;
                    case 'REGION_PAINT':
                        that.model.nidusChoose = data = value;
                        data.toolType = {
                            imageAnnotation: value.niddtype,
                            imageAnnotationToolType: tt
                        };
                        if (layerNum) {
                            console.log(layerNum);
                            that.brushManage.restChooseColor(data, cancel);

                            //that.brushManage.allrest(data, layerNum)
                            that.gotoLayer(null, rSId);
                            //that.gotoLayer(layerNum, value.sId)
                        } else {
                            that.restNowImageOnLayer(data, cancel);
                        }
                        break;
                    case "FREEHANDLINE":
                        // 自由画笔
                        that.model.nidusChoose = data = value;
                        data.toolType = {
                            imageAnnotation: value.niddtype,
                            imageAnnotationToolType: tt
                        };
                        console.log(value, 'ssssssssssssssssssssssssssssssssss');
                        that.drawNode(true);
                        that.renderStage();
                        break;
                    case "PEN":
                        // that.gotoLayer(value.layerNumber, value.sId)
                        that.model.nidusChoose = data = that.brushManage.getInfo(value);
                        data.toolType = value.toolType;
                        break;
                    default:
                        console.log('dsalklas;');
                        that.gotoLayer(value.layerNumber, value.sId);
                        that.model.nidusChoose = data = that.drawInfo.getInfo(value);
                        break;
                }
                var info = that.model.nidusComponentInfo[data.toolType.imageAnnotation] ? Tool.objetClone(that.model.nidusComponentInfo[data.toolType.imageAnnotation]) : null;
                if (that.nowmpr) {
                    that.nowmpr.nidusChoose(that.model.nidusChoose);
                }
                if (info) {
                    info.annotationItemResultList = that.model.nidusComponentData[value.bid];
                }
                that.app.loading.hide();
                console.log(info, 'that.model.nidusComponentInfothat.model.nidusComponentInfo');
                that.makeInfo(info, value.bid);
            });
            this.sequencelist.event._addEvent('sequencelist.allShowControl', function (value) {
                console.log(value.show);
                that.brushManage.allShow(value);
                if (that.nodeInfo) {
                    for (var _i11 in that.nodeInfo) {
                        for (var j = 0; j < that.nodeInfo[_i11].length; j++) {
                            that.nodeInfo[_i11][j].show = value.show;
                        }
                    }
                }
                if (window.location.hash.lastIndexOf('drapCanvas') != -1) {
                    that.drawNode(true);
                    that.renderStage();
                    return;
                }

                var _loop2 = function _loop2(_i12) {
                    if (that.cornerstoneArray[_i12]) {
                        var layerid = that.nowLayNum(_i12);
                        //that.brushManage.allrest({}, layerid)
                        if (window.location.hash.lastIndexOf('markview') == -1 && window.location.hash.lastIndexOf('markaudit') == -1) {
                            var toolData = that.cornerstoneArray[_i12].getAllState();
                            toolData.map(function (item) {
                                if (item.uuid) {
                                    that.cornerstoneArray[_i12].clearSigleData(item.tooltype, item, true);
                                }
                            });
                        }
                        that.gotoLayer(layerid, that.cornerstoneArray[_i12].sId);
                    }
                };

                for (var _i12 = 0; _i12 < that.sceen; _i12++) {
                    _loop2(_i12);
                }
            });
            this.sequencelist.event._addEvent('sequencelist.del', function (value) {
                //console.log(value)
                that.dom.find('.cal').html('');
                var data = void 0;
                if (value.type == 'nobrush') {
                    console.log(value);
                    data = that.drawInfo.getInfo(value);
                    that.gotoLayer(value.layerNumber, value.sId);
                    //console.log(data,'data')
                } else {
                    data = value;
                    value.backId = value.bid;
                    //console.log(value, that.nowLayNum())
                }
                setTimeout(function () {
                    that.deleteNode(false, data, value.type);
                }, 10);
            });
            // 已经标注过的序列，在其缩略图右上角需显示一个icon标记
            this.sequencelist.event._addEvent('serieslist.addMarkedIcon', function () {
                var currentSeriesId = _this5.getSid();
                var currentSeriesEl = $('.ctcornerstone .slist .serieslist').find("li[sid='" + currentSeriesId + "']");
                !currentSeriesEl.has('i.icon-marked').length && currentSeriesEl.append('<i class="iconfont icon-marked"></i>');
            });
            // 已经标注过的序列再删除病灶，当所有病灶删完时在其缩略图右上角需显示的icon标记也需删除
            this.sequencelist.event._addEvent('serieslist.removeMarkedIcon', function () {
                var currentSeriesId = _this5.getSid();
                var currentSeriesSequenceListEl = $('.ctcornerstone .xulielist .sequencelist .nodeInfolist').find("div[sid='" + currentSeriesId + "']");
                if (!currentSeriesSequenceListEl.length) {
                    var markedIconEl = $('.ctcornerstone .slist .serieslist').find("li[sid='" + currentSeriesId + "']").find('i.icon-marked');
                    markedIconEl.length && markedIconEl.remove();
                }
            });
        }
    }, {
        key: "updateSequencelistSid",
        value: function updateSequencelistSid(value) {
            this.sequencelist.updateSequencelistSid(value);
        }
    }, {
        key: "setNname",
        value: function setNname(id, num) {
            console.log(id, num);
            switch (num * 1) {
                case 1:
                    this.sequencelist.setNname(id, '左心室_' + id);
                    break;
                case 2:
                    this.sequencelist.setNname(id, '左心房_' + id);
                    break;
                case 3:
                    this.sequencelist.setNname(id, '右心室_' + id);
                    break;
                case 4:
                    this.sequencelist.setNname(id, '右心房_' + id);
                    break;
                case 5:
                    this.sequencelist.setNname(id, '主动脉_' + id);
                    break;
                case 6:
                    this.sequencelist.setNname(id, '左心肌_' + id);
                    break;
                case 7:
                    this.sequencelist.setNname(id, '冠脉_' + id);
                    break;
            }
        }
    }, {
        key: "returnListAnno",
        value: function returnListAnno(value) {
            return this.sequencelist.returnAnno(value);
        }
    }, {
        key: "restNowImageOnLayer",
        value: function restNowImageOnLayer(value, cancel) {
            for (var _i13 = 0; _i13 < this.sceen; _i13++) {
                if (this.cornerstoneArray[_i13] && this.cornerstoneArray[_i13].sId == value.sId) {
                    var layerid = this.nowLayNum(_i13);
                    this.brushManage.changeColorById(value, cancel);
                    //this.brushManage.allrest(value, layerid)
                    this.gotoLayer(layerid, value.sId);
                }
            }
        }
    }, {
        key: "setSequence",
        value: function setSequence(value, childrens) {
            var _this6 = this;

            this.nodeInfo = childrens.length != 0 ? {} : null;
            var sData = value;
            childrens.map(function (item) {
                if (!_this6.nodeInfo[item.layerNumber]) {
                    _this6.nodeInfo[item.layerNumber] = [];
                }
                if (!_this6.model.nidusComponentData[item.id]) {
                    _this6.model.nidusComponentData[item.id] = {};
                }
                if (item.tooltype != 'magicStickSingle' && item.tooltype != 'polygon' && item.tooltype != 'quickselect' && item.tooltype != 'regionpaint' && item.tooltype != 'freehand') {
                    var daa = {};
                    //console.log(item.type)
                    if (item.type != 'cobb') {
                        var tempD = {
                            currentPoints: {
                                image: item.result.point1
                            },
                            uuid: item.uuid
                        };
                        daa.nodeInfo = cornerstoneTools[item.type].getMeasurement(tempD);
                    }
                    /*if (item.type == 'alignment') {
                        daa.nodeInfo = {
                            pointA: [],
                            uuid: item.uuid
                        }
                        item.result.pointA.map((linItem) => {
                            daa.nodeInfo.pointA.push({
                                start: linItem.point1
                            })
                        })
                    }*/
                    if (item.type == 'cobb') {
                        daa.nodeInfo = {
                            lineA: [],
                            uuid: item.uuid
                        };
                        item.result.lineA.map(function (linItem) {
                            var tempD = {
                                currentPoints: {
                                    image: linItem.point1
                                },
                                uuid: item.uuid
                            };
                            daa.nodeInfo.lineA.push(cornerstoneTools['length'].getMeasurement(tempD));
                        });

                        //=item.result//cornerstoneTools['length'].getMeasurement(tempD)
                    }

                    if (item.tooltype == 'cobb') {
                        for (var _i14 = 0; _i14 < daa.nodeInfo.lineA.length; _i14++) {
                            daa.nodeInfo.lineA[_i14].handles.end = item.result.lineA[_i14].point2;
                        }
                    } else if (item.tooltype == 'simpleAngle') {
                        daa.nodeInfo.handles.middle = item.result.point2;
                        daa.nodeInfo.handles.end = item.result.point3;
                    } else if (item.tooltype == 'alignment') {
                        daa.nodeInfo.handles.middle = item.result.point2;
                        daa.nodeInfo.handles.middle1 = item.result.point3;
                        daa.nodeInfo.handles.end = item.result.point4;
                    } else {
                        daa.nodeInfo.handles.end = item.result.point2;
                    }
                    //daa.nodeInfo.uuid = item.uuid
                    daa.layerNumber = item.layerNumber ? item.layerNumber : 1;
                    daa.sId = item.sId;
                    daa.type = item.type;
                    daa.show = true;
                    _this6.nodeInfo[item.layerNumber].push(daa);
                    _this6.drawInfo.setInfo(item);
                } else {}
                if (item.annotationItemResultList) {
                    item.annotationItemResultList.map(function (res) {
                        _this6.model.nidusComponentData[item.id][res.annotationItemId] = res;
                    });
                }
                if (item.orginannotationItemResultList) {
                    _this6.model.nidusComponentData[item.id].orginannotationItemResultList = item.orginannotationItemResultList;
                }
                _this6.model.nidusComponentData[item.id].doctorName = item.doctorName;
                _this6.model.nidusComponentData[item.id].imageRemark = item.imageRemark;
            });
            this.sequencelist.setData(sData, childrens);
            this.sequencelist.showNowData(this.cornerstoneArray[0].sId);
            //this.gotoLayer(null, this.cornerstoneArray[0].sId)

            //console.log(this.cornerstoneArray[0],this.nowLayNum(this.cornerstoneArray[0]))
            //this.gotoLayer(1,this.cornerstoneArray[0].sId)
        }
    }, {
        key: "updataSequencelist",
        value: function updataSequencelist(value) {
            console.log(value, 'valuevaluevaluevalue');
            if (!value.brush) {
                console.log(this.drawInfo.getInfo(value));
                var data = this.drawInfo.getInfo(value);
                this.sequencelist.setBackId(data);
                if (this.cornerstoneArray[0]) {
                    var toolData = this.cornerstoneArray[0].getAllState();
                    toolData.map(function (item) {
                        if (item.uuid == value.uuid) {
                            item.backId = value.backId;
                        }
                    });
                }
            } else {
                this.sequencelist.setBackId(value);
            }
        }
    }, {
        key: "removeSequencelist",
        value: function removeSequencelist(value) {
            this.sequencelist.removeNode(value);
        }
    }, {
        key: "getSequence",
        value: function getSequence() {
            return this.sequencelist.nowplayData;
        }
    }, {
        key: "openSequenceNode",
        value: function openSequenceNode(value) {
            this.sequencelist.openNode(value);
        }

        //********************************************列表部分****************************************
        //初始化画图的部分

    }, {
        key: "initCT",
        value: function initCT(totalImage, imageAddress, data) {
            var that = this;
            this.initFrist[0] = false;
            this.totalImage = totalImage;
            for (var j = 0; j < this.totalImage; j++) {
                this.clearLayer.push(true);
            }

            this.baseData = data;
            this.timeLoad = 0;
            this.setScreen(1);
            this.dom.find('.ct0').css({
                'border': "1px solid #0a2634"
            });

            //console.log(data, this.class_c)
            if (this.class_c) {
                this.initsingle(0, imageAddress, {
                    length: this.totalImage,
                    major: 'master',
                    sId: data.data.seriesInstanceUID
                });
            } else {
                this.deferred.done(function (value) {
                    console.log(value, 'valuevaluevalue');
                    that.initsingle(0, imageAddress, {
                        length: that.totalImage,
                        major: 'master',
                        sId: data.data.seriesInstanceUID
                    });
                });
            }
            ES.selctorDoc(window).on('keydown', function (e) {
                console.log(e.keyCode, that.controlename);
                if (that.cornerstoneArray[that.choosescreen]) {
                    var con = that.cornerstoneArray[that.choosescreen];
                    //console.log(con,'aaaaaaaaaaa')
                    var layers = that.nowLayNum(that.choosescreen);
                    var index = con.getIndex(layers);
                    //console.log(index, con.imageAddress)
                    if (e.keyCode == 38) {
                        if (index > 0) {
                            index--;
                        }
                        that.gotoLayer(con.getLayerNum(index), con.sId);
                    }
                    if (e.keyCode == 40) {
                        if (index < con.imageAddress.length - 1) {
                            index++;
                        }
                        //console.log(con.getLayerNum(index), index)
                        that.gotoLayer(con.getLayerNum(index), con.sId);
                    }
                }

                /*if (that.controlename != 'alignmentFan'&&that.controlename != 'quickselectFan') {
                    return
                }*/
                console.log(e.keyCode);
                /*if (that.controlename == 'alignmentFan') {
                    if (e.keyCode == 87) {
                        let id = that.choosescreen
                        if (!that.model.nidusChoose) {
                            console.log('addd')
                            that.alignmentAdd({}, id)
                            that.dom.find('.ct' + id + ' .cal').html('前上缘')
                            return
                        }
                        if (that.model.nidusChoose && that.model.nidusChoose.type != 'alignment') {
                            console.log('addd')
                            that.alignmentAdd({}, id)
                            hat.dom.find('.ct' + id + ' .cal').html('前上缘')
                            return
                        }
                        if (that.model.nidusChoose) {
                            let data = that.drawInfo.getInfo(that.model.nidusChoose)
                            if (data.pointA.length == 4) {
                                console.log('addd')
                                that.alignmentAdd({}, id)
                                hat.dom.find('.ct' + id + ' .cal').html('前上缘')
                                that.gotoLayer(null, that.cornerstoneArray[id].sId)
                                return
                            }
                            if (data.pointA.length < 4) {
                                console.log('edit', id)
                                data.pointA.push({})
                                data.setDataType = 'number'
                                let name = that.model.returnBodyName(data.pointA.length)
                                that.dom.find('.ct' + id + ' .cal').html(name)
                                that.gotoLayer(null, that.cornerstoneArray[id].sId)
                                that.event._dispatch('ctcornerstone.editNode', data)
                                return
                            }
                         }
                    }
                    return
                }*/
                if (that.controlename == 'quickselectFan') {
                    if (e.keyCode == 65) {
                        that.cornerstoneTools_config.quickselect_config.deviation = that.cornerstoneTools_config.quickselect_config.deviation + 2;
                    }
                    if (e.keyCode == 68) {
                        that.cornerstoneTools_config.quickselect_config.deviation = that.cornerstoneTools_config.quickselect_config.deviation - 2;
                    }
                }
                that.makeCicle();
            });
        }
    }, {
        key: "makeCicle",
        value: function makeCicle() {}
    }, {
        key: "resetAllData",
        value: function resetAllData(id) {
            if (this.cornerstoneArray[id]) {
                this.clearLayer = [];
                this.brushC = [];
                this.cornerstoneArray[id].progress.close();
                this.cornerstoneArray[id].close();
                this.cornerstoneArray[id] = null;
            }
            this.initFrist[id] = false;
            this.dom.find('#ct' + id).remove();
            this.dom.find('.c' + id).prepend('<div id="ct' + id + '"></div>');
        }
    }, {
        key: "initsingle",
        value: function initsingle(id, imageAddress, data) {
            var _this7 = this;

            var cid = id;
            var that = this;
            var baseData = this.baseData;
            //console.log(this.cornerstoneArray[id], id, data)
            //console.log('=============')
            this.resetAllData(id);
            this.resize();
            //console.log('initsingle')
            //let name=imageAddress[0].split('?')[0].match(/(\/0*\d.jpg$){1,}/g)[0]||null
            var min = Tool.changeToName(imageAddress[0]);
            var index = min != -1 ? min : 1;

            this.cornerstoneArray[id] = new this.class_c({
                element: this.dom.find('#ct' + id).dom[0].dom,
                totalImage: data.length,
                imageAddress: imageAddress,
                index: index - 1,
                type: this.imageType.toLowerCase() || "dcm"
            });
            this.cornerstoneArray[id].sId = data.sId;
            var progress = this.app.loadModule(this.ctProgress, this.dom.find('.ct' + id + ' .image_progress'));
            var newArray = [];
            imageAddress.map(function (item) {
                var urlA = item.split('?')[0].split('/');
                newArray.push(urlA[urlA.length - 1].split('.')[0] * 1);
            });
            console.log(data.length, newArray);
            //progress.setImageData(data.length,newArray)
            progress.setImageData(newArray);
            this.changeLayeIdTime = null;
            progress.event._addEvent("ctprogress.stopDrag", function () {
                if (_this7.changeLayeIdTime != null) {
                    clearInterval(_this7.changeLayeIdTime);
                }
                _this7.changeLayeIdTime = null;
            });
            progress.event._addEvent("ctprogress.click", function () {
                _this7.changeLayeIdTime = 0;
                var layserId = Math.floor(progress.getRate());
                that.cornerstoneArray[id].funcNodule(layserId);
            });
            progress.event._addEvent("ctprogress.startDrag", function () {
                _this7.changeLayeIdTime = setInterval(function () {
                    var layserId = Math.floor(progress.getRate());
                    console.log(layserId);
                    that.cornerstoneArray[id].funcNodule(layserId);
                }, 500);
            });
            console.log('==============');
            this.cornerstoneArray[id].progress = progress;
            //图片渲染
            var total = data.length; // Tool.changeToName(imageAddress[imageAddress.length - 1], 'jpg')
            //console.log(imageAddress[data.length - 1], total, imageAddress)
            this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.cornerstonetoolsmousemove', function (value) {
                var data = JSON.parse(JSON.stringify(that.model.getDicomValue(value.detail)));
                data.sId = that.cornerstoneArray[id].sId;
                data.id = id;
                that.event._dispatch('ctcornerstone.HUShow', data);
                //console.log(allData)
            });
            this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.wlChange', function () {});
            this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.cornerstonetoolsmousewheel', function (value) {
                if (!that.crossmove && that.crossOpen) {
                    that.changePOint(id, that.dom.find('#ct' + id).box());
                }
            });
            this.ctEvent(id, imageAddress, data, total);
        }
    }, {
        key: "endDone",
        value: function endDone(value, num) {
            var _this8 = this;

            //console.log(value, 'valuevaluevaluevaluevaluevaluevalue')
            value.uuid = value.id;
            var aaa = this.drawInfo.getInfo(value);
            //console.log(aaa.backId)
            var that = this;
            if (aaa.backId) {
                value = this.drawInfo.removeInfo(value);
                this.sequencelist.removeNode(value);
                if (this.nodeInfo) {
                    if (this.nodeInfo[value.layerNumber]) {
                        for (var _i15 = 0; _i15 < this.nodeInfo[value.layerNumber].length; _i15++) {
                            if (this.nodeInfo[value.layerNumber][_i15].nodeInfo.uuid == value.id || this.nodeInfo[value.layerNumber][_i15].nodeInfo.id == value.id) {
                                this.nodeInfo[value.layerNumber].splice(_i15, 1);
                            }
                        }
                    }
                }
                if (this.nidusControl) {
                    this.nidusControl.hide();
                }
                this.event._dispatch('ctcornerstone.deleteNode', {
                    backId: value.backId
                });
            } else {
                setTimeout(function () {
                    num++;
                    if (num < 200) {
                        _this8.endDone(value, num);
                    }
                }, 30);
            }
        }

        //控制分屏

    }, {
        key: "setScreen",
        value: function setScreen(value) {
            if (value > this.sceen) {
                for (var _i16 = this.sceen; _i16 < value; _i16++) {
                    var html = "<div class=\"c_fbb03b ct" + _i16 + "\" pos=\"" + _i16 + "\">\n            <div class=\"fl w50_ pr c" + _i16 + "\">\n                <div id=\"ct" + _i16 + "\"></div>\n            </div>\n            <p class=\"sc\"></p>\n            <p class=\"wwc\"></p>\n            <p class=\"layer\"></p>\n            <p class=\"infoXYZ\"></p>\n            <p class=\"cal\"></p>\n            <div class=\"line\"></div>\n            <div class=\"image_progress\"></div>\n            </div>";
                    this.dom.find('.dicom_content').append(html);
                }
            }
            if (value < this.sceen) {
                for (var _i17 = value; _i17 < this.sceen; _i17++) {
                    if (this.cornerstoneArray[_i17]) {
                        this.cornerstoneArray[_i17].close();
                        this.cornerstoneArray[_i17] = null;
                    }
                    this.dom.find('.dicom_content .ct' + _i17).remove();
                }
            }
            var that = this;
            this.dom.find('.c_fbb03b').off('click');
            this.dom.find('.c_fbb03b').on('click', function () {
                that.dom.find('.c_fbb03b').css({
                    'border': "1px solid #fff"
                });
                var dom = ES.selctorDoc(this);
                dom.css({
                    'border': "1px solid #448e97"
                });
                that.choosescreen = dom.attr('pos');
                var sId = that.cornerstoneArray[that.choosescreen] ? that.cornerstoneArray[that.choosescreen].sId : null;
                that.sequencelist.showNowData(sId);
            });
            this.sceen = value;
            this.resize();
        }
    }, {
        key: "changeWWCImage",
        value: function changeWWCImage(imgs) {
            var _this9 = this;

            if (!imgs) {
                return;
            }
            if (imgs[0] == this.cornerstoneArray[this.choosescreen].axialStack1.imageIds[0]) {
                return;
            }
            console.log('dkasjkajkdljlajdlkasjdkla');
            this.cornerstoneArray[this.choosescreen].imageAddress = imgs;
            this.cornerstoneArray[this.choosescreen].axialStack1.imageIds = imgs;
            var layerid = this.nowLayNum(this.choosescreen);
            setTimeout(function () {
                _this9.cornerstoneArray[_this9.choosescreen].funcNodule(layerid);
            }, 10);
        }

        //进行特殊id的赋值

    }, {
        key: "setSpliceId",
        value: function setSpliceId(value, type) {
            //if (!value.uuid) {
            var nowData = this.cornerstoneArray[0].geSiglneState(type);
            if (nowData) {
                nowData.data.map(function (item) {
                    if (item.id == value.id) {
                        value.uuid = item.uuid = value.id;
                    }
                });
            }
        }
    }, {
        key: "setSpliceUUID",
        value: function setSpliceUUID(value, type, uuid, cid) {
            //if (!value.uuid) {
            var nowData = this.cornerstoneArray[cid].geSiglneState(type);
            if (nowData) {
                nowData.data.map(function (item) {
                    if (item.id == value.id) {
                        value.uuid = item.uuid = uuid;
                    }
                });
            }
        }
    }, {
        key: "getAlllayer",
        value: function getAlllayer(value) {
            var layarr = [];
            for (var i = 0; i < this.cornerstoneArray.length; i++) {
                if (this.cornerstoneArray[i]) {
                    if (this.cornerstoneArray[i].axialStack1.currentImageIdIndex == this.cornerstoneArray[value].axialStack1.currentImageIdIndex) {
                        layarr.push(i);
                    }
                }
            }
            return layarr;
        }
    }, {
        key: "setbrush",
        value: function setbrush(value) {
            //console.log(value, 'setbrushsetbrushsetbrush')
            if (value.imglist.length == 0) {
                this.event._dispatch('ctcornerstone.brushfirstload');
                return;
            }
            //console.log(value, 'setbrushsetbrushsetbrush')
            var that = this;
            var allload = 0;
            var length = value.imglist.filter(function (item) {
                return item;
            }).length;
            var num = 0;
            //console.log(value.imglist)
            if (length == 0) {
                this.event._dispatch('ctcornerstone.brushfirstload');
                return;
            }
            for (var _i18 = 0; _i18 < value.imglist.length; _i18++) {
                if (value.imglist[_i18]) {
                    if (num == 0) {
                        num = _i18;
                    }
                    //console.log(num)
                    //console.log(Tool.changeToName(value.imglist[i]), 'Tool.changeToName(value.imglist[i])Tool.changeToName(value.imglist[i])')
                    var _img = new Image();
                    _img.id = _i18;
                    _img.crossOrigin = '';
                    _img.onload = function () {
                        allload++;
                        that.brushManage.creatNewImage(this, value, {
                            width: this.width,
                            height: this.height
                        }, this.id, that.model.nidusChoose ? that.model.nidusChoose.bid : "");
                        if (allload >= length) {
                            setTimeout(function () {
                                if (that.cornerstoneArray[0]) {
                                    that.cornerstoneArray[0].brushFan();
                                    that.cornerstoneArray[0].disableAllTools(true);
                                }

                                that.event._dispatch('ctcornerstone.brushfirstload');
                            }, 300);
                        }
                    };
                    _img.onerror = function () {
                        allload++;
                        if (allload >= length) {
                            setTimeout(function () {
                                if (that.cornerstoneArray[0]) {
                                    that.cornerstoneArray[0].brushFan();
                                    that.cornerstoneArray[0].disableAllTools(true);
                                }
                                //that.cornerstoneArray[0].brushFan()
                                //that.cornerstoneArray[0].disableAllTools(true)
                                that.event._dispatch('ctcornerstone.brushfirstload');
                            }, 300);
                        }
                    };
                    _img.src = value.imglist[_i18];
                }
            }
            this.sequencelist.setLayerInfo(value, num);
            //this.addVlaue = value
        }
    }, {
        key: "nowLayNum",
        value: function nowLayNum(sId) {
            return String(this.dom.find('.ct' + sId + ' .layer').html()).split('/')[0] * 1;
        }

        //删除标注

    }, {
        key: "deleteNode",
        value: function deleteNode(key, value, type) {
            console.log(value, 'deleteNode');
            var that = this;
            this.model.controlStauts.delete = true;
            this.app.alert.show({
                title: ' ',
                msg: '确认删除将清除该影像标注的图形和信息？',
                close: true,
                sure: function sure() {
                    if (type == 'nobrush') {
                        that.doneDelete(key, value);
                    } else {
                        console.log(that.nodeInfo, value.layerNumber, value);
                        if (that.nodeInfo && that.nodeInfo[value.layerNumber]) {
                            for (var _i19 = 0; _i19 < that.nodeInfo[value.layerNumber].length; _i19++) {
                                if (that.nodeInfo[value.layerNumber][_i19].nodeInfo.uuid == value.uuid || that.nodeInfo[value.layerNumber][_i19].nodeInfo.id == value.uuid) {
                                    that.nodeInfo[value.layerNumber].splice(_i19, 1);
                                    console.log('mmmmmmmmmmmmmmmmmmmmmmm', value.layerNumber);
                                    that.gotoLayer(value.layerNumber, value.sId);
                                }
                            }
                        }
                        that.brushManage.delbrush(value);
                        that.gotoLayer(value.layerNumber, value.sId); //that.nowLayNum()
                        that.sequencelist.removeNode(value);
                        if (that.nidusControl) {
                            that.nidusControl.hide();
                        }
                        if (that.model.nidusChoose) {
                            if (that.model.nidusChoose.uuid == value.uuid) {
                                that.model.nidusChoose = null;
                            }
                        }
                        that.event._dispatch('ctcornerstone.deleteNode', {
                            backId: value.backId
                        });
                    }
                }
            });
        }
        //提示以后确认要删除的

    }, {
        key: "doneDelete",
        value: function doneDelete(key, value) {
            var _this10 = this;

            var that = this;

            if (!key) {
                if (this.nodeInfo) {
                    if (this.nodeInfo[value.layerNumber]) {
                        for (var _i20 = 0; _i20 < this.nodeInfo[value.layerNumber].length; _i20++) {
                            if (this.nodeInfo[value.layerNumber][_i20].nodeInfo.uuid == value.id || this.nodeInfo[value.layerNumber][_i20].nodeInfo.id == value.id) {
                                this.nodeInfo[value.layerNumber].splice(_i20, 1);
                            }
                        }
                    }
                }
                this.sequencelist.removeNode(value);
            }
            //console.log(toolData, 'deleteNode')
            var arr = [];
            var ctArray = [];
            var haveScreen = false;

            var _loop3 = function _loop3(_i21) {
                //console.log(value.sId, this.cornerstoneArray[i].sId, key)
                if (_this10.cornerstoneArray[_i21]) {
                    if (_this10.cornerstoneArray[_i21].sId == value.sId) {
                        ctArray = _i21;
                        var toolData = _this10.cornerstoneArray[_i21].getAllState();
                        console.log(JSON.stringify(toolData), 'toolDatatoolDatatoolDatatoolDatatoolData');
                        toolData.map(function (item) {
                            if (key) {
                                if (item.active && item.uuid) {
                                    item.layerNumber = String(that.dom.find('.ct' + _i21 + ' .layer').html()).split('/')[0];
                                    for (var _i22 = 0; _i22 < that.nodeInfo[item.layerNumber].length; _i22++) {
                                        if (that.nodeInfo[item.layerNumber][_i22].nodeInfo.id == item.id) {
                                            that.nodeInfo[item.layerNumber].splice(_i22, 1);
                                        }
                                    }
                                    //if (item.tooltype != "alignment") {
                                    var data = that.drawInfo.getInfo(item);
                                    that.cornerstoneArray[_i21].clearSigleData(item.tooltype, item);
                                    //}
                                }
                            } else {
                                // if (item.tooltype != "alignment") {
                                if (item.id == value.id || item.uuid == value.uuid) {
                                    that.cornerstoneArray[_i21].clearSigleData(item.tooltype, item);
                                }
                                //}
                            }
                        });
                        haveScreen = true;
                    }
                }
            };

            for (var _i21 = 0; _i21 < this.sceen; _i21++) {
                _loop3(_i21);
            }
            if (!haveScreen) {
                if (this.nidusControl) {
                    this.nidusControl.hide();
                    img.src = value.imglist[i];
                }
            }
            //this.sequencelist.setLayerInfo(value, num)
            //this.addVlaue = value
        }

        //控制影像标注信息显示还是不显示

    }, {
        key: "controlNodeShowHide",
        value: function controlNodeShowHide(value) {
            this.nodeShow = value.stauts;
            this.model.controlStauts.delete = false;
            //let dom=this.dom.find('.layer')
            //let layer = this.dom.find('.layer').html().split('/')[0]
            if (!this.nodeShow) {
                this.clearData('biao');
            }
            for (var _i23 = 0; _i23 < this.sceen; _i23++) {
                if (this.cornerstoneArray[_i23]) {
                    var layer = this.dom.find('.layer').eq(_i23).html().split('/')[0];
                    this.gotoLayer(layer, this.cornerstoneArray[_i23].sId); // this.shownowid)
                }
            }
        }

        //跳转到对应的层

    }, {
        key: "gotoLayer",
        value: function gotoLayer(layerid, nid) {
            //this.shownowid = nid
            var nidA = nid.split('_');
            for (var i = 0; i < this.sceen; i++) {
                if (this.cornerstoneArray[i]) {
                    if (nid.lastIndexOf(this.cornerstoneArray[i].sId) != -1) {
                        if (!layerid || layerid == 'undefined') {
                            layerid = this.nowLayNum(i);
                        }
                        console.log(layerid);
                        this.cornerstoneArray[i].funcNodule(layerid);
                    }
                }
            }
        }

        //设置一些参数，以方便处理

    }, {
        key: "setConfigByDicommeun",
        value: function setConfigByDicommeun(value) {
            switch (value.type) {
                case "bradius":
                    this.cornerstoneTools_config.brush_config.radius = value.value;
                    break;
                case "lineWidth":
                    this.cornerstoneTools_config.freehand_config.lineWidth = value.value;
                    break;
                case "pdistance":
                    this.cornerstoneTools_config.polygon_config.distance = value.value;
                    break;
                case "pdeviation":
                    this.cornerstoneTools_config.polygon_config.deviation = value.value;
                    break;
                case "qdeviation":
                    this.cornerstoneTools_config.quickselect_config.deviation = value.value;
                    break;
            }
        }

        //调用各种方法

    }, {
        key: "defaultFunction",
        value: function defaultFunction(funName, tooltype) {
            if (tooltype) {
                this.tooltype = tooltype;
            }
            console.log(tooltype);
            for (var j = 0; j < this.sceen; j++) {
                if (this.cornerstoneArray[j]) {
                    this.cornerstoneArray[j].moveAllElementData = null;
                }
            }
            if (funName != "restFan" && funName != "clearFan" && funName != "resizeCon") {
                this.controlename = funName;
            }
            if (funName == 'regionpaintFan' || funName == 'freehandFan' || funName == 'polygonFan' || funName == 'quickselectFan') {
                if (this.model.nidusChoose) {
                    this.sequencelist.clickById(this.model.nidusChoose);
                }
            }
            if (funName == 'undefinedFan') {
                this.controlename = null;
                this.disableAllTools(true);
                return;
            }
            if (!funName) {
                this.disableAllTools(true);
                return;
            }
            if (funName == 'polygonFan' || funName == 'quickselectFan' || funName == 'regionpaintFan' || funName == 'freehandFan') {
                //this.dom.find('.submit_data').show()
            }
            var now_config = {};
            if (this.cornerstoneTools_config) {
                var key = funName.replace('Fan', '_config');
                now_config = this.cornerstoneTools_config[key] ? this.cornerstoneTools_config[key] : {};
            }
            if (funName == "earseFan") {
                funName = "brushFan";
            }
            if (funName == "rectangle_textFan") {
                funName = "rectangleRoiFan";
            }
            if (funName == "lineFan") {
                funName = "lengthFan";
            }
            //console.log(now_config)
            this.setoolconfig.setconfig(funName, now_config);
            if (this.nowmpr) {
                this.nowmpr.defaultFunction(funName);
            }
            for (var i = 0; i < this.sceen; i++) {
                //console.log(this.cornerstoneArray[i].sId)
                if (this.cornerstoneArray[i] && this.cornerstoneArray[i].getViewport()) {
                    this.nowWWC[i] = {
                        c: this.cornerstoneArray[i].getViewport().voi.windowCenter,
                        w: this.cornerstoneArray[i].getViewport().voi.windowWidth
                    };
                    if (funName != "zoomFan" && funName != "wlFan" && funName != "brushFanTe" && funName != "restFan" && funName != 'resizeCon' && funName != "clearFan") {
                        var sid = this.cornerstoneArray[i].sId;
                        if (!this.model.seriesInfo[sid].needAnno) {
                            return;
                        } else {
                            eval('this.cornerstoneArray[i].' + funName + '()');
                        }
                    } else {
                        eval('this.cornerstoneArray[i].' + funName + '()');
                    }
                }
            }
        }
    }, {
        key: "disableAllTools",
        value: function disableAllTools() {
            for (var i = 0; i < this.sceen; i++) {
                if (this.cornerstoneArray[i]) {
                    this.cornerstoneArray[i].disableAllTools(true);
                }
            }
        }
    }, {
        key: "lungWindown",
        value: function lungWindown(c, w, imgs) {
            //console.log(imgs)
            if (c == null || w == null) {
                c = 128; //this.cornerstoneArray[this.choosescreen].colcDefault
                w = 256; //this.cornerstoneArray[this.choosescreen].colwDefault
            }
            this.nowWWC[this.choosescreen] = {
                c: c,
                w: w
            };
            this.changeWWCImage(imgs);
            // console.log(this.nowWWC, 'this.nowWWCthis.nowWWCthis.nowWWC')
            if (!this.cornerstoneArray[this.choosescreen]) {
                return;
            }

            this.cornerstoneArray[this.choosescreen].lungWindown(c, w);
            this.nowWWC[this.choosescreen] = {
                c: this.cornerstoneArray[this.choosescreen].getViewport().voi.windowCenter,
                w: this.cornerstoneArray[this.choosescreen].getViewport().voi.windowWidth

                //this.cornerstoneArray[this.choosescreen].getViewport()
            };
        }
    }, {
        key: "getSid",
        value: function getSid() {
            return this.cornerstoneArray[this.choosescreen].sId;
        }
    }, {
        key: "showWWC",
        value: function showWWC(value, sId, id) {
            // console.log(value,this.model.seriesInfo[sId].info.wwc)
            var max = value.windowCenter + value.windowWidth / 2;
            var min = value.windowCenter - value.windowWidth / 2;
            if (this.imageType != "DCM") {
                var mindata = this.model.seriesInfo[sId].info.wwc.low * 1;
                var range = this.model.seriesInfo[sId].info.wwc.hight * 1 - this.model.seriesInfo[sId].info.wwc.low * 1;
                max = range * max / 255 + mindata;
                min = range * min / 255 + mindata;
                // this.getMMCImage()
                if (this.dom.find('.ct' + id + ' .wwc').html() != 'wc:' + Math.round((max + min) / 2) + " ww:" + Math.round(max - min)) {
                    var data = {};
                    data.sId = this.cornerstoneArray[id].sId;
                    data.wwc = {
                        c: Math.round((max + min) / 2),
                        w: Math.round(max - min)
                    };
                    this.event._dispatch('ctcornerstone.wlChange', data);
                }
            }
            this.dom.find('.ct' + id + ' .wwc').html('wc:' + Math.round((max + min) / 2) + " ww:" + Math.round(max - min));
        }
    }, {
        key: "huValue",
        value: function huValue(value) {
            //console.log(value)
            var xyinfo = "X:" + value.point.x.toFixed(2) + "<br/>Y:" + value.point.y.toFixed(2);
            var HU = value.hu ? "<br />CT值:" + value.hu.toFixed(2) : "";
            this.dom.find('.ct' + value.id + ' .infoXYZ').html(xyinfo + HU);
        }
    }, {
        key: "clearData",
        value: function clearData(type) {
            var probe = this.cornerstoneArray[0].geSiglneState('probe');
            var length = this.cornerstoneArray[0].geSiglneState('length');
            var rectangleRoi = this.cornerstoneArray[0].geSiglneState('rectangleRoi');
            var ellipticalRoi = this.cornerstoneArray[0].geSiglneState('ellipticalRoi');
            var simpleAngle = this.cornerstoneArray[0].geSiglneState('simpleAngle');
            //console.log(rectangleRoi, length)
            if (probe) {
                this.toolDataClear(probe.data, 'probe', type);
            }
            if (simpleAngle) {
                this.toolDataClear(probe.data, 'simpleAngle', type);
            }
            if (length) {
                this.toolDataClear(length.data, 'length', type);
            }
            if (rectangleRoi) {
                this.toolDataClear(rectangleRoi.data, 'rectangleRoi', type);
            }
            if (ellipticalRoi) {
                this.toolDataClear(ellipticalRoi.data, 'ellipticalRoi', type);
            }
        }
    }, {
        key: "toolDataClear",
        value: function toolDataClear(dataArray, type, who) {
            var _this11 = this;

            console.log(who, 'who');
            dataArray.map(function (item) {
                if (who == 'meas') {
                    if (!item.uuid) {
                        _this11.cornerstoneArray[0].clearSigleData(type, item);
                        _this11.toolDataClear(dataArray, type, who);
                        return;
                    }
                } else {
                    if (item.uuid) {
                        _this11.cornerstoneArray[0].clearSigleData(type, item);
                        _this11.toolDataClear(dataArray, type, who);
                        return;
                    }
                }
            });
        }
    }, {
        key: "clearSigleFan",
        value: function clearSigleFan(name) {
            this.cornerstoneArray[0].clearSigleFan(name);
        }
    }, {
        key: "claerAll",
        value: function claerAll() {
            this.drawInfo.removeAll();
            this.clearLayer = [];
        }
    }, {
        key: "close",
        value: function close() {
            for (var i = 0; i < this.sceen; i++) {
                if (this.cornerstoneArray[i]) {
                    this.cornerstoneArray[i].close();
                }
            }
            this.nodeShow = true;
            if (this.nidusControl) {
                this.nidusControl.hide();
            }
            this.brushManage.deleteAll();
            this.cornerstoneArray = [];
        }
    }, {
        key: "resize",
        value: function resize() {
            var cw = ES.selctorDoc(window).box().clientWidth;
            var ch = ES.selctorDoc(window).box().clientHeight - 60 - 64;

            // console.log('aaaa')
            this.dom.find('.ctcornerstone').css({
                'width': cw
            });
            this.dom.find('.ctcornerstone .dicom_content').css({
                'width': cw - 290 - 180,
                'height': ch - 105
            });
            this.dom.find('.ctcornerstone .mpr').css({
                'width': cw - 290 - 180,
                'height': ch
            });
            this.dom.find('.ctcornerstone .slist').css({
                'width': cw - 290 - 180
            });
            this.dom.find('.ctcornerstone .slist .sequence-body-parent').css({
                'width': cw - 290 - 180
            });
            this.dom.find('.ctcornerstone .xulielist').css({
                'height': ch
            });
            this.dom.find('.ctcornerstone .info').css({
                'height': ch
            });
            this.dom.find('.ctcornerstone .nidus_content').css({
                'height': ch
            });
            if (this.sceen) {
                var layout = this.model.getLayout(this.sceen);
                var w = (cw - 290 - 180) * layout.w;
                var h = void 0;
                if (this.makeStudy) {
                    h = (ch - 105) * layout.h;
                } else {
                    h = ch * layout.h;
                }
                //console.log(w, h)
                for (var i = 0; i < this.sceen; i++) {
                    this.dom.find('#ct' + i).css({
                        'width': w,
                        'height': h
                    });
                    this.dom.find('.ct' + i).css({
                        "top": layout.t == 0 ? 0 : i >= this.sceen / 2 ? h : 0,
                        "left": layout.t == 0 ? i * w : i >= this.sceen / 2 ? (i - this.sceen / 2) * w : i * w
                    });
                    this.dom.find('.ct' + i + ' .image_progress').css({
                        height: ch
                    });
                    if (this.cornerstoneArray[i]) {
                        //console.log(i, 'iiiiiiiiiiiii')
                        this.defaultFunction('resizeCon');
                        if (this.crossOpen) {
                            this.calflow(i);
                            if (this.crossArray[i]) {
                                this.crossArray[i].setYHeight(h);
                            }
                        }
                        this.cornerstoneArray[i].progress.resize(this.nowLayNum(i));
                    }
                }
            }
            if (this.nowmpr) {
                this.nowmpr.resize(cw - 290 - 180, ch);
            }
            /*if (this.cornerstoneArray[0]) {
                this.defaultFunction('resizeCon')
            }*/
            if (this.nidusControl) {
                this.nidusControl.resize();
            }
            if (this.nidusControlAll) {
                this.nidusControlAll.resize();
            }
        }
    }]);

    return ctcornerstone_base;
}(Interstellar.moduleBase);

//原型链一定要有的
//window.ctcornerstone_base = window.ctcornerstone_base || {}


window.ctcornerstone_base = window.ctcornerstone_base || ctcornerstone_base;
module.exports = ctcornerstone_base;

/***/ }),

/***/ 649:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".ctcornerstone {\n  width: 100%;\n  position: relative;\n}\n.ctcornerstone .dicom_content {\n  float: left;\n}\n.ctcornerstone .dicom_content .c_fbb03b {\n  position: absolute;\n  color: #D2EFFC;\n  border: 1px solid #fff;\n  box-sizing: border-box;\n}\n.ctcornerstone .dicom_content .c_fbb03b .layer {\n  position: absolute;\n  bottom: 10px;\n  right: 30px;\n  color: #fff;\n  padding: 5px 5px;\n  border-radius: 2px;\n  background: #000;\n  z-index: 120;\n}\n.ctcornerstone .dicom_content .c_fbb03b .line {\n  position: absolute;\n  -webkit-touch-callout: none;\n  /* iOS Safari */\n  -webkit-user-select: none;\n  /* Chrome/Safari/Opera */\n  -khtml-user-select: none;\n  /* Konqueror */\n  -moz-user-select: none;\n  /* Firefox */\n  -ms-user-select: none;\n  /* Internet Explorer/Edge */\n  user-select: none;\n  width: 100%;\n  top: 0;\n  left: 0;\n}\n.ctcornerstone .dicom_content .c_fbb03b .sc {\n  position: absolute;\n  bottom: 50px;\n  right: 30px;\n  color: #fff;\n  padding: 5px 5px;\n  border-radius: 2px;\n  background: #000;\n  z-index: 120;\n}\n.ctcornerstone .dicom_content .c_fbb03b .wwc {\n  position: absolute;\n  bottom: 30px;\n  right: 30px;\n  color: #fff;\n  padding: 5px 5px;\n  border-radius: 2px;\n  background: #000;\n  z-index: 100;\n}\n.ctcornerstone .dicom_content .c_fbb03b .image_progress {\n  position: absolute;\n  right: 0px;\n  top: 0;\n  background: #000;\n  z-index: 130;\n}\n.ctcornerstone .dicom_content .c_fbb03b .infoXYZ {\n  position: absolute;\n  bottom: 10px;\n  left: 10px;\n  color: #fff;\n  padding: 5px 5px;\n  border-radius: 2px;\n  background: #000;\n  z-index: 20;\n}\n.ctcornerstone .dicom_content .c_fbb03b .cal {\n  position: absolute;\n  top: 10px;\n  left: 30px;\n  color: #fff;\n  padding: 5px 5px;\n  border-radius: 2px;\n  background: #000;\n  z-index: 20;\n}\n.ctcornerstone .mpr {\n  position: absolute;\n  border: 1px dashed #000;\n  display: none;\n  background: transparent;\n  top: 0px;\n  left: 180px;\n  z-index: 2000;\n}\n.ctcornerstone .cicle {\n  position: fixed;\n  border: 1px dashed #000;\n  display: none;\n  background: transparent;\n  top: 0;\n  left: 0;\n  z-index: 1000;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  pointer-events: none;\n}\n.ctcornerstone .xulielist {\n  float: left;\n  width: 180px;\n  background: #0a2634;\n}\n.ctcornerstone .info {\n  float: left;\n  width: 290px;\n  background: #0a2634;\n}\n.ctcornerstone .nidus_content {\n  position: absolute;\n  width: 290px;\n  top: 0;\n  right: 0;\n  display: none;\n  z-index: 20;\n}\n.ctcornerstone .allcornerstone {\n  position: relative;\n}\n.ctcornerstone .slist {\n  position: absolute;\n  left: 180px;\n  bottom: 0;\n  height: 100px;\n}\n.ctcornerstone .submit_data {\n  width: 200px;\n  height: 30px;\n  position: absolute;\n  left: 50%;\n  margin-left: -100px;\n  background: #0a2634;\n  border-radius: 5px;\n  display: none;\n}\n.ctcornerstone .submit_data span {\n  font-size: 14px;\n  line-height: 30px;\n  color: #d2effc;\n}\n", ""]);

// exports


/***/ }),

/***/ 650:
/***/ (function(module, exports) {

module.exports = "<div class=ctcornerstone> <div class=xulielist></div> <div class=\"dicom_content allcornerstone\" oncontextmenu=return!1 unselectable=on onselectstart=return!1 onmousedown=return!1> </div> <div class=info></div> <div class=nidus_content></div> <div style=clear:both></div> <div class=slist></div> <div class=cicle unselectable=on onselectstart=return!1 onmousedown=return!1 onmouseover=return!1 onmousemove=return!1></div> <div class=mpr oncontextmenu=return!1 unselectable=on onselectstart=return!1 onmousedown=return!1></div> </div> <div style=clear:both></div> ";

/***/ }),

/***/ 651:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function cornerstoneTool_config() {
    //每一个key值代表工具名称
    //t代表是互斥操作，还是独立操作，m代表是互斥操作。s代表是独立操作
    //c代表是否可以操作
    //radius代表画笔的粗细
    //deviation代表色差
    //distance代表搜索范围
    return {
        rectangleRoi_config: {
            areaDisplayFlag: false,
            nameDisplayFlag: false,
            drawHandlesOnHover: true
        },
        rectangle_text_config: {
            areaDisplayFlag: true,
            nameDisplayFlag: true,
            drawHandlesOnHover: true
        },
        length_config: {
            flag: false,
            nameDisplayFlag: false,
            displayMean: true,
            displayText: false,
            drawHandlesOnHover: true
        },
        line_config: {
            flag: false,
            nameDisplayFlag: true,
            displayMean: true,
            displayText: true,
            drawHandlesOnHover: true
        },
        ellipticalRoi_config: {
            areaDisplayFlag: false,
            nameDisplayFlag: false,
            drawHandlesOnHover: true
        },
        magnify_config: {
            magnifySize: 225,
            magnificationLevel: 2
        },
        brush_config: {
            draw: 1,
            radius: 5,
            lineWidth: 1,
            hoverColor: 'rgba(230, 25, 75, 1.0)',
            dragColor: 'rgba(230, 25, 75, 0.8)'
        },
        earse_config: {
            draw: 0,
            radius: 3,
            hoverColor: 'rgba(230, 25, 75, 1.0)',
            dragColor: 'rgba(230, 25, 75, 0.8)'
        },
        polygon_config: {
            distance: 5,
            radius: 1,
            lineWidth: 1,
            deviation: 5,
            hoverColor: 'rgba(230, 25, 75, 0.5)',
            dragColor: 'rgba(230, 25, 75, 0.4)'
        },
        freehand_config: {
            distance: 2,
            lineWidth: 1,
            hoverColor: 'rgba(230, 25, 75, 0.5)',
            dragColor: 'rgba(230, 25, 75, 0.4)'
        },
        quickselect_config: {
            deviation: 50,
            distance: 20
        },
        regionpaint_config: {
            draw: 1,
            radius: 4,
            hoverColor: 'rgba(230, 25, 75, 1.0)',
            dragColor: 'rgba(230, 25, 75, 0.8)'
        }
    };
}
module.exports = new cornerstoneTool_config();

/***/ }),

/***/ 652:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//该类是对于基本的画圆什么的一些信息的管理
var manager = function () {
    function manager() {
        _classCallCheck(this, manager);

        this.init();
    }

    _createClass(manager, [{
        key: "init",
        value: function init() {
            this.info = {};
            this.singelId = Tool.getSigleId();
            this.brushInfo = {};
        }
    }, {
        key: "setInfo",
        value: function setInfo(value) {
            if (!this.info[value.layerNumber]) {
                this.info[value.layerNumber] = [];
            }
            value.show = true;
            if (!value.uuid) {
                value.uuid = this.singelId;
                this.info[value.layerNumber].push(value);
                this.singelId = Tool.getSigleId();
            } else {
                var pushnow = true;
                this.info[value.layerNumber].map(function (item) {
                    if (item.uuid == value.uuid || item.id == value.id) {
                        for (var i in item) {
                            if (!value[i]) {
                                value[i] = item[i];
                            } else {
                                item[i] = value[i];
                            }
                        }
                        pushnow = false;
                    }
                    //item = value
                });
                //console.log(pushnow)
                if (pushnow) {
                    this.info[value.layerNumber].push(value);
                }
            }
        }
    }, {
        key: "restSignleIdShow",
        value: function restSignleIdShow(value) {
            for (var i in this.info) {
                for (var j in this.info[i]) {
                    if (j == value.bid || j == value.uuid) {
                        this.info[i][j].show = value.show;
                    }
                }
            }
        }
    }, {
        key: "getInfo",
        value: function getInfo(value) {
            var returnInfo = {};
            //console.log(this.info[value.layerNumber])
            this.info[value.layerNumber].map(function (item) {
                if (item.uuid == value.uuid || item.id == value.uuid) {
                    returnInfo = item;
                }
            });
            return returnInfo;
        }
    }, {
        key: "removeInfo",
        value: function removeInfo(value) {
            //  console.log(value.layerNumber, this.info, value)
            var allData = void 0;
            for (var i = 0; i < this.info[value.layerNumber].length; i++) {
                var itemId = this.info[value.layerNumber][i];
                // console.log(this.info[value.layerNumber][i])
                if (itemId.uuid == value.id || itemId.id == value.id) {
                    allData = JSON.parse(JSON.stringify(this.info[value.layerNumber][i]));
                    // console.log(allData, 'allDataallData')
                    this.info[value.layerNumber].splice(i, 1);
                }
            }
            return allData;
        }
    }, {
        key: "getSigleLayer",
        value: function getSigleLayer(layerNum) {
            return this.info[value.layerNum] ? this.info[value.layerNum] : [];
        }
    }, {
        key: "removeAll",
        value: function removeAll() {
            this.info = {};
        }
    }]);

    return manager;
}();

//原型链一定要有的


module.exports = new manager();

/***/ }),

/***/ 653:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
model为外面的数据同步

事件
1.CtProgress.borClick 进度条的上下按钮

*/

var CtProgress = function (_Interstellar$moduleB) {
    _inherits(CtProgress, _Interstellar$moduleB);

    function CtProgress(app, dom, value, addMore) {
        _classCallCheck(this, CtProgress);

        var _this = _possibleConstructorReturn(this, (CtProgress.__proto__ || Object.getPrototypeOf(CtProgress)).call(this, app, dom, value, addMore));

        __webpack_require__(654);
        _this.html = __webpack_require__(656);
        _this.name = "CtProgress";
        _this.model = {};
        _this.valH = 30;
        _this.topValue = 0;
        return _this;
    }

    _createClass(CtProgress, [{
        key: "complete",
        value: function complete() {
            this.topValue = 0;
            var dowpagex = null;
            var st = false;
            var that = this;
            this.dom.find('.progress_val').on('mousedown', function (e) {
                st = true;
                dowpagex = e.pageY;
                that.event._dispatch('ctprogress.startDrag');
            });
            this.dom.find('.progress').on('click', function (e) {
                that.topValue = e.pageY - 125;
                that.progressPos();
                that.event._dispatch('ctprogress.click');
                that.event._dispatch('ctprogress.stopDrag');
            });
            this.dom.on('mousemove', function (e) {
                if (st) {
                    that.topValue += e.pageY - dowpagex;
                    dowpagex = e.pageY;
                    that.progressPos();
                } else {
                    var numPos = e.pageY - 125;
                    that.dom.find('.layer-number').css({
                        "transform": "translate(0px, " + numPos + "px)"
                    });
                    that.dom.find('.layer-number').show();
                    var num = Math.floor(numPos / (that.totalHeight - that.barHeight) * (that.totalImage - 1));
                    num = num > that.totalImage - 1 ? that.totalImage - 1 : num;
                    that.dom.find('.layer-number').html(that.imageLists[num]);
                }
                // console.log(e)
            });
            this.dom.on('mouseup', function (e) {
                e.stopPropagation();
                that.dom.find('.layer-number').hide();
                st = false;
                that.event._dispatch('ctprogress.stopDrag');
            });
            this.dom.on('mouseleave', function (e) {
                e.stopPropagation();
                that.dom.find('.layer-number').hide();
                st = false;
                that.event._dispatch('ctprogress.stopDrag');
                //  console.log(e)
            });
            this.dom.find('.progress').on('mouseleave', function () {
                that.dom.find('.layer-number').hide();
                st = false;
                that.event._dispatch('ctprogress.stopDrag');
            });
        }

        //进度条位置

    }, {
        key: "progressPos",
        value: function progressPos() {
            if (this.topValue + this.barHeight > this.totalHeight) {
                this.topValue = this.totalHeight - this.barHeight;
            }
            this.dom.find('.progress_val').css({
                "transform": "translate(0px, " + this.topValue + "px)"
            });
        }
    }, {
        key: "setPosBar",
        value: function setPosBar(layerId) {
            if (this.totalImage == 1) {
                this.dom.find('.progress_val').css({
                    "transform": "translate(0px, 0px)"
                });
                return;
            }
            var pox = this.imageLists.lastIndexOf(layerId);
            //console.log(pox, 'setPosBarsetPosBarsetPosBar', layerId)
            this.topValue = pox == -1 ? 0 : Math.floor(pox / (this.totalImage - 1) * (this.totalHeight - this.barHeight));
            //console.log(this.topValue)
            this.progressPos();
        }

        //设置bar的高度

    }, {
        key: "setBarHeight",
        value: function setBarHeight() {
            if (this.totalImage < 50) {
                this.valH = 1;
            }
            var rate = this.valH / this.totalImage;
            this.totalHeight = this.dom.find('.progress').box().offsetHeight;
            this.barHeight = Math.floor(rate * this.totalHeight / (1 + rate));
            this.dom.find('.progress_val').css({
                height: this.barHeight
            });
        }

        //设置总片长

    }, {
        key: "setImageData",
        value: function setImageData(value) {
            console.log(value);
            this.imageLists = value;
            this.totalImage = value.length;

            this.setBarHeight();
        }

        //获取当前比例

    }, {
        key: "getRate",
        value: function getRate() {
            var num = Math.floor(this.topValue / (this.totalHeight - this.barHeight) * (this.totalImage - 1));
            num = num > this.totalImage - 1 ? this.totalImage - 1 : num;
            console.log(this.imageLists[num], num);
            return this.imageLists[num];
        }

        //清掉一些监听

    }, {
        key: "close",
        value: function close() {
            this.dom.find('.progress_val').off('mousedown');
            this.dom.off('mousemove');
            this.dom.off('mouseup');
            this.dom.find('.progress').off('mousemove');
        }

        //重置

    }, {
        key: "resize",
        value: function resize(layerId) {
            this.setBarHeight();
            this.setPosBar(layerId);
            // console.log()
        }
    }]);

    return CtProgress;
}(Interstellar.moduleBase);

//原型链一定要有的


module.exports = CtProgress;

/***/ }),

/***/ 654:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(655);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./ctprogress.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./ctprogress.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 655:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".ctprogress {\n  position: relative;\n  height: 100%;\n  -webkit-touch-callout: none;\n  /* iOS Safari */\n  -webkit-user-select: none;\n  /* Chrome/Safari/Opera */\n  -khtml-user-select: none;\n  /* Konqueror */\n  -moz-user-select: none;\n  /* Firefox */\n  -ms-user-select: none;\n  /* Internet Explorer/Edge */\n  user-select: none;\n}\n.ctprogress .progress {\n  position: absolute;\n  width: 10px;\n  height: 100%;\n  right: 0;\n  top: 0px;\n  margin: 0;\n  left: auto;\n  background: #01111E;\n}\n.ctprogress .progress .progress_val {\n  position: absolute;\n  left: 0;\n  top: 0;\n  border-radius: 14px;\n  height: 0;\n  width: 6px;\n  background: #448E97;\n}\n.ctprogress .progress .layer-number {\n  position: absolute;\n  display: none;\n  left: -30px;\n  top: 0;\n  border-radius: 14px;\n  height: 0;\n  width: 6px;\n  color: #fff;\n  background: #448E97;\n  -webkit-touch-callout: none;\n  /* iOS Safari */\n  -webkit-user-select: none;\n  /* Chrome/Safari/Opera */\n  -khtml-user-select: none;\n  /* Konqueror */\n  -moz-user-select: none;\n  /* Firefox */\n  -ms-user-select: none;\n  /* Internet Explorer/Edge */\n  user-select: none;\n}\n", ""]);

// exports


/***/ }),

/***/ 656:
/***/ (function(module, exports) {

module.exports = "<div class=ctprogress> <div class=progress> <div class=progress_val></div> <div class=layer-number></div> </div> </div>";

/***/ }),

/***/ 657:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var brushManager = function () {
    function brushManager() {
        _classCallCheck(this, brushManager);

        this.init();
    }

    _createClass(brushManager, [{
        key: 'init',
        value: function init() {
            this.brushInfo = {};
            this.brushIdInfo = {};
            this.brushlength = 0;
            this.aplha = 140;
            this.colorMap = {
                'AA1113': [170, 17, 19, this.aplha],
                'F5A623': [245, 166, 35, this.aplha],
                'F8E71C': [248, 231, 28, this.aplha],
                '7ED321': [126, 211, 33, this.aplha],
                '4A90E2': [74, 144, 226, this.aplha],
                '50E3C2': [80, 227, 194, this.aplha],
                '8B572A': [139, 87, 42, this.aplha],
                '417505': [65, 117, 5, this.aplha],
                'B8E986': [184, 233, 134, this.aplha],
                'BD10E0': [189, 16, 224, this.aplha]
            };
        }
    }, {
        key: 'delbrush',
        value: function delbrush(value) {
            //console.log(value, 'deledle', this.brushInfo)
            for (var i in this.brushInfo) {
                if (this.brushInfo[i][value.bid || value.uuid]) {
                    delete this.brushInfo[i][value.bid || value.uuid];
                }
                if (this.brushInfo[i][value.uuid]) {
                    delete this.brushInfo[i][value.uuid];
                }
            }
        }

        //以病兆id为一个维度清洗数据

    }, {
        key: 'brushIdInfoSet',
        value: function brushIdInfoSet(bid, layerNumber) {
            // console.log(this.brushIdInfo)
            this.brushIdInfo = this.brushIdInfo ? this.brushIdInfo : {};
            if (!this.brushIdInfo[bid]) {
                this.brushIdInfo[bid] = {
                    layerLists: []
                };
            }
            this.brushIdInfo[bid].layerLists.push(layerNumber);
            var result = [];
            var obj = {};
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.brushIdInfo[bid].layerLists[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var i = _step.value;

                    if (!obj[i]) {
                        result.push(i);
                        obj[i] = 1;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.brushIdInfo[bid].layerLists = result;
        }
    }, {
        key: 'creatBrushInfoData',
        value: function creatBrushInfoData(layerNumber, bId) {
            if (!this.brushInfo[layerNumber]) {
                this.brushInfo[layerNumber] = {};
            }
            if (!this.brushInfo[layerNumber][bId]) {
                this.brushInfo[layerNumber][bId] = {};
            }
        }
    }, {
        key: 'setBrush',
        value: function setBrush(layerNumber, value, r, w, id, sId) {
            if (!this.brushInfo[layerNumber]) {
                this.brushInfo[layerNumber] = {};
            }
            var newid = id;
            if (!id) {
                newid = Tool.getSigleId();
                this.brushInfo[layerNumber][newid] = {};
            }
            //this.creatBrushInfoData()
            if (!this.brushInfo[layerNumber][newid]) {
                this.brushInfo[layerNumber][newid] = {};
            }
            var arr = this.getroundpoint(value, r);
            if (r == 0) {
                arr = value;
            }
            this.brushIdInfoSet(newid, layerNumber);
            //console.log(arr,'artrrrr')
            this.brushInfo[layerNumber][newid].image = this.creatImage(arr, layerNumber, newid, true, w);
            this.brushInfo[layerNumber][newid].uuid = newid;
            this.brushInfo[layerNumber][newid].sId = sId;
            this.brushInfo[layerNumber][newid].fill = this.brushInfo[layerNumber][newid].fill != undefined ? this.brushInfo[layerNumber][newid].fill : true;
            this.brushInfo[layerNumber][newid].color = this.brushInfo[layerNumber][newid].color ? this.brushInfo[layerNumber][newid].color : this.colorMap['AA1113'];
            return this.brushInfo[layerNumber][newid];
        }
    }, {
        key: 'creatBrush',
        value: function creatBrush(layerNumber, img, id, sId, wh) {
            // console.log(id)
            if (!this.brushInfo[layerNumber]) {
                this.brushInfo[layerNumber] = {};
            }
            var newid = id || Tool.getSigleId();
            //let imgurl = img
            if (!this.brushInfo[layerNumber][newid]) {
                this.brushInfo[layerNumber][newid] = {};
            }
            //console.log(imgurl)
            this.brushIdInfoSet(newid, layerNumber);

            this.brushInfo[layerNumber][newid].orginimage = [];
            var canvas = document.createElement("canvas");
            canvas.width = wh.w;
            canvas.height = wh.h;
            var ctx = canvas.getContext("2d");
            //ctx.drawImage(img, 0, 0, wh.w, wh.h, 0, 0, canvas.width, canvas.height)
            var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            //[0, 200, 0, this.aplha]
            for (var i = 0; i < img.length; i++) {
                var num = img[i];
                this.brushInfo[layerNumber][newid].orginimage.push(num);
                imgData.data[num * 4] = 0;
                imgData.data[num * 4 + 1] = 200;
                imgData.data[num * 4 + 2] = 0;
                imgData.data[num * 4 + 3] = this.aplha;
            }
            /*for (let i = 0; i < imgData.data.length / 4; i++) {
                //console.log(imgData.data[i * 4 + 3],'imgData.data[i * 4 + 3]imgData.data[i * 4 + 3]')
                if (imgData.data[i * 4 + 3] != 0) {
                    //console.log(i)
                    this.brushInfo[layerNumber][newid].orginimage.push(i)
                }
            }*/
            ctx.putImageData(imgData, 0, 0);
            var image = new Image();
            image.src = canvas.toDataURL("image/png");
            ctx = null;
            canvas = null;
            imgData = null;

            this.brushInfo[layerNumber][newid].image = image;
            //this.brushInfo[layerNumber][newid].orginimage = imgurl
            this.brushInfo[layerNumber][newid].uuid = newid;
            this.brushInfo[layerNumber][newid].sId = sId;
            this.brushInfo[layerNumber][newid].color = this.colorMap['AA1113'];
            this.brushInfo[layerNumber][newid].show = true;
            this.brushInfo[layerNumber][newid].fill = true;
            return this.brushInfo[layerNumber][newid];
        }
    }, {
        key: 'getInfo',
        value: function getInfo(value) {
            if (!this.brushInfo[value.layerNumber]) return null;
            if (!this.brushInfo[value.layerNumber][value.uuid]) return null;
            return this.brushInfo[value.layerNumber][value.uuid];
        }
    }, {
        key: 'updataInfo',
        value: function updataInfo(value) {
            for (var i = 0; i < value.length; i++) {
                this.brushInfo[value[i].layerNumber][value[i].id].imgurl = value[i].imgurl;
            }
        }
    }, {
        key: 'removeBrush',
        value: function removeBrush(layerNumber, value, r, w, id) {
            if (!this.brushInfo[layerNumber]) {
                return;
            }
            if (!id) {
                return;
            }
            console.log(this.brushInfo, '================', layerNumber, id);
            var arr = this.getroundpoint(value, r);
            this.brushInfo[layerNumber][id].image = this.creatImage(arr, layerNumber, id, false, w);
            return this.brushInfo[layerNumber][id];
        }
    }, {
        key: 'creatNewImage',
        value: function creatNewImage(img, data, wh, layerNumber, cid) {
            var _this = this;

            //console.log(layerNumber, 'layerNumber')
            this.brushlength = this.brushlength < layerNumber * 1 ? layerNumber * 1 : this.brushlength;
            //console.log(this.brushlength)
            var rate = 1;
            //只有x光可以适用
            console.log(data.needScale);
            if (data.needScale) {
                rate = 0.5;
            }
            var canvas = document.createElement("canvas");
            canvas.width = wh.width * rate;
            canvas.height = wh.height * rate;
            var ctx = canvas.getContext("2d");

            ctx.drawImage(img, 0, 0, wh.width, wh.height, 0, 0, canvas.width, canvas.height);
            var id = data.id;
            var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);

            var color = this.colorMap['AA1113']; //[230, 25, 75, this.aplha]
            var dataA = [];
            for (var i = 0; i < imgData.data.length / 4; i++) {
                //console.log(imgData.data[i * 4 + 3],'imgData.data[i * 4 + 3]imgData.data[i * 4 + 3]')
                if (imgData.data[i * 4 + 3] != 0) {
                    dataA.push(i);
                    imgData.data[i * 4] = color[0];
                    imgData.data[i * 4 + 1] = color[1];
                    imgData.data[i * 4 + 2] = color[2];
                    imgData.data[i * 4 + 3] = color[3];
                }
            }
            ctx.putImageData(imgData, 0, 0);
            var image = new Image();
            image.src = canvas.toDataURL("image/png");
            ctx = null;
            canvas = null;
            imgData = null;
            if (!this.brushInfo[layerNumber]) {
                this.brushInfo[layerNumber] = {};
            }
            if (!this.brushInfo[layerNumber][id]) {
                this.brushInfo[layerNumber][id] = {};
            }
            this.brushIdInfoSet(id, layerNumber);
            //this.brushInfo[layerNumber][id].imgurl = img.src
            this.brushInfo[layerNumber][id].num = layerNumber;
            this.brushInfo[layerNumber][id].id = id;
            this.brushInfo[layerNumber][id].rid = data.rid;
            this.brushInfo[layerNumber][id].sId = data.sId;
            this.brushInfo[layerNumber][id].image = image;
            this.brushInfo[layerNumber][id].color = this.colorMap['AA1113'];
            this.brushInfo[layerNumber][id].fill = true;
            this.brushInfo[layerNumber][id].show = true;
            if (cid == id) {
                setTimeout(function () {
                    _this.brushInfo[layerNumber][id].image = _this.resetColor(image);
                }, 20);
            }
            this.brushInfo[layerNumber][id].orginimage = dataA; // image
            //return image
        }
    }, {
        key: 'creatImage',
        value: function creatImage(data, layerNumber, id, type, width) {
            var canvas = document.createElement("canvas");
            canvas.width = width.w || 512;
            canvas.height = width.h || 512;
            var ctx = canvas.getContext("2d");
            //console.log(this.brushInfo[layerNumber][id].image)
            console.log(id, layerNumber, this.brushInfo);
            if (this.brushInfo[layerNumber][id].image) {
                canvas.width = this.brushInfo[layerNumber][id].image.width;
                canvas.height = this.brushInfo[layerNumber][id].image.height;
                ctx.drawImage(this.brushInfo[layerNumber][id].image, 0, 0);
            }
            var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            var color = [0, 200, 0, this.aplha];
            if (!type) {
                color = [255, 255, 255, 0];
            }

            this.calPoint(data, imgData, width.w, color);

            ctx.putImageData(imgData, 0, 0);
            var image = new Image();
            image.src = canvas.toDataURL("image/png");
            ctx = null;
            canvas = null;
            this.brushInfo[layerNumber][id].orginimage = [];
            for (var i = 0; i < imgData.data.length / 4; i++) {
                //console.log(imgData.data[i * 4 + 3],'imgData.data[i * 4 + 3]imgData.data[i * 4 + 3]')
                if (imgData.data[i * 4 + 3] != 0) {
                    this.brushInfo[layerNumber][id].orginimage.push(i);
                }
            }
            imgData = null;
            this.brushInfo[layerNumber][id].image = image;
            //this.brushInfo[layerNumber][id].orginimage = image
            return image;
        }
    }, {
        key: 'calPoint',
        value: function calPoint(data, imgData, width, color) {
            var len = data.length;
            for (var j = 0; j < len; j++) {
                var i = 4 * (data[j].x * 1 + data[j].y * width);
                //console.log(data[j], i)
                if (imgData.data[i + 3] == color[3] && color[3] == 0) {} else {
                    imgData.data[i] = color[0];
                    imgData.data[i + 1] = color[1];
                    imgData.data[i + 2] = color[2];
                    imgData.data[i + 3] = color[3];
                }
            }
        }

        //颜色的变换和镂空操作

    }, {
        key: 'doneSingleChange',
        value: function doneSingleChange(chooseData, selfNode, type) {
            if (type == 'color' && chooseData.uuid == selfNode.uuid) {
                return;
            }
            console.log(this.brushIdInfo);

            var nodeId = selfNode.bid || selfNode.uuid;
            if (chooseData.uuid == selfNode.uuid) {
                this.changeColorById(selfNode.bid, selfNode.uuid, [0, 200, 0, this.aplha]);
            } else {
                this.changeColorById(selfNode.bid, selfNode.uuid);
            }
        }

        //改变状态

    }, {
        key: 'restChooseColor',
        value: function restChooseColor(done, cancel) {
            console.log(new Date().getTime());
            if (done) {
                var doneId = done.bid;
                if (doneId) {
                    this.changeColorById(doneId, done.uuid, [0, 200, 0, this.aplha]);
                }
            }
            if (cancel) {
                var cancelId = cancel.bid;
                if (cancelId) {
                    this.changeColorById(cancelId, cancel.uuid);
                }
            }
            console.log(new Date().getTime());
        }

        //通用改变颜色的方法

    }, {
        key: 'changeColorById',
        value: function changeColorById(id, uuid, color) {
            console.log(this.brushIdInfo, id, uuid);
            var endId = id;
            if (!this.brushIdInfo) {
                this.brushIdInfo = {};
                return;
            }
            if (this.brushIdInfo[id]) {
                endId = id;
            }
            if (this.brushIdInfo[uuid]) {
                endId = uuid;
            }
            console.log(endId, this.brushIdInfo[endId]);
            if (!this.brushIdInfo[endId]) {
                return;
            }

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.brushIdInfo[endId].layerLists[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var j = _step2.value;

                    var brushInfoLayer = this.brushInfo[j][endId];
                    //let ttt = new Date().getTime()
                    brushInfoLayer.image = this.resetColor(brushInfoLayer.orginimage, color ? color : brushInfoLayer.color, brushInfoLayer.fill, brushInfoLayer.image);
                    //console.log(new Date().getTime() - ttt)
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }

        //进行了优化，就是第一次进来只改变当前图层的图片，然后进行渲染，背后开启异步渲染机制。然后渲染全图层的内容。以不阻碍用户操作为第一前提

    }, {
        key: 'allrest',
        value: function allrest(data, layerNum, roation) {
            var _this2 = this;

            layerNum = layerNum * 1;
            if (this.brushlength) {
                if (layerNum <= 0 || layerNum > this.brushlength) {
                    return;
                }
            }
            var layerArray = [layerNum];
            switch (roation) {
                case "add":
                    layerArray = [layerNum + 1, layerNum + 2, layerNum + 3, layerNum + 4, layerNum + 5];
                    break;
                case "remove":
                    layerArray = [layerNum - 5, layerNum - 4, layerNum - 3, layerNum - 2, layerNum - 1];
                    break;
                default:
                    layerArray = [layerNum - 2, layerNum - 1, layerNum, layerNum + 1, layerNum + 2];
                    break;
            }
            //console.log(layerArray, this.brushInfo)
            for (var i = 0; i < layerArray.length; i++) {
                if (this.brushInfo[layerArray[i]]) {
                    //console.log(this.brushInfo[layerArray[i]], 'this.brushInfo[layerArray[i]]this.brushInfo[layerArray[i]]')
                    var brushInfoArray = this.brushInfo[layerArray[i]];
                    for (var bid in brushInfoArray) {
                        var img = brushInfoArray[bid].orginimage;
                        //console.log(i, bid, data.bid)
                        //console.log(brushInfoArray[bid])
                        if (bid == data.bid || bid == data.uuid) {
                            img = this.resetColor(img, [0, 200, 0, this.aplha], brushInfoArray[bid].fill);
                        } else {
                            //img = this.resetColor(img, [230, 25, 75, this.aplha])
                            //console.log('==============', brushInfoArray[bid])
                            img = this.resetColor(img, brushInfoArray[bid].color, brushInfoArray[bid].fill);
                        }
                        brushInfoArray[bid].image = img;
                    }
                }
            }
            if (!roation) {
                setTimeout(function () {
                    _this2.allrest(data, layerNum + 2, 'add');
                }, 100);
                setTimeout(function () {
                    _this2.allrest(data, layerNum - 2, 'remove');
                }, 100);
            }
            if (roation == 'add' && layerNum + 5 < this.brushlength) {
                setTimeout(function () {
                    _this2.allrest(data, layerNum + 5, 'add');
                }, 100);
            }
            if (roation == 'remove' && layerNum - 5 > 0) {
                setTimeout(function () {
                    _this2.allrest(data, layerNum - 5, 'remove');
                }, 100);
            }
        }

        //重置颜色

    }, {
        key: 'resetColor',
        value: function resetColor(imgArr, colorA, fillSt, img) {
            if (img.width == 0) {
                return;
            }
            var canvas = document.createElement("canvas");
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext("2d");
            //ctx.drawImage(img, 0, 0)
            var imgData = ctx.getImageData(0, 0, img.width, img.height);
            var color = colorA ? colorA : [0, 200, 0, this.aplha];
            //console.log(imgArr)
            var obj = {};
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = imgArr[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _i = _step3.value;

                    if (!obj[_i]) {
                        obj[_i] = 1;
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            for (var i = 0; i < imgArr.length; i++) {
                var num = imgArr[i] * 4;
                imgData.data[num] = color[0];
                imgData.data[num + 1] = color[1];
                imgData.data[num + 2] = color[2];
                imgData.data[num + 3] = color[3];
                if (fillSt == false) {
                    var boud = this.fourpd(imgArr[i], obj, img.width, img.height); // this.fourpd(imgArr[i], imgArr, img.width, img.height)
                    if (!boud) {
                        imgData.data[num + 3] = 0;
                    }
                }
            }
            /*let newData = [img.width * img.height * 4]
            for (let i = 0; i < imgData.data.length / 4; i++) {
                if (imgData.data[i * 4 + 3] != 0) {
                    newData[i * 4] = color[0]
                    newData[i * 4 + 1] = color[1]
                    newData[i * 4 + 2] = color[2]
                    newData[i * 4 + 3] = color[3]
                    if (fillSt == false) {
                        let boud = this.fourpd(i, imgData.data, img.width, img.height)
                        if (!boud) {
                            newData[i * 4 + 3] = 0
                        }
                    }
                }
            }
            for (let j = 0; j < newData.length; j++) {
                if (newData[j] != undefined) {
                    imgData.data[j] = newData[j]
                }
            }*/
            //imgData.data=newData
            //clone = null
            ctx.putImageData(imgData, 0, 0);
            var image = new Image();
            image.src = canvas.toDataURL("image/png");
            ctx = null;
            canvas = null;
            imgData = null;
            //newData = null
            return image;
        }
    }, {
        key: 'fourpd',
        value: function fourpd(point, imageData, width, height) {
            var up = Math.floor((point - width) / width);
            var right = point % width == width - 1 ? null : point + 1;
            var left = point % width == 0 ? null : point - 1;
            var down = Math.floor((point + width) / width);
            var num = 0;
            //console.log(up, right, left, down)
            if (up < 0 || down > height || !right || !left) {
                return true;
            }
            if (imageData[String(point - width)]) {
                num++;
            }
            if (imageData[String(point + width)]) {
                num++;
            }
            if (imageData[String(right)]) {
                num++;
            }
            if (imageData[String(left)]) {
                num++;
            }
            /*if (up >= 0) {
                if (imageData.includes(point - width)) {
                    num++
                }
            }
            if (down < height) {
                if (imageData.includes(point + width)) {
                    num++
                }
            }
            if (right != null) {
                if (imageData.includes(right)) {
                    num++
                }
            }
            if (left != null) {
                if (imageData.includes(left)) {
                    num++
                }
            }*/
            //console.log(num)
            return num == 4 ? false : true;
        }

        //单个病灶颜色更改

    }, {
        key: 'restSignleId',
        value: function restSignleId(value) {
            for (var i in this.brushInfo) {
                for (var j in this.brushInfo[i]) {
                    if (j == value.bid || j == value.uuid) {
                        this.brushInfo[i][j].color = this.colorMap[value.color];
                    }
                }
            }
        }

        //单个病兆更改填充

    }, {
        key: 'restSignleIdFill',
        value: function restSignleIdFill(value) {
            for (var i in this.brushInfo) {
                for (var j in this.brushInfo[i]) {
                    if (j == value.bid || j == value.uuid) {
                        this.brushInfo[i][j].fill = value.fill;
                    }
                }
            }
        }

        //单个病灶显示更改

    }, {
        key: 'restSignleIdShow',
        value: function restSignleIdShow(value) {
            for (var i in this.brushInfo) {
                for (var j in this.brushInfo[i]) {
                    if (j == value.bid || j == value.uuid) {
                        this.brushInfo[i][j].show = value.show;
                    }
                }
            }
        }
    }, {
        key: 'allShow',
        value: function allShow(value) {
            for (var i in this.brushInfo) {
                for (var j in this.brushInfo[i]) {
                    this.brushInfo[i][j].show = value.show;
                }
            }
        }
    }, {
        key: 'clearBrush',
        value: function clearBrush(layerNumber) {
            this.brushInfo[layerNumber] = null;
        }
    }, {
        key: 'deleteAll',
        value: function deleteAll() {
            this.brushInfo = {};
            this.brushIdInfo = null;
        }
    }, {
        key: 'getroundpoint',
        value: function getroundpoint(value, r) {
            var arr = [];
            var sx = Math.round(value.x - r);
            var sy = Math.round(value.y - r);
            var d = r == 1 ? r : 2 * r;
            if (r == 1) {
                return [{
                    x: Math.round(value.x),
                    y: Math.round(value.y)
                }];
            }
            var rand = d * d;
            for (var i = 0; i < rand; i++) {
                var x = sx + Math.floor(i % d);
                var y = sy + Math.floor(i / d);
                if ((x - value.x) * (x - value.x) + (y - value.y) * (y - value.y) <= r * r) {
                    arr.push({
                        x: x,
                        y: y
                    });
                }
            }
            return arr;
        }
    }]);

    return brushManager;
}();

//原型链一定要有的


module.exports = new brushManager();

/***/ }),

/***/ 658:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var setoolconfig = function () {
    function setoolconfig() {
        _classCallCheck(this, setoolconfig);
    }

    _createClass(setoolconfig, [{
        key: "setconfig",
        value: function setconfig(type, now_config) {
            var oldConfig = void 0;
            switch (type) {
                case 'rectangleRoiFan':
                    var oldConfig1 = cornerstoneTools.rectangleRoi.getConfiguration();
                    if (oldConfig1) {
                        now_config = Object.assign(oldConfig1, now_config);
                    }
                    cornerstoneTools.rectangleRoi.setConfiguration(now_config);
                    break;
                case "lengthFan":
                    var lineMeanConfig = cornerstoneTools.length.getConfiguration();
                    if (lineMeanConfig) {
                        now_config = Object.assign(lineMeanConfig, now_config);
                    }
                    cornerstoneTools.length.setConfiguration(now_config);
                    break;
                case "brushFan":
                    var configuration = cornerstoneTools.brush.getConfiguration();
                    if (configuration) {
                        now_config = Object.assign(configuration, now_config);
                    }
                    cornerstoneTools.brush.setConfiguration(now_config);
                    break;
                case 'ellipticalRoiFan':
                    var oldConfig11 = cornerstoneTools.ellipticalRoi.getConfiguration();
                    if (oldConfig11) {
                        now_config = Object.assign(oldConfig11, now_config);
                    }
                    cornerstoneTools.ellipticalRoi.setConfiguration(now_config);
                    break;
                case "polygonFan":
                    oldConfig = cornerstoneTools.brush.getConfiguration();
                    if (oldConfig) {
                        now_config = Object.assign(oldConfig, now_config);
                    }
                    cornerstoneTools.brush.setConfiguration(now_config);
                    break;
                case "freehandFan":
                    oldConfig = cornerstoneTools.brush.getConfiguration();
                    if (oldConfig) {
                        now_config = Object.assign(oldConfig, now_config);
                    }
                    cornerstoneTools.brush.setConfiguration(now_config);
                    break;
                case "regionpaintFan":
                    oldConfig = cornerstoneTools.brush.getConfiguration();
                    if (oldConfig) {
                        now_config = Object.assign(oldConfig, now_config);
                    }
                    cornerstoneTools.brush.setConfiguration(now_config);
                    break;
            }
        }
    }]);

    return setoolconfig;
}();

//原型链一定要有的


module.exports = new setoolconfig();

/***/ }),

/***/ 659:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//data对象，参考对象referent，转换对象 convert 
//参考对象包含 imageOrientationPatient,imagePositionPatient,pixelSpacing
//转换对象包含 imageOrientationPatient,imagePositionPatient,pixelSpacing,total,distance,width,height
//imageOrientationPatient两个坐标系的转换关系
//imagePositionPatient代表图片的左顶点的位置信息
//pixelSpacing代表图像像素和毫米的转换
/*makeMetix 将数组按照行或者列 数装换成二维数组,row代表行，col代表列，type代表是按照行还是列的模式，value是原始数组，
 原始数组为一维数组，数字的排序是按照矩阵的逐行进入\
 metixMultiply 为数组乘法，mA，mB代表两个数组，最后返回两数组相乘的结果,是一个二维数组，以逐行模式排序
 existsDraw是否有相交线，如果没有就算了
 rankA计算矩阵的秩，为了逆运算准备的

  */
var BaseLine = function () {
    function BaseLine(data) {
        _classCallCheck(this, BaseLine);

        // console.log(new Date().getTime())
        data.referent.imageOrientationPatient = BaseLine.backImageOrientationPatient(data.referent.imageOrientationPatient);
        data.convert.imageOrientationPatient = BaseLine.backImageOrientationPatient(data.convert.imageOrientationPatient);
        //两套序列平行返回
        if (data.convert.imageOrientationPatient.toString() == data.referent.imageOrientationPatient.toString()) {
            return [];
        }
        var nowMetix = BaseLine.makeMetix(data.referent);

        var backMetix = nowMetix.AInverse();
        // console.log(backMetix,nowMetix.rankA(),nowMetix)
        var referent = BaseLine.getPoint(data.referent);
        var convert = BaseLine.getPoint(data.convert);

        /*if (referent.a * convert.a + referent.b * convert.b + referent.c * convert.c == 0) {
            return
        }*/
        // let a = referent.a - convert.a
        // let b = referent.b - convert.b
        // let c = referent.c - convert.c
        // let d = referent.d - convert.d

        var a = convert.a;
        var b = convert.b;
        var c = convert.c;
        var d = convert.d;

        var allline = BaseLine.getfourline(referent.pointAll);
        var pointA = [];
        for (var i in allline) {
            pointA.push(BaseLine.getlineIntersection(allline[i], a, b, c, d));
        }
        var endA = [];
        var orginXYZ = [];
        // let mm = BaseLine.getMaxMin(convert.pointAll)
        var mm = BaseLine.getMaxMin(referent.pointAll);
        //console.log(mm)
        //console.log(pointA,'pointA',backMetix)
        for (var _i = 0; _i < pointA.length; _i++) {
            var x = void 0;
            var y = void 0;
            if (!backMetix) {
                var temp = void 0;
                var endAll = void 0;
                if (pointA[_i].x == 0) {
                    temp = new Metix([nowMetix.orgin[1][0], nowMetix.orgin[1][1], nowMetix.orgin[2][0], nowMetix.orgin[2][1]], 2, 2);
                    endAll = temp.AInverse().multiply([[pointA[_i].y - nowMetix.orgin[1][2], pointA[_i].z - nowMetix.orgin[2][2]]]);
                }
                if (pointA[_i].y == 0) {
                    temp = new Metix([nowMetix.orgin[0][0], nowMetix.orgin[0][1], nowMetix.orgin[2][0], nowMetix.orgin[2][1]], 2, 2);
                    endAll = temp.AInverse().multiply([[pointA[_i].x - nowMetix.orgin[0][2], pointA[_i].z - nowMetix.orgin[2][2]]]);
                }
                if (pointA[_i].z == 0) {
                    temp = new Metix([nowMetix.orgin[0][0], nowMetix.orgin[0][1], nowMetix.orgin[1][0], nowMetix.orgin[1][1]], 2, 2);
                    endAll = temp.AInverse().multiply([[pointA[_i].x - nowMetix.orgin[0][2], pointA[_i].y - nowMetix.orgin[1][2]]]);
                }
                // console.log(endAll,pointA[i])
                if (endAll) {
                    endA.push({ x: endAll.orgin[0][0], y: endAll.orgin[1][0] });
                    orginXYZ.push({ x: pointA[_i].x, y: pointA[_i].y, z: pointA[_i].z });
                }

                // console.log(endAll)
            } else {
                var backxy = backMetix.multiply([[pointA[_i].x, pointA[_i].y, pointA[_i].z]]);
                x = Math.round(backxy.orgin[0] / backxy.orgin[2]);
                y = Math.round(backxy.orgin[1] / backxy.orgin[2]);
                //console.log(x,y,backxy)         
            }
            if (x >= 0 && x <= data.referent.width && y >= 0 && y <= data.referent.height) {
                endA.push({ x: x, y: y });
                orginXYZ.push({ x: pointA[_i].x, y: pointA[_i].y, z: pointA[_i].z });
            }
        }
        if (endA.length == 2) {
            var orginMaxx = Math.max(orginXYZ[0].x, orginXYZ[1].x);
            var orginMinx = Math.min(orginXYZ[0].x, orginXYZ[1].x);
            var orginMaxy = Math.max(orginXYZ[0].y, orginXYZ[1].y);
            var orginMiny = Math.min(orginXYZ[0].y, orginXYZ[1].y);
            var orginMaxz = Math.max(orginXYZ[0].z, orginXYZ[1].z);
            var orginMinz = Math.min(orginXYZ[0].z, orginXYZ[1].z);
            if (orginMaxx < mm.x.min || orginMinx > mm.x.max) {
                return [];
            }
            if (orginMaxy < mm.y.min || orginMiny > mm.y.max) {
                return [];
            }
            if (orginMaxz < mm.z.min || orginMinz > mm.z.max) {
                return [];
            }
            return endA;
        } else {
            return [];
        }
        // console.log(referent, convert)
    }

    _createClass(BaseLine, null, [{
        key: 'getMaxMin',
        value: function getMaxMin(value) {
            var pointA1 = BaseLine.getXYZ(value.lt);
            var pointA2 = BaseLine.getXYZ(value.rt);
            var pointA3 = BaseLine.getXYZ(value.lb);
            var pointA4 = BaseLine.getXYZ(value.rb);
            var obj = {};
            for (var i in pointA1) {
                obj[i] = {};
                obj[i].max = Math.max(pointA1[i], pointA2[i], pointA3[i], pointA4[i]);
                obj[i].min = Math.min(pointA1[i], pointA2[i], pointA3[i], pointA4[i]);
            }
            return obj;
        }
    }, {
        key: 'getlineIntersection',
        value: function getlineIntersection(line, a, b, c, d) {
            var x1 = line.x[0];
            var x2 = line.x[1];
            var y1 = line.y[0];
            var y2 = line.y[1];
            var z1 = line.z[0];
            var z2 = line.z[1];
            var t = (a * x1 + b * y1 + c * z1 + d) / (a * x2 + b * y2 + c * z2);
            var x = x1 - x2 * t;
            var y = y1 - y2 * t;
            var z = z1 - z2 * t;
            return { x: x, y: y, z: z };
        }
    }, {
        key: 'getfourline',
        value: function getfourline(value) {
            var pointA1 = BaseLine.getXYZ(value.lt);
            var pointA2 = BaseLine.getXYZ(value.rt);
            var pointA3 = BaseLine.getXYZ(value.lb);
            var pointA4 = BaseLine.getXYZ(value.rb);
            var line1 = BaseLine.getlineEquation(pointA1, pointA2);
            var line2 = BaseLine.getlineEquation(pointA2, pointA4);
            var line3 = BaseLine.getlineEquation(pointA4, pointA3);
            var line4 = BaseLine.getlineEquation(pointA3, pointA1);
            return { l1: line1, l2: line2, l3: line3, l4: line4 };
        }
    }, {
        key: 'getlineEquation',
        value: function getlineEquation(value, value1) {
            return { x: [value.x, value1.x - value.x], y: [value.y, value1.y - value.y], z: [value.z, value1.z - value.z] };
        }
    }, {
        key: 'getPoint',
        value: function getPoint(value) {
            var metixAll = BaseLine.makeMetix(value);
            //console.log(metixAll)
            var point1 = [[0, 0, 1]];
            var point2 = [[value.width, 0, 1]];
            var point3 = [[value.width, value.height, 1]];
            var point4 = [[0, value.height, 1]];
            var pointAll = { lt: metixAll.multiply(point1).orgin, rt: metixAll.multiply(point2).orgin, lb: metixAll.multiply(point4).orgin, rb: metixAll.multiply(point3).orgin
                // console.log(pointAll)
            };var pointA1 = BaseLine.getXYZ(pointAll.lt);
            var pointA2 = BaseLine.getXYZ(pointAll.rt);
            var pointA3 = BaseLine.getXYZ(pointAll.lb);
            var a = pointA1.y * (pointA2.z - pointA3.z) + pointA2.y * (pointA3.z - pointA1.z) + pointA3.y * (pointA1.z - pointA2.z);
            var b = pointA1.z * (pointA2.x - pointA3.x) + pointA2.z * (pointA3.x - pointA1.x) + pointA3.z * (pointA1.x - pointA2.x);
            var c = pointA1.x * (pointA2.y - pointA3.y) + pointA2.x * (pointA3.y - pointA1.y) + pointA3.x * (pointA1.y - pointA2.y);
            var d = -pointA1.x * (pointA2.y * pointA3.z - pointA3.y * pointA2.z) - pointA2.x * (pointA3.y * pointA1.z - pointA1.y * pointA3.z) - pointA3.x * (pointA1.y * pointA2.z - pointA2.y * pointA1.z);
            return { a: a, b: b, c: c, d: d, pointAll: pointAll };
        }
    }, {
        key: 'getXYZ',
        value: function getXYZ(value) {
            return { x: value[0][0], y: value[1][0], z: value[2][0] };
        }
    }, {
        key: 'makeMetix',
        value: function makeMetix(value) {
            var iop = value.imageOrientationPatient;
            var ipp = value.imagePositionPatient.split(',');
            var sp = value.pixelSpacing.split(',');
            return new Metix([iop[0] * sp[0], iop[3] * sp[0], ipp[0], iop[1] * sp[0], iop[4] * sp[0], ipp[1], iop[2] * sp[0], iop[5] * sp[0], ipp[2]], 3, 3);
        }
    }, {
        key: 'backImageOrientationPatient',
        value: function backImageOrientationPatient(value) {
            var imageOrientationPatient = value.split(',');
            for (var i = 0; i < imageOrientationPatient.length; i++) {
                imageOrientationPatient[i] = Math.floor(imageOrientationPatient[i] * 2000) / 2000;
            }

            return imageOrientationPatient;
        }
    }]);

    return BaseLine;
}();

module.exports = BaseLine;
// let data = {
//     referent: {
//         imageOrientationPatient: "1, -0, 0, 0, 0, -1",
//         imagePositionPatient: "-265.000,0.000,60.000",
//         pixelSpacing: "0.545455,0.596847",
//         width: 660,
//         height: 888,
//     },
//     convert: {
//         imageOrientationPatient:'1, 0, 0, 0, 1, 0',
//         imagePositionPatient: "-183.800,-190.000,43.000",
//         pixelSpacing: "0.742188,0.742188",
//         width: 512,
//         height: 512
//     }
// }
/*let data = {
    referent: {
        imageOrientationPatient: "0.67233121643055,0.74025045451727,-9.935707e-009,0.02191119899741,-0.019900822643,-0.9995618323129",
        imagePositionPatient: "-68.262459611871,-80.653947034019,151.60720667862",
        pixelSpacing: "0.6875,0.6875",
        width: 320,
        height: 320,
    },
    convert: {
        imageOrientationPatient: "2.506e-012,1,-2.05088e-010,0.01221696318555,-2.05103e-010,-0.9999253701205",
        imagePositionPatient: "-28.008708762154,-130.06024071991,165.21970708543",
        pixelSpacing: "0.48828125,0.48828125",
        width: 512,
        height: 512,
        direction: 2,
        distance: -5,
        total: 56
    }
}*/
// console.log(new BaseLine(data))

/***/ }),

/***/ 660:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//data对象，参考对象referent，转换对象 convert 
//参考对象包含 imageOrientationPatient,imagePositionPatient,pixelSpacing
//转换对象包含 imageOrientationPatient,imagePositionPatient,pixelSpacing,total,distance,width,height
//imageOrientationPatient两个坐标系的转换关系
//imagePositionPatient代表图片的左顶点的位置信息
//pixelSpacing代表图像像素和毫米的转换
/*makeMetix 将数组按照行或者列 数装换成二维数组,row代表行，col代表列，type代表是按照行还是列的模式，value是原始数组，
 原始数组为一维数组，数字的排序是按照矩阵的逐行进入\
 metixMultiply 为数组乘法，mA，mB代表两个数组，最后返回两数组相乘的结果,是一个二维数组，以逐行模式排序
 existsDraw是否有相交线，如果没有就算了
 rankA计算矩阵的秩，为了逆运算准备的

  */
var BaseLine = function () {
    function BaseLine(data) {
        _classCallCheck(this, BaseLine);

        if (!data) return this;

        data.referent.imageOrientationPatient = BaseLine.backImageOrientationPatient(data.referent.imageOrientationPatient);
        data.convert.imageOrientationPatient = BaseLine.backImageOrientationPatient(data.convert.imageOrientationPatient);
        //两套序列平行返回

        var referent = BaseLine.makeMetix(data.referent);
        //console.log(referent, 'referent')
        var convert = BaseLine.makeMetix(data.convert);
        //console.log(convert, 'convert')
        var change = new Metix([data.referent.x, data.referent.y, 1], 3, 1).transpose().orgin;
        var nowXYZ = referent.multiply(change);
        /*if (data.convert.imageOrientationPatient.toString() == data.referent.imageOrientationPatient.toString()) {
            return convert.AInverse().multiply(nowXYZ.transpose().orgin)
        }*/
        // console.log(nowXYZ, 'nowXYZ')
        var convertF = BaseLine.getPoint(data.convert);
        // console.log(convertF)
        var dis = Math.abs(convertF.a * nowXYZ.orgin[0][0] + convertF.b * nowXYZ.orgin[1][0] + convertF.c * nowXYZ.orgin[2][0] + convertF.d) / Math.pow(convertF.a * convertF.a + convertF.b * convertF.b + convertF.c * convertF.c, 0.5);
        return { nowXYZ: nowXYZ, dis: dis, convertF: convertF, convert: convert
            //console.log(convert.AInverse(),'AInverse')
            //let endpoint = convert.AInverse().multiply(nowXYZ.transpose().orgin)
            //console.log(endpoint)
            //return endpoint

        };
    }

    _createClass(BaseLine, [{
        key: 'getSagPoint',
        value: function getSagPoint(data) {
            if (!data.convert.AInverse()) {
                var temp = void 0;
                var endAll = void 0;
                if (data.nowXYZ.orgin[0][0] == 0) {
                    temp = new Metix([data.convert.orgin[1][0], data.convert.orgin[1][1], data.convert.orgin[2][0], data.convert.orgin[2][1]], 2, 2);
                    endAll = temp.AInverse().multiply([[data.nowXYZ.orgin[1][0] - data.convert.orgin[1][2], data.nowXYZ.orgin[2][0] - data.convert.orgin[2][2]]]);
                }
                if (data.nowXYZ.orgin[1][0] == 0) {
                    temp = new Metix([data.convert.orgin[0][0], data.convert.orgin[0][1], data.convert.orgin[2][0], data.convert.orgin[2][1]], 2, 2);
                    endAll = temp.AInverse().multiply([[data.nowXYZ.orgin[0][0] - data.convert.orgin[0][2], data.nowXYZ.orgin[2][0] - data.convert.orgin[2][2]]]);
                }
                if (data.nowXYZ.orgin[2][0] == 0) {
                    temp = new Metix([data.convert.orgin[0][0], data.convert.orgin[0][1], data.convert.orgin[1][0], data.convert.orgin[1][1]], 2, 2);
                    endAll = temp.AInverse().multiply([[data.nowXYZ.orgin[0][0] - data.convert.orgin[0][2], data.nowXYZ.orgin[1][0] - data.convert.orgin[1][2]]]);
                }
                if (endAll) {
                    var x = endAll.orgin[0][0];
                    var y = endAll.orgin[1][0];
                    return { x: x, y: y };
                } else {
                    return null;
                }
            }
            if (Math.floor(data.dis) == 0) {
                var orgin = data.convert.AInverse().multiply(data.nowXYZ.transpose().orgin);
                return { x: orgin.orgin[0] / orgin.orgin[2], y: orgin.orgin[1] / orgin.orgin[2] };
            } else {
                var allpoint = data.convertF.pointAll;
                var pointA1 = BaseLine.getXYZ(allpoint.lt);
                var pointA2 = BaseLine.getXYZ(allpoint.rt);
                var pointA3 = BaseLine.getXYZ(allpoint.lb);
                var newMetix = new Metix([pointA2.x - pointA1.x, pointA2.y - pointA1.y, pointA2.z - pointA1.z, pointA3.x - pointA1.x, pointA3.y - pointA1.y, pointA3.z - pointA1.z, data.convertF.a / data.convertF.d, data.convertF.b / data.convertF.d, data.convertF.c / data.convertF.d], 3, 3);
                var x4 = data.nowXYZ.orgin[0][0];
                var y4 = data.nowXYZ.orgin[1][0];
                var z4 = data.nowXYZ.orgin[2][0];
                var x5 = x4 * (pointA2.x - pointA1.x) + y4 * (pointA2.y - pointA1.y) + z4 * (pointA2.z - pointA1.z);
                var y5 = x4 * (pointA3.x - pointA1.x) + y4 * (pointA3.y - pointA1.y) + z4 * (pointA3.z - pointA1.z);
                var nowXYZ = new Metix([x5, y5, -1], 3, 1);
                var endpoint = newMetix.AInverse().multiply(nowXYZ.transpose().orgin);
                var _orgin = data.convert.AInverse().multiply(endpoint.transpose().orgin);
                // console.log(orgin)
                return { x: _orgin.orgin[0] / _orgin.orgin[2], y: _orgin.orgin[1] / _orgin.orgin[2] };
            }
        }
    }], [{
        key: 'getPoint',
        value: function getPoint(value) {
            var metixAll = BaseLine.makeMetix(value);
            //console.log(metixAll)
            var point1 = [[0, 0, 1]];
            var point2 = [[value.width, 0, 1]];
            var point3 = [[value.width, value.height, 1]];
            var point4 = [[0, value.height, 1]];
            var pointAll = { lt: metixAll.multiply(point1).orgin, rt: metixAll.multiply(point2).orgin, lb: metixAll.multiply(point4).orgin, rb: metixAll.multiply(point3).orgin };
            var pointA1 = BaseLine.getXYZ(pointAll.lt);
            var pointA2 = BaseLine.getXYZ(pointAll.rt);
            var pointA3 = BaseLine.getXYZ(pointAll.lb);
            var a = pointA1.y * (pointA2.z - pointA3.z) + pointA2.y * (pointA3.z - pointA1.z) + pointA3.y * (pointA1.z - pointA2.z);
            var b = pointA1.z * (pointA2.x - pointA3.x) + pointA2.z * (pointA3.x - pointA1.x) + pointA3.z * (pointA1.x - pointA2.x);
            var c = pointA1.x * (pointA2.y - pointA3.y) + pointA2.x * (pointA3.y - pointA1.y) + pointA3.x * (pointA1.y - pointA2.y);
            var d = -pointA1.x * (pointA2.y * pointA3.z - pointA3.y * pointA2.z) - pointA2.x * (pointA3.y * pointA1.z - pointA1.y * pointA3.z) - pointA3.x * (pointA1.y * pointA2.z - pointA2.y * pointA1.z);
            return { a: a, b: b, c: c, d: d, pointAll: pointAll };
        }
    }, {
        key: 'getXYZ',
        value: function getXYZ(value) {
            return { x: value[0][0], y: value[1][0], z: value[2][0] };
        }
    }, {
        key: 'backImageOrientationPatient',
        value: function backImageOrientationPatient(value) {
            var imageOrientationPatient = value.split(',');
            for (var i = 0; i < imageOrientationPatient.length; i++) {
                imageOrientationPatient[i] = Math.floor(imageOrientationPatient[i] * 2000) / 2000;
            }

            return imageOrientationPatient;
        }
    }, {
        key: 'makeMetix',
        value: function makeMetix(value) {
            var iop = value.imageOrientationPatient;
            var ipp = value.imagePositionPatient.split(',');
            var sp = value.pixelSpacing.split(',');
            return new Metix([iop[0] * sp[0], iop[3] * sp[0], ipp[0], iop[1] * sp[0], iop[4] * sp[0], ipp[1], iop[2] * sp[0], iop[5] * sp[0], ipp[2]], 3, 3);
        }
    }]);

    return BaseLine;
}();

module.exports = BaseLine;
// let data = {
//     referent: {
//         imageOrientationPatient: "1,0,0,0,1,0",
//         imagePositionPatient: "-178.689453125,-335.189453125,113.5",
//         pixelSpacing: "0.62109375,0.62109375",
//         x: 10,
//         y: 10,
//         z: 1,
//     },
//     convert: {
//         imageOrientationPatient: "1,0,0,0,1,0",
//         imagePositionPatient: "-178.689453125,-335.189453125,113.5",
//         pixelSpacing: "0.62109375,0.62109375",
//         width: 512,
//         height: 512
//     }
// }
// console.log(new BaseLine(data))

/***/ }),

/***/ 661:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ctcornerstoneload() {

    cornerstoneWADOImageLoader.external.cornerstone = cornerstone;
    cornerstone.registerImageLoader('myImageLoader', loadImage);

    function loadImage(imageId) {
        var width = 512;
        var height = 512;
        var numPixels = 100;
        var pixelData = void 0; //= new Uint16Array(numPixels);
        var index = 0;
        var canvas = void 0;
        var aaaimg = void 0;

        function getPixelData() {
            return pixelData;
        }

        function getCanvas() {
            return canvas;
        }

        function getImage() {
            return aaaimg;
        }

        function setPixelData() {
            return aaaimg;
        }
        var image = {
            imageId: imageId,
            minPixelValue: 0,
            maxPixelValue: 255,
            slope: 1.0,
            intercept: 0,
            windowCenter: 128,
            windowWidth: 256,
            render: cornerstone.renderWebImage,
            getPixelData: getPixelData,
            setPixelData: setPixelData,
            getCanvas: getCanvas,
            getImage: getImage,
            rows: height,
            columns: width,
            height: height,
            width: width,
            Wretched: false, //以此判定图片是否跟原始尺寸有区别
            rate: 1,
            color: true,
            rgba: false,
            columnPixelSpacing: 1.0,
            rowPixelSpacing: 1.0,
            invert: false,
            sizeInBytes: width * height * 4
        };
        return {
            promise: new Promise(function (resolve, reject) {
                var x1 = document.createElement("CANVAS");
                canvas = x1;
                var imgase = new Image();
                imgase.crossOrigin = 'anonymous';
                imgase.onload = function () {
                    aaaimg = this;
                    //只有x光可以适用
                    if ((this.width > 2000 || this.height > 2000) && window.fileTypeName == "DCM") {
                        image.rate = 0.5;
                        image.Wretched = true;
                    }
                    image.columns = image.width = Math.floor(this.width * image.rate);
                    image.rows = image.height = Math.floor(this.height * image.rate);
                    image.sizeInBytes = image.width * image.height * 4;
                    x1.setAttribute("width", image.width);
                    x1.setAttribute("height", image.height);
                    var ctx = x1.getContext("2d");
                    //console.log(this.width, this.height, image.width, image.height, '============')
                    ctx.drawImage(this, 0, 0, this.width, this.height, 0, 0, image.width, image.height);
                    var imageData = ctx.getImageData(0, 0, image.width, image.height).data;
                    pixelData = imageData; // new Uint16Array(this.width * this.height*4);
                    resolve(image);
                };
                image.onerror = function () {
                    that.event._dispatch('ctcornerstone.imgloadError', {
                        src: imgase.src
                    });
                };
                imgase.src = imageId.replace('myImageLoader:', '');
            }),
            cancelFn: undefined
        };
    }
    cornerstone.registerImageLoader('glayImage', loadGlayImage);

    function loadGlayImage(imageId) {
        var width = 512;
        var height = 512;
        var numPixels = 100;
        var pixelData = void 0; //= new Uint16Array(numPixels);
        var index = 0;
        var canvas = void 0;
        var aaaimg = void 0;

        function getPixelData() {
            return pixelData;
        }

        function getCanvas() {
            return canvas;
        }

        function getImage() {
            return aaaimg;
        }

        function setPixelData() {
            return aaaimg;
        }
        var image = {
            imageId: imageId,
            minPixelValue: 0,
            maxPixelValue: 255,
            slope: 1.0,
            intercept: 0,
            windowCenter: 128,
            windowWidth: 256,
            render: cornerstone.renderWebImage,
            getPixelData: getPixelData,
            setPixelData: setPixelData,
            getCanvas: getCanvas,
            getImage: getImage,
            rows: height,
            columns: width,
            height: height,
            width: width,
            Wretched: false, //以此判定图片是否跟原始尺寸有区别
            rate: 1,
            color: true,
            rgba: false,
            columnPixelSpacing: 1.0,
            rowPixelSpacing: 1.0,
            invert: false,
            sizeInBytes: width * height * 4
        };
        return {
            promise: new Promise(function (resolve, reject) {
                var x1 = document.createElement("CANVAS");
                canvas = x1;
                var ctx = x1.getContext("2d");
                var numw = imageId.replace('glayImage:', '').match(/\d{1,}/g)[0] * 1;
                var type = imageId.replace('glayImage:', '').match(/[a-z]{1,}/g)[0];
                var ratey = window.depth / window.targetInfo.rowPixelSpacing;
                ratey = ratey < 1 ? 1 : ratey;
                var ratex = window.depth / window.targetInfo.columnPixelSpacing;
                ratex = ratex < 1 ? 1 : ratex;
                var imageData1 = void 0;
                switch (type) {
                    case "x":
                        image.columns = image.width = window.imageList[0].length;
                        image.rows = image.height = Math.round(window.imageList.length * ratex);
                        console.log(ratex);
                        x1.setAttribute("width", image.width);
                        x1.setAttribute("height", image.height);
                        imageData1 = ctx.getImageData(0, 0, image.width, image.height);

                        for (var i = 0; i < image.height; i++) {
                            for (var j = 0; j < image.width; j++) {
                                var orginI = Math.floor(i / ratex);
                                var num = i * image.width + j;
                                imageData1.data[num * 4] = window.imageList[orginI][j][numw];
                                imageData1.data[num * 4 + 1] = window.imageList[orginI][j][numw];
                                imageData1.data[num * 4 + 2] = window.imageList[orginI][j][numw];
                                imageData1.data[num * 4 + 3] = 255;
                            }
                        }
                        break;
                    case "y":
                        image.columns = image.width = window.imageList[0][0].length;
                        image.rows = image.height = Math.round(window.imageList.length * ratey);
                        x1.setAttribute("width", image.width);
                        x1.setAttribute("height", image.height);
                        imageData1 = ctx.getImageData(0, 0, image.width, image.height);
                        for (var _i = 0; _i < image.height; _i++) {
                            for (var _j = 0; _j < image.width; _j++) {
                                var _orginI = Math.floor(_i / ratey);
                                var _num = _i * image.width + _j;
                                //console.log(xy[i][j],num)
                                imageData1.data[_num * 4] = window.imageList[_orginI][numw][_j];
                                imageData1.data[_num * 4 + 1] = window.imageList[_orginI][numw][_j];
                                imageData1.data[_num * 4 + 2] = window.imageList[_orginI][numw][_j];
                                imageData1.data[_num * 4 + 3] = 255;
                            }
                        }

                        break;
                    case "z":
                        image.columns = image.width = window.imageList[0][0].length;
                        image.rows = image.height = window.imageList[0].length;
                        x1.setAttribute("width", image.width);
                        x1.setAttribute("height", image.height);
                        imageData1 = ctx.getImageData(0, 0, image.width, image.height);
                        for (var _i2 = 0; _i2 < image.height; _i2++) {
                            for (var _j2 = 0; _j2 < image.width; _j2++) {
                                var _num2 = _i2 * image.width + _j2;
                                //console.log(xy[i][j],num)
                                imageData1.data[_num2 * 4] = window.imageList[numw][_i2][_j2];
                                imageData1.data[_num2 * 4 + 1] = window.imageList[numw][_i2][_j2];
                                imageData1.data[_num2 * 4 + 2] = window.imageList[numw][_i2][_j2];
                                imageData1.data[_num2 * 4 + 3] = 255;
                            }
                        }
                        //pixelData = imageData
                        //aaaimg = x1.toDataURL('image/jpeg');
                        break;
                }
                ctx.putImageData(imageData1, 0, 0);
                var imgase = new Image();
                imgase.src = x1.toDataURL('image/jpeg');
                imgase.crossOrigin = 'anonymous';
                imgase.onload = function () {
                    aaaimg = this;
                    image.columns = image.width = this.width;
                    image.rows = image.height = this.height;
                    image.sizeInBytes = image.width * image.height * 4;
                    x1.setAttribute("width", image.width);
                    x1.setAttribute("height", image.height);
                    ctx = x1.getContext("2d");
                    ctx.drawImage(this, 0, 0);
                    var imageData = ctx.getImageData(0, 0, image.width, image.height).data;
                    pixelData = imageData; // new Uint16Array(this.width * this.height*4);
                    //console.log(image)
                    resolve(image);
                };
                image.onerror = function () {
                    that.event._dispatch('ctcornerstone.imgloadError', {
                        src: imgase.src
                    });
                };
                imageData1 = null;
            }),
            cancelFn: undefined
        };
    }
    cornerstone.registerImageLoader('pixImage', pixImage);

    function pixImage(imageId) {
        var width = 512;
        var height = 512;
        var numPixels = 100;
        var pixelData = void 0; //= new Uint16Array(numPixels);
        var index = 0;
        var canvas = void 0;
        var aaaimg = void 0;

        function getPixelData() {
            console.log(pixelData, 'pixelDatapixelDatapixelDatapixelData');
            return pixelData;
        }

        function getCanvas() {
            return canvas;
        }

        function getImage() {
            return aaaimg;
        }

        function setPixelData() {
            return aaaimg;
        }
        var image = {
            imageId: imageId,
            minPixelValue: 0,
            maxPixelValue: 255,
            slope: 1.0,
            intercept: 0,
            windowCenter: 128,
            windowWidth: 256,
            render: cornerstone.renderWebImage,
            getPixelData: getPixelData,
            setPixelData: setPixelData,
            getCanvas: getCanvas,
            getImage: getImage,
            rows: height,
            columns: width,
            height: height,
            width: width,
            Wretched: false, //以此判定图片是否跟原始尺寸有区别
            rate: 1,
            color: true,
            rgba: false,
            columnPixelSpacing: 1.0,
            rowPixelSpacing: 1.0,
            invert: false,
            sizeInBytes: width * height * 4
        };
        return {
            promise: new Promise(function (resolve, reject) {
                var x1 = document.createElement("CANVAS");
                canvas = x1;
                var ctx = x1.getContext("2d");
                var numw = imageId.replace('pixImage:', '').match(/\d{1,}/g)[0] * 1;
                var type = imageId.replace('pixImage:', '').match(/[a-z]{1,}/g)[0];
                var imageData1 = void 0;
                var minW = window.targetInfo.wc * 1 - 1 * window.targetInfo.ww / 2;
                var maxW = window.targetInfo.wc * 1 + 1 * window.targetInfo.ww / 2;
                minW = window.targetInfo.min < minW ? minW : window.targetInfo.min;
                maxW = window.targetInfo.max > maxW ? maxW : window.targetInfo.max;
                var ratey = window.depth / window.targetInfo.rowPixelSpacing;
                var ratex = window.depth / window.targetInfo.columnPixelSpacing;
                ratex = ratex < 1 ? 1 : ratex;
                ratey = ratey < 1 ? 1 : ratey;
                //image.rowPixelSpacing = window.targetInfo.rowPixelSpacing
                //image.columnPixelSpacing = window.targetInfo.columnPixelSpacing
                console.log(ratey, ratex);
                switch (type) {
                    case "x":
                        image.columns = image.width = window.imageList[0].length;
                        image.rows = image.height = Math.round(window.imageList.length * ratex);
                        x1.setAttribute("width", image.width);
                        x1.setAttribute("height", image.height);
                        console.log(image.height, image.width);
                        imageData1 = ctx.getImageData(0, 0, image.width, image.height);
                        for (var i = 0; i < image.height; i++) {
                            for (var j = 0; j < image.width; j++) {
                                var orginI = Math.floor(i / ratex);
                                var num = i * image.width + j;
                                var dataNum = window.imageList[orginI][j][numw] < minW ? minW : window.imageList[orginI][j][numw];
                                dataNum = dataNum > maxW ? maxW : dataNum;
                                dataNum = Math.floor(255 * (dataNum - minW) / (maxW - minW));
                                imageData1.data[num * 4 + 2] = imageData1.data[num * 4 + 1] = imageData1.data[num * 4] = dataNum;
                                imageData1.data[num * 4 + 3] = 255;
                            }
                        }
                        break;
                    case "y":
                        image.columns = image.width = window.imageList[0][0].length;
                        image.rows = image.height = Math.round(window.imageList.length * ratey);
                        x1.setAttribute("width", image.width);
                        x1.setAttribute("height", image.height);
                        imageData1 = ctx.getImageData(0, 0, image.width, image.height);
                        for (var _i3 = 0; _i3 < image.height; _i3++) {
                            for (var _j3 = 0; _j3 < image.width; _j3++) {
                                var _orginI2 = Math.floor(_i3 / ratey);
                                var _num3 = _i3 * image.width + _j3;
                                var _dataNum = window.imageList[_orginI2][numw][_j3] < minW ? minW : window.imageList[_orginI2][numw][_j3];
                                _dataNum = _dataNum > maxW ? maxW : _dataNum;
                                _dataNum = Math.floor(255 * (_dataNum - minW) / (maxW - minW));
                                imageData1.data[_num3 * 4 + 2] = imageData1.data[_num3 * 4 + 1] = imageData1.data[_num3 * 4] = _dataNum;
                                imageData1.data[_num3 * 4 + 3] = 255;
                            }
                        }

                        break;
                    case "z":
                        image.columns = image.width = window.imageList[0][0].length;
                        image.rows = image.height = window.imageList[0].length;
                        x1.setAttribute("width", image.width);
                        x1.setAttribute("height", image.height);
                        imageData1 = ctx.getImageData(0, 0, image.width, image.height);
                        for (var _i4 = 0; _i4 < image.height; _i4++) {
                            for (var _j4 = 0; _j4 < image.width; _j4++) {
                                var _num4 = _i4 * image.width + _j4;
                                var _dataNum2 = window.imageList[numw][_i4][_j4] < minW ? minW : window.imageList[numw][_i4][_j4];
                                _dataNum2 = _dataNum2 > maxW ? maxW : _dataNum2;
                                _dataNum2 = Math.floor(255 * (_dataNum2 - minW) / (maxW - minW));
                                imageData1.data[_num4 * 4 + 2] = imageData1.data[_num4 * 4 + 1] = imageData1.data[_num4 * 4] = _dataNum2;
                                imageData1.data[_num4 * 4 + 3] = 255;
                            }
                        }
                        //pixelData = imageData
                        //aaaimg = x1.toDataURL('image/jpeg');
                        break;
                }
                ctx.putImageData(imageData1, 0, 0);
                var imgase = new Image();
                imgase.src = x1.toDataURL('image/jpeg');
                imgase.crossOrigin = 'anonymous';
                imgase.onload = function () {
                    aaaimg = this;
                    image.columns = image.width = this.width;
                    image.rows = image.height = this.height;
                    image.sizeInBytes = image.width * image.height * 4;
                    x1.setAttribute("width", image.width);
                    x1.setAttribute("height", image.height);
                    ctx = x1.getContext("2d");
                    ctx.drawImage(this, 0, 0);
                    var imageData = ctx.getImageData(0, 0, image.width, image.height).data;
                    console.log(pixelData);
                    pixelData = imageData; // new Uint16Array(this.width * this.height*4);
                    console.log(image);
                    resolve(image);
                };
                image.onerror = function () {
                    that.event._dispatch('ctcornerstone.imgloadError', {
                        src: imgase.src
                    });
                };
                imageData1 = null;
            }),
            cancelFn: undefined
        };
    }
}
ctcornerstoneload();
//原型链一定要有的
//module.exports = new ctcornerstoneload();

/***/ }),

/***/ 662:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//这边基本上引入需要使用的资源less，api，需要使用的模块等等。
//存放在里面用的一些静态信息。这些都是由接口获取的，然后由页面直接传入
/*
nidusComponentInfo 保存所有组件信息。组件信息分为两块，一块是整体序列的信息，key值为all
另外一块是病症的组件信息。分别以病症的命名来保存的

nidusComponentData 保存每个被标注出来的病症的组件数据是什么

nidusChoose 选择了的病灶信息
*/

var ctmanage = function (_Interstellar$modelBa) {
    _inherits(ctmanage, _Interstellar$modelBa);

    function ctmanage(app) {
        _classCallCheck(this, ctmanage);

        var _this = _possibleConstructorReturn(this, (ctmanage.__proto__ || Object.getPrototypeOf(ctmanage)).call(this, app));

        _this.nidusComponentInfo = {};
        _this.nidusComponentData = {};
        _this.nidusChoose = null;
        _this.seriesInfo = {};
        _this.controlStauts = {
            delete: true
        };
        _this.allresult = null;
        return _this;
    }

    _createClass(ctmanage, [{
        key: 'getDicomValue',
        value: function getDicomValue(detail) {
            var point = detail.currentPoints.image;
            var width = detail.image.width;
            var height = detail.image.height;
            var allData = detail.image.getPixelData();
            var pos = width * Math.round(point.y) + Math.round(point.x);
            if (allData.length != width * height) {
                pos = 4 * pos;
            }
            return {
                point: point,
                allcolor: [allData[pos], allData[pos + 1], allData[pos + 2], allData[pos + 3]],
                hu: allData[pos]
            };
        }

        //返回布局，各自所占的大小和比例

    }, {
        key: 'getLayout',
        value: function getLayout(value) {
            switch (value) {
                case 1:
                    return {
                        w: 1,
                        h: 1,
                        t: 0
                    };
                    break;
                case 2:
                    return {
                        w: 0.5,
                        h: 1,
                        t: 0
                    };
                    break;
                case 3:
                    return {
                        w: 1 / 3,
                        h: 1,
                        t: 0
                    };
                    break;
                case 4:
                    return {
                        w: 0.5,
                        h: 0.5,
                        t: 1
                    };
                    break;
                case 6:
                    return {
                        w: 1 / 3,
                        h: 0.5,
                        t: 1
                    };
                    break;
                case 8:
                    return {
                        w: 0.25,
                        h: 0.5,
                        t: 1
                    };
                    break;
            }
        }
    }, {
        key: 'returnBodyName',
        value: function returnBodyName(value) {
            switch (value) {
                case 1:
                    return '前上缘';
                    break;
                case 2:
                    return '前下缘';
                    break;
                case 3:
                    return '后上缘';
                    break;
                case 4:
                    return '后下缘';
                    break;
            }
        }

        //chooseHU为一开始选择的像素值，config为设置的参数，value为点位信息

    }, {
        key: 'findHU',
        value: function findHU(value, config, chooseHU) {
            var data = [];

            for (var i = 0; i < config.distance; i++) {
                data.push(this.returnscore('r', value, i, config, chooseHU));
                data.push(this.returnscore('l', value, i, config, chooseHU));
                data.push(this.returnscore('u', value, i, config, chooseHU));
                data.push(this.returnscore('v', value, i, config, chooseHU));
            }
            var dataf = data.filter(function (item) {
                return item;
            });
            dataf = dataf.sort(function (a, b) {
                return a.d - b.d;
            });
            return dataf[0];
            //console.log(dataf)
            for (var i = 0; i < config.distance; i++) {
                var da = this.returnscore('r', value, i, config, chooseHU);
                if (da) {
                    return da;
                }
                da = this.returnscore('l', value, i, config, chooseHU);
                if (da) {
                    return da;
                }
                da = this.returnscore('u', value, i, config, chooseHU);
                if (da) {
                    return da;
                }
                da = this.returnscore('b', value, i, config, chooseHU);
                if (da) {
                    return da;
                }
                /*let da = this.returnscore('l', value, i, config, chooseHU) || this.returnscore('r', value, i, config, chooseHU) || this.returnscore('u', value, i, config, chooseHU) || this.returnscore('b', value, i, config, chooseHU)
                if (da) {
                    return da
                }*/
            }
        }
    }, {
        key: 'returnscore',
        value: function returnscore(type, value, num, config, chooseHU) {
            var point = {};
            switch (type) {
                case 'l':
                    point = {
                        x: value.currentPoints.image.x - num,
                        y: value.currentPoints.image.y
                    };
                    break;
                case 'r':
                    point = {
                        x: value.currentPoints.image.x + num,
                        y: value.currentPoints.image.y
                    };
                    break;
                case 'u':
                    point = {
                        x: value.currentPoints.image.x,
                        y: value.currentPoints.image.y - num
                    };
                    break;
                case 'b':
                    point = {
                        x: value.currentPoints.image.x,
                        y: value.currentPoints.image.y + num
                    };
                    break;
            }
            var data = {
                currentPoints: {
                    image: point
                },
                image: {
                    width: value.image.width,
                    getPixelData: value.image.getPixelData
                }
            };
            var hu = this.getDicomValue(data);
            var deviation = config.deviation;
            var len = 0;
            //利用加权平均数进行彩色跟灰度的换算 0.3,0.59,0.11
            var chooseC = 0.3 * chooseHU.allcolor[0] + 0.59 * chooseHU.allcolor[1] + 0.11 * chooseHU.allcolor[2];
            var hudata = 0.3 * hu.allcolor[0] + 0.59 * hu.allcolor[1] + 0.11 * hu.allcolor[2];
            if (Math.abs(hudata - chooseC) <= deviation) {
                len = Math.abs(hudata - chooseC);
            } else {
                return null;
            }
            hu.point.d = len;
            return hu.point;

            /*for (let i = 0; i < 3; i++) {
                if (hu.allcolor[i] < chooseHU.allcolor[i] + deviation && hu.allcolor[i] > chooseHU.allcolor[i] - deviation) {
                    len += Math.abs(chooseHU.allcolor[i] - hu.allcolor[i])
                } else {
                    return null
                }
            }
            if (hu.hu < this.chooseHU.hu + this.cornerstoneTools_config.polygon_config.deviation && hu.hu > this.chooseHU.hu - this.cornerstoneTools_config.polygon_config.deviation) {
                    return hu.point
                }
                return null*/
        }

        //--------------返回点位置--------------

    }, {
        key: 'returnRealPoint',
        value: function returnRealPoint(point, id, screen, wh) {
            var layout = this.getLayout(screen);
            var top = layout.t == 0 ? 0 : id >= screen / 2 ? wh.h : 0;
            var left = layout.t == 0 ? id * wh.w : id >= screen / 2 ? (id - screen / 2) * wh.w : id * wh.w;
            return {
                x: point.x - left,
                y: point.y - top
            };
        }
    }, {
        key: 'returnScreenPoint',
        value: function returnScreenPoint(point, id, screen, wh) {
            var layout = this.getLayout(screen);
            var top = layout.t == 0 ? 0 : id >= screen / 2 ? wh.h : 0;
            var left = layout.t == 0 ? id * wh.w : id >= screen / 2 ? (id - screen / 2) * wh.w : id * wh.w;
            return {
                x: point.x + left,
                y: point.y + top
            };
        }

        //--------------行列法2------------------

    }, {
        key: 'compareColors',
        value: function compareColors(p, val, deviation) {
            var hu = p.color;
            var rmean = (hu[0] + val[0]) / 2;
            var R = hu[0] - val[0];
            var G = hu[1] - val[1];
            var B = hu[2] - val[2];
            var data = (2 + rmean / 256) * (R * R) + 4 * (G * G) + (2 + (255 - rmean) / 256) * (B * B);
            return Math.pow(data, 0.5) < deviation ? true : false;
            //console.log(hu,val,deviation,'deviationdeviationdeviationdeviation')
            if (Math.abs(hu[0] - val[0]) > deviation) {
                return false;
            }
            if (Math.abs(hu[1] - val[1]) > deviation) {
                return false;
            }
            if (Math.abs(hu[2] - val[2]) > deviation) {
                return false;
            }
            return true;
        }
    }, {
        key: 'returnPoint',
        value: function returnPoint(image, x, y, width) {
            var i = y * width + x;
            return {
                x: x,
                y: y,
                i: i,
                color: [image[4 * i], image[4 * i + 1], image[4 * i + 2], image[4 * i + 3]]
            };
        }
    }, {
        key: 'floodFill_newRGB32',
        value: function floodFill_newRGB32(image, config) {
            //qDebug() << image.format();
            console.log(new Date().getTime());
            var x = Math.floor(image.currentPoints.image.x);
            var y = Math.floor(image.currentPoints.image.y);
            var width = image.image.width;
            var height = image.image.height;
            var deviation = config.deviation;
            //console.log(x, y)
            if (x < 0 || x >= width || y < 0 || y >= height) {
                return [];
            }
            var num = 0;
            var color = this.getDicomValue(image).allcolor;
            var stack = [];
            var points = [];
            points[width * height] = undefined;
            var imageData = {
                pixelData: image.image.getPixelData(),
                width: image.image.width,
                height: image.image.height
            };
            stack.push(this.returnPoint(imageData.pixelData, x, y, width));
            var p = stack.pop();
            do {
                if (!points[p.i]) {
                    if (this.compareColors(p, color, config.deviation)) {
                        num++;
                        points[p.i] = {
                            x: p.x,
                            y: p.y
                        };
                        if (p.x > 0) // west
                            stack.push(this.returnPoint(imageData.pixelData, p.x - 1, p.y, width));
                        if (p.x < width - 1) // east
                            stack.push(this.returnPoint(imageData.pixelData, p.x + 1, p.y, width));
                        if (p.y > 0) // north
                            stack.push(this.returnPoint(imageData.pixelData, p.x, p.y - 1, width));
                        if (p.y < height - 1) stack.push(this.returnPoint(imageData.pixelData, p.x, p.y + 1, width));
                    }
                }
            } while (p = stack.pop());
            points = points.filter(function (item) {
                return item;
            });
            console.log(new Date().getTime());
            return points;
        }
    }, {
        key: 'getroundpoint',
        value: function getroundpoint(value, r) {
            var arr = [];
            var sx = Math.round(value.x - r);
            var sy = Math.round(value.y - r);
            var d = 2 * r;
            var rand = d * d;
            for (var i = 0; i < rand; i++) {
                var x = sx + Math.floor(i % d);
                var y = sy + Math.floor(i / d);
                if ((x - value.x) * (x - value.x) + (y - value.y) * (y - value.y) <= r * r) {
                    arr.push({
                        x: x,
                        y: y
                    });
                }
            }
            return arr;
        }
    }, {
        key: 'makeCiclePoint',
        value: function makeCiclePoint(value, radiu) {
            var arr = [];
            var r = radiu.deviation / 2;
            var px = value.currentPoints.image.x;
            var py = value.currentPoints.image.y;
            var sx = Math.round(px - r);
            var sy = Math.round(py - r);
            var d = 2 * r;
            var rand = d * d;
            for (var i = 0; i < rand; i++) {
                var x = sx + Math.floor(i % d);
                var y = sy + Math.floor(i / d);
                if ((x - px) * (x - px) + (y - py) * (y - py) <= r * r) {
                    arr.push({
                        x: x,
                        y: y
                    });
                }
            }
            return arr;
        }
    }]);

    return ctmanage;
}(Interstellar.modelBase);

module.exports = ctmanage;

/***/ }),

/***/ 663:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(664);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./crossline.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./crossline.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 664:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".crossline {\n  position: relative;\n  width: 100%;\n  background: transparent;\n  -webkit-touch-callout: none;\n  /* iOS Safari */\n  -webkit-user-select: none;\n  /* Chrome/Safari/Opera */\n  -khtml-user-select: none;\n  /* Konqueror */\n  -moz-user-select: none;\n  /* Firefox */\n  -ms-user-select: none;\n  /* Internet Explorer/Edge */\n  user-select: none;\n}\n.crossline .xline {\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 3px;\n  background: #f00;\n  position: absolute;\n  transition-duration: 0s;\n  -moz-transition-duration: 0s;\n  /* Firefox 4 */\n  -webkit-transition-duration: 0s;\n  /* Safari 和 Chrome */\n  -o-transition-duration: 0s;\n  /* Opera */\n}\n.crossline .yline {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 3px;\n  background: #f00;\n  transition-duration: 0s;\n  -moz-transition-duration: 0s;\n  /* Firefox 4 */\n  -webkit-transition-duration: 0s;\n  /* Safari 和 Chrome */\n  -o-transition-duration: 0s;\n  /* Opera */\n}\n", ""]);

// exports


/***/ }),

/***/ 665:
/***/ (function(module, exports) {

module.exports = "<div class=crossline> <div class=xline> </div> <div class=yline> </div> </div>";

/***/ }),

/***/ 666:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var rectangleRoi = function rectangleRoi() {
    _classCallCheck(this, rectangleRoi);

    var external = cornerstoneTools.external;
    var mouseButtonTool = cornerstoneTools.mouseButtonTool;

    var toolStyle = cornerstoneTools.toolStyle;
    var toolColors = cornerstoneTools.toolColors;
    var drawHandles = cornerstoneTools.drawHandles;

    var calculateSUV = cornerstoneTools.calculateSUV;

    var drawTextBox = cornerstoneTools.drawTextBox;
    var getToolState = cornerstoneTools.getToolState;
    var drawRect = cornerstoneTools.drawing.drawRect;
    var getNewContext = cornerstoneTools.drawing.getNewContext;
    var draw = cornerstoneTools.drawing.draw;
    var setShadow = cornerstoneTools.drawing.setShadow;

    var keyboardTool = cornerstoneTools.keyboardTool;

    var toolType = 'rectangleRoi';

    // /////// BEGIN ACTIVE TOOL ///////
    function createNewMeasurement(mouseEventData) {
        // Create the measurement data for this tool with the end handle activated
        var measurementData = {
            visible: true,
            active: true,
            invalidated: true,
            color: undefined,
            areaDisplayFlag: false,
            nameDisplayFlag: false,
            uuid: mouseEventData.uuid ? mouseEventData.uuid : null,
            handles: {
                start: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: false
                },
                end: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: true
                },
                textBox: {
                    active: false,
                    hasMoved: false,
                    movesIndependently: false,
                    drawnIndependently: true,
                    allowedOutsideImage: true,
                    hasBoundingBox: true
                }
            }
        };
        var config = rectangleRoiend.getConfiguration();
        if (config) {
            {
                if (config.nameDisplayFlag != undefined && config.nameDisplayFlag != null) {
                    measurementData.nameDisplayFlag = config.nameDisplayFlag;
                }
                if (config.areaDisplayFlag != undefined && config.areaDisplayFlag) {
                    measurementData.areaDisplayFlag = config.areaDisplayFlag;
                }
            }
        }
        return measurementData;
    }
    // /////// END ACTIVE TOOL ///////

    function pointNearTool(element, data, coords) {
        if (data.visible === false) {
            return false;
        }

        var cornerstone = external.cornerstone;
        var startCanvas = cornerstone.pixelToCanvas(element, data.handles.start);
        var endCanvas = cornerstone.pixelToCanvas(element, data.handles.end);

        var rect = {
            left: Math.min(startCanvas.x, endCanvas.x),
            top: Math.min(startCanvas.y, endCanvas.y),
            width: Math.abs(startCanvas.x - endCanvas.x),
            height: Math.abs(startCanvas.y - endCanvas.y)
        };

        var distanceToPoint = external.cornerstoneMath.rect.distanceToPoint(rect, coords);

        return distanceToPoint < 5;
    }

    // /////// BEGIN IMAGE RENDERING ///////

    function calculateMeanStdDev(sp, ellipse) {
        // TODO: Get a real statistics library here that supports large counts

        var sum = 0;
        var sumSquared = 0;
        var count = 0;
        var index = 0;

        for (var y = ellipse.top; y < ellipse.top + ellipse.height; y++) {
            for (var x = ellipse.left; x < ellipse.left + ellipse.width; x++) {
                sum += sp[index];
                sumSquared += sp[index] * sp[index];
                count++;
                index++;
            }
        }

        if (count === 0) {
            return {
                count: count,
                mean: 0.0,
                variance: 0.0,
                stdDev: 0.0
            };
        }

        var mean = sum / count;
        var variance = sumSquared / count - mean * mean;

        return {
            count: count,
            mean: mean,
            variance: variance,
            stdDev: Math.sqrt(variance)
        };
    }

    function numberWithCommas(x) {
        // http://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript
        var parts = x.toString().split('.');

        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');

        return parts.join('.');
    }

    function onImageRendered(e) {
        var eventData = e.detail;

        // If we have no toolData for this element, return immediately as there is nothing to do
        var toolData = getToolState(e.currentTarget, toolType);

        if (!toolData) {
            return;
        }

        var cornerstone = external.cornerstone;
        var image = eventData.image;
        var element = eventData.element;
        var lineWidth = toolStyle.getToolWidth();
        var config = rectangleRoiend.getConfiguration();
        var seriesModule = cornerstone.metaData.get('generalSeriesModule', image.imageId);
        var imagePlane = cornerstone.metaData.get('imagePlaneModule', image.imageId);
        var modality = void 0;
        var rowPixelSpacing = void 0;
        var colPixelSpacing = void 0;

        if (imagePlane) {
            rowPixelSpacing = imagePlane.rowPixelSpacing || imagePlane.rowImagePixelSpacing;
            colPixelSpacing = imagePlane.columnPixelSpacing || imagePlane.colImagePixelSpacing;
        } else {
            rowPixelSpacing = image.rowPixelSpacing;
            colPixelSpacing = image.columnPixelSpacing;
        }

        if (seriesModule) {
            modality = seriesModule.modality;
        }

        var context = getNewContext(eventData.canvasContext.canvas);
        context.lineWidth = 1;
        // If we have tool data for this element - iterate over each set and draw it

        var _loop = function _loop(_i) {
            var data = toolData.data[_i];

            if (data.visible === false) {
                return 'continue';
            }

            draw(context, function (context) {
                // Apply any shadow settings defined in the tool configuration
                setShadow(context, config);

                // Check which color the rendered tool should be
                var color = toolColors.getColorIfActive(data);

                // Draw the rectangle on the canvas
                drawRect(context, element, data.handles.start, data.handles.end, { color: color });

                // If the tool configuration specifies to only draw the handles on hover / active,
                // Follow this logic
                if (config && config.drawHandlesOnHover) {
                    // Draw the handles if the tool is active
                    if (data.active === true) {
                        drawHandles(context, eventData, data.handles, color);
                    } else {
                        // If the tool is inactive, draw the handles only if each specific handle is being
                        // Hovered over
                        var handleOptions = {
                            drawHandlesIfActive: true
                        };

                        drawHandles(context, eventData, data.handles, color, handleOptions);
                    }
                } else {
                    // If the tool has no configuration settings, always draw the handles
                    drawHandles(context, eventData, data.handles, color);
                }

                // Define variables for the area and mean/standard deviation
                var area = void 0,
                    meanStdDev = void 0,
                    meanStdDevSUV = void 0;

                // Perform a check to see if the tool has been invalidated. This is to prevent
                // Unnecessary re-calculation of the area, mean, and standard deviation if the
                // Image is re-rendered but the tool has not moved (e.g. during a zoom)
                if (data.invalidated === false) {
                    // If the data is not invalidated, retrieve it from the toolData
                    meanStdDev = data.meanStdDev;
                    meanStdDevSUV = data.meanStdDevSUV;
                    area = data.area;
                } else {
                    // If the data has been invalidated, we need to calculate it again

                    // Retrieve the bounds of the ellipse in image coordinates
                    var ellipse = {
                        left: Math.min(data.handles.start.x, data.handles.end.x),
                        top: Math.min(data.handles.start.y, data.handles.end.y),
                        width: Math.abs(data.handles.start.x - data.handles.end.x),
                        height: Math.abs(data.handles.start.y - data.handles.end.y)
                    };

                    // First, make sure this is not a color image, since no mean / standard
                    // Deviation will be calculated for color images.
                    if (!image.color) {
                        // Retrieve the array of pixels that the ellipse bounds cover
                        var pixels = cornerstone.getPixels(element, ellipse.left, ellipse.top, ellipse.width, ellipse.height);

                        // Calculate the mean & standard deviation from the pixels and the ellipse details
                        meanStdDev = calculateMeanStdDev(pixels, ellipse);

                        if (modality === 'PT') {
                            // If the image is from a PET scan, use the DICOM tags to
                            // Calculate the SUV from the mean and standard deviation.

                            // Note that because we are using modality pixel values from getPixels, and
                            // The calculateSUV routine also rescales to modality pixel values, we are first
                            // Returning the values to storedPixel values before calcuating SUV with them.
                            // TODO: Clean this up? Should we add an option to not scale in calculateSUV?
                            meanStdDevSUV = {
                                mean: calculateSUV(image, (meanStdDev.mean - image.intercept) / image.slope),
                                stdDev: calculateSUV(image, (meanStdDev.stdDev - image.intercept) / image.slope)
                            };
                        }

                        // If the mean and standard deviation values are sane, store them for later retrieval
                        if (meanStdDev && !isNaN(meanStdDev.mean)) {
                            data.meanStdDev = meanStdDev;
                            data.meanStdDevSUV = meanStdDevSUV;
                        }
                    }

                    // Calculate the image area from the ellipse dimensions and pixel spacing
                    area = ellipse.width * (colPixelSpacing || 1) * (ellipse.height * (rowPixelSpacing || 1));

                    // If the area value is sane, store it for later retrieval
                    if (!isNaN(area)) {
                        data.area = area;
                    }

                    // Set the invalidated flag to false so that this data won't automatically be recalculated
                    data.invalidated = false;
                }
                if (data && data.nameDisplayFlag) {
                    var text = textBoxText(data);

                    // If the textbox has not been moved by the user, it should be displayed on the right-most
                    // Side of the tool.
                    if (!data.handles.textBox.hasMoved) {
                        // Find the rightmost side of the ellipse at its vertical center, and place the textbox here
                        // Note that this calculates it in image coordinates
                        data.handles.textBox.x = Math.max(data.handles.start.x, data.handles.end.x);
                        data.handles.textBox.y = (data.handles.start.y + data.handles.end.y) / 2;
                    }
                    var textCoords = cornerstone.pixelToCanvas(element, data.handles.textBox);
                    var options = {
                        centering: {
                            x: false,
                            y: true
                        }
                    };
                    drawTextBox(context, text, textCoords.x, textCoords.y, color, options);
                }

                /*drawLinkedTextBox(context, element, data.handles.textBox, text,
                    data.handles, textBoxAnchorPoints, color, lineWidth, 0, true);*/
            });
        };

        for (var _i = 0; _i < toolData.data.length; _i++) {
            var _ret = _loop(_i);

            if (_ret === 'continue') continue;
        }

        function textBoxText(data) {
            var meanStdDev = data.meanStdDev,
                meanStdDevSUV = data.meanStdDevSUV,
                area = data.area;
            // Define an array to store the rows of text for the textbox

            var textLines = [];

            // If the mean and standard deviation values are present, display them
            if (meanStdDev && meanStdDev.mean) {
                // If the modality is CT, add HU to denote Hounsfield Units
                var moSuffix = '';

                if (modality === 'CT') {
                    moSuffix = ' HU';
                }

                // Create a line of text to display the mean and any units that were specified (i.e. HU)
                var meanText = 'Mean: ' + numberWithCommas(meanStdDev.mean.toFixed(2)) + moSuffix;
                // Create a line of text to display the standard deviation and any units that were specified (i.e. HU)
                var stdDevText = 'StdDev: ' + numberWithCommas(meanStdDev.stdDev.toFixed(2)) + moSuffix;

                // If this image has SUV values to display, concatenate them to the text line
                if (meanStdDevSUV && meanStdDevSUV.mean !== undefined) {
                    var SUVtext = ' SUV: ';

                    meanText += SUVtext + numberWithCommas(meanStdDevSUV.mean.toFixed(2));
                    stdDevText += SUVtext + numberWithCommas(meanStdDevSUV.stdDev.toFixed(2));
                }

                // Add these text lines to the array to be displayed in the textbox
                textLines.push(meanText);
                textLines.push(stdDevText);
            }

            // If the area is a sane value, display it
            if (area) {
                // Determine the area suffix based on the pixel spacing in the image.
                // If pixel spacing is present, use millimeters. Otherwise, use pixels.
                // This uses Char code 178 for a superscript 2
                var suffix = ' mm' + String.fromCharCode(178);

                if (!rowPixelSpacing || !colPixelSpacing) {
                    suffix = ' pixels' + String.fromCharCode(178);
                }

                // Create a line of text to display the area and its units
                var areaText = 'Area: ' + numberWithCommas(area.toFixed(2)) + suffix;

                // Add this text line to the array to be displayed in the textbox
                textLines.push(areaText);
            }

            return textLines;
        }

        function textBoxAnchorPoints(handles) {
            // Retrieve the bounds of the ellipse (left, top, width, and height)
            var left = Math.min(handles.start.x, handles.end.x);
            var top = Math.min(handles.start.y, handles.end.y);
            var width = Math.abs(handles.start.x - handles.end.x);
            var height = Math.abs(handles.start.y - handles.end.y);

            return [{
                // Top middle point of ellipse
                x: left + width / 2,
                y: top
            }, {
                // Left middle point of ellipse
                x: left,
                y: top + height / 2
            }, {
                // Bottom middle point of ellipse
                x: left + width / 2,
                y: top + height
            }, {
                // Right middle point of ellipse
                x: left + width,
                y: top + height / 2
            }];
        }
    }

    function getMeasurement(data) {
        return createNewMeasurement(data);
    }
    var rectangleRoiend = mouseButtonTool({
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType
    });
    for (var i in cornerstoneTools.rectangleRoi) {
        cornerstoneTools.rectangleRoi[i] = rectangleRoiend[i];
    }
    cornerstoneTools.rectangleRoi.getMeasurement = getMeasurement;
};

new rectangleRoi();

/***/ }),

/***/ 667:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var length = function length() {
    _classCallCheck(this, length);

    var external = cornerstoneTools.external;
    var mouseButtonTool = cornerstoneTools.mouseButtonTool;

    var toolStyle = cornerstoneTools.toolStyle;
    var toolColors = cornerstoneTools.toolColors;
    var drawHandles = cornerstoneTools.drawHandles;

    var drawTextBox = cornerstoneTools.drawTextBox;
    var getToolState = cornerstoneTools.getToolState;
    var drawLine = cornerstoneTools.drawing.drawLine;
    var setShadow = cornerstoneTools.drawing.setShadow;
    var getNewContext = cornerstoneTools.drawing.getNewContext;
    var draw = cornerstoneTools.drawing.draw;
    var toolType = 'length';

    function lineSegDistance(element, start, end, coords) {
        var lineSegment = {
            start: cornerstone.pixelToCanvas(element, start),
            end: cornerstone.pixelToCanvas(element, end)
        };

        return external.cornerstoneMath.lineSegment.distanceToPoint(lineSegment, coords);
    }
    // /////// BEGIN ACTIVE TOOL ///////
    function createNewMeasurement(mouseEventData) {
        // Create the measurement data for this tool with the end handle activated
        var measurementData = {
            visible: true,
            active: true,
            color: undefined,
            uuid: mouseEventData.uuid ? mouseEventData.uuid : null,
            handles: {
                start: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: false
                },
                end: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: true
                },
                textBox: {
                    active: false,
                    hasMoved: false,
                    movesIndependently: false,
                    drawnIndependently: true,
                    allowedOutsideImage: true,
                    hasBoundingBox: true
                }
            }
        };
        var config = lengthend.getConfiguration();
        if (config) {
            {
                if (config.nameDisplayFlag != undefined && config.nameDisplayFlag != null) {
                    measurementData.nameDisplayFlag = config.nameDisplayFlag;
                }
                if (config.areaDisplayFlag != undefined && config.areaDisplayFlag) {
                    measurementData.areaDisplayFlag = config.areaDisplayFlag;
                }
            }
        }
        return measurementData;
    }
    // /////// END ACTIVE TOOL ///////

    function pointNearTool(element, data, coords) {
        if (data.visible === false) {
            return false;
        }

        return lineSegDistance(element, data.handles.start, data.handles.end, coords) < 25;
    }

    // /////// BEGIN IMAGE RENDERING ///////
    function onImageRendered(e) {
        var eventData = e.detail;

        // If we have no toolData for this element, return immediately as there is nothing to do
        var toolData = getToolState(e.currentTarget, toolType);

        if (!toolData) {
            return;
        }

        var cornerstone = external.cornerstone;
        // We have tool data for this element - iterate over each one and draw it
        var context = getNewContext(eventData.canvasContext.canvas);
        var image = eventData.image,
            element = eventData.element;


        var lineWidth = toolStyle.getToolWidth();
        var config = lengthend.getConfiguration();
        var imagePlane = cornerstone.metaData.get('imagePlaneModule', image.imageId);
        var rowPixelSpacing = void 0;
        var colPixelSpacing = void 0;

        if (imagePlane) {
            rowPixelSpacing = imagePlane.rowPixelSpacing || imagePlane.rowImagePixelSpacing;
            colPixelSpacing = imagePlane.columnPixelSpacing || imagePlane.colImagePixelSpacing;
        } else {
            rowPixelSpacing = image.rowPixelSpacing;
            colPixelSpacing = image.columnPixelSpacing;
        }

        var _loop = function _loop(_i) {
            var data = toolData.data[_i];

            if (data.visible === false) {
                return 'continue';
            }

            draw(context, function (context) {
                // Configurable shadow
                setShadow(context, config);

                var color = toolColors.getColorIfActive(data);

                // Draw the measurement line
                drawLine(context, element, data.handles.start, data.handles.end, { color: color });

                // Draw the handles
                var handleOptions = {
                    drawHandlesIfActive: config && config.drawHandlesOnHover
                };

                drawHandles(context, eventData, data.handles, color, handleOptions);

                // Set rowPixelSpacing and columnPixelSpacing to 1 if they are undefined (or zero)
                var dx = (data.handles.end.x - data.handles.start.x) * (colPixelSpacing || 1);
                var dy = (data.handles.end.y - data.handles.start.y) * (rowPixelSpacing || 1);

                // Calculate the length, and create the text variable with the millimeters or pixels suffix
                var length = Math.sqrt(dx * dx + dy * dy);

                // Store the length inside the tool for outside access
                data.length = length;

                if (!data.handles.textBox.hasMoved) {
                    var coords = {
                        x: Math.max(data.handles.start.x, data.handles.end.x)
                    };

                    // Depending on which handle has the largest x-value,
                    // Set the y-value for the text box
                    if (coords.x === data.handles.start.x) {
                        coords.y = data.handles.start.y;
                    } else {
                        coords.y = data.handles.end.y;
                    }

                    data.handles.textBox.x = coords.x;
                    data.handles.textBox.y = coords.y;
                }

                // Move the textbox slightly to the right and upwards
                // So that it sits beside the length tool handle
                var xOffset = 10;
                if (data && data.nameDisplayFlag) {
                    var text = textBoxText(data, rowPixelSpacing, colPixelSpacing);
                    var textCoords = cornerstone.pixelToCanvas(element, data.handles.textBox);
                    var options = {
                        centering: {
                            x: false,
                            y: true
                        }
                    };
                    drawTextBox(context, text, textCoords.x, textCoords.y, color, options);
                }

                /*drawLinkedTextBox(context, element, data.handles.textBox, text,
                    data.handles, textBoxAnchorPoints, color, lineWidth, xOffset, true);*/
            });
        };

        for (var _i = 0; _i < toolData.data.length; _i++) {
            var _ret = _loop(_i);

            if (_ret === 'continue') continue;
        }

        function textBoxText(data, rowPixelSpacing, colPixelSpacing) {
            // Set the length text suffix depending on whether or not pixelSpacing is available
            var suffix = ' mm';

            if (!rowPixelSpacing || !colPixelSpacing) {
                suffix = ' pixels';
            }

            return '' + data.length.toFixed(2) + suffix;
        }

        function textBoxAnchorPoints(handles) {
            var midpoint = {
                x: (handles.start.x + handles.end.x) / 2,
                y: (handles.start.y + handles.end.y) / 2
            };

            return [handles.start, midpoint, handles.end];
        }
    }

    function getMeasurement(data) {
        return createNewMeasurement(data);
    }
    var lengthend = mouseButtonTool({
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType
    });
    for (var i in cornerstoneTools.length) {
        cornerstoneTools.length[i] = lengthend[i];
    }
    cornerstoneTools.length.getMeasurement = getMeasurement;
};

new length();

/***/ }),

/***/ 668:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var magnify = function magnify() {
    _classCallCheck(this, magnify);

    var EVENTS = cornerstoneTools.EVENTS;
    var external = cornerstoneTools.external;
    var getBrowserInfo = cornerstoneTools.getBrowserInfo;

    var isMouseButtonEnabled = cornerstoneTools.isMouseButtonEnabled;

    var setToolOptions = cornerstoneTools.setToolOptions;
    var getToolOptions = cornerstoneTools.getToolOptions;

    var getNewContext = cornerstoneTools.drawing.getNewContext;
    var fillBox = cornerstoneTools.drawing.fillBox;

    function clip(val, low, high) {
        return Math.min(Math.max(low, val), high);
    }

    function clipToBox(point, box) {
        point.x = clip(point.x, 0, box.width);
        point.y = clip(point.y, 0, box.height);
    }

    var toolType = 'magnify';

    var configuration = {
        magnifySize: 300,
        magnificationLevel: 5
    };

    var browserName = void 0;
    var currentPoints = void 0;
    var zoomCanvas = void 0;
    var zoomElement = void 0;

    /** Remove the magnifying glass when the mouse event ends */
    function mouseUpCallback(e) {
        var eventData = e.detail;
        var element = eventData.element;

        element.removeEventListener(EVENTS.MOUSE_DRAG, dragCallback);
        element.removeEventListener(EVENTS.MOUSE_UP, mouseUpCallback);
        element.removeEventListener(EVENTS.MOUSE_CLICK, mouseUpCallback);
        hideTool(eventData);
    }

    function hideTool(eventData) {
        var element = eventData.element;

        element.querySelector('.magnifyTool').style.display = 'none';
        // Re-enable the mouse cursor
        document.body.style.cursor = 'default';
        removeZoomElement();
    }

    /** Draw the magnifying glass on mouseDown, and begin tracking mouse movements */
    function mouseDownCallback(e) {
        var eventData = e.detail;
        var element = eventData.element;
        var options = getToolOptions(toolType, element);

        if (e.isTouchEvent || isMouseButtonEnabled(eventData.which, options.mouseButtonMask)) {
            element.addEventListener(EVENTS.MOUSE_DRAG, dragCallback);
            element.addEventListener(EVENTS.TOUCH_DRAG, dragCallback);
            element.addEventListener(EVENTS.MOUSE_UP, mouseUpCallback);
            element.addEventListener(EVENTS.TOUCH_END, mouseUpCallback);
            element.addEventListener(EVENTS.MOUSE_CLICK, mouseUpCallback);

            element.addEventListener(EVENTS.NEW_IMAGE, newImageCallback);

            // Ignore until next event
            drawZoomedElement(eventData);
            // On next frame
            window.requestAnimationFrame(function () {
                return drawMagnificationTool(eventData);
            });

            e.preventDefault();
            e.stopPropagation();
        }
    }

    function newImageCallback(e) {
        var eventData = e.detail;

        eventData.currentPoints = currentPoints;
        drawMagnificationTool(eventData);
    }

    function dragEndCallback(e) {
        var eventData = e.detail;
        var element = eventData.element;

        element.removeEventListener(EVENTS.TOUCH_DRAG_END, dragEndCallback);
        element.removeEventListener(EVENTS.TOUCH_END, dragEndCallback);
        element.removeEventListener(EVENTS.NEW_IMAGE, newImageCallback);
        hideTool(eventData);
    }

    /** Drag callback is triggered by both the touch and mouse magnify tools */
    function dragCallback(e) {
        var eventData = e.detail;
        var element = eventData.element;

        drawMagnificationTool(eventData);
        if (eventData.isTouchEvent === true) {
            element.addEventListener(EVENTS.TOUCH_DRAG_END, dragEndCallback);
            element.addEventListener(EVENTS.TOUCH_END, dragEndCallback);
        }

        e.preventDefault();
        e.stopPropagation();
    }

    function drawMagnificationTool(eventData) {
        var element = eventData.element;
        var magnifyCanvas = element.querySelector('.magnifyTool');

        if (!magnifyCanvas) {
            createMagnificationCanvas(eventData.element);
        }

        if (zoomCanvas === undefined) {
            return;
        }

        var config = magnifyend.getConfiguration();

        var magnifySize = config.magnifySize;
        var magnificationLevel = config.magnificationLevel;

        // The 'not' magnifyTool class here is necessary because cornerstone places
        // No classes of it's own on the canvas we want to select
        var canvas = element.querySelector('canvas:not(.magnifyTool)');
        var context = getNewContext(magnifyCanvas);

        var getSize = magnifySize;

        // Calculate the on-canvas location of the mouse pointer / touch
        var canvasLocation = external.cornerstone.pixelToCanvas(eventData.element, eventData.currentPoints.image);

        clipToBox(canvasLocation, canvas);

        // Clear the rectangle
        context.clearRect(0, 0, magnifySize, magnifySize);

        // Fill it with the pixels that the mouse is clicking on
        var boundingBox = {
            left: 0,
            top: 0,
            width: magnifySize,
            height: magnifySize
        };

        // Fill it with the pixels that the mouse is clicking on
        fillBox(context, boundingBox, 'transparent');
        var copyFrom = {
            x: canvasLocation.x * magnificationLevel - 0.5 * getSize,
            y: canvasLocation.y * magnificationLevel - 0.5 * getSize
        };

        if (browserName === 'Safari') {
            // Safari breaks when trying to copy pixels with negative indices
            // This prevents proper Magnify usage
            copyFrom.x = Math.max(copyFrom.x, 0);
            copyFrom.y = Math.max(copyFrom.y, 0);
        }

        copyFrom.x = Math.min(copyFrom.x, zoomCanvas.width);
        copyFrom.y = Math.min(copyFrom.y, zoomCanvas.height);

        context.drawImage(zoomCanvas, copyFrom.x, copyFrom.y, getSize, getSize, 0, 0, getSize, getSize);
        //放大镜标准圆形出现
        qiege(context, magnifySize);
        // Place the magnification tool at the same location as the pointer
        magnifyCanvas.style.top = canvasLocation.y - 0.5 * magnifySize + 'px';
        magnifyCanvas.style.left = canvasLocation.x - 0.5 * magnifySize + 'px';

        if (eventData.isTouchEvent) {
            magnifyCanvas.style.top = canvasLocation.y - 0.5 * magnifySize - 120 + 'px';
        }
        magnifyCanvas.style.display = 'block';
        //console.log('aaaaaawwwww')
        // Hide the mouse cursor, so the user can see better
        document.body.style.cursor = 'none';
    }

    function qiege(context, magnifySize) {
        var radius = Math.floor(magnifySize / 2);
        context.globalCompositeOperation = "destination-atop";
        context.fillStyle = "blue";
        context.arc(radius, radius, radius, 0, 2 * Math.PI, false);
        context.fill();
        context.save();
        context.globalCompositeOperation = "source-over";
        context.strokeStyle = "#333";
        context.lineWidth = 1;
        context.arc(radius, radius, radius, 0, 2 * Math.PI, false);
        context.stroke();
    }

    /** Creates the magnifying glass canvas */
    function createMagnificationCanvas(element) {
        // If the magnifying glass canvas doesn't already exist
        if (element.querySelector('.magnifyTool') === null) {
            // Create a canvas and append it as a child to the element
            var magnifyCanvas = document.createElement('canvas');

            // The magnifyTool class is used to find the canvas later on
            magnifyCanvas.classList.add('magnifyTool');

            var config = magnifyend.getConfiguration();

            magnifyCanvas.width = config.magnifySize;
            magnifyCanvas.height = config.magnifySize;

            // Make sure position is absolute so the canvas can follow the mouse / touch
            magnifyCanvas.style.position = 'absolute';
            magnifyCanvas.style.display = 'none';
            element.appendChild(magnifyCanvas);
        }
    }

    /** Find the magnifying glass canvas and remove it */
    function removeMagnificationCanvas(element) {
        var magnifyCanvas = element.querySelector('.magnifyTool');

        if (magnifyCanvas) {
            element.removeChild(magnifyCanvas);
        }
    }

    function drawZoomedElement(eventData) {
        removeZoomElement();
        var enabledElement = eventData.enabledElement;

        if (enabledElement === undefined) {
            enabledElement = external.cornerstone.getEnabledElement(eventData.element);
        }
        var config = magnifyend.getConfiguration();

        var magnificationLevel = config.magnificationLevel;
        var origCanvas = enabledElement.canvas;
        var image = enabledElement.image;

        zoomElement = document.createElement('div');

        zoomElement.width = origCanvas.width * magnificationLevel;
        zoomElement.height = origCanvas.height * magnificationLevel;
        external.cornerstone.enable(zoomElement);

        var zoomEnabledElement = external.cornerstone.getEnabledElement(zoomElement);
        var viewport = external.cornerstone.getViewport(enabledElement.element);

        zoomCanvas = zoomEnabledElement.canvas;
        zoomCanvas.width = origCanvas.width * magnificationLevel;
        zoomCanvas.height = origCanvas.height * magnificationLevel;

        zoomEnabledElement.viewport = Object.assign({}, viewport);

        viewport.scale *= magnificationLevel;
        external.cornerstone.displayImage(zoomElement, image);
        external.cornerstone.setViewport(zoomElement, viewport);
    }

    function removeZoomElement() {
        if (zoomElement !== undefined) {
            external.cornerstone.disable(zoomElement);
            zoomElement = undefined;
            zoomCanvas = undefined;
        }
    }

    // --- Mouse tool activate / disable --- //
    function disable(element) {
        element.removeEventListener(EVENTS.MOUSE_DOWN, mouseDownCallback);
        removeMagnificationCanvas(element);
    }

    function enable(element) {
        var config = magnifyend.getConfiguration(config);

        if (!browserName) {
            var infoString = getBrowserInfo();
            var info = infoString.split(' ');

            browserName = info[0];
        }

        createMagnificationCanvas(element);
    }

    function activate(element, mouseButtonMask) {
        setToolOptions(toolType, element, { mouseButtonMask: mouseButtonMask });

        element.removeEventListener(EVENTS.MOUSE_DOWN, mouseDownCallback);

        element.addEventListener(EVENTS.MOUSE_DOWN, mouseDownCallback);
        createMagnificationCanvas(element);
    }

    // --- Touch tool activate / disable --- //
    function getConfiguration() {
        return configuration;
    }

    function setConfiguration(config) {
        configuration = config;
    }
    var magnifyend = {
        enable: enable,
        activate: activate,
        deactivate: disable,
        disable: disable,
        getConfiguration: getConfiguration,
        setConfiguration: setConfiguration
    };

    for (var i in cornerstoneTools.magnify) {
        cornerstoneTools.magnify[i] = magnifyend[i];
    }
};

new magnify();

/***/ }),

/***/ 669:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var newbrush = function newbrush() {
    _classCallCheck(this, newbrush);

    var external = cornerstoneTools.external;
    var getToolState = cornerstoneTools.getToolState;
    var draw = cornerstoneTools.drawing.draw;
    var fillBox = cornerstoneTools.drawing.fillBox;
    var brushTool = __webpack_require__(670);

    function getCircle(radius, rows, columns) {
        var xCoord = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var yCoord = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

        var x0 = Math.round(xCoord);
        var y0 = Math.round(yCoord);

        if (radius === 1) {
            return [[x0, y0]];
        }

        var circleArray = [];
        var index = 0;

        for (var y = -radius; y <= radius; y++) {
            var _yCoord = y0 + y;

            if (_yCoord > rows || _yCoord < 0) {
                continue;
            }

            for (var x = -radius; x <= radius; x++) {
                var _xCoord = x0 + x;

                if (_xCoord > columns || _xCoord < 0) {
                    continue;
                }

                if (x * x + y * y < radius * radius) {
                    circleArray[index++] = [x0 + x, y0 + y];
                }
            }
        }

        return circleArray;
    }

    function drawBrushPixels(pointerArray, storedPixels, brushPixelValue, columns) {
        var getPixelIndex = function getPixelIndex(x, y) {
            return y * columns + x;
        };

        pointerArray.forEach(function (point) {
            var spIndex = getPixelIndex(point[0], point[1]);

            storedPixels[spIndex] = brushPixelValue;
        });
    }

    function drawBrushOnCanvas(pointerArray, context, color, element) {
        var canvasPtTL = external.cornerstone.pixelToCanvas(element, {
            x: 0,
            y: 0
        });
        var canvasPtBR = external.cornerstone.pixelToCanvas(element, {
            x: 1,
            y: 1
        });
        var sizeX = canvasPtBR.x - canvasPtTL.x;
        var sizeY = canvasPtBR.y - canvasPtTL.y;

        draw(context, function (context) {
            pointerArray.forEach(function (point) {
                var canvasPt = external.cornerstone.pixelToCanvas(element, {
                    x: point[0],
                    y: point[1]
                });
                var boundingBox = {
                    left: canvasPt.x,
                    top: canvasPt.y,
                    width: sizeX,
                    height: sizeY
                };

                fillBox(context, boundingBox, color);
            });
        });
    }

    //const toolType = 'rectangleRoi';

    // /////// BEGIN ACTIVE TOOL ///////
    var TOOL_STATE_TOOL_TYPE = 'brush';
    var toolType = 'brush';
    var configuration = {
        draw: 1,
        radius: 5,
        minRadius: 1,
        maxRadius: 20,
        hoverColor: 'rgba(230, 25, 75, 1.0)',
        dragColor: 'rgba(230, 25, 75, 0.8)',
        active: false
    };

    var lastImageCoords = void 0;
    var dragging = false;

    function autoplay(data) {
        var eventData = data;

        paint(eventData);
        lastImageCoords = eventData.currentPoints.image;
        dragging = true;
    }

    function paint(eventData) {
        var configuration = brush.getConfiguration();
        var element = eventData.element;
        var layer = external.cornerstone.getLayer(element, configuration.brushLayerId);
        var _layer$image = layer.image,
            rows = _layer$image.rows,
            columns = _layer$image.columns;
        // console.log(layer.image,configuration.brushLayerId)

        var _eventData$currentPoi = eventData.currentPoints.image,
            x = _eventData$currentPoi.x,
            y = _eventData$currentPoi.y;

        var toolData = getToolState(element, TOOL_STATE_TOOL_TYPE);
        //console.log(eventData.currentPoints.image)
        var pixelData = toolData.data[0].pixelData;
        var brushPixelValue = configuration.draw;
        var radius = configuration.radius;
        if (x < 0 || x > columns || y < 0 || y > rows) {
            return;
        }
        //console.log(radius)
        var pointerArray = getCircle(radius, rows, columns, x, y);
        //console.log(pointerArray)

        drawBrushPixels(pointerArray, pixelData, brushPixelValue, columns);

        layer.invalid = true;

        external.cornerstone.updateImage(element);
    }

    function onMouseUp(e) {
        var eventData = e.detail;

        lastImageCoords = eventData.currentPoints.image;
        dragging = false;
    }

    function onMouseDown(e) {
        var eventData = e.detail;
        //console.log(eventData,'eventDataeventData')
        //paint(eventData);
        dragging = true;
        lastImageCoords = eventData.currentPoints.image;
    }

    function onMouseMove(e) {
        var eventData = e.detail;

        lastImageCoords = eventData.currentPoints.image;
        external.cornerstone.updateImage(eventData.element);
    }

    function onDrag(e) {
        var eventData = e.detail;
        //paint(eventData);
        dragging = true;
        lastImageCoords = eventData.currentPoints.image;
    }

    function onImageRendered(e) {
        var eventData = e.detail;

        if (!lastImageCoords) {
            return;
        }

        var _eventData$image = eventData.image,
            rows = _eventData$image.rows,
            columns = _eventData$image.columns;
        var _lastImageCoords = lastImageCoords,
            x = _lastImageCoords.x,
            y = _lastImageCoords.y;


        if (x < 0 || x > columns || y < 0 || y > rows) {
            return;
        }

        // Draw the hover overlay on top of the pixel data
        var configuration = brush.getConfiguration();
        var radius = configuration.radius;
        var context = eventData.canvasContext;
        var color = dragging ? configuration.dragColor : configuration.hoverColor;
        var element = eventData.element;

        context.setTransform(1, 0, 0, 1, 0, 0);

        if (configuration.active) {
            var pointerArray = getCircle(radius, rows, columns, x, y);

            drawBrushOnCanvas(pointerArray, context, color, element);
        }
    }

    var brush = new brushTool({
        onMouseMove: onMouseMove,
        onMouseDown: onMouseDown,
        onMouseUp: onMouseUp,
        onDrag: onDrag,
        toolType: toolType,
        onImageRendered: onImageRendered
    });
    for (var i in cornerstoneTools.brush) {
        cornerstoneTools.brush[i] = brush[i];
    }
    cornerstoneTools.brush.clear = brush.clear;
    cornerstoneTools.brush.getAllId = brush.getAllId;
    cornerstoneTools.brush.autoplay = autoplay;
    brush.setConfiguration(configuration);
};

new newbrush();

/***/ }),

/***/ 670:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var newbrushTool = function newbrushTool(brushToolInterface) {
    _classCallCheck(this, newbrushTool);

    var EVENTS = cornerstoneTools.EVENTS;
    var external = cornerstoneTools.external;

    var addToolState = cornerstoneTools.addToolState;
    var getToolState = cornerstoneTools.getToolState;

    var mouseButtonTool = cornerstoneTools.mouseButtonTool;
    var isMouseButtonEnabled = cornerstoneTools.isMouseButtonEnabled;

    var setToolOptions = cornerstoneTools.setToolOptions;
    var getToolOptions = cornerstoneTools.getToolOptions;

    function clip(val, low, high) {
        // Clip a value to an upper and lower bound.
        return Math.min(Math.max(low, val), high);
    }

    var TOOL_STATE_TOOL_TYPE = 'brush';
    var brushLayerId = void 0;
    var imageLayerId = void 0;

    //function brushTool(brushToolInterface) {
    var toolType = brushToolInterface.toolType;

    function keyDownCallback(e) {
        var eventData = e.detail;
        var imageNeedsUpdate = false;

        imageNeedsUpdate = keyDownChangeToolSize(eventData) || imageNeedsUpdate;
        imageNeedsUpdate = keyDownChangeSegmentation(eventData) || imageNeedsUpdate;

        if (imageNeedsUpdate) {
            // Force onImageRendered to fire
            external.cornerstone.updateImage(eventData.element);
        }
    }

    function keyDownChangeToolSize(eventData) {
        var keyCode = eventData.keyCode;
        var imageNeedsUpdate = false;

        if (keyCode === 109 || keyCode === 173) {
            decreaseRadius();
            imageNeedsUpdate = true;
        } else if (keyCode === 61 || keyCode === 107) {
            increaseRadius();
            imageNeedsUpdate = true;
        }

        return imageNeedsUpdate;
    }

    function keyDownChangeSegmentation(eventData) {
        var keyCode = eventData.keyCode;
        var imageNeedsUpdate = false;

        if (keyCode === 219) {
            previousSegmentation();
            imageNeedsUpdate = true;
        } else if (keyCode === 221) {
            nextSegmentation();
            imageNeedsUpdate = true;
        }

        return imageNeedsUpdate;
    }

    function changeDrawColor(drawId) {
        var configuration = brushTool.getConfiguration();
        var colormap = external.cornerstone.colors.getColormap(configuration.colormapId);

        configuration.draw = drawId;
        var colorArray = colormap.getColor(configuration.draw);

        configuration.hoverColor = 'rgba(' + colorArray[[0]] + ', ' + colorArray[[1]] + ', ' + colorArray[[2]] + ', 1.0 )';
        configuration.dragColor = 'rgba(' + colorArray[[0]] + ', ' + colorArray[[1]] + ', ' + colorArray[[2]] + ', 0.8 )';
    }

    function increaseRadius() {
        var configuration = brushTool.getConfiguration();

        configuration.radius = clip(configuration.radius + 1, configuration.minRadius, configuration.maxRadius);
    }

    function decreaseRadius() {
        var configuration = brushTool.getConfiguration();

        configuration.radius = clip(configuration.radius - 1, configuration.minRadius, configuration.maxRadius);
    }

    function nextSegmentation() {
        var configuration = brushTool.getConfiguration();
        var numberOfColors = getNumberOfColors();

        var drawId = configuration.draw + 1;

        if (drawId === numberOfColors) {
            drawId = 0;
        }

        changeDrawColor(drawId);
    }

    function previousSegmentation() {
        var configuration = brushTool.getConfiguration();
        var numberOfColors = getNumberOfColors();

        var drawId = configuration.draw - 1;

        if (drawId < 0) {
            drawId = numberOfColors - 1;
        }

        changeDrawColor(drawId);
    }

    function getNumberOfColors() {
        var configuration = brushTool.getConfiguration();
        var colormap = external.cornerstone.colors.getColormap(configuration.colormapId);

        return colormap.getNumberOfColors();
    }

    function mouseMoveCallback(e) {
        brushToolInterface.onMouseMove(e);
    }

    function mouseUpCallback(e) {
        var eventData = e.detail;
        var element = eventData.element;

        brushToolInterface.onMouseUp(e);

        element.removeEventListener(EVENTS.MOUSE_DRAG, mouseMoveCallback);
        element.removeEventListener(EVENTS.MOUSE_DRAG, dragCallback);
        element.removeEventListener(EVENTS.MOUSE_UP, mouseUpCallback);
        element.removeEventListener(EVENTS.MOUSE_CLICK, mouseUpCallback);
    }

    function dragCallback(e) {
        brushToolInterface.onDrag(e);

        return false;
    }

    function mouseDownActivateCallback(e) {
        var eventData = e.detail;
        var element = eventData.element;
        var options = getToolOptions(toolType, element);

        if (isMouseButtonEnabled(eventData.which, options.mouseButtonMask)) {
            element.addEventListener(EVENTS.MOUSE_DRAG, dragCallback);
            element.addEventListener(EVENTS.MOUSE_UP, mouseUpCallback);
            element.addEventListener(EVENTS.MOUSE_CLICK, mouseUpCallback);
            brushToolInterface.onMouseDown(e);

            return false;
        }

        element.addEventListener(EVENTS.MOUSE_DRAG, mouseMoveCallback);
        element.addEventListener(EVENTS.MOUSE_UP, mouseUpCallback);
    }

    function onImageRendered(e) {
        var eventData = e.detail;
        var element = eventData.element;
        var toolData = getToolState(element, TOOL_STATE_TOOL_TYPE);
        //console.log(toolData)
        var pixelData = void 0;

        if (toolData) {
            pixelData = toolData.data[0].pixelData;
            // console.log(pixelData,'=======')
        } else {
            pixelData = new Uint8ClampedArray(eventData.image.width * eventData.image.height);
            addToolState(element, TOOL_STATE_TOOL_TYPE, { pixelData: pixelData });
        }

        var layer = external.cornerstone.getLayer(eventData.element, brushLayerId);
        //console.log(layer,eventData.element,'==============',external.cornerstone,brushLayerId)
        //if (layer) {
        //console.log(layer.image, '=================')
        layer.image.setPixelData(pixelData);
        layer.invalid = true;
        //}


        external.cornerstone.updateImage(element);

        brushToolInterface.onImageRendered(e);
    }

    function setBrushColormap(colormapId) {
        var colormap = external.cornerstone.colors.getColormap(colormapId);

        colormap.setNumberOfColors(20);
        colormap.setColor(0, [255, 255, 255, 0]);
        colormap.setColor(1, [230, 25, 75, 102]);
        colormap.setColor(2, [60, 180, 175, 102]);
        colormap.setColor(3, [255, 225, 25, 102]);
        colormap.setColor(4, [0, 130, 200, 102]);
        colormap.setColor(5, [245, 130, 48, 102]);
        colormap.setColor(6, [145, 30, 180, 102]);
        colormap.setColor(7, [70, 240, 240, 102]);
        colormap.setColor(8, [240, 50, 230, 102]);
        colormap.setColor(9, [210, 245, 60, 102]);
        colormap.setColor(10, [250, 190, 190, 102]);
        colormap.setColor(11, [0, 128, 128, 102]);
        colormap.setColor(12, [230, 190, 255, 102]);
        colormap.setColor(13, [170, 110, 40, 102]);
        colormap.setColor(14, [255, 250, 200, 102]);
        colormap.setColor(15, [128, 0, 0, 102]);
        colormap.setColor(16, [170, 255, 195, 102]);
        colormap.setColor(17, [128, 128, 0, 102]);
        colormap.setColor(18, [255, 215, 180, 102]);
        colormap.setColor(19, [0, 0, 128, 102]);
    }

    function activate(element, mouseButtonMask) {
        setToolOptions(toolType, element, { mouseButtonMask: mouseButtonMask });

        element.removeEventListener(EVENTS.IMAGE_RENDERED, onImageRendered);
        element.addEventListener(EVENTS.IMAGE_RENDERED, onImageRendered);

        element.removeEventListener(EVENTS.MOUSE_DOWN_ACTIVATE, mouseDownActivateCallback);
        element.addEventListener(EVENTS.MOUSE_DOWN_ACTIVATE, mouseDownActivateCallback);

        element.removeEventListener(EVENTS.MOUSE_MOVE, mouseMoveCallback);
        element.addEventListener(EVENTS.MOUSE_MOVE, mouseMoveCallback);

        element.removeEventListener(EVENTS.KEY_DOWN, keyDownCallback);
        element.addEventListener(EVENTS.KEY_DOWN, keyDownCallback);

        var enabledElement = external.cornerstone.getEnabledElement(element);
        var _enabledElement$image = enabledElement.image,
            width = _enabledElement$image.width,
            height = _enabledElement$image.height;

        var pixelData = new Uint8ClampedArray(width * height);

        var configuration = brushTool.getConfiguration();

        configuration.active = true;
        var colormapId = configuration.colormapId;

        if (!colormapId) {
            var _configuration = brushTool.getConfiguration();

            colormapId = 'BrushColorMap';
            setBrushColormap(colormapId);
            _configuration.colormapId = colormapId;
        }

        var labelMapImage = {
            minPixelValue: 0,
            maxPixelValue: 1,
            slope: 1.0,
            intercept: 0,
            getPixelData: function getPixelData() {
                return pixelData;
            },
            rows: enabledElement.image.height,
            columns: enabledElement.image.width,
            height: height,
            width: width,
            pixelData: pixelData,
            setPixelData: function setPixelData(data) {
                pixelData = data;
            },
            colormap: colormapId,
            color: false,
            rgba: false,
            labelmap: true,
            invert: false,
            columnPixelSpacing: 1.0,
            rowPixelSpacing: 1.0,
            sizeInBytes: enabledElement.image.width * enabledElement.image.height
        };

        var layer = void 0;
        var options = {
            viewport: {
                pixelReplication: true
            }
        };

        // Add imageLayer if it doesn't exist.
        if (!imageLayerId) {
            imageLayerId = external.cornerstone.addLayer(element, external.cornerstone.getEnabledElement(element).image);
        }
        // console.log(brushLayerId, imageLayerId)
        if (brushLayerId) {
            layer = external.cornerstone.getLayer(element, brushLayerId);
        }

        if (!layer) {
            brushLayerId = external.cornerstone.addLayer(element, labelMapImage, options);
        }

        addToolState(element, TOOL_STATE_TOOL_TYPE, { pixelData: pixelData });

        configuration.brushLayerId = brushLayerId;
        brushTool.setConfiguration(configuration);

        external.cornerstone.updateImage(element);
    }

    function clear() {
        brushLayerId = null;
        imageLayerId = null;
    }

    function getAllId() {
        return { brushLayerId: brushLayerId, imageLayerId: imageLayerId };
    }

    function deactivate(element) {
        element.removeEventListener(EVENTS.IMAGE_RENDERED, onImageRendered);
        element.removeEventListener(EVENTS.MOUSE_DOWN_ACTIVATE, mouseDownActivateCallback);
        element.removeEventListener(EVENTS.MOUSE_MOVE, mouseMoveCallback);
        element.removeEventListener(EVENTS.KEY_DOWN, keyDownCallback);

        //element.addEventListener(EVENTS.IMAGE_RENDERED, onImageRendered);

        var configuration = brushTool.getConfiguration();

        configuration.active = false;
    }

    var brushTool = mouseButtonTool({
        mouseMoveCallback: mouseMoveCallback,
        mouseDownActivateCallback: mouseDownActivateCallback,
        onImageRendered: onImageRendered,
        deactivate: deactivate
    });

    brushTool.keyDownCallback = keyDownCallback;
    brushTool.activate = activate;
    brushTool.changeDrawColor = changeDrawColor;
    brushTool.increaseRadius = increaseRadius;
    brushTool.decreaseRadius = decreaseRadius;
    brushTool.nextSegmentation = nextSegmentation;
    brushTool.previousSegmentation = previousSegmentation;
    brushTool.clear = clear;
    brushTool.getAllId = getAllId;

    return brushTool;
    // }
};

module.exports = newbrushTool;

/***/ }),

/***/ 671:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var newsimpleAngle = function newsimpleAngle() {
    _classCallCheck(this, newsimpleAngle);

    var EVENTS = cornerstoneTools.EVENTS;
    var external = cornerstoneTools.external;
    var mouseButtonTool = cornerstoneTools.mouseButtonTool;

    var toolStyle = cornerstoneTools.toolStyle;
    var toolColors = cornerstoneTools.toolColors;
    var drawHandles = cornerstoneTools.drawHandles;
    var textStyle = cornerstoneTools.textStyle;

    var anyHandlesOutsideImage = cornerstoneTools.anyHandlesOutsideImage;
    var moveNewHandle = cornerstoneTools.moveNewHandle;

    var getToolState = cornerstoneTools.getToolState;
    var addToolState = cornerstoneTools.addToolState;
    var removeToolState = cornerstoneTools.removeToolState;
    var drawTextBox = cornerstoneTools.drawTextBox;

    var drawJoinedLines = cornerstoneTools.drawing.drawJoinedLines;
    var draw = cornerstoneTools.drawing.draw;
    var setShadow = cornerstoneTools.drawing.setShadow;
    var getNewContext = cornerstoneTools.drawing.getNewContext;

    var textBoxWidth = function textBoxWidth(context, text, padding) {
        var font = textStyle.getFont();
        var origFont = context.font;

        if (font && font !== origFont) {
            context.font = font;
        }
        var width = context.measureText(text).width;

        if (font && font !== origFont) {
            context.font = origFont;
        }

        return width + 2 * padding;
    };

    var roundToDecimal = function roundToDecimal(value, precision) {
        var multiplier = Math.pow(10, precision);
        return Math.round(value * multiplier) / multiplier;
    };

    var lineSegDistance = function lineSegDistance(element, start, end, coords) {
        var cornerstone = external.cornerstone;
        var lineSegment = {
            start: cornerstone.pixelToCanvas(element, start),
            end: cornerstone.pixelToCanvas(element, end)
        };

        return external.cornerstoneMath.lineSegment.distanceToPoint(lineSegment, coords);
    };

    var toolType = 'simpleAngle';

    function createNewMeasurement(mouseEventData) {
        // Create the measurement data for this tool with the end handle activated
        var angleData = {
            visible: true,
            active: true,
            color: undefined,
            uuid: mouseEventData.uuid ? mouseEventData.uuid : null,
            handles: {
                start: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: false
                },
                middle: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: true
                },
                end: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: false
                },
                textBox: {
                    active: false,
                    hasMoved: false,
                    movesIndependently: false,
                    drawnIndependently: true,
                    allowedOutsideImage: true,
                    hasBoundingBox: true
                }
            }
        };

        return angleData;
    }
    // /////// END ACTIVE TOOL ///////

    function pointNearTool(element, data, coords) {
        if (data.visible === false) {
            return false;
        }

        return lineSegDistance(element, data.handles.start, data.handles.middle, coords) < 25 || lineSegDistance(element, data.handles.middle, data.handles.end, coords) < 25;
    }

    function length(vector) {
        return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));
    }

    // /////// BEGIN IMAGE RENDERING ///////
    function onImageRendered(e) {
        var eventData = e.detail;
        // If we have no toolData for this element, return immediately as there is nothing to do
        var toolData = getToolState(e.currentTarget, toolType);

        if (!toolData) {
            return;
        }

        var cornerstone = external.cornerstone;
        var enabledElement = eventData.enabledElement;

        // We have tool data for this element - iterate over each one and draw it
        var context = getNewContext(eventData.canvasContext.canvas);

        var lineWidth = toolStyle.getToolWidth();
        var config = simpleAngle.getConfiguration();

        var _loop = function _loop(_i) {
            var data = toolData.data[_i];

            if (data.visible === false) {
                return 'continue';
            }

            draw(context, function (context) {
                setShadow(context, config);

                // Differentiate the color of activation tool
                var color = toolColors.getColorIfActive(data);

                var handleStartCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.start);
                var handleMiddleCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.middle);

                drawJoinedLines(context, eventData.element, data.handles.start, [data.handles.middle, data.handles.end], { color: color });

                // Draw the handles
                var handleOptions = {
                    drawHandlesIfActive: config && config.drawHandlesOnHover
                };

                drawHandles(context, eventData, data.handles, color, handleOptions);

                // Default to isotropic pixel size, update suffix to reflect this
                var columnPixelSpacing = eventData.image.columnPixelSpacing || 1;
                var rowPixelSpacing = eventData.image.rowPixelSpacing || 1;

                var sideA = {
                    x: (Math.ceil(data.handles.middle.x) - Math.ceil(data.handles.start.x)) * columnPixelSpacing,
                    y: (Math.ceil(data.handles.middle.y) - Math.ceil(data.handles.start.y)) * rowPixelSpacing
                };

                var sideB = {
                    x: (Math.ceil(data.handles.end.x) - Math.ceil(data.handles.middle.x)) * columnPixelSpacing,
                    y: (Math.ceil(data.handles.end.y) - Math.ceil(data.handles.middle.y)) * rowPixelSpacing
                };

                var sideC = {
                    x: (Math.ceil(data.handles.end.x) - Math.ceil(data.handles.start.x)) * columnPixelSpacing,
                    y: (Math.ceil(data.handles.end.y) - Math.ceil(data.handles.start.y)) * rowPixelSpacing
                };

                var sideALength = length(sideA);
                var sideBLength = length(sideB);
                var sideCLength = length(sideC);

                // Cosine law
                var angle = Math.acos((Math.pow(sideALength, 2) + Math.pow(sideBLength, 2) - Math.pow(sideCLength, 2)) / (2 * sideALength * sideBLength));

                angle *= 180 / Math.PI;

                data.rAngle = roundToDecimal(angle, 2);

                if (data.rAngle) {
                    var text = textBoxText(data, eventData.image.rowPixelSpacing, eventData.image.columnPixelSpacing);

                    var distance = 15;

                    var textCoords = void 0;

                    if (!data.handles.textBox.hasMoved) {
                        textCoords = {
                            x: handleMiddleCanvas.x,
                            y: handleMiddleCanvas.y
                        };

                        var padding = 5;
                        var textWidth = textBoxWidth(context, text, padding);

                        if (handleMiddleCanvas.x < handleStartCanvas.x) {
                            textCoords.x -= distance + textWidth;
                        } else {
                            textCoords.x += distance;
                        }

                        var transform = cornerstone.internal.getTransform(enabledElement);

                        transform.invert();

                        var coords = transform.transformPoint(textCoords.x, textCoords.y);

                        data.handles.textBox.x = coords.x;
                        data.handles.textBox.y = coords.y;
                    }
                    drawTextBox(context, text, textCoords.x, textCoords.y, color);

                    /*drawLinkedTextBox(context, eventData.element, data.handles.textBox, text,
                        data.handles, textBoxAnchorPoints, color, lineWidth, 0, true);*/
                }
            });
        };

        for (var _i = 0; _i < toolData.data.length; _i++) {
            var _ret = _loop(_i);

            if (_ret === 'continue') continue;
        }

        function textBoxText(data, rowPixelSpacing, columnPixelSpacing) {
            var suffix = !rowPixelSpacing || !columnPixelSpacing ? ' (isotropic)' : '';
            var str = '00B0'; // Degrees symbol

            return data.rAngle.toString() + String.fromCharCode(parseInt(str, 16)) + suffix;
        }

        function textBoxAnchorPoints(handles) {
            return [handles.start, handles.middle, handles.end];
        }
    }
    // /////// END IMAGE RENDERING ///////

    // /////// BEGIN ACTIVE TOOL ///////
    function addNewMeasurement(mouseEventData) {
        var cornerstone = external.cornerstone;
        var measurementData = createNewMeasurement(mouseEventData);
        var element = mouseEventData.element;

        // Associate this data with this imageId so we can render it and manipulate it
        addToolState(element, toolType, measurementData);

        // Since we are dragging to another place to drop the end point, we can just activate
        // The end point and let the moveHandle move it for us.
        element.removeEventListener(EVENTS.MOUSE_MOVE, simpleAngle.mouseMoveCallback);
        element.removeEventListener(EVENTS.MOUSE_DRAG, simpleAngle.mouseMoveCallback);
        element.removeEventListener(EVENTS.MOUSE_DOWN, simpleAngle.mouseDownCallback);
        element.removeEventListener(EVENTS.MOUSE_DOWN_ACTIVATE, simpleAngle.mouseDownActivateCallback);
        cornerstone.updateImage(element);

        moveNewHandle(mouseEventData, toolType, measurementData, measurementData.handles.middle, function () {
            measurementData.active = false;
            if (anyHandlesOutsideImage(mouseEventData, measurementData.handles)) {
                // Delete the measurement
                removeToolState(element, toolType, measurementData);

                element.addEventListener(EVENTS.MOUSE_MOVE, simpleAngle.mouseMoveCallback);
                element.addEventListener(EVENTS.MOUSE_DRAG, simpleAngle.mouseMoveCallback);
                element.addEventListener(EVENTS.MOUSE_DOWN, simpleAngle.mouseDownCallback);
                element.addEventListener(EVENTS.MOUSE_DOWN_ACTIVATE, simpleAngle.mouseDownActivateCallback);
                cornerstone.updateImage(element);

                return;
            }

            measurementData.handles.end.active = true;
            cornerstone.updateImage(element);

            moveNewHandle(mouseEventData, toolType, measurementData, measurementData.handles.end, function () {
                measurementData.active = false;
                if (anyHandlesOutsideImage(mouseEventData, measurementData.handles)) {
                    // Delete the measurement
                    removeToolState(element, toolType, measurementData);
                }

                element.addEventListener(EVENTS.MOUSE_MOVE, simpleAngle.mouseMoveCallback);
                element.addEventListener(EVENTS.MOUSE_DRAG, simpleAngle.mouseMoveCallback);
                element.addEventListener(EVENTS.MOUSE_DOWN, simpleAngle.mouseDownCallback);
                element.addEventListener(EVENTS.MOUSE_DOWN_ACTIVATE, simpleAngle.mouseDownActivateCallback);
                cornerstone.updateImage(element);
            });
        });
    }

    function addNewMeasurementTouch(touchEventData) {
        var cornerstone = external.cornerstone;
        var measurementData = createNewMeasurement(touchEventData);
        var element = touchEventData.element;

        // Associate this data with this imageId so we can render it and manipulate it
        addToolState(element, toolType, measurementData);

        // Since we are dragging to another place to drop the end point, we can just activate
        // The end point and let the moveHandle move it for us.
        element.removeEventListener(EVENTS.TOUCH_DRAG, simpleAngleTouch.touchMoveCallback);
        element.removeEventListener(EVENTS.TOUCH_START_ACTIVE, simpleAngleTouch.touchDownActivateCallback);
        element.removeEventListener(EVENTS.TOUCH_START, simpleAngleTouch.touchStartCallback);
        element.removeEventListener(EVENTS.TAP, simpleAngleTouch.tapCallback);
        cornerstone.updateImage(element);

        moveNewHandleTouch(touchEventData, toolType, measurementData, measurementData.handles.middle, function () {
            if (anyHandlesOutsideImage(touchEventData, measurementData.handles)) {
                // Delete the measurement
                removeToolState(element, toolType, measurementData);
                element.addEventListener(EVENTS.TOUCH_DRAG, simpleAngleTouch.touchMoveCallback);
                element.addEventListener(EVENTS.TOUCH_START, simpleAngleTouch.touchStartCallback);
                element.addEventListener(EVENTS.TOUCH_START_ACTIVE, simpleAngleTouch.touchDownActivateCallback);
                element.addEventListener(EVENTS.TAP, simpleAngleTouch.tapCallback);
                cornerstone.updateImage(element);

                return;
            }

            moveNewHandleTouch(touchEventData, toolType, measurementData, measurementData.handles.end, function () {
                if (anyHandlesOutsideImage(touchEventData, measurementData.handles)) {
                    // Delete the measurement
                    removeToolState(element, toolType, measurementData);
                    cornerstone.updateImage(element);
                }

                element.addEventListener(EVENTS.TOUCH_DRAG, simpleAngleTouch.touchMoveCallback);
                element.addEventListener(EVENTS.TOUCH_START, simpleAngleTouch.touchStartCallback);
                element.addEventListener(EVENTS.TOUCH_START_ACTIVE, simpleAngleTouch.touchDownActivateCallback);
                element.addEventListener(EVENTS.TAP, simpleAngleTouch.tapCallback);
            });
        });
    }

    var simpleAngle = mouseButtonTool({
        createNewMeasurement: createNewMeasurement,
        addNewMeasurement: addNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType
    });

    function getMeasurement(data) {
        return createNewMeasurement(data);
    }
    for (var i in cornerstoneTools.simpleAngle) {
        cornerstoneTools.simpleAngle[i] = simpleAngle[i];
    }
    cornerstoneTools.simpleAngle.getMeasurement = getMeasurement;
};

new newsimpleAngle();

/***/ }),

/***/ 672:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ellipticalRoi = function ellipticalRoi() {
    _classCallCheck(this, ellipticalRoi);

    var external = cornerstoneTools.external;
    var mouseButtonTool = cornerstoneTools.mouseButtonTool;

    var toolStyle = cornerstoneTools.toolStyle;
    var toolColors = cornerstoneTools.toolColors;
    var drawHandles = cornerstoneTools.drawHandles;
    var pointInEllipse = cornerstoneTools.pointInEllipse;

    var calculateEllipseStatistics = cornerstoneTools.calculateEllipseStatistics;
    var calculateSUV = cornerstoneTools.calculateSUV;

    var drawTextBox = cornerstoneTools.drawTextBox;
    var getToolState = cornerstoneTools.getToolState;
    var drawEllipse = cornerstoneTools.drawing.drawEllipse;

    var getNewContext = cornerstoneTools.drawing.getNewContext;
    var draw = cornerstoneTools.drawing.draw;
    var setShadow = cornerstoneTools.drawing.setShadow;

    var toolType = 'ellipticalRoi';

    function createNewMeasurement(mouseEventData) {
        // Create the measurement data for this tool with the end handle activated
        var measurementData = {
            visible: true,
            active: true,
            invalidated: true,
            color: undefined,
            areaDisplayFlag: true,
            nameDisplayFlag: true,
            uuid: mouseEventData.uuid ? mouseEventData.uuid : null,
            handles: {
                start: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: false
                },
                end: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: true
                },
                textBox: {
                    active: false,
                    hasMoved: false,
                    movesIndependently: false,
                    drawnIndependently: true,
                    allowedOutsideImage: true,
                    hasBoundingBox: true
                }
            }
        };
        var config = ellipticalRoiend.getConfiguration();
        if (config) {
            {
                if (config.nameDisplayFlag != undefined && config.nameDisplayFlag != null) {
                    measurementData.nameDisplayFlag = config.nameDisplayFlag;
                }
                if (config.areaDisplayFlag != undefined && config.areaDisplayFlag) {
                    measurementData.areaDisplayFlag = config.areaDisplayFlag;
                }
            }
        }
        return measurementData;
    }
    // /////// END ACTIVE TOOL ///////

    // /////// BEGIN IMAGE RENDERING ///////
    function pointNearEllipse(element, data, coords, distance) {
        if (data.visible === false) {
            return false;
        }

        var cornerstone = external.cornerstone;
        var startCanvas = cornerstone.pixelToCanvas(element, data.handles.start);
        var endCanvas = cornerstone.pixelToCanvas(element, data.handles.end);

        var minorEllipse = {
            left: Math.min(startCanvas.x, endCanvas.x) + distance / 2,
            top: Math.min(startCanvas.y, endCanvas.y) + distance / 2,
            width: Math.abs(startCanvas.x - endCanvas.x) - distance,
            height: Math.abs(startCanvas.y - endCanvas.y) - distance
        };

        var majorEllipse = {
            left: Math.min(startCanvas.x, endCanvas.x) - distance / 2,
            top: Math.min(startCanvas.y, endCanvas.y) - distance / 2,
            width: Math.abs(startCanvas.x - endCanvas.x) + distance,
            height: Math.abs(startCanvas.y - endCanvas.y) + distance
        };

        var pointInMinorEllipse = pointInEllipse(minorEllipse, coords);
        var pointInMajorEllipse = pointInEllipse(majorEllipse, coords);

        if (pointInMajorEllipse && !pointInMinorEllipse) {
            return true;
        }

        return false;
    }

    function pointNearTool(element, data, coords) {
        return pointNearEllipse(element, data, coords, 5);
    }

    function pointNearToolTouch(element, data, coords) {
        return pointNearEllipse(element, data, coords, 10);
    }

    function numberWithCommas(x) {
        // http://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript
        var parts = x.toString().split('.');

        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');

        return parts.join('.');
    }

    function onImageRendered(e) {
        var eventData = e.detail;

        // If we have no toolData for this element, return immediately as there is nothing to do
        var toolData = getToolState(e.currentTarget, toolType);

        if (!toolData) {
            return;
        }

        var cornerstone = external.cornerstone;
        var image = eventData.image;
        var element = eventData.element;
        var lineWidth = toolStyle.getToolWidth();
        var config = ellipticalRoiend.getConfiguration();
        var seriesModule = cornerstone.metaData.get('generalSeriesModule', image.imageId);
        var imagePlane = cornerstone.metaData.get('imagePlaneModule', image.imageId);
        var modality = void 0;
        var rowPixelSpacing = void 0;
        var colPixelSpacing = void 0;

        if (imagePlane) {
            rowPixelSpacing = imagePlane.rowPixelSpacing || imagePlane.rowImagePixelSpacing;
            colPixelSpacing = imagePlane.columnPixelSpacing || imagePlane.colImagePixelSpacing;
        } else {
            rowPixelSpacing = image.rowPixelSpacing;
            colPixelSpacing = image.columnPixelSpacing;
        }

        if (seriesModule) {
            modality = seriesModule.modality;
        }

        //const context = getNewContext(eventData.canvasContext.canvas);
        var context = eventData.canvasContext.canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);

        // If we have tool data for this element - iterate over each set and draw it

        var _loop = function _loop(_i) {
            var data = toolData.data[_i];

            if (data.visible === false) {
                return 'continue';
            }
            //  draw (context, fn) {

            draw(context, function (context) {
                var color = toolColors.getColorIfActive(data);

                drawEllipse(context, element, data.handles.start, data.handles.end, { color: color });

                // If the tool configuration specifies to only draw the handles on hover / active,
                // Follow this logic
                if (config && config.drawHandlesOnHover) {
                    // Draw the handles if the tool is active
                    if (data.active === true) {
                        drawHandles(context, eventData, data.handles, color);
                    } else {
                        // If the tool is inactive, draw the handles only if each specific handle is being
                        // Hovered over
                        var handleOptions = {
                            drawHandlesIfActive: true
                        };

                        drawHandles(context, eventData, data.handles, color, handleOptions);
                    }
                } else {
                    // If the tool has no configuration settings, always draw the handles
                    drawHandles(context, eventData, data.handles, color);
                }

                var area = void 0,
                    meanStdDev = void 0,
                    meanStdDevSUV = void 0;

                if (data.invalidated === false) {
                    // If the data is not invalidated, retrieve it from the toolData
                    meanStdDev = data.meanStdDev;
                    meanStdDevSUV = data.meanStdDevSUV;
                    area = data.area;
                } else {
                    // If the data has been invalidated, we need to calculate it again

                    // Retrieve the bounds of the ellipse in image coordinates
                    var ellipse = {
                        left: Math.round(Math.min(data.handles.start.x, data.handles.end.x)),
                        top: Math.round(Math.min(data.handles.start.y, data.handles.end.y)),
                        width: Math.round(Math.abs(data.handles.start.x - data.handles.end.x)),
                        height: Math.round(Math.abs(data.handles.start.y - data.handles.end.y))
                    };

                    if (!image.color) {
                        // Retrieve the array of pixels that the ellipse bounds cover
                        var pixels = cornerstone.getPixels(element, ellipse.left, ellipse.top, ellipse.width, ellipse.height);

                        // Calculate the mean & standard deviation from the pixels and the ellipse details
                        meanStdDev = calculateEllipseStatistics(pixels, ellipse);

                        if (modality === 'PT') {

                            meanStdDevSUV = {
                                mean: calculateSUV(image, (meanStdDev.mean - image.intercept) / image.slope),
                                stdDev: calculateSUV(image, (meanStdDev.stdDev - image.intercept) / image.slope)
                            };
                        }

                        // If the mean and standard deviation values are sane, store them for later retrieval
                        if (meanStdDev && !isNaN(meanStdDev.mean)) {
                            data.meanStdDev = meanStdDev;
                            data.meanStdDevSUV = meanStdDevSUV;
                        }
                    }

                    // Calculate the image area from the ellipse dimensions and pixel spacing
                    area = Math.PI * (ellipse.width * (colPixelSpacing || 1) / 2) * (ellipse.height * (rowPixelSpacing || 1) / 2);

                    // If the area value is sane, store it for later retrieval
                    if (!isNaN(area)) {
                        data.area = area;
                    }

                    // Set the invalidated flag to false so that this data won't automatically be recalculated
                    data.invalidated = false;
                }
                // console.log(data.nameDisplayFlag)
                if (data && data.nameDisplayFlag) {
                    var text = textBoxText(data);
                    if (!data.handles.textBox.hasMoved) {
                        data.handles.textBox.x = Math.max(data.handles.start.x, data.handles.end.x);
                        data.handles.textBox.y = (data.handles.start.y + data.handles.end.y) / 2;
                    }
                    var textCoords = cornerstone.pixelToCanvas(element, data.handles.textBox);
                    var options = {
                        centering: {
                            x: false,
                            y: true
                        }
                    };
                    drawTextBox(context, text, textCoords.x, textCoords.y, color, options);
                }
                /*drawLinkedTextBox(context, element, data.handles.textBox, text,
                    data.handles, textBoxAnchorPoints, color, lineWidth, 0, true);*/
            });
        };

        for (var _i = 0; _i < toolData.data.length; _i++) {
            var _ret = _loop(_i);

            if (_ret === 'continue') continue;
        }
        // console.log('dsakjdksjd')
        function textBoxText(data) {
            var meanStdDev = data.meanStdDev,
                meanStdDevSUV = data.meanStdDevSUV,
                area = data.area;

            // Define an array to store the rows of text for the textbox

            var textLines = [];

            // If the mean and standard deviation values are present, display them
            if (meanStdDev && meanStdDev.mean !== undefined) {
                // If the modality is CT, add HU to denote Hounsfield Units
                var moSuffix = '';

                if (modality === 'CT') {
                    moSuffix = ' HU';
                }

                // Create a line of text to display the mean and any units that were specified (i.e. HU)
                var meanText = 'Mean: ' + numberWithCommas(meanStdDev.mean.toFixed(2)) + moSuffix;
                // Create a line of text to display the standard deviation and any units that were specified (i.e. HU)
                var stdDevText = 'StdDev: ' + numberWithCommas(meanStdDev.stdDev.toFixed(2)) + moSuffix;

                // If this image has SUV values to display, concatenate them to the text line
                if (meanStdDevSUV && meanStdDevSUV.mean !== undefined) {
                    var SUVtext = ' SUV: ';

                    meanText += SUVtext + numberWithCommas(meanStdDevSUV.mean.toFixed(2));
                    stdDevText += SUVtext + numberWithCommas(meanStdDevSUV.stdDev.toFixed(2));
                }

                // Add these text lines to the array to be displayed in the textbox
                textLines.push(meanText);
                textLines.push(stdDevText);
            }

            // If the area is a sane value, display it
            if (area) {
                var suffix = ' mm' + String.fromCharCode(178);

                if (!rowPixelSpacing || !colPixelSpacing) {
                    suffix = ' pixels' + String.fromCharCode(178);
                }

                // Create a line of text to display the area and its units
                var areaText = 'Area: ' + numberWithCommas(area.toFixed(2)) + suffix;

                // Add this text line to the array to be displayed in the textbox
                textLines.push(areaText);
            }

            return textLines;
        }

        function textBoxAnchorPoints(handles) {
            // Retrieve the bounds of the ellipse (left, top, width, and height)
            var left = Math.min(handles.start.x, handles.end.x);
            var top = Math.min(handles.start.y, handles.end.y);
            var width = Math.abs(handles.start.x - handles.end.x);
            var height = Math.abs(handles.start.y - handles.end.y);

            return [{
                // Top middle point of ellipse
                x: left + width / 2,
                y: top
            }, {
                // Left middle point of ellipse
                x: left,
                y: top + height / 2
            }, {
                // Bottom middle point of ellipse
                x: left + width / 2,
                y: top + height
            }, {
                // Right middle point of ellipse
                x: left + width,
                y: top + height / 2
            }];
        }
    }

    function getMeasurement(data) {
        return createNewMeasurement(data);
    }
    var ellipticalRoiend = mouseButtonTool({
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType
    });
    for (var i in cornerstoneTools.ellipticalRoi) {
        //console.log('aaaa',i)
        if (cornerstoneTools.ellipticalRoi[i]) {
            //console.log('bbbbb')
            cornerstoneTools.ellipticalRoi[i] = ellipticalRoiend[i];
        }
    }
    cornerstoneTools.ellipticalRoi.getMeasurement = getMeasurement;
};

new ellipticalRoi();

/***/ }),

/***/ 673:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var lengths = function lengths() {
    _classCallCheck(this, lengths);

    var EVENTS = cornerstoneTools.EVENTS;
    var external = cornerstoneTools.external;
    var mouseButtonTool = cornerstoneTools.mouseButtonTool;

    var toolStyle = cornerstoneTools.toolStyle;
    var toolColors = cornerstoneTools.toolColors;
    var drawHandles = cornerstoneTools.drawHandles;
    var textStyle = cornerstoneTools.textStyle;

    var anyHandlesOutsideImage = cornerstoneTools.anyHandlesOutsideImage;
    var moveNewHandle = cornerstoneTools.moveNewHandle;

    var getToolState = cornerstoneTools.getToolState;
    var addToolState = cornerstoneTools.addToolState;
    var removeToolState = cornerstoneTools.removeToolState;
    var drawTextBox = cornerstoneTools.drawTextBox;

    var drawJoinedLines = cornerstoneTools.drawing.drawJoinedLines;
    var draw = cornerstoneTools.drawing.draw;
    var setShadow = cornerstoneTools.drawing.setShadow;
    var getNewContext = cornerstoneTools.drawing.getNewContext;

    var textBoxWidth = function textBoxWidth(context, text, padding) {
        var font = textStyle.getFont();
        var origFont = context.font;

        if (font && font !== origFont) {
            context.font = font;
        }
        var width = context.measureText(text).width;

        if (font && font !== origFont) {
            context.font = origFont;
        }

        return width + 2 * padding;
    };

    var roundToDecimal = function roundToDecimal(value, precision) {
        var multiplier = Math.pow(10, precision);
        return Math.round(value * multiplier) / multiplier;
    };

    var lineSegDistance = function lineSegDistance(element, start, end, coords) {
        var cornerstone = external.cornerstone;
        var lineSegment = {
            start: cornerstone.pixelToCanvas(element, start),
            end: cornerstone.pixelToCanvas(element, end)
        };

        return external.cornerstoneMath.lineSegment.distanceToPoint(lineSegment, coords);
    };

    var toolType = 'alignment';

    function createNewMeasurement(mouseEventData) {
        // Create the measurement data for this tool with the end handle activated
        var angleData = {
            visible: true,
            active: true,
            color: undefined,
            uuid: mouseEventData.uuid ? mouseEventData.uuid : null,
            handles: {
                start: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: false
                },
                middle: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: false
                },
                middle1: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: false
                },
                end: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: false
                },
                textBox: {
                    active: false,
                    hasMoved: false,
                    movesIndependently: false,
                    drawnIndependently: true,
                    allowedOutsideImage: true,
                    hasBoundingBox: true
                }
            }
        };

        return angleData;
    }
    // /////// END ACTIVE TOOL ///////

    function pointNearTool(element, data, coords) {
        if (data.visible === false) {
            return false;
        }

        return lineSegDistance(element, data.handles.start, data.handles.middle, coords) < 5 || lineSegDistance(element, data.handles.middle, data.handles.middle1, coords) < 5 || lineSegDistance(element, data.handles.middle1, data.handles.end, coords) < 5;
    }

    function length(vector) {
        return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));
    }

    // /////// BEGIN IMAGE RENDERING ///////
    function onImageRendered(e) {
        var eventData = e.detail;
        // If we have no toolData for this element, return immediately as there is nothing to do
        var toolData = getToolState(e.currentTarget, toolType);

        if (!toolData) {
            return;
        }

        var cornerstone = external.cornerstone;
        var enabledElement = eventData.enabledElement;

        // We have tool data for this element - iterate over each one and draw it
        var context = getNewContext(eventData.canvasContext.canvas);

        var lineWidth = toolStyle.getToolWidth();
        var config = simpleAngle.getConfiguration();

        var _loop = function _loop(_i) {
            var data = toolData.data[_i];

            if (data.visible === false) {
                return "continue";
            }

            draw(context, function (context) {
                setShadow(context, config);

                // Differentiate the color of activation tool
                var color = toolColors.getColorIfActive(data);

                //const handleStartCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.start);
                //const handleMiddleCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.middle);

                var sxy = data.handles.start.x + "_" + data.handles.start.y;
                var mxy = data.handles.middle.x + "_" + data.handles.middle.y;
                var m1xy = data.handles.middle1.x + "_" + data.handles.middle1.y;
                var exy = data.handles.end.x + "_" + data.handles.end.y;
                drawJoinedLines(context, eventData.element, data.handles.start, [data.handles.middle, data.handles.middle1, data.handles.end, data.handles.start], {
                    color: color
                });
                /*if (sxy != mxy && sxy != m1xy && sxy != exy && exy != mxy && exy != m1xy && m1xy != mxy) {
                 } else {
                    drawJoinedLines(context, eventData.element, data.handles.start, [data.handles.middle, data.handles.middle1, data.handles.end], {
                        color
                    });
                }*/

                // console.log(simpleAngle,'simpleAnglesimpleAngle')
                // Draw the handles
                var handleOptions = {
                    drawHandlesIfActive: config && config.drawHandlesOnHover
                };
                if (data.active) {
                    drawHandles(context, eventData, data.handles, color, handleOptions);
                }

                //drawHandles(context, eventData, data.handles, color);

                // Default to isotropic pixel size, update suffix to reflect this
                /*const columnPixelSpacing = eventData.image.columnPixelSpacing || 1;
                const rowPixelSpacing = eventData.image.rowPixelSpacing || 1;
                 const sideA = {
                    x: (Math.ceil(data.handles.middle.x) - Math.ceil(data.handles.start.x)) * columnPixelSpacing,
                    y: (Math.ceil(data.handles.middle.y) - Math.ceil(data.handles.start.y)) * rowPixelSpacing
                };
                 const sideB = {
                    x: (Math.ceil(data.handles.end.x) - Math.ceil(data.handles.middle.x)) * columnPixelSpacing,
                    y: (Math.ceil(data.handles.end.y) - Math.ceil(data.handles.middle.y)) * rowPixelSpacing
                };
                 const sideC = {
                    x: (Math.ceil(data.handles.end.x) - Math.ceil(data.handles.start.x)) * columnPixelSpacing,
                    y: (Math.ceil(data.handles.end.y) - Math.ceil(data.handles.start.y)) * rowPixelSpacing
                };
                 const sideALength = length(sideA);
                const sideBLength = length(sideB);
                const sideCLength = length(sideC);
                 // Cosine law
                let angle = Math.acos((Math.pow(sideALength, 2) + Math.pow(sideBLength, 2) - Math.pow(sideCLength, 2)) / (2 * sideALength * sideBLength));
                 angle *= (180 / Math.PI);
                 data.rAngle = roundToDecimal(angle, 2);
                 if (data.rAngle) {
                    const text = textBoxText(data, eventData.image.rowPixelSpacing, eventData.image.columnPixelSpacing);
                     const distance = 15;
                     let textCoords;
                     if (!data.handles.textBox.hasMoved) {
                        textCoords = {
                            x: handleMiddleCanvas.x,
                            y: handleMiddleCanvas.y
                        };
                         const padding = 5;
                        const textWidth = textBoxWidth(context, text, padding);
                         if (handleMiddleCanvas.x < handleStartCanvas.x) {
                            textCoords.x -= distance + textWidth;
                        } else {
                            textCoords.x += distance;
                        }
                         const transform = cornerstone.internal.getTransform(enabledElement);
                         transform.invert();
                         const coords = transform.transformPoint(textCoords.x, textCoords.y);
                         data.handles.textBox.x = coords.x;
                        data.handles.textBox.y = coords.y;
                    }
                    drawTextBox(context, text, textCoords.x, textCoords.y, color);
                     drawLinkedTextBox(context, eventData.element, data.handles.textBox, text,
                        data.handles, textBoxAnchorPoints, color, lineWidth, 0, true);
                }*/
            });
        };

        for (var _i = 0; _i < toolData.data.length; _i++) {
            var _ret = _loop(_i);

            if (_ret === "continue") continue;
        }

        function textBoxText(data, rowPixelSpacing, columnPixelSpacing) {
            var suffix = !rowPixelSpacing || !columnPixelSpacing ? ' (isotropic)' : '';
            var str = '00B0'; // Degrees symbol

            return data.rAngle.toString() + String.fromCharCode(parseInt(str, 16)) + suffix;
        }

        function textBoxAnchorPoints(handles) {
            return [handles.start, handles.middle, handles.end];
        }
    }
    // /////// END IMAGE RENDERING ///////

    // /////// BEGIN ACTIVE TOOL ///////
    function addNewMeasurement(mouseEventData) {
        var cornerstone = external.cornerstone;
        var measurementData = createNewMeasurement(mouseEventData);
        var element = mouseEventData.element;

        // Associate this data with this imageId so we can render it and manipulate it
        addToolState(element, toolType, measurementData);

        // Since we are dragging to another place to drop the end point, we can just activate
        // The end point and let the moveHandle move it for us.
        element.removeEventListener(EVENTS.MOUSE_MOVE, simpleAngle.mouseMoveCallback);
        element.removeEventListener(EVENTS.MOUSE_DRAG, simpleAngle.mouseMoveCallback);
        element.removeEventListener(EVENTS.MOUSE_DOWN, simpleAngle.mouseDownCallback);
        element.removeEventListener(EVENTS.MOUSE_DOWN_ACTIVATE, simpleAngle.mouseDownActivateCallback);
        cornerstone.updateImage(element);
        measurementData.handles.start.active = false;
        moveNewHandle(mouseEventData, toolType, measurementData, measurementData.handles.middle, function () {
            if (anyHandlesOutsideImage(mouseEventData, measurementData.handles)) {
                measurementData.active = false;
                if (anyHandlesOutsideImage(mouseEventData, measurementData.handles)) {
                    // Delete the measurement
                    removeToolState(element, toolType, measurementData);
                }

                element.addEventListener(EVENTS.MOUSE_MOVE, simpleAngle.mouseMoveCallback);
                element.addEventListener(EVENTS.MOUSE_DRAG, simpleAngle.mouseMoveCallback);
                element.addEventListener(EVENTS.MOUSE_DOWN, simpleAngle.mouseDownCallback);
                element.addEventListener(EVENTS.MOUSE_DOWN_ACTIVATE, simpleAngle.mouseDownActivateCallback);
                cornerstone.updateImage(element);
                return;
            }
            measurementData.active = false;
            measurementData.handles.middle.active = true;
        });
        moveNewHandle(mouseEventData, toolType, measurementData, measurementData.handles.middle, function () {
            measurementData.active = false;
            if (anyHandlesOutsideImage(mouseEventData, measurementData.handles)) {
                // Delete the measurement
                removeToolState(element, toolType, measurementData);

                element.addEventListener(EVENTS.MOUSE_MOVE, simpleAngle.mouseMoveCallback);
                element.addEventListener(EVENTS.MOUSE_DRAG, simpleAngle.mouseMoveCallback);
                element.addEventListener(EVENTS.MOUSE_DOWN, simpleAngle.mouseDownCallback);

                element.addEventListener(EVENTS.MOUSE_DOWN_ACTIVATE, simpleAngle.mouseDownActivateCallback);
                cornerstone.updateImage(element);

                return;
            }

            measurementData.handles.middle1.active = true;
            cornerstone.updateImage(element);
            moveNewHandle(mouseEventData, toolType, measurementData, measurementData.handles.middle1, function () {
                measurementData.active = false;
                if (anyHandlesOutsideImage(mouseEventData, measurementData.handles)) {
                    // Delete the measurement
                    removeToolState(element, toolType, measurementData);

                    element.addEventListener(EVENTS.MOUSE_MOVE, simpleAngle.mouseMoveCallback);
                    element.addEventListener(EVENTS.MOUSE_DRAG, simpleAngle.mouseMoveCallback);
                    element.addEventListener(EVENTS.MOUSE_DOWN, simpleAngle.mouseDownCallback);

                    element.addEventListener(EVENTS.MOUSE_DOWN_ACTIVATE, simpleAngle.mouseDownActivateCallback);
                    cornerstone.updateImage(element);

                    return;
                }

                measurementData.handles.end.active = true;
                cornerstone.updateImage(element);

                moveNewHandle(mouseEventData, toolType, measurementData, measurementData.handles.end, function () {
                    measurementData.active = false;
                    measurementData.handles.start.active = false;
                    measurementData.handles.middle.active = false;
                    measurementData.handles.middle1.active = false;
                    measurementData.handles.end.active = false;
                    if (anyHandlesOutsideImage(mouseEventData, measurementData.handles)) {
                        // Delete the measurement
                        removeToolState(element, toolType, measurementData);
                    }

                    element.addEventListener(EVENTS.MOUSE_MOVE, simpleAngle.mouseMoveCallback);
                    element.addEventListener(EVENTS.MOUSE_DRAG, simpleAngle.mouseMoveCallback);
                    element.addEventListener(EVENTS.MOUSE_DOWN, simpleAngle.mouseDownCallback);
                    element.addEventListener(EVENTS.MOUSE_DOWN_ACTIVATE, simpleAngle.mouseDownActivateCallback);
                    cornerstone.updateImage(element);
                });
            });
        });
    }

    var simpleAngle = mouseButtonTool({
        createNewMeasurement: createNewMeasurement,
        addNewMeasurement: addNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType
    });

    function getMeasurement(data) {
        return createNewMeasurement(data);
    }
    if (!cornerstoneTools.alignment) {
        cornerstoneTools.alignment = {};
        for (var i in simpleAngle) {
            cornerstoneTools.alignment[i] = simpleAngle[i];
        }
        //cornerstoneTools.lengths = simpleAngle
    } else {
        for (var i in cornerstoneTools.alignment) {
            cornerstoneTools.alignment[i] = simpleAngle[i];
        }
    }
    cornerstoneTools.alignment.getMeasurement = getMeasurement;
};

new lengths();

/***/ }),

/***/ 674:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var zoom = function zoom() {
    _classCallCheck(this, zoom);

    var EVENTS = cornerstoneTools.EVENTS;
    var external = cornerstoneTools.external;
    var simpleMouseButtonTool = cornerstoneTools.simpleMouseButtonTool;
    var touchDragTool = cornerstoneTools.touchDragTool;
    var touchPinchTool = cornerstoneTools.touchPinchTool;
    var mouseWheelTool = cornerstoneTools.mouseWheelTool;
    var getToolOptions = cornerstoneTools.getToolOptions;
    var clipToBox = clipToBoxnow;
    var isMouseButtonEnabled = function isMouseButtonEnabled(which, mouseButtonMask) {
        var mouseButton = 1 << which - 1;

        return (mouseButtonMask & mouseButton) !== 0;
    };

    var toolType = 'zoom';
    var startPoints = void 0;

    function clip(val, low, high) {
        // Clip a value to an upper and lower bound.
        return Math.min(Math.max(low, val), high);
    }

    function clipToBoxnow(point, box) {
        // Clip an {x, y} point to a box of size {width, height}
        point.x = clip(point.x, 0, box.width);
        point.y = clip(point.y, 0, box.height);
    }

    function changeViewportScale(viewport, ticks) {
        var config = _zoom.getConfiguration();
        var pow = 1.7;

        var oldFactor = Math.log(viewport.scale) / Math.log(pow);
        var factor = oldFactor + ticks * -1;

        var scale = Math.pow(pow, factor);

        if (config.maxScale && scale > config.maxScale) {
            viewport.scale = config.maxScale;
        } else if (config.minScale && scale < config.minScale) {
            viewport.scale = config.minScale;
        } else {
            viewport.scale = scale;
        }

        return viewport;
    }

    function correctShift(shift, viewport) {
        // Apply Flips
        if (viewport.hflip) {
            shift.x *= -1;
        }

        if (viewport.vflip) {
            shift.y *= -1;
        }

        // Apply rotations
        if (viewport.rotation !== 0) {
            var angle = viewport.rotation * Math.PI / 180;

            var cosA = Math.cos(angle);
            var sinA = Math.sin(angle);

            var newX = shift.x * cosA - shift.y * sinA;
            var newY = shift.x * sinA + shift.y * cosA;

            shift.x = newX;
            shift.y = newY;
        }

        return shift;
    }

    function defaultStrategy(eventData, ticks) {
        var cornerstone = external.cornerstone;
        var element = eventData.element;

        // Calculate the new scale factor based on how far the mouse has changed
        var viewport = changeViewportScale(eventData.viewport, ticks);

        cornerstone.setViewport(element, viewport);

        // Now that the scale has been updated, determine the offset we need to apply to the center so we can
        // Keep the original start location in the same position
        var newCoords = cornerstone.pageToPixel(element, eventData.startPoints.page.x, eventData.startPoints.page.y);

        // The shift we will use is the difference between the original image coordinates of the point we've selected
        // And the image coordinates of the same point on the page after the viewport scaling above has been performed
        // This shift is in image coordinates, and is designed to keep the target location fixed on the page.
        var shift = {
            x: eventData.startPoints.image.x - newCoords.x,
            y: eventData.startPoints.image.y - newCoords.y
        };

        // Correct the required shift using the viewport rotation and flip parameters
        shift = correctShift(shift, viewport);

        // Apply the shift to the Viewport's translation setting
        viewport.translation.x -= shift.x;
        viewport.translation.y -= shift.y;

        // Update the Viewport with the new translation value
        cornerstone.setViewport(element, viewport);
    }

    function translateStrategy(eventData, ticks) {
        var element = eventData.element;
        var image = eventData.image;
        var config = _zoom.getConfiguration();

        // Calculate the new scale factor based on how far the mouse has changed
        // Note that in this case we don't need to update the viewport after the initial
        // Zoom step since we aren't don't intend to keep the target position static on
        // The page
        var viewport = changeViewportScale(eventData.viewport, ticks);

        // Define the default shift to take place during this zoom step
        var shift = {
            x: 0,
            y: 0
        };

        // Define the parameters for the translate strategy
        var translateSpeed = 8;
        var outwardsMinScaleToTranslate = 3;
        var minTranslation = 0.01;

        if (ticks < 0) {
            // Zoom outwards from the image center
            if (viewport.scale < outwardsMinScaleToTranslate) {
                // If the current translation is smaller than the minimum desired translation,
                // Set the translation to zero
                if (Math.abs(viewport.translation.x) < minTranslation) {
                    viewport.translation.x = 0;
                } else {
                    shift.x = viewport.translation.x / translateSpeed;
                }

                // If the current translation is smaller than the minimum desired translation,
                // Set the translation to zero
                if (Math.abs(viewport.translation.y) < minTranslation) {
                    viewport.translation.y = 0;
                } else {
                    shift.y = viewport.translation.y / translateSpeed;
                }
            }
        } else {
            // Zoom inwards to the current image point

            // Identify the coordinates of the point the user is trying to zoom into
            // If we are not allowed to zoom outside the image, bound the user-selected position to
            // A point inside the image
            if (config && config.preventZoomOutsideImage) {
                clipToBox(startPoints.image, image);
            }

            // Calculate the translation value that would place the desired image point in the center
            // Of the viewport
            var desiredTranslation = {
                x: image.width / 2 - startPoints.image.x,
                y: image.height / 2 - startPoints.image.y
            };

            // Correct the target location using the viewport rotation and flip parameters
            desiredTranslation = correctShift(desiredTranslation, viewport);

            // Calculate the difference between the current viewport translation value and the
            // Final desired translation values
            var distanceToDesired = {
                x: viewport.translation.x - desiredTranslation.x,
                y: viewport.translation.y - desiredTranslation.y
            };

            // If the current translation is smaller than the minimum desired translation,
            // Stop translating in the x-direction
            if (Math.abs(distanceToDesired.x) < minTranslation) {
                viewport.translation.x = desiredTranslation.x;
            } else {
                // Otherwise, shift the viewport by one step
                shift.x = distanceToDesired.x / translateSpeed;
            }

            // If the current translation is smaller than the minimum desired translation,
            // Stop translating in the y-direction
            if (Math.abs(distanceToDesired.y) < minTranslation) {
                viewport.translation.y = desiredTranslation.y;
            } else {
                // Otherwise, shift the viewport by one step
                shift.y = distanceToDesired.y / translateSpeed;
            }
        }

        // Apply the shift to the Viewport's translation setting
        viewport.translation.x -= shift.x;
        viewport.translation.y -= shift.y;

        // Update the Viewport with the new translation value
        external.cornerstone.setViewport(element, viewport);
    }

    function zoomToCenterStrategy(eventData, ticks) {
        var element = eventData.element;

        // Calculate the new scale factor based on how far the mouse has changed
        var viewport = changeViewportScale(eventData.viewport, ticks);

        external.cornerstone.setViewport(element, viewport);
    }

    function mouseUpCallback(e) {
        var eventData = e.detail;
        var element = eventData.element;

        element.removeEventListener(EVENTS.MOUSE_DRAG, dragCallback);
        element.removeEventListener(EVENTS.MOUSE_UP, mouseUpCallback);
        element.removeEventListener(EVENTS.MOUSE_CLICK, mouseUpCallback);
    }

    function mouseDownCallback(e) {
        var eventData = e.detail;
        var element = eventData.element;
        var options = getToolOptions(toolType, element);

        if (isMouseButtonEnabled(eventData.which, options.mouseButtonMask)) {
            startPoints = eventData.startPoints; // Used for translateStrategy
            element.addEventListener(EVENTS.MOUSE_DRAG, dragCallback);
            element.addEventListener(EVENTS.MOUSE_UP, mouseUpCallback);
            element.addEventListener(EVENTS.MOUSE_CLICK, mouseUpCallback);

            e.preventDefault();
            e.stopPropagation();
        }
    }

    function dragCallback(e) {
        var eventData = e.detail;

        if (!eventData.deltaPoints.page.y) {
            return false;
        }

        var ticks = eventData.deltaPoints.page.y / 100;

        // Allow inversion of the mouse drag scroll via a configuration option
        var config = _zoom.getConfiguration();

        if (config && config.invert) {
            ticks *= -1;
        }

        _zoom.strategy(eventData, ticks);

        e.preventDefault();
        e.stopPropagation();
    }

    function mouseWheelCallback(e) {
        var eventData = e.detail;
        var ticks = -eventData.direction / 4;

        // Allow inversion of the mouse wheel scroll via a configuration option
        var config = _zoom.getConfiguration();

        if (config && config.invert) {
            ticks *= -1;
        }

        var viewport = changeViewportScale(eventData.viewport, ticks);

        external.cornerstone.setViewport(eventData.element, viewport);
    }

    function touchPinchCallback(e) {
        var eventData = e.detail;
        var cornerstone = external.cornerstone;
        var config = _zoom.getConfiguration();
        var viewport = eventData.viewport;
        var element = eventData.element;

        // Change the scale based on the pinch gesture's scale change
        viewport.scale += eventData.scaleChange * viewport.scale;
        if (config.maxScale && viewport.scale > config.maxScale) {
            viewport.scale = config.maxScale;
        } else if (config.minScale && viewport.scale < config.minScale) {
            viewport.scale = config.minScale;
        }

        cornerstone.setViewport(element, viewport);

        // Now that the scale has been updated, determine the offset we need to apply to the center so we can
        // Keep the original start location in the same position
        var newCoords = cornerstone.pageToPixel(element, eventData.startPoints.page.x, eventData.startPoints.page.y);
        var shift = {
            x: eventData.startPoints.image.x - newCoords.x,
            y: eventData.startPoints.image.y - newCoords.y
        };

        shift = correctShift(shift, viewport);
        viewport.translation.x -= shift.x;
        viewport.translation.y -= shift.y;
        cornerstone.setViewport(element, viewport);
    }

    var _zoom = simpleMouseButtonTool(mouseDownCallback, toolType);

    _zoom.strategies = {
        default: defaultStrategy,
        translate: translateStrategy,
        zoomToCenter: zoomToCenterStrategy
    };
    _zoom.strategy = defaultStrategy;
    for (var i in cornerstoneTools.zoom) {
        cornerstoneTools.zoom[i] = _zoom[i];
    }
    /*const zoomWheel = mouseWheelTool(mouseWheelCallback);
    const zoomTouchPinch = touchPinchTool(touchPinchCallback);
    const zoomTouchDrag = touchDragTool(dragCallback, toolType);
    for (var i in cornerstoneTools.zoom) {
        cornerstoneTools.zoom[i] = zoom[i]
    }
    for (var i in cornerstoneTools.zoom) {
        cornerstoneTools.zoom[i] = zoom[i]
    }
    for (var i in cornerstoneTools.zoom) {
        cornerstoneTools.zoom[i] = zoom[i]
    }
    cornerstoneTools.zoomWheel = zoomWheel
    cornerstoneTools.zoomTouchPinch = zoomTouchPinch
    cornerstoneTools.zoomTouchDrag = zoomTouchDrag
    */
};

new zoom();

/***/ }),

/***/ 675:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(676);

var progress = function (_Interstellar$moduleB) {
  _inherits(progress, _Interstellar$moduleB);

  function progress(app, value, api, addMode) {
    _classCallCheck(this, progress);

    var _this = _possibleConstructorReturn(this, (progress.__proto__ || Object.getPrototypeOf(progress)).call(this, app, value, api, addMode));

    _this.html = __webpack_require__(678);
    _this.name = 'mpr';
    _this.screen = 3;
    var imageS = __webpack_require__(679);
    _this.modelImage = new imageS();
    _this.imageList;
    new Promise(function(resolve) { resolve(); }).then((function () {
      _this.class_c = __webpack_require__(639);
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
    _this.cornerstoneArray = new Array(3);
    _this.crossArray = new Array(3);
    console.log(_this.initDate.info);
    var info = _this.initDate.info.info.data;
    window.targetInfo = {
      wc: info.firstWindowCenter,
      ww: info.firstWindowWidth,
      columnPixelSpacing: info.pixelSpacing[0],
      rowPixelSpacing: info.pixelSpacing[1]
    };
    if (_this.initDate.info.people[1] && _this.initDate.info.people[2]) {
      window.depth = Math.abs(_this.initDate.info.people[1].imagePositionPatient[2] - _this.initDate.info.people[2].imagePositionPatient[2]);
    } else {
      window.depth = info.pixelSpacing[0];
    }
    _this.crossline = __webpack_require__(642);
    return _this;
  }

  _createClass(progress, [{
    key: 'complete',
    value: function complete() {
      var _this2 = this;

      this.dom.find('.close_btn').on('click', function () {
        _this2.close();
      });
    }
  }, {
    key: 'openS',
    value: function openS(value, nodeInfo, brush) {
      var _this3 = this;

      this.dom.show();
      this.modelImage.imageList(value);
      this.nodeInfo = nodeInfo;
      this.brushManage = brush;
      this.modelImage.event._addEvent('makeJPG.finish', function () {
        _this3.app.loading.hide();
        _this3.xUrl = _this3.modelImage.xUrl;
        _this3.yUrl = _this3.modelImage.yUrl;
        _this3.zUrl = _this3.modelImage.zUrl;
        // console.log(this.xUrl)
        _this3.point = { x: Math.floor(_this3.modelImage.width / 2), y: Math.floor(_this3.modelImage.height / 2), z: Math.floor(_this3.modelImage.zUrl.length / 2) };
        _this3.loadAll();
      });
      //this.don
    }
  }, {
    key: 'loadAll',
    value: function loadAll() {
      this.nowWWC = [];
      this.loadSing(0, this.zUrl, 'z');
      this.loadSing(1, this.yUrl, 'y');
      this.loadSing(2, this.xUrl, 'x');
    }
  }, {
    key: 'loadSing',
    value: function loadSing(id, xy, type) {
      var _this4 = this;

      var imageAddress = xy;
      var box = this.dom.find('#cb' + id).box();
      var that = this;
      var firse = false;
      if (this.modelImage.type == 'jpg') {
        var max = this.initDate.info.info.data.firstWindowCenter + this.initDate.info.info.data.firstWindowWidth / 2;
        var min = this.initDate.info.info.data.firstWindowCenter - this.initDate.info.info.data.firstWindowWidth / 2;
        var mindata = this.initDate.info.info.wwc.low * 1;
        var range = this.initDate.info.info.wwc.hight * 1 - this.initDate.info.info.wwc.low * 1;
        var minS = 255 * (min - mindata) / range;
        var maxS = 255 * (max - mindata) / range;
        //console.log(minS, maxS)
        this.nowWWC[id] = { c: (minS + maxS) / 2, w: maxS - minS };
      }
      this.crossArray[id] = this.app.loadModule(this.crossline, this.dom.find('.cb' + id + ' .line'));
      this.crossArray[id].type = type;
      this.crossArray[id].setPos({ x: 0, y: 0 });
      this.crossArray[id].setYHeight(box.clientHeight);
      this.crossArray[id].event._addEvent('crossline.move', function () {
        _this4.crossmove = true;
        if (_this4.cornerstoneArray[id]) {
          //console.log(this.crossArray[id].nowpos, this.cornerstoneArray[id].getViewport(), this.dom.find('#cb' + id).box(), type)
          _this4.changePOint(_this4.crossArray[id].nowpos, _this4.cornerstoneArray[id].getViewport(), _this4.dom.find('#cb' + id).box(), type);
        }
      });
      this.crossArray[id].event._addEvent('crossline.mouseup', function () {
        _this4.crossmove = false;
      });
      this.cornerstoneArray[id] = new this.class_c({
        element: this.dom.find('#cb' + id).dom[0].dom,
        totalImage: xy.length,
        imageAddress: xy,
        index: 0,
        type: "JPG"
      });
      this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.cornerstonetoolsmousemove', function (value) {});
      this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.ImageRendered', function (value) {
        // console.log(imageAddress[value.currentCount * 1],'===========')
        var who = ES.selctorDoc(value.element).parent();
        var nowId = ES.selctorDoc(value.element).attr('id').replace('cb', '') * 1;
        var layers = imageAddress[value.currentCount * 1].match(/\d{1,}/g)[0] * 1 + 1; //Tool.changeToName(imageAddress[value.currentCount * 1], 'jpg')
        that.dom.find('.cb' + id + ' .layer').html(layers + '/' + xy.length);
        that.dom.find('.cb' + id + ' .sc').html(that.cornerstoneArray[id].getViewport().scale.toFixed(2));
        if (firse) {
          that.point[type] = layers;
        } else {
          var nowVO = that.cornerstoneArray[id].getViewport().voi;
          if (that.nowWWC[id]) {
            if (nowVO.windowCenter != that.nowWWC[id].c || nowVO.windowWidth != that.nowWWC[id].w) {
              that.lungWindown(that.nowWWC[id].c, that.nowWWC[id].w, id);
            }
          }
          firse = true;
        }
        if (!that.crossmove) {
          that.renderXYZ();
        }
        //console.log(that.nowWWC[id], 'that.nowWWC[id]that.nowWWC[id]that.nowWWC[id]', nowVO)

        if (type == 'z') {
          var aa = cornerstone.pixelToCanvas(value.element, { x: 0, y: 0 });
          var allmove = cornerstone.getViewport(value.element);
          var brushInfoAll = that.brushManage.brushInfo[layers] ? that.brushManage.brushInfo[layers] : {};
          var brushNodes = {};
          for (var _i in brushInfoAll) {
            if (brushInfoAll[_i].sId == that.sId) {
              brushNodes[_i] = brushInfoAll[_i];
            }
          }
          for (var bid in brushNodes) {
            if (brushNodes[bid].image) {
              var image = brushInfoAll[bid].image;
              value.canvasContext.drawImage(brushInfoAll[bid].image, 0, 0);
            }
          }
          var nodeA = that.nodeInfo ? that.nodeInfo[layers] : [];
          //console.log(value)
          nodeA = nodeA ? nodeA : [];
          var fliterNodes = nodeA.filter(function (item) {
            return item.sId == that.sId;
          });
          for (var i = 0; i < fliterNodes.length; i++) {
            var ctx = value.canvasContext;
            ctx.beginPath();
            ctx.mozImageSmoothingEnabled = false;
            ctx.lineWidth = Math.floor(value.image.columns / 512);
            ctx.strokeStyle = '#f00';
            if (that.chooseNidus) {
              if (that.chooseNidus.uuid == fliterNodes[i].nodeInfo.uuid || that.chooseNidus.id == fliterNodes[i].nodeInfo.uuid) {
                ctx.strokeStyle = '#0ff';
              }
            }
            var handles = fliterNodes[i].nodeInfo.handles;
            switch (fliterNodes[i].type) {
              case "rectangleRoi":
                var w = Math.abs(handles.end.x - handles.start.x);
                var h = Math.abs(handles.end.y - handles.start.y);
                var minx = Math.min(handles.end.x, handles.start.x);
                var miny = Math.min(handles.end.y, handles.start.y);
                ctx.strokeRect(minx, miny, w, h);
                ctx.stroke();
                break;
              case "ellipticalRoi":
                var rx = (handles.start.x + handles.end.x) / 2;
                var ry = (handles.start.y + handles.end.y) / 2;
                var r = Math.max(Math.abs((handles.end.x - handles.start.x) / 2), Math.abs((handles.end.y - handles.start.y) / 2));
                //ctx.ellipse(rx, ry, w / 2, h / 2, angle, 0, 2 * Math.PI);
                ctx.arc(rx, ry, r, 0, 2 * Math.PI, false);
                ctx.stroke();
                break;
              case "length":
                ctx.moveTo(handles.start.x, handles.start.y);
                ctx.lineTo(handles.end.x, handles.end.y);
                ctx.stroke();
                break;
              case "simpleAngle":
                ctx.moveTo(handles.start.x, handles.start.y);
                ctx.lineTo(handles.middle.x, handles.middle.y);
                ctx.lineTo(handles.end.x, handles.end.y);
                ctx.stroke();
                break;
            }
          }
        }
      });
      this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.ModifiedFinsh', function (value) {});
      this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.MeasurementEnd', function (value) {});
      this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.brushDown', function (value) {});

      this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.click', function (value) {});
      this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.mousedown', function (value) {});

      this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.MouseDrag', function (value) {});

      //标注移除
      this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.MeasurementRemove', function (value) {});
    }
  }, {
    key: 'lungWindown',
    value: function lungWindown(c, w, id) {
      //console.log(c, w)
      if (c == null || w == null) {
        c = 128; //this.cornerstoneArray[this.choosescreen].colcDefault
        w = 256; //this.cornerstoneArray[this.choosescreen].colwDefault
      }
      this.nowWWC[id] = {
        c: c,
        w: w
      };
      if (!this.cornerstoneArray[id]) {
        return;
      }

      this.cornerstoneArray[id].lungWindown(c, w);
      this.nowWWC[id] = {
        c: this.cornerstoneArray[id].getViewport().voi.windowCenter,
        w: this.cornerstoneArray[id].getViewport().voi.windowWidth //this.cornerstoneArray[this.choosescreen].getViewport()
      };
    }
  }, {
    key: 'close',
    value: function close() {
      //this.dom.html('')
      this.modelImage.clearAllData();
      this.xUrl = this.yUrl = this.zUrl = null;
      for (var i = 0; i < 3; i++) {
        if (this.cornerstoneArray[i]) {
          this.dom.find('.cb' + i + ' .line').remove();
          this.cornerstoneArray[i].close();
          this.cornerstoneArray[i] = null;
          //console.log('aaaaa')
          //this.dom.find('.cb' + i + ' .line').remove()
          // this.dom.find('.cb' + i).append('<div class="line"></div>')
        }
      }
      //this.bin = null
      this.event._dispatch('mpr.closeAll');
    }
  }, {
    key: 'defaultFunction',
    value: function defaultFunction(name) {
      var funName = name;
      if (funName != "restFan" && funName != "clearFan" && funName != "resizeCon" && funName != "wlFan" && funName != 'zoomFan') {
        funName = "";
      }
      for (var i = 0; i < 3; i++) {
        if (this.cornerstoneArray[i]) {
          eval('this.cornerstoneArray[i].' + funName + '()');
        }
      }
    }
  }, {
    key: 'renderXYZ',
    value: function renderXYZ() {
      var atype = ['z', 'y', 'x'];
      for (var i = 0; i < 3; i++) {
        var layer = this.dom.find('.cb' + i + ' .layer').html().split('/')[0];
        // console.log(layer)
        if (layer) {
          //console.log(this.point[atype[i]])
          if (layer != this.point[atype[i]]) {
            //console.log('===')
            this.cornerstoneArray[i].funcNodule(this.point[atype[i]]);
          }
        }

        var box = this.dom.find('#cb' + i).box();
        var getViewport = this.cornerstoneArray[i].getViewport();
        //console.log(cornerstone.pixelToCanvas(this.cornerstoneArray[id].element,getViewport.translation))
        if (atype[i] == 'z') {
          this.crossArray[i].setPos(this.returnXY({ x: this.point.x, y: this.point.y }, getViewport, box));
        }
        if (atype[i] == 'y') {
          var ratex = window.depth / window.targetInfo.columnPixelSpacing;
          this.crossArray[i].setPos(this.returnXY({ x: this.point.x, y: (this.point.z - 1) * ratex }, getViewport, box));
        }
        if (atype[i] == 'x') {
          var ratey = window.depth / window.targetInfo.rowPixelSpacing;
          this.crossArray[i].setPos(this.returnXY({ x: this.point.y, y: (this.point.z - 1) * ratey }, getViewport, box));
        }
      }
    }
  }, {
    key: 'changePOint',
    value: function changePOint(point, getViewport, box, type) {
      var stPos = this.getStartPos(getViewport, box);
      var x = Math.floor((point.x - stPos.x) / getViewport.scale);
      var y = Math.floor((point.y - stPos.y) / getViewport.scale);
      var rate = type == 'y' ? window.depth / window.targetInfo.rowPixelSpacing : window.depth / window.targetInfo.columnPixelSpacing;
      rate = rate < 1 ? 1 : rate;
      switch (type) {
        case 'z':
          this.point.x = x;
          this.point.y = y;
          break;
        case 'y':
          this.point.x = x;
          this.point.z = Math.floor(y / rate);
          break;
        case 'x':
          this.point.y = x;
          this.point.z = Math.floor(y / rate);
          break;
      }
      this.renderXYZ();
    }
  }, {
    key: 'getStartPos',
    value: function getStartPos(getViewport, box) {
      var orw = getViewport.displayedArea.brhc.x;
      var orh = getViewport.displayedArea.brhc.y;
      var x = 0;
      var y = 0;
      if (orw / orh > box.clientWidth / box.clientHeight) {
        y = (box.clientHeight - box.clientWidth * orh / orw) / 2;
      } else {
        x = (box.clientWidth - box.clientHeight * orw / orh) / 2;
      }
      return { x: x, y: y };
    }
  }, {
    key: 'returnXY',
    value: function returnXY(point, getViewport, box) {
      var stPos = this.getStartPos(getViewport, box);
      //console.log(stPos,'stPosstPosstPosstPos',getViewport, box,point)
      var x = Math.floor(stPos.x + (getViewport.translation.x + point.x) * getViewport.scale);
      var y = Math.floor(stPos.y + (getViewport.translation.y + point.y) * getViewport.scale);
      //console.log(x, y)
      stPos = null;
      return { x: x, y: y };
    }
  }, {
    key: 'resize',
    value: function resize(w, h) {
      this.dom.find('#cb0').css({ width: w / 2 - 2, height: h - 2 });
      this.dom.find('#cb1').css({ width: w / 2 - 3, height: h / 2 - 2 });
      this.dom.find('#cb2').css({ width: w / 2 - 3, height: h / 2 - 2 });
      for (var i = 0; i < 3; i++) {
        if (this.cornerstoneArray[i]) {
          this.cornerstoneArray[i].resizeCon();
        }
      }
    }
  }, {
    key: 'renderAllLayer',
    value: function renderAllLayer() {
      for (var i = 0; i < 3; i++) {
        var layer = this.dom.find('.cb' + i + ' .layer').html().split('/')[0];
        if (layer) {
          this.cornerstoneArray[i].funcNodule(layer);
        }
      }
    }
  }, {
    key: 'nidusChoose',
    value: function nidusChoose(value) {
      this.chooseNidus = value;
      this.renderAllLayer();
    }
  }]);

  return progress;
}(Interstellar.moduleBase);

module.exports = progress;

/***/ }),

/***/ 676:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(677);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./mpr.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./mpr.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 677:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".mprc {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  background: #000;\n}\n.mprc .close_btn {\n  position: absolute;\n  top: 0;\n  left: 0;\n  color: #fff;\n  font-size: 12px;\n}\n.mprc .line {\n  position: absolute;\n  -webkit-touch-callout: none;\n  /* iOS Safari */\n  -webkit-user-select: none;\n  /* Chrome/Safari/Opera */\n  -khtml-user-select: none;\n  /* Konqueror */\n  -moz-user-select: none;\n  /* Firefox */\n  -ms-user-select: none;\n  /* Internet Explorer/Edge */\n  user-select: none;\n  width: 100%;\n  top: 0;\n  left: 0;\n}\n.mprc .le,\n.mprc .ri {\n  position: relative;\n  width: 50%;\n  height: 100%;\n}\n.mprc .c_fbb03b {\n  border: 1px solid #1f474c;\n  position: relative;\n}\n.mprc .c_fbb03b .wwc {\n  position: absolute;\n  bottom: 35px;\n  right: 10px;\n}\n.mprc .c_fbb03b .layer {\n  position: absolute;\n  bottom: 10px;\n  right: 10px;\n}\n.mprc .c_fbb03b .sc {\n  position: absolute;\n  left: 10px;\n  right: 10px;\n}\n.mprc .cb0 {\n  height: 100%;\n}\n.mprc .cb0 .c0 {\n  height: 100%;\n}\n.mprc .cb0 #cb0 {\n  height: 100%;\n}\n.mprc .cb1 {\n  height: 50%;\n}\n.mprc .cb1 .c1 {\n  height: 100%;\n}\n.mprc .cb1 #cb1 {\n  height: 100%;\n}\n.mprc .cb2 {\n  height: 50%;\n}\n.mprc .cb2 .c2 {\n  height: 100%;\n}\n.mprc .cb2 #cb2 {\n  height: 100%;\n}\n", ""]);

// exports


/***/ }),

/***/ 678:
/***/ (function(module, exports) {

module.exports = "<div class=mprc> <div class=\"fl le\"> <div class=\"c_fbb03b cb0\"> <div class=\"w50_ pr c0\"> <div id=cb0></div> <div class=line></div> </div> <p class=xyz></p> <p class=sc></p> <p class=wwc></p> <p class=layer></p> </div> </div> <div class=\"fl ri\"> <div class=\"c_fbb03b cb1\"> <div class=\"w50_ pr c1\"> <div id=cb1></div> <div class=line></div> </div> <p class=xyz></p> <p class=sc></p> <p class=wwc></p> <p class=layer></p> </div> <div class=\"c_fbb03b cb2\"> <div class=\"w50_ pr c2\"> <div id=cb2></div> <div class=line></div> </div> <p class=xyz></p> <p class=sc></p> <p class=wwc></p> <p class=layer></p> </div> </div> <div style=clear:both></div> <p class=close_btn><span>x</span></p> </div>";

/***/ }),

/***/ 679:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MakeJPG = function () {
    function MakeJPG() {
        _classCallCheck(this, MakeJPG);

        this.event = new Interstellar.event();
    }

    _createClass(MakeJPG, [{
        key: 'imageList',
        value: function imageList(imgaeIds) {
            this.len = imgaeIds.length;
            //this.len = 5
            this.count = 0;
            this.type = "jpg";
            this.startNum = 0;
            if (imgaeIds[0].toLocaleLowerCase().lastIndexOf('.dcm') != -1) {
                this.type = 'dcm';
            }
            window.imageList = new Array(this.len);
            this.zUrl = new Array(this.len);
            for (var i = 0; i < this.len; i++) {
                this.zUrl[i] = this.type == 'jpg' ? "glayImage:z" + i : "pixImage:z" + i;
            }
            if (this.type == 'jpg') {
                this.jpgParse(imgaeIds, 0);
            } else {
                this.fiveLoad(imgaeIds);
            }
        }
    }, {
        key: 'fiveLoad',
        value: function fiveLoad(urls) {
            this.count = 0;
            this.fiveL = 0;
            for (var i = this.startNum; i < this.startNum + 5; i++) {
                console.log(i);
                this.dcmParse(urls, i);
            }
        }
    }, {
        key: 'dcmParse',
        value: function dcmParse(url, num) {
            var that = this;
            if (num > this.len - 1) {
                return;
            }
            if (!url[num]) {
                return;
            }
            this.fiveL++;
            var div = document.createElement('div');
            cornerstone.enable(div);
            console.log(url[num]);
            cornerstone.loadImage(url[num]).then(function (image) {
                console.log(image);
                that.count++;
                that.startNum++;
                if (!window.imageList[num]) {
                    window.imageList[num] = new Array(image.columns);
                }
                if (num == 0) {
                    that.urlAddress(image.columns, image.rows);
                }
                if (!that.z) {
                    that.z = [];
                }
                that.width = image.columns;
                that.height = image.rows;
                that.z[num] = image.data.string('x00200032').match(/(\-|\+)?\d+(\.\d+|\d)/g)[2];
                //console.log(num,that.z[num],image.data.string('x00200032'))
                //console.log(image)
                window.targetInfo = {
                    wc: image.data.string('x00281050').match(/(\-|\+)?\d+/g)[0],
                    ww: image.data.string('x00281051').match(/(\-|\+)?\d+/g)[0],
                    columnPixelSpacing: image.columnPixelSpacing,
                    rowPixelSpacing: image.rowPixelSpacing
                };
                var arrData = image.getPixelData();
                for (var i = 0; i < arrData.length; i++) {
                    var row = Math.floor(i / image.columns);
                    if (!window.imageList[num][row]) {
                        window.imageList[num][row] = new Int16Array(image.columns);
                    }
                    var HUDATA = arrData[i] * image.slope + image.intercept;
                    window.imageList[num][row][Math.floor(i % image.columns)] = HUDATA;
                    window.targetInfo.min = window.targetInfo.min ? window.targetInfo.min < HUDATA ? window.targetInfo.min : HUDATA : HUDATA;
                    window.targetInfo.max = window.targetInfo.max ? window.targetInfo.max > HUDATA ? window.targetInfo.max : HUDATA : HUDATA;
                }
                cornerstone.disable(div);
                if (that.count != that.fiveL) {
                    return;
                }
                if (that.startNum < that.len - 1) {
                    that.fiveLoad(url);
                } else {
                    window.depth = Math.abs(that.z[0] - that.z[1]);
                    //console.log(window.depth,window.targetInfo)
                    that.event._dispatch('makeJPG.finish');
                }
                //console.log(window.imageList)
            });
        }
    }, {
        key: 'jpgParse',
        value: function jpgParse(url, num) {
            var that = this;
            if (!url[num]) {
                return;
            }
            var imgase = new Image();
            imgase.crossOrigin = 'anonymous';
            imgase.onload = function () {
                that.count++;
                var canvas = document.createElement("CANVAS");
                that.width = this.width;
                that.height = this.height;
                canvas.setAttribute("width", this.width);
                canvas.setAttribute("height", this.height);
                if (num == 0) {
                    that.urlAddress(this.width, this.height);
                }
                if (!window.imageList[num]) {
                    window.imageList[num] = new Array(this.height);
                }
                var ctx = canvas.getContext("2d");
                ctx.drawImage(this, 0, 0);
                var imageData = ctx.getImageData(0, 0, this.width, this.height).data;
                var lengthWH = imageData.length / 4;
                for (var i = 0; i < lengthWH; i++) {
                    var row = Math.floor(i / this.width);
                    if (!window.imageList[num][row]) {
                        window.imageList[num][row] = new Uint8Array(this.width);
                    }
                    window.imageList[num][row][Math.floor(i % this.width)] = imageData[i * 4];
                }
                ctx = null;
                imageData = null;
                canvas = null;
                if (that.count < that.len) {} else {
                    //console.log(window.imageList)
                    that.event._dispatch('makeJPG.finish');
                }
            };
            imgase.onerror = function () {
                console.log('error');
            };
            imgase.src = url[num].replace('myImageLoader:', '');
            this.jpgParse(url, num + 1);
        }
    }, {
        key: 'urlAddress',
        value: function urlAddress(w, h) {
            //x,y代表的是沿着那个方向切
            this.xUrl = new Array(w);
            this.yUrl = new Array(h);
            for (var i = 0; i < w; i++) {
                this.xUrl[i] = this.type == 'jpg' ? "glayImage:x" + i : "pixImage:x" + i;
            }
            for (var j = 0; j < h; j++) {
                this.yUrl[j] = this.type == 'jpg' ? "glayImage:y" + j : "pixImage:y" + j;
            }
        }
    }, {
        key: 'clearAllData',
        value: function clearAllData() {
            window.imageList = null;
            window.wwc = null;
            window.depth = null;
            this.xUrl = this.yUrl = this.zUrl = this.len = null;
        }
    }]);

    return MakeJPG;
}();

module.exports = MakeJPG;

/***/ }),

/***/ 680:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(681);

/**/

var sequencelist = function (_Interstellar$moduleB) {
    _inherits(sequencelist, _Interstellar$moduleB);

    function sequencelist(app, dom, value, addMore) {
        _classCallCheck(this, sequencelist);

        var _this = _possibleConstructorReturn(this, (sequencelist.__proto__ || Object.getPrototypeOf(sequencelist)).call(this, app, dom, value, addMore));

        _this.html = __webpack_require__(683);
        _this.cornerstoneArray = {};
        _this.myScrollgood = null;
        _this.deferred = ES.Deferred();
        _this.chooseData = {};
        _this.loadAll = {};
        _this.loadId = 0;
        _this.nowplayData = null;
        _this.listData = null;
        _this.currentSid = '';
        // 默认根据病灶类型来归类排序
        _this.isSortByDoctor = false;
        return _this;
    }

    _createClass(sequencelist, [{
        key: 'complete',
        value: function complete() {
            var that = this;
            var sortBtnDom = that.dom.find('.sort-wrapper .sort-btn');
            sortBtnDom.on('click', function () {
                if (that.isSortByDoctor) {
                    that.sortNidusList('doctorname');
                    sortBtnDom.html('按病灶排序');
                } else {
                    that.sortNidusList('niddtype');
                    sortBtnDom.html('按医生排序');
                }
            });
        }
        /**
         * 将最左侧的病灶列表进行归类，并且每个归类内部按照该病灶所属的层数排序
         * @param { String } sortBy 按照什么字段归类
         */

    }, {
        key: 'sortNidusList',
        value: function sortNidusList(sortBy) {
            var _this2 = this;

            setTimeout(function () {
                // 获取当前序列下所有的病灶列表
                var nidusDomList = $('.sequencelist .nodeInfolist div[sid="' + _this2.currentSid + '"]').get();
                // 先排序(按照列表中每个对象的sortBy属性归类排序)
                nidusDomList.sort(function (a, b) {
                    var $a = $(a);
                    var $b = $(b);
                    var sortByAttrA = $a.attr(sortBy);
                    var sortByAttrB = $b.attr(sortBy);
                    if (sortByAttrA === sortByAttrB) {
                        // 相同归类内部按照该病灶所属的层数排序
                        return Number($a.attr('layerinfo')) - Number($b.attr('layerinfo'));
                    } else {
                        // 不同归类之间按照sortBy的值的首字符Unicode编码来排序
                        return sortByAttrA.charCodeAt() - sortByAttrB.charCodeAt();
                    }
                });
                // 再给每个归类添加归类名称
                var tempObj = {}; // 临时对象用来判断在每个归类内的第一项上方加入归类名称
                nidusDomList.forEach(function (item) {
                    var $item = $(item);
                    // 先将原来可能存在的所有归类名称都删掉
                    $item.find('div.item-wrapper').prev().remove();
                    var sortByAttr = $item.attr(sortBy);
                    if (!tempObj[sortByAttr]) {
                        tempObj[sortByAttr] = true;
                        sortBy === 'niddtype' && (sortByAttr = Tool.configobjformat(_this2.app.constmap.LESION)[sortByAttr]); // 如按照病灶类型归类，还需将类似'ANNO1'这种名称转换成'骨折点'中文，不然用户看不懂
                        $item.prepend('<div class="group-name">' + sortByAttr + '：</div>'); // 在每个归类的上方添加归类名称
                    }
                });
                $(".sequencelist .nodeInfolist").append(nidusDomList);
                _this2.isSortByDoctor = !_this2.isSortByDoctor;
                // this.initscrollgood()
                _this2.scrollToChooseItem();
            }, 300);
        }
        // 滚动到之前已选中的选项

    }, {
        key: 'scrollToChooseItem',
        value: function scrollToChooseItem() {
            if (!this.myScrollgood) return;
            var chooseDom = $('.sequencelist .nodeInfo .choose');
            if (!chooseDom.length) return;
            var containerHeight = $('.nodeInfo').height();
            var top = chooseDom.offset().top;
            // 在可视范围内不需滚动
            if (top >= 166 && top <= containerHeight + 166) return;
            this.myScrollgood.scrollToElement('.sequencelist .nodeInfolist .choose', 100);
        }
    }, {
        key: 'showNowData',
        value: function showNowData(sId) {
            this.currentSid = sId;
            if (!sId) {
                this.dom.find('.nodeInfo');
            } else {
                this.dom.find('.nodeInfo .nodeInfolist>div').hide();
                console.log(this.dom.find('.nodeInfo .nodeInfolist>div').dom);
                if (!this.dom.find('.nodeInfo .nodeInfolist>div').dom) {
                    return;
                }
                this.dom.find('.nodeInfo .nodeInfolist>div').dom.map(function (item) {
                    if (item.attr('sid').lastIndexOf(sId) != -1) {
                        item.show();
                    }
                });
                //  this.dom.find('.nodeInfo .nodeInfolist>div[sid="' + sId + '"]').show()
                this.initscrollgood();
                this.handleSortBtnVisible();
            }
        }
    }, {
        key: 'handleSortBtnVisible',
        value: function handleSortBtnVisible() {
            var url = window.location.hash;
            if (url.includes('markaudit/') || url.includes('markauditview/')) {
                $(".sort-wrapper").css({ display: 'block' }).find('.sort-btn').trigger('click');
            }
        }
    }, {
        key: 'updateSequencelistSid',
        value: function updateSequencelistSid(value) {
            this.dom.find('div[bid="' + value.id + '"]').attr('sid', value.sId);
        }
    }, {
        key: 'setData',
        value: function setData(value, childrens) {
            var data = this.listData = value;
            this.dom.find('.sequencelist').html('');
            for (var i = 0; i < data.length; i++) {
                this.initsingle(i, data[i]);
            }
            // this.sortSequenceList(childrens, 'type')
            for (var _i = 0; _i < childrens.length; _i++) {
                this.addNode(childrens[_i]);
            }
        }
    }, {
        key: 'sortSequenceList',
        value: function sortSequenceList(list, sortBy) {
            if (!list || !list.length) return;
            list.sort(function (a, b) {
                if (a[sortBy] === b[sortBy]) {
                    return a.layerNumber - b.layerNumber;
                } else {
                    return a[sortBy].charCodeAt() - b[sortBy].charCodeAt();
                }
            });
        }
    }, {
        key: 'setLayerInfo',
        value: function setLayerInfo(value, layer) {
            this.dom.find('div[bid="' + value.id + '"]').attr('layerinfo', layer);
            this.dom.find('div[bid="' + value.id + '"] .edit_color ul').attr('layerinfo', layer);
        }
    }, {
        key: 'setBackId',
        value: function setBackId(value) {
            //console.log(value, 'valuevaluevaluevaluevaluevalue')
            var dom = this.dom.find("div[uuid='" + value.uuid + "']");
            //value.uuid = value.backId
            dom.attr('bid', value.backId);
            dom.addClass('one_' + value.backId);
            //console.log(dom.find('.cul').dom)
            if (dom.find('.cul').dom) {
                dom.find('.cul').attr('bid', value.backId);
            }
            //dom.find('.cul').attr('bid', value.backId)
            // dom.attr('uuid', value.backId)
            dom.find('.nname').click();
            var temp = Tool.configobjformat(this.app.constmap.LESION);
            var nidusDesc = temp[value.toolType.imageAnnotation] + '_' + value.backId;
            var tempHandles = value.handles;
            console.log('我去你个巴子1', tempHandles);
            tempHandles && (nidusDesc += '(' + tempHandles.length + ')');
            dom.find('.nname').html(nidusDesc);
        }
    }, {
        key: 'openNode',
        value: function openNode(value) {
            this.dom.find("div[bid='" + value.id + "'] .nname").click();
        }
    }, {
        key: 'addNode',
        value: function addNode(value) {
            switch (value.type) {
                case "length":
                    this.addNormal(value, "nobrush");
                    break;
                case "freehandline":
                    this.addNormal(value, "nobrush");
                    break;
                case "brush":
                    this.addNormal(value, "brush");
                    break;
                case "rectangleRoi":
                    this.addNormal(value, "nobrush");
                    break;
                case "ellipticalRoi":
                    this.addNormal(value, "nobrush");
                    break;
                case "simpleAngle":
                    this.addNormal(value, "nobrush");
                    break;
                case "lengths":
                    this.addNormal(value, "nobrush");
                    break;
                case "cobb":
                    this.addNormal(value, "nobrush");
                    break;
                case "alignment":
                    this.addNormal(value, "nobrush");
                    break;
                case "magicStickSingle":
                    this.addNormal(value, "brush");
                    break;
                case "polygon":
                    this.addNormal(value, "brush");
                    break;
                case "freehand":
                    this.addNormal(value, "brush");
                    break;
                case "quickselect":
                    this.addNormal(value, "brush");
                    break;
                case "regionpaint":
                    this.addNormal(value, "brush");
                    break;
            }
        }
    }, {
        key: 'returnAnno',
        value: function returnAnno(value) {
            return this.dom.find('div[bid="' + value.backId + '"]').attr('niddtype');
        }
    }, {
        key: 'removeNode',
        value: function removeNode(value) {
            var dom = this.chooseData.element;
            var classname = 'one_' + (value.backId || value.uuid);
            dom.find('.nodeInfo .nodeInfolist .' + classname).remove();
            // 已经标注过的序列再删除病灶，当所有病灶删完时在其缩略图右上角需显示的icon标记也需删除
            this.event._dispatch('serieslist.removeMarkedIcon');
            this.initscrollgood();
        }
    }, {
        key: 'setNname',
        value: function setNname(id, name) {
            this.dom.find('div[bid="' + id + '"] .nname').html(name);
        }
    }, {
        key: 'addNormal',
        value: function addNormal(value, brushtype) {
            var dom = this.chooseData.element;
            var classname = 'one_' + value.uuid; //.layerNumber
            var li = dom.find('.nodeInfo .' + classname);
            var that = this;
            // dom.find('.nodeInfo .choose').removeClass('choose')
            var temp = Tool.configobjformat(this.app.constmap.LESION);
            //'AA1113', 'F5A623', 'F8E71C', '7ED321', '4A90E2', '50E3C2', '8B572A', '417505', 'B8E986', 'BD10E0'
            var colorArray = ['AA1113', 'F5A623', 'F8E71C', '7ED321', '4A90E2', '50E3C2', '8B572A', '417505', 'B8E986', 'BD10E0'];
            if (!li.dom) {
                var htmlstr = '<div sId="' + value.sId + '" bid="' + (value.backId ? value.backId : "") + '" niddtype="' + value.toolType.imageAnnotation + '" uuid="' + value.uuid + '" toolType="' + (value.imageAnnotationToolType || value.tooltype) + '" layerInfo="' + value.layerNumber + '" doctorname="' + value.doctorName + '" class="' + classname + '"><div class="item-wrapper">';
                if (brushtype == 'brush') {
                    htmlstr += '<div class="edit_color"><span class="color_c c1"></span><ul class="cul" sId="' + value.sId + '" bid="' + (value.backId ? value.backId : "") + '" uuid="' + value.uuid + '" layerInfo="' + value.layerNumber + '">';
                    for (var i = 0; i < colorArray.length; i++) {
                        htmlstr += '<li class="color_li" name="' + colorArray[i] + '" data="' + colorArray[i] + '">\n                    <span class="cc c' + (i + 1) + '"></span>\n                    <span class="textc">' + colorArray[i] + '</span>\n                    </li>';
                    }
                    htmlstr += '</ul></div><span class=\'fillcon iconfont icon-danxinggoumian1\' title="\u53BB\u9664\u586B\u5145" cc="fill"></span>';
                }
                htmlstr += '<p class="nname">' + temp[value.toolType.imageAnnotation] + '_' + value.uuid;
                var markResult = value.result || {};
                console.log('我去你个巴子2', markResult);
                var markResultValue = markResult.length; // || markResult.angle
                markResultValue && (htmlstr += '(' + markResultValue + ')');
                htmlstr += '</p><span class=\'showHide chooseIcon iconfont icon-biyan1\'></span>';
                if (this.app.parpam['type'].lastIndexOf("viewer") == -1 && this.app.parpam['type'].lastIndexOf("check") == -1) {
                    htmlstr += '<span class="del"><i class="iconfont icon-shanchu" enable="enable"></i></span>';
                }
                htmlstr += '</div></div>';
                dom.find('.nodeInfolist').append(htmlstr);
                dom.find('.' + classname + ' .nname').on('click', function () {
                    that.btnClick(ES.selctorDoc(this).parent().parent(), brushtype);
                });
                dom.find('.' + classname + ' .showHide').on('click', function () {
                    var childrenDom = ES.selctorDoc(this);
                    var targetA = childrenDom.parent().parent();
                    var cc = true;
                    if (childrenDom.hasClass("icon-biyan1")) {
                        childrenDom.removeClass("icon-biyan1");
                        childrenDom.addClass("icon-biyan");
                        cc = false;
                    } else {
                        childrenDom.addClass("icon-biyan1");
                        childrenDom.removeClass("icon-biyan");
                        cc = true;
                    }
                    that.event._dispatch('sequencelist.closeWho', {
                        show: cc,
                        uuid: targetA.attr('uuid'),
                        sId: targetA.attr('sId'),
                        bid: targetA.attr('bid'),
                        tooltype: targetA.attr('toolType'),
                        layerNumber: targetA.attr('layerInfo')
                    });
                });
                dom.find('.' + classname + ' .fillcon').on('click', function () {
                    var childrenDom = ES.selctorDoc(this);
                    var targetA = childrenDom.parent().parent();
                    var cc = true;
                    if (childrenDom.attr("cc") == "fill") {
                        childrenDom.removeClass("icon-danxinggoumian1");
                        childrenDom.addClass("icon-danxinggoumian");
                        childrenDom.attr("cc", "none");
                        cc = false;
                    } else {
                        childrenDom.attr("cc", "fill");
                        childrenDom.removeClass("icon-danxinggoumian");
                        childrenDom.addClass("icon-danxinggoumian1");
                        cc = true;
                    }
                    that.event._dispatch('sequencelist.fillWho', {
                        fill: cc,
                        uuid: targetA.attr('uuid'),
                        sId: targetA.attr('sId'),
                        bid: targetA.attr('bid'),
                        tooltype: targetA.attr('toolType'),
                        layerNumber: targetA.attr('layerInfo')
                    });
                });
                dom.find('.' + classname + ' .color_c').on('click', function () {
                    dom.find('.' + classname + ' .cul').show();
                });
                dom.find('.' + classname + ' .cul .color_li').on('click', function () {
                    dom.find('.' + classname + ' .cul').hide();
                    var nowTarget = ES.selctorDoc(this);
                    var targetA = nowTarget.parent();
                    var cc = nowTarget.attr('data');
                    dom.find('.' + classname + ' .color_c').css({
                        "background": '#' + cc
                    });
                    that.event._dispatch('sequencelist.changeColor', {
                        color: cc,
                        uuid: targetA.attr('uuid'),
                        sId: targetA.attr('sId'),
                        bid: targetA.attr('bid'),
                        layerNumber: targetA.attr('layerInfo')
                    });
                });
                dom.find('.' + classname + ' .del').on('click', function () {
                    var domA = ES.selctorDoc(this).parent().parent();
                    that.event._dispatch('sequencelist.del', {
                        toolType: dom.attr('toolType'),
                        type: brushtype,
                        uuid: domA.attr('uuid'),
                        sId: domA.attr('sId'),
                        layerNumber: domA.attr('layerInfo'),
                        bid: domA.attr('bid')
                    });
                });
                dom.find('.' + classname + ' .edit').on('click', function () {
                    that.btnClick(ES.selctorDoc(this).parent().parent(), brushtype);
                });
            } else {}
            //li.addClass('choose')

            // 已经标注过的序列，在其缩略图右上角需显示一个icon标记
            this.event._dispatch('serieslist.addMarkedIcon');
            this.initscrollgood();
        }
    }, {
        key: 'clickById',
        value: function clickById(value) {
            var dom = this.chooseData.element;
            var classname = 'one_' + value.uuid; //.layerNumber
            var li = dom.find('.nodeInfo .' + classname);
            li.find('.nname').click();
        }
    }, {
        key: 'btnClick',
        value: function btnClick(value, brushtype, childThis) {
            var dom = value;
            var hasclass = dom.hasClass('choose');
            //console.log(hasclass, 'hasclasshasclasshasclass')
            this.dom.find('.sequencelist .nodeInfo .choose').removeClass('choose');
            if (!hasclass) {
                dom.addClass('choose');
            }
            var data = {
                toolType: dom.attr('toolType'),
                type: brushtype,
                sId: dom.attr('sId'),
                niddtype: dom.attr('niddtype'),
                uuid: dom.hasClass('choose') ? dom.attr('uuid') : "",
                layerNumber: dom.attr('layerInfo'),
                bid: dom.hasClass('choose') ? dom.attr('bid') : ""
            };

            this.event._dispatch('sequencelist.niddclick', data);
        }
    }, {
        key: 'initsingle',
        value: function initsingle(id, imageAddress) {
            var that = this;
            var rid = "cdd" + Math.floor(new Date().getTime() * Math.random());
            this.loadAll[rid] = false;
            var str = '';
            if (id != 0) {
                str = "style='display:none'";
            } else {
                this.nowplayData = {
                    data: imageAddress,
                    num: 0
                };
            }
            var htmlstr = '<li ' + str + '  sid="' + imageAddress.studyId + '" datamain="' + imageAddress.major + '" class="wk" onmousemove="return false;" unselectable="on" onselectstart="return false;"><div class="head-name" data-num="' + id + '">\n        <p title="' + imageAddress.sequenceName + '"><span class="sequenceName">' + imageAddress.sequenceName + '</span></p><span class=\'showHide chooseIcon iconfont icon-biyan1\'></span></div>\n        <div class="nodeInfo">\n        <div class="nodeInfolist"></div>\n        </div>\n        <div class="cc" id="' + rid + '" oncontextmenu="return false" style="width: 110px;height: 110px; display:none;" unselectable="on" onselectstart="return false;" onmousedown="return false;"></div>\n        </li>';
            this.dom.find('.sequencelist').append(htmlstr);
            if (id == 0) {
                this.chooseData.element = this.dom.find('li[sid="' + imageAddress.studyId + '"]');
            }
            this.dom.find('.sequencelist .head-name .showHide').on('click', function (e) {
                var childrenDom = ES.selctorDoc(this);
                that.dom.find('.nodeInfolist .showHide').removeClass("icon-biyan1");
                var cc = true;
                if (childrenDom.hasClass("icon-biyan1")) {
                    childrenDom.removeClass("icon-biyan1");
                    childrenDom.addClass("icon-biyan");
                    that.dom.find('.nodeInfolist .showHide').removeClass("icon-biyan1");
                    that.dom.find('.nodeInfolist .showHide').addClass("icon-biyan");
                    cc = false;
                } else {
                    childrenDom.addClass("icon-biyan1");
                    childrenDom.removeClass("icon-biyan");
                    that.dom.find('.nodeInfolist .showHide').removeClass("icon-biyan");
                    that.dom.find('.nodeInfolist .showHide').addClass("icon-biyan1");
                    cc = true;
                }
                that.event._dispatch('sequencelist.allShowControl', {
                    show: cc
                });
            });
            this.dom.find('.sequencelist .head-name').eq(0).css({
                'background': '#95d4e2',
                'color': '#333'
            });
        }
    }, {
        key: 'resize',
        value: function resize() {
            this.initscrollgood();
        }
    }, {
        key: 'initscrollgood',
        value: function initscrollgood() {
            var ch = ES.selctorDoc(window).box().clientHeight - 220;
            this.dom.find('.nodeInfo').css({
                height: ch
            });
            if (this.myScrollgood) {
                this.myScrollgood.refresh();
                return;
            }
            var rid = 'aaaww_' + Math.floor(new Date().getTime() * Math.random());
            this.dom.find('.nodeInfo').attr('id', rid);
            this.myScrollgood = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }]);

    return sequencelist;
}(Interstellar.moduleBase);

//原型链一定要有的


module.exports = sequencelist;

/***/ }),

/***/ 681:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(682);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./sequencelist.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./sequencelist.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 682:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".sequencelist .wk {\n  width: 100%;\n  border-radius: 2px;\n  position: relative;\n}\n.sequencelist .wk .head-name {\n  width: 100%;\n  padding: 8px 0;\n}\n.sequencelist .wk .head-name p {\n  width: 130px;\n  font-size: 14px;\n  line-height: 30px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  text-align: center;\n  margin-left: 29px;\n  color: #fff;\n}\n.sequencelist .wk .head-name .sequenceName {\n  display: unset;\n}\n.sequencelist .wk .head-name .showHide {\n  position: absolute;\n  top: 16px;\n  left: 10px;\n  color: #fff;\n}\n.sequencelist .wk .cc {\n  width: 110px;\n  height: 110px;\n  margin-left: 5px;\n}\n.sequencelist .wk:hover .over {\n  display: block;\n}\n.sequencelist .nodeInfo {\n  overflow: hidden;\n  position: relative;\n}\n.sequencelist .nodeInfo .nodeInfolist > div {\n  width: 100%;\n  color: #71f9ff;\n  font-size: 12px;\n  line-height: 30px;\n}\n.sequencelist .nodeInfo .nodeInfolist > div > div {\n  text-align: left;\n  width: 160px;\n  margin-left: 10px;\n  position: relative;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .nname {\n  width: 67%;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  margin-left: 15px;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .nname span {\n  display: unset;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .nname .chooseIcon {\n  padding-left: 23px;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .fillcon {\n  position: absolute;\n  right: 10px;\n  top: 0;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .showHide {\n  position: absolute;\n  left: -5px;\n  top: 0;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .showHide .iconfont {\n  font-size: 12px;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .del {\n  position: absolute;\n  right: -5px;\n  top: 0;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .del .iconfont {\n  font-size: 12px;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .edit {\n  position: absolute;\n  right: 20px;\n  top: 0;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .edit .iconfont {\n  font-size: 12px;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .edit_color {\n  position: absolute;\n  right: 50px;\n  top: 1px;\n  width: 20px;\n  height: 20px;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .edit_color .color_c {\n  position: absolute;\n  top: 8px;\n  left: 27px;\n  width: 14px;\n  height: 14px;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .edit_color ul {\n  position: absolute;\n  top: 30px;\n  left: -20px;\n  z-index: 40;\n  background: #0c1e21;\n  display: none;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .edit_color ul .color_li {\n  height: 20px;\n  width: 80px;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .edit_color ul .color_li .cc {\n  width: 16px;\n  height: 16px;\n  margin-top: 2px;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .edit_color ul .color_li .textc {\n  margin-left: 5px;\n  font-size: 12px;\n  line-height: 20px;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .c3 {\n  background: #F8E71C;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .c1 {\n  background: #AA1113;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .c2 {\n  background: #F5A623;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .c4 {\n  background: #7ED321;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .c5 {\n  background: #4A90E2;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .c6 {\n  background: #50E3C2;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .c7 {\n  background: #8B572A;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .c8 {\n  background: #417505;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .c9 {\n  background: #B8E986;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .c10 {\n  background: #BD10E0;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .item-wrapper {\n  cursor: pointer;\n}\n.sequencelist .nodeInfo .nodeInfolist > div .group-name {\n  width: unset;\n  background: #0a2634;\n  color: yellow;\n  font-size: 10px;\n  margin-left: 0;\n  padding-left: 24px;\n}\n.sequencelist .nodeInfo .nodeInfolist > div.choose {\n  background: #095c85;\n  color: #fff;\n}\n.sort-wrapper {\n  width: 180px;\n  display: none;\n  position: absolute;\n  bottom: 10px;\n  color: #fff;\n}\n.sort-wrapper .sort-btn {\n  position: absolute;\n  bottom: 0;\n  right: 10px;\n  border: 1px solid #999;\n  background: #999;\n  color: #fff;\n  font-size: 12px;\n  padding: 2px 6px;\n  cursor: pointer;\n}\n", ""]);

// exports


/***/ }),

/***/ 683:
/***/ (function(module, exports) {

module.exports = "<div class=sequence-body> <ul class=sequencelist> </ul> <div class=sort-wrapper> <span class=sort-btn>按医生ID排序</span> </div> </div> ";

/***/ }),

/***/ 684:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(685);

/**/

var SeriesList = function (_Interstellar$moduleB) {
    _inherits(SeriesList, _Interstellar$moduleB);

    function SeriesList(app, dom, value, addMore) {
        _classCallCheck(this, SeriesList);

        var _this = _possibleConstructorReturn(this, (SeriesList.__proto__ || Object.getPrototypeOf(SeriesList)).call(this, app, dom, value, addMore));

        _this.html = __webpack_require__(687);
        _this.cornerstoneArray = {};
        return _this;
    }

    _createClass(SeriesList, [{
        key: 'complete',
        value: function complete() {
            this.dom.find('.serieslist').html('');
            this.class_c = __webpack_require__(639);
        }
    }, {
        key: 'setData',
        value: function setData(value, type) {
            var that = this;
            var data = this.listData = value; // this.initDate.data
            this.dom.find('.serieslist').html('');
            var htmlStr = "";
            var num = 0;
            for (var i in data) {
                //console.log(this.initsingle(data[i], type))
                data[i].index = num;
                htmlStr = htmlStr + this.initsingle(data[i], type);
                num++;
            }
            /*for (let i = 0; i < data.length; i++) {
                htmlStr = htmlStr + this.initsingle(data[i])
            }*/
            this.dom.find('.serieslist').append(htmlStr);
            this.dom.find('.serieslist').css({ 'width': num * 105 });
            if (type == "DCM") {
                for (var _i in data) {
                    console.log(data[_i].info.data.seriesInstanceUID);
                    console.log(data[_i].imgs[0]);
                    console.log('aaaaaaaaaa', this.dom.find('#img' + data[_i].index).dom[0].dom, Tool.changeToName(data[_i].imgs[0]));
                    new this.class_c({
                        element: this.dom.find('#img' + data[_i].index).dom[0].dom,
                        totalImage: 1,
                        imageAddress: [data[_i].imgs[0]],
                        index: Tool.changeToName(data[_i].imgs[0]) - 1,
                        type: 'dcm'
                    });
                }
            }
            this.dom.find('.serieslist .wk').on('click', function () {
                var dom = ES.selctorDoc(this);
                that.event._dispatch('serieslist.clcik', {
                    sid: dom.attr('sid')
                });
            });
            this.initscrollgood();
        }
    }, {
        key: 'initsingle',
        value: function initsingle(data, type) {
            var info = data.info.data;
            var imgInfo = data.imgs[0].replace('myImageLoader:', '');
            var htmlstr = '<li  title="' + info.seriesInstanceUID + '" sid="' + info.seriesInstanceUID + '" class="wk" onmousemove="return false;" unselectable="on" onselectstart="return false;">\n        <div class="imgContent" id="img' + data.index + '">';
            htmlstr += type == "DCM" ? "" : '<img src=' + imgInfo + ' />';
            htmlstr += '</div>\n        <div class="head-name"><p><span>\u603B\u5F20\u6570\uFF1A' + data.imgsTotal + '</span></p></div>';
            if (data.hasMarked) {
                // 已经标注过的序列，在其缩略图右上角需显示一个icon标记
                htmlstr = htmlstr + '<i class="iconfont icon-marked"></i>';
            }
            htmlstr = htmlstr + '</li>';
            return htmlstr;
        }
    }, {
        key: 'resize',
        value: function resize() {
            this.initscrollgood();
        }
    }, {
        key: 'initscrollgood',
        value: function initscrollgood() {
            if (this.myScrollgood) {
                this.myScrollgood.refresh();
                return;
            }
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            this.dom.find('.sequence-body').parent().attr('id', rid);
            this.myScrollgood = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                scrollX: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }]);

    return SeriesList;
}(Interstellar.moduleBase);

//原型链一定要有的


module.exports = SeriesList;

/***/ }),

/***/ 685:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(686);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./serieslist.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./serieslist.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 686:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".sequence-body-parent {\n  overflow: hidden;\n  display: inline-block;\n  width: auto;\n}\n.sequence-body-parent .sequence-body {\n  display: inline-block;\n  width: auto;\n}\n.sequence-body-parent .sequence-body .serieslist {\n  height: 100px;\n}\n.sequence-body-parent .sequence-body .serieslist .wk {\n  width: 100px;\n  border-radius: 2px;\n  position: relative;\n  float: left;\n  border: 1px solid #ccc;\n  box-sizing: border-box;\n  margin-right: 5px;\n}\n.sequence-body-parent .sequence-body .serieslist .wk .imgContent {\n  width: 70px;\n  height: 70px;\n  margin-left: 15px;\n  position: relative;\n  overflow: hidden;\n}\n.sequence-body-parent .sequence-body .serieslist .wk .imgContent img {\n  width: 100%;\n}\n.sequence-body-parent .sequence-body .serieslist .wk .head-name {\n  height: 24px;\n  width: 100%;\n  padding: 4px 0;\n}\n.sequence-body-parent .sequence-body .serieslist .wk .head-name p {\n  width: 100px;\n  font-size: 12px;\n  line-height: 24px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  text-align: center;\n  color: #fff;\n}\n.sequence-body-parent .sequence-body .serieslist .wk .head-name span {\n  display: unset;\n}\n.sequence-body-parent .sequence-body .serieslist .wk .cc {\n  width: 110px;\n  height: 110px;\n  margin-left: 5px;\n}\n.sequence-body-parent .sequence-body .serieslist .wk .icon-marked {\n  position: absolute;\n  top: 2px;\n  right: 2px;\n  color: #448E97;\n}\n.sequence-body-parent .sequence-body .serieslist .wk:hover .over {\n  display: block;\n}\n.sequence-body-parent .sequence-body .serieslist .nodeInfo {\n  overflow: hidden;\n  position: relative;\n}\n.sequence-body-parent .sequence-body .serieslist .nodeInfo .nodeInfolist > div {\n  width: 100%;\n  color: #71f9ff;\n  font-size: 12px;\n  line-height: 30px;\n}\n.sequence-body-parent .sequence-body .serieslist .nodeInfo .nodeInfolist > div > div {\n  text-align: left;\n  width: 160px;\n  margin-left: 10px;\n  position: relative;\n}\n.sequence-body-parent .sequence-body .serieslist .nodeInfo .nodeInfolist > div .nname {\n  width: 75%;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n.sequence-body-parent .sequence-body .serieslist .nodeInfo .nodeInfolist > div .nname span {\n  display: unset;\n}\n.sequence-body-parent .sequence-body .serieslist .nodeInfo .nodeInfolist > div .del {\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n.sequence-body-parent .sequence-body .serieslist .nodeInfo .nodeInfolist > div .del .iconfont {\n  font-size: 12px;\n}\n.sequence-body-parent .sequence-body .serieslist .nodeInfo .nodeInfolist > div .edit {\n  position: absolute;\n  right: 20px;\n  top: 0;\n}\n.sequence-body-parent .sequence-body .serieslist .nodeInfo .nodeInfolist > div .edit .iconfont {\n  font-size: 12px;\n}\n.sequence-body-parent .sequence-body .serieslist .nodeInfo .nodeInfolist > div.choose {\n  background: #095c85;\n  color: #fff;\n}\n", ""]);

// exports


/***/ }),

/***/ 687:
/***/ (function(module, exports) {

module.exports = "<div class=sequence-body-parent> <div class=sequence-body> <ul class=serieslist> </ul> </div> </div> ";

/***/ }),

/***/ 688:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var nidusinfo = function (_Interstellar$moduleB) {
    _inherits(nidusinfo, _Interstellar$moduleB);

    function nidusinfo(app, dom, value, addMode) {
        _classCallCheck(this, nidusinfo);

        var _this = _possibleConstructorReturn(this, (nidusinfo.__proto__ || Object.getPrototypeOf(nidusinfo)).call(this, app, dom, value, addMode));

        __webpack_require__(689);
        _this.html = __webpack_require__(691);
        _this.name = "nidusinfo";
        _this.chooseData = {};
        _this.doctorResult = {};
        return _this;
    }

    _createClass(nidusinfo, [{
        key: "complete",
        value: function complete() {
            this.btnEvent();
            this.myScrollgood = null;
            this.myScrollgood1 = null;
            this.resize();
        }
    }, {
        key: "btnEvent",
        value: function btnEvent() {
            var that = this;
            this.dom.find('.btn-cancle').on('click', function () {
                that.hide();
            });
        }
    }, {
        key: "clearRemark",
        value: function clearRemark() {
            this.dom.find('.nidusinfo .remark input').val('');
        }
    }, {
        key: "setData",
        value: function setData(value, name, report, modalneed) {
            var _this2 = this;

            //  console.log('aaaaaa============setData')
            this.chooseData = {};
            this.showReport = report ? report.showReport : null;
            console.log(report, 'reportreportreportreport', modalneed);
            if (this.showReport) {
                var reporta = __webpack_require__(692);
                var reportControl = this.app.loadModule(reporta, this.dom.find('.nidusinfo .report'), report);
            } else {
                this.dom.find('.report').html('');
            }

            if (report && report.remark) {
                if (this.app.parpam['type'].lastIndexOf("viewer") != -1) {
                    this.dom.find('.nidusinfo .remark input').attr('readonly', 'readonly');
                }
                this.dom.find('.nidusinfo .remark input').val(report.seriesRemark ? report.seriesRemark : '');
                this.dom.find('.nidusinfo .remark input').blur(function () {
                    _this2.remarkRes = _this2.dom.find('.nidusinfo .remark input').val();
                    _this2.event._dispatch('nidusinfo.remarkFinish');
                });
            } else {
                this.dom.find('.nidusinfo .remark').html('');
            }
            //console.log(modalneed, 'modalneedmodalneed', value.annotationItemResultList)
            var mark = window.location.hash.lastIndexOf('/doctorAudEdit/') == -1 && window.location.hash.lastIndexOf('/mark/') == -1 && window.location.hash.lastIndexOf('/markview/') == -1 && window.location.hash.lastIndexOf('/markpreview/') == -1 && window.location.hash.lastIndexOf('/markseriesview/') == -1;
            var dragCanvase = window.location.hash.lastIndexOf('/drapCanvas/') == -1 && window.location.hash.lastIndexOf('/drapCanvasCheck/') == -1 && window.location.hash.lastIndexOf('/drapCanvasView/') == -1;
            //console.log(mark, dragCanvase)
            if (mark && dragCanvase) {
                //console.log(value, modalneed)
                if (modalneed || JSON.stringify(value.annotationItemResultList) != "{}") {
                    var endData = {};
                    if (modalneed) {
                        for (var i in modalneed) {
                            // console.log(modalneed[i], i, value, endData)
                            endData = this.dealnidus(modalneed[i], i, value, endData);
                            //console.log(endData)
                        }
                    }
                    var doctorId = value.annotationItemResultList.doctorId;
                    if (doctorId) {
                        endData = this.dealnidus(value.annotationItemResultList.orginannotationItemResultList, doctorId, value, endData);
                        //  console.log(endData)
                    }
                    this.makeMarkScroe(endData, doctorId);
                }
            }
            //console.log('aaaa')
            this.dom.find('.config_content').html('');
            this.dom.find('.socrll .node-name').html(name);
            this.makeOption(value, 'config_content');
            this.resize();
        }

        //需要循环的数组，医生姓名，组件的基础信息，装换成为的对象

    }, {
        key: "dealnidus",
        value: function dealnidus(arr, doctorName, value, endData) {
            arr.map(function (item) {
                if (value[item.formComponentId]) {
                    if (!endData[item.formComponentId]) {
                        endData[item.formComponentId] = {
                            name: '',
                            res: []
                        };
                        endData[item.formComponentId].name = value[item.formComponentId].componentName;
                    }
                    var data = JSON.parse(JSON.stringify(value[item.formComponentId]));
                    data.doctorName = doctorName;
                    data.result = [];
                    data.codeResult = item.result;
                    if (item.result.lastIndexOf(',') != -1) {
                        item.result.split(',').map(function (res) {
                            data.result.push(data.data ? data.data[res] : res);
                        });
                    } else {
                        data.result = [data.data ? data.data[item.result] : item.result];
                    }
                    endData[item.formComponentId].res.push(data);
                }
            });
            return endData;
        }
    }, {
        key: "makeMarkScroe",
        value: function makeMarkScroe(value) {
            var doctorId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

            this.doctorResult = value;
            var str = '<div><ul class="mark_doctor_content">';
            // 未标注信息的要单独显示当前医生信息
            if (Object.keys(value).length === 0 && doctorId) {
                str += "<li><p class=\"niddle-z\"><span>\u533B\u751F\uFF1A" + doctorId + "</span></p></li>";
            }
            for (var i in value) {
                str += '<li>';
                str += '<p class="niddle-z"><span>' + value[i].name + '</span></p>';
                value[i].res.map(function (item) {
                    str += '<p><span>' + item.doctorId + '&nbsp;:&nbsp;</span>';
                    item.result.map(function (info) {
                        str += '<span>' + (info ? info : "未填") + '</span><br />';
                    });
                    str += '</p>';
                });
                str += '</li>';
            }
            str += '</ul></div>';
            this.dom.find('.config_content_all .socrll1').html(str);
            this.dom.find('.mark-score').removeClass('hide');
            this.myScrollgood1 = this.initScoll(this.dom.find('.mark-score .socrll1'));
            //that.dom.find('.mark-score').removeClass('hide')
        }
    }, {
        key: "makeOption",
        value: function makeOption(value, chooseDom) {
            var _this3 = this;

            var str = '<ul class="node_info">';
            var str1 = '<ul class="node_info">';
            // console.log(value, 'niddes')
            var paxu = {
                'c': [],
                'nc': []
                // console.log(value, 11111111111111111111111111111)
            };for (var key in value) {
                if (key !== 'annotationItemResultList') {
                    var is = value[key].type.lastIndexOf('checkbox') == -1 || value[key].type.lastIndexOf('radiobox') == -1;
                    paxu["" + (is ? 'nc' : 'c')][value[key].sequence] = value[key];
                }
            }
            paxu['c'].map(function (item) {
                if (item) {
                    str1 += _this3.returnHtmlDOM(item, item.id);
                    _this3.makeBtn(item, item.id, value.annotationItemResultList ? value.annotationItemResultList[item.id] : null);
                }
            });
            paxu['nc'].map(function (item) {
                //console.log(item)
                if (item) {
                    str += _this3.returnHtmlDOM(item, item.id);
                    _this3.makeBtn(item, item.id, value.annotationItemResultList ? value.annotationItemResultList[item.id] : null);
                }
            });
            str += '</ul>';
            str1 += '</ul>';
            this.dom.find('.' + chooseDom).html(str);
            this.dom.find('.' + chooseDom).append(str1);
            this.dom.find('.' + chooseDom).append('<div style="clear:both"></div>');
        }

        //对于生成好的组件绑定事件

    }, {
        key: "makeBtn",
        value: function makeBtn(value, i, data) {
            var _this4 = this;

            setTimeout(function () {
                _this4.toDoneCompend(value, i, data);
            }, 0);
        }
    }, {
        key: "toDoneCompend",
        value: function toDoneCompend(value, i, data) {
            var _this5 = this;

            var that = this;
            //console.log(value)
            switch (value.type) {
                case "select":
                    __webpack_require__.e/* require.ensure */(52/* duplicate */).then((function () {
                        var dropdown = __webpack_require__(638);
                        var woptions = [];
                        var firstSelect = null;
                        var componentData = JSON.parse(value.componentData);
                        componentData.map(function (item) {
                            woptions.push({
                                optionname: item.text,
                                val: item.text,
                                idx: item.code
                            });
                            if (data) {
                                if (data.result * 1 == item.code && data.result != "") {
                                    firstSelect = {
                                        optionname: item.text,
                                        val: item.text,
                                        idx: item.code
                                    };
                                }
                                if (data.result == "") {
                                    firstSelect = {
                                        optionname: "请选择",
                                        val: "请选择",
                                        idx: ''
                                    };
                                }
                            } else {
                                firstSelect = {
                                    optionname: "请选择",
                                    val: "请选择",
                                    idx: ''
                                };
                                if (value.componentParameter && JSON.parse(value.componentParameter)) {
                                    if (JSON.parse(value.componentParameter).isdefault) {
                                        firstSelect = woptions[0];
                                    }
                                }
                            }
                        });
                        var guojihua = that.app.loadModule(dropdown, that.dom.find('li[nodezd="' + i + '"]').firstchildren('.drop_down_content'), {
                            className: "node-select",
                            firstSelect: firstSelect ? firstSelect : woptions[0],
                            data: woptions
                        });
                        that.chooseData[guojihua.dom.parent().attr('select_id')] = {
                            formComponentId: value.componentId,
                            result: firstSelect ? firstSelect.idx : woptions[0].idx
                            // console.log(value.componentParameter, data, 'toDoneCompendtoDoneCompendtoDoneCompend')
                        };if (JSON.parse(value.componentParameter).isdefault && !data) {
                            if (window.location.hash.lastIndexOf('#!/markaudit/') == -1 || window.location.hash.lastIndexOf('#!/drapCanvasAudEdit/') == -1) {
                                that.event._dispatch('nidusinfo.finish');
                            } else {
                                that.event._dispatch('nidusinfo.finish', true);
                            }
                        }
                        guojihua.event._addEvent('dropDown.clear', function () {
                            //console.log(firstSelect, 'firstSelectfirstSelect')
                            var res = firstSelect ? firstSelect.idx : "";
                            that.chooseData[guojihua.dom.parent().attr('select_id')].result = res;
                            that.event._dispatch('nidusinfo.finish');
                        });
                        guojihua.event._addEvent('option.click', function (res) {
                            //console.log(guojihua.dom.parent().attr('select_id'), res.idx, that.chooseData)
                            if (guojihua.dom.parent().attr('select_id') == 'check_reslut' && res.idx * 1 == 0) {
                                //console.log('aaaaa')
                                that.syncResult();
                                //console.log(that.doctorResult)
                            }
                            that.chooseData[guojihua.dom.parent().attr('select_id')].result = res.idx;
                            that.event._dispatch('nidusinfo.finish');
                        });
                        if (that.app.parpam['type'].lastIndexOf("viewer") != -1) {
                            guojihua.disable();
                        }
                    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
                    break;
                case "text":
                    // console.log(value)
                    this.chooseData[value.id] = {
                        result: data ? data.result : "",
                        formComponentId: value.componentId
                    };
                    this.dom.find('li[nodezd="' + i + '"] input[name=input-text]').blur(function () {
                        _this5.chooseData[value.id].result = _this5.dom.find('li[nodezd="' + i + '"] input[name=input-text]').val();
                        _this5.event._dispatch('nidusinfo.finish');
                    });
                    this.dom.find('li[nodezd="' + i + '"] input[name=input-text]').val(data ? data.result : "");
                    if (this.app.parpam['type'].lastIndexOf("viewer") != -1) {
                        this.dom.find('li[nodezd="' + i + '"] input[name=input-text]').attr('readonly', 'readonly');
                    }
                    break;
                case "radiobox":
                    this.chooseData[value.id] = {
                        result: data ? data.result : "",
                        formComponentId: value.componentId
                    };
                    var componentData = JSON.parse(value.componentData);
                    if (JSON.parse(value.componentParameter).isdefault && !data) {}
                    if (data) {
                        componentData.map(function (item) {
                            if (data.result * 1 == item.code && data.result != "") {
                                _this5.dom.find('li[nodezd="' + i + '"]').find('div[code="' + item.code + '"]').addClass('choose');
                            }
                        });
                    } else {
                        if (value.componentParameter && JSON.parse(value.componentParameter)) {
                            if (JSON.parse(value.componentParameter).isdefault) {
                                //this.chooseData[value.id].result = componentData[0].code
                                this.dom.find('li[nodezd="' + i + '"]').find('div[code="' + componentData[0].code + '"]').addClass('choose');
                                this.event._dispatch('nidusinfo.finish');
                            }
                        }
                    }
                    if (this.app.parpam['type'].lastIndexOf("viewer") != -1) {
                        // this.dom.find('li[nodezd="' + i + '"] input[name=input-text]').attr('readonly', 'readonly')
                        return;
                    }
                    this.dom.find('li[nodezd="' + i + '"]').find('.radiobox').on('click', function () {
                        var dom = ES.selctorDoc(this);
                        var type = dom.attr('type');
                        var sid = dom.parent().parent().attr('select_id');
                        that.dom.find('li[nodezd="' + i + '"]').find('.radiobox').removeClass('choose');
                        that.chooseData[sid].result = dom.attr('code');
                        dom.addClass('choose');
                        that.event._dispatch('nidusinfo.finish');
                    });
                    break;
                default:
                    this.chooseData[value.id] = {
                        result: data ? ',' + data.result + ',' : "",
                        formComponentId: value.componentId
                    };
                    if (data) {
                        data.result.split(',').map(function (item) {
                            _this5.dom.find('li[nodezd="' + i + '"]').find('div[code="' + item + '"]').addClass("choose");
                        });
                    }
                    if (this.app.parpam['type'].lastIndexOf("viewer") != -1) {
                        // this.dom.find('li[nodezd="' + i + '"] input[name=input-text]').attr('readonly', 'readonly')
                        return;
                    }
                    this.dom.find('li[nodezd="' + i + '"]').find('.checkbox').on('click', function () {
                        var dom = ES.selctorDoc(this);
                        var type = dom.attr('type');
                        var sid = dom.parent().parent().attr('select_id');
                        if (dom.hasClass('choose')) {
                            dom.removeClass('choose');
                            //   console.log(that.chooseData[sid].result, 'one')
                            that.chooseData[sid].result = that.chooseData[sid].result ? that.chooseData[sid].result.replace(',' + dom.attr('code') + ',', ',') : "";
                            //  console.log(that.chooseData[sid].result, 'two')
                        } else {
                            if (type == "sp" && dom.attr('code') == -1) {
                                that.dom.find('li[nodezd="' + i + '"]').find('.checkbox').removeClass('choose');
                                that.chooseData[sid].result = ",-1,";
                            } else {
                                if (that.chooseData[sid].result == ",-1,") {
                                    that.dom.find('li[nodezd="' + i + '"]').find('div[code="-1"]').removeClass('choose');
                                    that.chooseData[sid].result = ',' + dom.attr('code') + ',';
                                } else {
                                    that.chooseData[sid].result = that.chooseData[sid].result ? that.chooseData[sid].result + dom.attr('code') + ',' : ',' + dom.attr('code') + ',';
                                }
                            }
                            dom.addClass('choose');
                        }
                        that.event._dispatch('nidusinfo.finish');
                    });
                    break;
            }
        }

        //同步结果

    }, {
        key: "syncResult",
        value: function syncResult() {
            var _this6 = this;

            //console.log(this.doctorResult)
            for (var i in this.doctorResult) {
                var orginComp = this.doctorResult[i];
                if (!this.chooseData[i]) {
                    this.chooseData[i] = {
                        annotationItemId: i,
                        formComponentId: i,
                        id: i,
                        result: ""
                    };
                }
                //console.log(this.chooseData[i])
                if ((!this.chooseData[i].result || this.chooseData[i].result == ',') && orginComp.res) {
                    var ctype = this.dom.find('li[nodezd="' + i + '"]').attr('ctype');
                    console.log(ctype, 'ctypectypectype');
                    switch (ctype) {
                        case "select":
                            console.log(this.doctorResult[i].res[0].result[0]);
                            this.chooseData[i].result = orginComp.res[0].codeResult;
                            this.dom.find('li[nodezd="' + i + '"]').firstchildren('.drop_down_content').find('.nowname').val(this.doctorResult[i].res[0].result[0]);
                            break;
                        case "text":
                            this.chooseData[i].result = orginComp.res[0].codeResult;
                            this.dom.find('li[nodezd="' + i + '"] input[name=input-text]').val(orginComp.res[0].codeResult);
                            break;
                        case "radiobox":
                            console.log(orginComp, 'orginComporginComporginComp');
                            this.chooseData[i].result = orginComp.res[0].codeResult;
                            this.dom.find('li[nodezd="' + i + '"] .radiobox').removeClass('choose');
                            this.dom.find('li[nodezd="' + i + '"]').find('div[code="' + orginComp.res[0].codeResult + '"]').addClass("choose");
                            break;
                        default:
                            this.chooseData[i].result = ',' + orginComp.res[0].codeResult + ',';
                            orginComp.res[0].codeResult.split(',').map(function (item) {
                                if (item) {
                                    _this6.dom.find('li[nodezd="' + i + '"]').find('div[code="' + item + '"]').addClass("choose");
                                }
                            });
                            break;
                    }
                }
            }
        }
    }, {
        key: "returnHtmlDOM",
        value: function returnHtmlDOM(value, name) {
            var className = value.type.lastIndexOf('checkbox') != -1 || value.type.lastIndexOf('radiobox') != -1 ? "select-content1" : 'select-content';
            var domstr = "<li ctype=\"" + value.type + "\" select_id=\"" + value.id + "\" class=\"" + className + "\" nodezd=\"" + name + "\"><p class=\"niddle-z\" title=\"" + value.name + "\">";
            if (value.optional) {
                domstr += "<span style=\"color:#f00\">*</span><span>" + value.name + "</span></p>";
            } else {
                domstr += "<span>" + value.name + "</span></p>";
            }
            switch (value.type) {
                case "select":
                    if (value.relation) {
                        domstr += '<div class="drop_down_content"></div>'; //<p style="border:1px solid #ccc;padding: 0; width: 90px;height:20px;" class="showD"></p>'
                    } else {
                        domstr += '<div class="drop_down_content"></div>'; //'<p style="border:1px solid #ccc;padding: 0; width: 90px;height:20px;" class="showD"></p>'
                    }
                    break;
                case "text":
                    domstr += '<input class="input-t" value="" name="input-text" style="margin-top:6px;"></input>';
                    break;
                case "textarea":
                    domstr += '<textarea class="input-tex" value="" name="input-text"></textarea>';
                    break;
                case "text-s":
                    domstr += '<input class="input-r" readonly="readonly" value=""></input>';
                    break;
                case "radiobox":
                    for (var j in value.data) {
                        domstr += "<div class=\"check-choose\"><div class=\"radiobox radio-box\" code=\"" + j + "\" data-ini=\"" + value.data[j] + "\"></div><span>" + value.data[j] + "</span></div>";
                    }
                    //domstr += '<input value=""></input>'
                    break;
                case "checkbox":
                    for (var j in value.data) {
                        domstr += "<div class=\"check-choose\"><div class=\"checkbox check-box\" code=\"" + j + "\" data-ini=\"" + value.data[j] + "\"></div><span>" + value.data[j] + "</span></div>";
                    }
                    //domstr += '<input value=""></input>'
                    break;
                case "checkbox-sp":
                    for (var j in value.data) {
                        domstr += "<div class=\"check-choose\"><div class=\"checkbox check-box\" type=\"sp\" code=\"" + j + "\" data-ini=\"" + value.data[j] + "\"></div><span>" + value.data[j] + "</span></div>";
                    }
                    //domstr += '<input value=""></input>'
                    break;
            }
            domstr += "</li>";
            return domstr;
        }
    }, {
        key: "resize",
        value: function resize() {
            var ch = ES.selctorDoc(window).box().clientHeight - 60 - 64;
            if (this.showReport) {
                ch = ch - 160;
            }
            this.dom.find('.mark-score .socrll1').css({
                'height': ch - 55
            });
            this.dom.find('.nidusinfo').firstchildren('.socrll').css({
                'height': ch - 35
            });
            if (this.myScrollgood) {
                this.myScrollgood.refresh();
                return;
            }
            if (this.myScrollgood1) {
                this.myScrollgood1.refresh();
                return;
            }
            //console.log(this.myScrollgood,'this.myScrollgoodthis.myScrollgood')
            this.myScrollgood = this.initScoll(this.dom.find('.nidusinfo .socrll'));
            this.myScrollgood1 = this.initScoll(this.dom.find('.mark-score .socrll1'));
        }
    }, {
        key: "initScoll",
        value: function initScoll(dom) {
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            dom.attr('id', rid);
            var val = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
            return val;
        }
    }, {
        key: "showMark",
        value: function showMark() {
            //this.dom.find('.mark-score').removeClass('hide')
            //this.dom.find('.btn-mark').attr('show', '1')
            //this.dom.find('.btn-mark').html('隐藏标注结果')
        }
    }, {
        key: "closeMark",
        value: function closeMark() {
            //this.dom.find('.mark-score').addClass('hide')
            //this.dom.find('.btn-mark').attr('show', '0')
            //this.dom.find('.btn-mark').html('显示标注结果')
        }
    }, {
        key: "showClose",
        value: function showClose() {
            this.dom.find('.btn_content').eq(0).removeClass('hide');
        }
    }, {
        key: "show",
        value: function show() {
            this.dom.show();
            //this.resize()
        }
    }, {
        key: "hide",
        value: function hide() {
            this.dom.hide();
        }
    }]);

    return nidusinfo;
}(Interstellar.moduleBase);

module.exports = nidusinfo;

/***/ }),

/***/ 689:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(690);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./nidusinfo.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./nidusinfo.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 690:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".nidusinfo {\n  padding: 10px;\n  background: #0a2634;\n  position: relative;\n}\n.nidusinfo .socrll1,\n.nidusinfo .socrll {\n  overflow: hidden;\n  position: relative;\n}\n.nidusinfo .remark .socrllr {\n  overflow: hidden;\n  position: relative;\n  height: 60px;\n}\n.nidusinfo .remark .socrllr .con {\n  border: 1px solid #fff;\n  padding: 0 5px;\n  background: transparent;\n  color: #fff;\n}\n.nidusinfo .remark .node-name {\n  color: #fff;\n  border-bottom: 1px solid #fff;\n  margin-bottom: 10px;\n  padding-bottom: 5px;\n}\n.nidusinfo .node-name {\n  color: #fff;\n  border-bottom: 1px solid #fff;\n  margin-bottom: 5px;\n  padding-bottom: 5px;\n}\n.nidusinfo .config_content_all .node_info,\n.nidusinfo .config_content .node_info {\n  clear: both;\n}\n.nidusinfo .config_content_all .node_info .checkbox,\n.nidusinfo .config_content .node_info .checkbox,\n.nidusinfo .config_content_all .node_info .radiobox,\n.nidusinfo .config_content .node_info .radiobox {\n  margin-right: 5px;\n}\n.nidusinfo .config_content_all .node_info .select-content,\n.nidusinfo .config_content .node_info .select-content {\n  float: left;\n  width: 120px;\n  margin-right: 5px;\n  font-size: 12px;\n  color: #fff;\n  line-height: 20px;\n  margin-bottom: 5px;\n  margin-left: 5px;\n}\n.nidusinfo .config_content_all .node_info .select-content .niddle-z,\n.nidusinfo .config_content .node_info .select-content .niddle-z {\n  width: 120px;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n.nidusinfo .config_content_all .node_info .select-content .niddle-z span,\n.nidusinfo .config_content .node_info .select-content .niddle-z span {\n  display: unset;\n  font-size: 14px;\n  font-weight: 600;\n}\n.nidusinfo .config_content_all .node_info .select-content .drop_down_content,\n.nidusinfo .config_content .node_info .select-content .drop_down_content {\n  margin-top: 5px;\n  height: 20px;\n}\n.nidusinfo .config_content_all .node_info .select-content .input-r,\n.nidusinfo .config_content .node_info .select-content .input-r,\n.nidusinfo .config_content_all .node_info .select-content .input-t,\n.nidusinfo .config_content .node_info .select-content .input-t {\n  width: 100%;\n  border: 1px solid #ccc;\n  margin-top: 5px;\n  border-radius: 4px;\n}\n.nidusinfo .config_content_all .node_info .select-content .input-tex,\n.nidusinfo .config_content .node_info .select-content .input-tex {\n  width: 100%;\n  height: 50px;\n  border: 1px solid #ccc;\n  margin-top: 5px;\n  border-radius: 4px;\n}\n.nidusinfo .config_content_all .node_info .select-content1,\n.nidusinfo .config_content .node_info .select-content1 {\n  width: 240px;\n  clear: both;\n  margin-right: 5px;\n  font-size: 12px;\n  color: #fff;\n  line-height: 20px;\n  margin-bottom: 5px;\n  margin-left: 5px;\n}\n.nidusinfo .config_content_all .node_info .select-content1 .check-choose,\n.nidusinfo .config_content .node_info .select-content1 .check-choose {\n  float: left;\n  width: 120px;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n.nidusinfo .config_content_all .node_info .select-content1 .niddle-z,\n.nidusinfo .config_content .node_info .select-content1 .niddle-z {\n  width: 120px;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  padding: 5px 0;\n}\n.nidusinfo .config_content_all .node_info .select-content1 .niddle-z span,\n.nidusinfo .config_content .node_info .select-content1 .niddle-z span {\n  display: unset;\n  font-size: 14px;\n  font-weight: 600;\n}\n.nidusinfo .config_content_all .node_info .select-content1 .drop_down_content,\n.nidusinfo .config_content .node_info .select-content1 .drop_down_content {\n  margin-top: 5px;\n  height: 20px;\n}\n.nidusinfo .config_content_all .node_info .select-content1 .input-r,\n.nidusinfo .config_content .node_info .select-content1 .input-r,\n.nidusinfo .config_content_all .node_info .select-content1 .input-t,\n.nidusinfo .config_content .node_info .select-content1 .input-t {\n  width: 100%;\n  border: 1px solid #ccc;\n  margin-top: 5px;\n  border-radius: 4px;\n}\n.nidusinfo .config_content_all .node_info .select-content1 .input-tex,\n.nidusinfo .config_content .node_info .select-content1 .input-tex {\n  width: 100%;\n  height: 50px;\n  border: 1px solid #ccc;\n  margin-top: 5px;\n  border-radius: 4px;\n}\n.nidusinfo .config_content_all {\n  width: 100%;\n  clear: both;\n  margin-right: 5px;\n  font-size: 12px;\n  color: #fff;\n  line-height: 20px;\n  margin-bottom: 5px;\n  margin-left: 5px;\n}\n.nidusinfo .config_content_all .mark_doctor_content li {\n  border-bottom: 1px solid #fff;\n}\n.nidusinfo .config_content_all .mark_doctor_content li .niddle-z {\n  width: 160px;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n.nidusinfo .config_content_all .mark_doctor_content li .niddle-z span {\n  display: unset;\n  font-size: 14px;\n  font-weight: 600;\n}\n.nidusinfo .btn_content {\n  float: right;\n  margin-left: 5px;\n  margin-bottom: 5px;\n  z-index: 20;\n  position: relative;\n}\n.nidusinfo .btn_content .btn {\n  width: 50px;\n  height: 20px;\n  color: #fff;\n  background: #448e97;\n  border-radius: 4px;\n  font-size: 12px;\n  text-align: center;\n  line-height: 20px;\n  border: 1px solid #448e97;\n  cursor: pointer;\n}\n.nidusinfo .btn_content .btn-mark {\n  width: 100px;\n}\n.nidusinfo .mark-score {\n  padding-top: 10px;\n  position: absolute;\n  background: #0a2634;\n  width: 60%;\n  top: 0;\n  left: -60%;\n}\n", ""]);

// exports


/***/ }),

/***/ 691:
/***/ (function(module, exports) {

module.exports = "<div class=nidusinfo> <div class=report></div> <p class=\"btn_content hide\"> <span class=\"btn btn-cancle\">关闭</span> </p> <div class=remark> <div class=socrllr> <div class=node-name>备注</div> <input type=text name=remark class=con> </div> </div> <div style=clear:both;height:1px></div> <div class=socrll> <div> <div class=node-name></div> <div class=config_content></div> </div> </div> <div class=\"mark-score hide\"> <div> <div class=node-name>标注医生结果</div> <div class=config_content_all> <div class=socrll1> <div><div></div></div> </div> </div> </div> </div> </div> ";

/***/ }),

/***/ 692:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var report = function (_Interstellar$moduleB) {
    _inherits(report, _Interstellar$moduleB);

    function report(app, dom, value, addMode) {
        _classCallCheck(this, report);

        var _this = _possibleConstructorReturn(this, (report.__proto__ || Object.getPrototypeOf(report)).call(this, app, dom, value, addMode));

        __webpack_require__(693);
        _this.html = __webpack_require__(695);
        _this.name = "report";
        _this.chooseData = {};
        return _this;
    }

    _createClass(report, [{
        key: "complete",
        value: function complete() {
            console.log(this.initDate);
            if (this.initDate.conclusion) {
                this.dom.find('.socrllr .con').eq(1).html('<p>' + this.initDate.conclusion + '</p>');
                this.newSorle(this.dom.find('.socrllr').eq(1));
            }
            if (this.initDate.finding) {
                this.dom.find('.socrllr .con').eq(0).html('<p>' + this.initDate.finding + '</p>');
                this.newSorle(this.dom.find('.socrllr').eq(0));
            }
        }
    }, {
        key: "newSorle",
        value: function newSorle(dom) {
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            dom.attr('id', rid);
            this.myScrollgood = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }]);

    return report;
}(Interstellar.moduleBase);

module.exports = report;

/***/ }),

/***/ 693:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(694);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./report.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./report.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 694:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".report {\n  background: #0a2634;\n  position: relative;\n}\n.report .socrllr {\n  overflow: hidden;\n  position: relative;\n  height: 90px;\n}\n.report .socrllr .con {\n  border: 1px solid #fff;\n  height: 60px;\n  padding: 0 5px;\n}\n.report .socrllr .con p {\n  color: #fff;\n}\n.report .node-name {\n  color: #fff;\n  border-bottom: 1px solid #fff;\n  margin-bottom: 5px;\n  padding-bottom: 5px;\n}\n", ""]);

// exports


/***/ }),

/***/ 695:
/***/ (function(module, exports) {

module.exports = "<div class=report> <div class=socrllr> <div class=node-name>检查所见</div> <div class=con> </div> </div> <div class=socrllr> <div class=node-name>诊断</div> <div class=con> </div> </div> </div>";

/***/ }),

/***/ 696:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(641);

/**/

var ctcornerstone = function (_ctcornerstone_base) {
    _inherits(ctcornerstone, _ctcornerstone_base);

    function ctcornerstone(app, dom, value, addMore) {
        _classCallCheck(this, ctcornerstone);

        return _possibleConstructorReturn(this, (ctcornerstone.__proto__ || Object.getPrototypeOf(ctcornerstone)).call(this, app, dom, value, addMore));
    }

    _createClass(ctcornerstone, [{
        key: "ctEvent",
        value: function ctEvent(id, imageAddress, data, total) {
            var that = this;

            this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.ImageRendered', function (value) {
                if (that.model.seriesInfo[that.cornerstoneArray[id].sId]) {
                    value.image.columnPixelSpacing = that.model.seriesInfo[that.cornerstoneArray[id].sId].info.data.columnPixelSpacing;
                    value.image.rowPixelSpacing = that.model.seriesInfo[that.cornerstoneArray[id].sId].info.data.rowPixelSpacing;
                }
                if (that.model.seriesInfo[that.cornerstoneArray[id].sId]) {
                    that.model.seriesInfo[that.cornerstoneArray[id].sId].info.data.column = value.image.columns;
                    that.model.seriesInfo[that.cornerstoneArray[id].sId].info.data.row = value.image.rows;
                }
                if (!that.initFrist[id]) {
                    that.initFrist[id] = true;
                    //console.log(value.image)
                    if ((value.image.rows > 1000 || value.image.columns > 1000) && value.image.rate < 1) {
                        that.defaultFunction("brushFanTe");
                        that.defaultFunction("");
                    }
                    that.event._dispatch('ctcornerstone.loadingfinish', {
                        sId: that.cornerstoneArray[id].sId
                    });
                }
                //console.log(that.cornerstoneArray[id].sId,that.model.seriesInfo,'-----------------------')
                if (that.model.seriesInfo[that.cornerstoneArray[id].sId]) {
                    if (that.model.seriesInfo[that.cornerstoneArray[id].sId].info.data.fileType == "DCM") {
                        that.showWWC(value.viewport, that.cornerstoneArray[id].sId, id);
                    }
                }
                if (that.baseLineOpen) {
                    if (that.nowLayNum(id) != Tool.changeToName(imageAddress[value.currentCount * 1], 'jpg')) {
                        that.makeBaseLine(that.cornerstoneArray[id].sId, Tool.changeToName(imageAddress[value.currentCount * 1], 'jpg'));
                    }
                    if (that.nowLine) {
                        if (that.nowLine[that.cornerstoneArray[id].sId]) {
                            var point = that.nowLine[that.cornerstoneArray[id].sId];
                            if (point.length != 0) {
                                var ctx = value.canvasContext;
                                ctx.beginPath();
                                ctx.mozImageSmoothingEnabled = false;
                                ctx.lineWidth = Math.floor(value.image.columns / 512);
                                ctx.strokeStyle = '#fff';
                                ctx.moveTo(point[0].x, point[0].y);
                                ctx.lineTo(point[1].x, point[1].y);
                                ctx.stroke();
                            }
                        }
                    }
                }

                if (that.crossOpen && !that.crossmove) {
                    that.calflow(id);
                }
                var who = ES.selctorDoc(value.element).parent();
                var nowId = id; // ES.selctorDoc(value.element).attr('id').replace('ct', '') * 1
                var timeD = value.xDate;
                var layers = Tool.changeToName(imageAddress[value.currentCount * 1], 'jpg');
                //that.dom.find('.layer').html(String(value.currentCount * 1 + 1) + '/' + total)
                that.dom.find('.ct' + id + ' .layer').html(layers + '/' + total);
                that.dom.find('.ct' + id + ' .sc').html(that.cornerstoneArray[id].getViewport().scale.toFixed(2));
                console.log(that.model.nidusChoose);
                if (that.nodeShow) {
                    var aa = cornerstone.pixelToCanvas(value.element, {
                        x: 0,
                        y: 0
                    });
                    var allmove = cornerstone.getViewport(value.element);
                    var brushInfoAll = that.brushManage.brushInfo[layers] ? that.brushManage.brushInfo[layers] : {};
                    var brushNodes = {};
                    for (var _i in brushInfoAll) {
                        var index = brushInfoAll[_i].sId.split('_').lastIndexOf(that.cornerstoneArray[id].sId);
                        if (index != -1 && brushInfoAll[_i].show) {
                            brushNodes[_i] = brushInfoAll[_i];
                        }
                    }
                    console.log(brushNodes, 'brushNodesbrushNodesbrushNodesbrushNodes', brushInfoAll);
                    for (var bid in brushNodes) {
                        if (brushNodes[bid].image) {
                            var image = brushInfoAll[bid].image;
                            /*if (value.image.rows > 1025 || value.image.columns > 1025) {
                                console.log('wwwwwwwwwwwwwwwww')
                                value.canvasContext.drawImage(image, 0, 0, image.width, image.height, aa.x, aa.y, image.width * allmove.scale, image.height * allmove.scale)
                            } else {*/
                            value.canvasContext.drawImage(brushInfoAll[bid].image, 0, 0);
                            //}
                            //value.canvasContext.drawImage(brushNodes[bid].image, 0, 0)
                        }
                    }
                    var nodeA = that.nodeInfo ? that.nodeInfo[layers] : [];
                    //console.log(value)
                    nodeA = nodeA ? nodeA : [];
                    var fliterNodes = nodeA.filter(function (item) {
                        return item.sId == that.cornerstoneArray[id].sId && item.show;
                    });
                    console.log(that.model.nidusChoose, 'that.model.nidusChoosethat.model.nidusChoosethat.model.nidusChoose', fliterNodes);

                    var _loop = function _loop() {
                        //console.log(nodeA[i])
                        var ctx = value.canvasContext;
                        ctx.beginPath();
                        ctx.mozImageSmoothingEnabled = false;
                        ctx.lineWidth = Math.floor(value.image.columns / 512);
                        ctx.strokeStyle = '#f00';
                        ctx.fillStyle = '#f00';
                        var hashText = false;
                        if (that.model.nidusChoose) {
                            if (that.model.nidusChoose.uuid == fliterNodes[i].nodeInfo.uuid || that.model.nidusChoose.id == fliterNodes[i].nodeInfo.uuid) {
                                ctx.strokeStyle = '#0ff';
                                ctx.fillStyle = '#0ff';
                                hashText = true;
                            }
                        }
                        var handles = fliterNodes[i].nodeInfo.handles;
                        console.log(fliterNodes[i]);
                        switch (fliterNodes[i].type) {
                            case "rectangleRoi":
                                var w = Math.abs(handles.end.x * 1 - handles.start.x * 1);
                                var h = Math.abs(handles.end.y * 1 - handles.start.y * 1);
                                var minx = Math.min(handles.end.x * 1, handles.start.x * 1);
                                var miny = Math.min(handles.end.y * 1, handles.start.y * 1);
                                console.log(aa, allmove);
                                /*if (value.image.rows > 1025 || value.image.columns > 1025) {
                                    ctx.strokeRect(aa.x + minx * allmove.scale, aa.y + miny * allmove.scale, w * allmove.scale, h * allmove.scale)
                                } else {*/
                                console.log(minx);
                                ctx.strokeRect(minx, miny, w, h);
                                //}
                                //ctx.strokeRect(minx, miny, w, h)
                                ctx.stroke();
                                break;
                            case "ellipticalRoi":
                                var rx = (handles.start.x * 1 + handles.end.x * 1) / 2;
                                var ry = (handles.start.y * 1 + handles.end.y * 1) / 2;
                                var r = Math.max(Math.abs((handles.end.x * 1 - handles.start.x * 1) / 2), Math.abs((handles.end.y * 1 - handles.start.y * 1) / 2));
                                /*if (value.image.rows > 1025 || value.image.columns > 1025) {
                                    ctx.arc(aa.x + rx * allmove.scale, aa.y + ry * allmove.scale, r * allmove.scale, 0, 2 * Math.PI, false);
                                } else {*/
                                ctx.arc(rx, ry, r, 0, 2 * Math.PI, false);
                                //}
                                //ctx.arc(rx, ry, r, 0, 2 * Math.PI, false);
                                ctx.stroke();
                                break;
                            case "length":
                                ctx.moveTo(handles.start.x, handles.start.y);
                                ctx.lineTo(handles.end.x, handles.end.y);
                                ctx.stroke();
                                break;
                            case "simpleAngle":
                                /*if (value.image.rows > 1025 || value.image.columns > 1025) {
                                    ctx.moveTo(aa.x + handles.start.x * allmove.scale, aa.y + handles.start.y * allmove.scale)
                                    ctx.lineTo(aa.x + handles.end.x * allmove.scale, aa.y + handles.end.y * allmove.scale)
                                } else {
                                    ctx.moveTo(handles.start.x, handles.start.y)
                                    ctx.lineTo(handles.end.x, handles.end.y)
                                }*/
                                ctx.moveTo(handles.start.x, handles.start.y);
                                ctx.lineTo(handles.middle.x, handles.middle.y);
                                ctx.lineTo(handles.end.x, handles.end.y);
                                ctx.stroke();
                                break;
                            case "cobb":
                                fliterNodes[i].nodeInfo.lineA.map(function (item) {
                                    ctx.moveTo(item.handles.start.x, item.handles.start.y);
                                    ctx.lineTo(item.handles.end.x, item.handles.end.y);
                                });
                                if (that.model.nidusChoose) {
                                    if ((that.model.nidusChoose.uuid == fliterNodes[i].nodeInfo.uuid || that.model.nidusChoose.id == fliterNodes[i].nodeInfo.uuid) && fliterNodes[i].nodeInfo.lineA.length == 2) {
                                        that.dom.find('.ct' + id + ' .cal').html('cobb角' + Tool.calAngel(fliterNodes[i].nodeInfo.lineA[0].handles, fliterNodes[i].nodeInfo.lineA[1].handles));
                                    }
                                }
                                ctx.stroke();
                                break;
                            case "alignment":
                                var fontSize = Math.floor(Math.max(that.model.seriesInfo[fliterNodes[i].sId].info.data.row, that.model.seriesInfo[fliterNodes[i].sId].info.data.column) / 1500 * 28);
                                fontSize = fontSize > 28 ? 28 : fontSize;
                                fontSize = fontSize < 16 ? 16 : fontSize;
                                ctx.font = 'bold ' + fontSize + 'px Arial';
                                ctx.moveTo(handles.start.x, handles.start.y);
                                ctx.lineTo(handles.middle.x, handles.middle.y);
                                ctx.lineTo(handles.middle1.x, handles.middle1.y);
                                ctx.lineTo(handles.end.x, handles.end.y);
                                ctx.lineTo(handles.start.x, handles.start.y);
                                ctx.stroke();
                                if (that.model.nidusChoose) {
                                    if (that.model.nidusChoose.uuid == fliterNodes[i].nodeInfo.uuid || that.model.nidusChoose.id == fliterNodes[i].nodeInfo.uuid) {
                                        var xA = {};
                                        for (i in handles) {
                                            xA[handles[i].x] = {
                                                p: handles[i],
                                                key: i
                                            };
                                        }
                                        var num = 0;
                                        for (j in xA) {
                                            num++;
                                            ctx.fillStyle = "#0f0";
                                            var showNum = void 0;
                                            switch (xA[j].key) {
                                                case "start":
                                                    showNum = 1;
                                                    break;
                                                case "middle":
                                                    showNum = 2;
                                                    break;
                                                case "middle1":
                                                    showNum = 3;
                                                    break;
                                                case "end":
                                                    showNum = 4;
                                                    break;
                                            }
                                            if (num <= 2) {
                                                ctx.fillText(showNum, xA[j].p.x - fontSize, xA[j].p.y);
                                            } else {
                                                ctx.fillText(showNum, xA[j].p.x + 5, xA[j].p.y);
                                            }
                                        }
                                    }
                                }
                                break;
                        }
                    };

                    for (var i = 0; i < fliterNodes.length; i++) {
                        var i;
                        var j;

                        _loop();
                    }
                }

                if (that.changeLayeIdTime == null) {
                    that.cornerstoneArray[id].progress.setPosBar(that.nowLayNum(id));
                }
            });

            this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.click', function (value) {
                console.log(that.controlename, value.e.detail, '=======');
                if (!that.controlename) {
                    var x = value.e.detail.currentPoints.image.x;
                    var y = value.e.detail.currentPoints.image.y;
                    var layersNum = that.nowLayNum(id);
                    var nodeA = that.nodeInfo ? that.nodeInfo[layersNum] : [];
                    nodeA = nodeA ? nodeA : [];
                    nodeA = nodeA.filter(function (item) {
                        return item.show;
                    });
                    var backId = void 0;
                    nodeA.map(function (item1) {
                        var nodeInfo = item1.nodeInfo;
                        if (nodeInfo.handles) {
                            if (nodeInfo.handles.start.x < x && nodeInfo.handles.end.x > x && nodeInfo.handles.start.y < y && nodeInfo.handles.end.y > y) {
                                backId = nodeInfo.backId || nodeInfo.uuid;
                                that.sequencelist.clickById({
                                    uuid: backId
                                });
                                return;
                            }
                        }
                        if (nodeInfo.pointA) {
                            var nx = [0, 0];
                            var ny = [0, 0];
                            nodeInfo.pointA.map(function (itptem) {
                                nx[0] = nx[0] < itptem.start.x ? nx[0] : itptem.start.x;
                                nx[1] = nx[1] > itptem.start.x ? nx[1] : itptem.start.x;
                                ny[0] = ny[0] < itptem.start.y ? ny[0] : itptem.start.y;
                                ny[1] = ny[1] > itptem.start.y ? ny[1] : itptem.start.y;
                            });
                            console.log(nx, ny);
                            if (nx[0] < x && nx[1] > x && ny[0] < y && ny[1] > y) {
                                backId = nodeInfo.backId || nodeInfo.uuid;
                                that.sequencelist.clickById({
                                    uuid: backId
                                });
                                return;
                            }
                            console.log(nodeInfo);
                        }
                    });
                    if (backId) {
                        return;
                    }
                    var brushInfoAll = that.brushManage.brushInfo[layersNum] ? that.brushManage.brushInfo[layersNum] : {};
                    var brushNodes = {};
                    console.log(brushInfoAll);
                    for (var i in brushInfoAll) {
                        if (brushInfoAll[i].sId) {
                            var index = brushInfoAll[i].sId.split('_').lastIndexOf(that.cornerstoneArray[id].sId);
                            if (index != -1) {
                                var dataNum = Math.floor(y) * value.e.detail.image.width + Math.floor(x);
                                console.log(dataNum);
                                if (brushInfoAll[i].orginimage.includes(dataNum)) {
                                    backId = brushInfoAll[i].backId || brushInfoAll[i].id;
                                    that.sequencelist.clickById({
                                        uuid: backId
                                    });
                                    return;
                                }
                                // brushInfoAll[i].orginimage
                            }
                        }
                    }
                    //console.log(that.nodeInfo, that.nowLayNum(id))
                    return;
                }
            });

            //bursh以外的标注事件
            this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.ModifiedFinsh', function (value) {});

            //获取标注信息
            this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.MeasurementEnd', function (value) {
                //console.log(value)

            });

            //bursh移动侦听
            this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.brushDown', function (value) {});
            this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.MouseDrag', function (value) {
                //console.log(value.e, 'MeasurementEndMeasurementEndMeasurementEnd')

            });

            //标注移除
            this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.MeasurementRemove', function (value) {});
        }
    }, {
        key: "setbrush",
        value: function setbrush(value) {
            console.log(value, '');
            if (value.imglist.length == 0) {
                this.event._dispatch('ctcornerstone.brushfirstload');
                return;
            }
            var that = this;
            var length = value.imglist.filter(function (item) {
                return item;
            }).length;
            var num = 0;
            var allload = 0;

            var _loop2 = function _loop2(i) {
                if (value.imglist[i]) {
                    if (num == 0) {
                        num = i;
                    }
                    /*console.log(num,Math.floor(length / 2))
                    if (num == Math.floor(length / 2)) {
                        this.sequencelist.setLayerInfo(value, num)
                    }*/
                    setTimeout(function () {
                        var img = new Image();
                        img.id = i;
                        img.crossOrigin = '';
                        img.onload = function () {
                            allload++;
                            that.brushManage.creatNewImage(this, value, {
                                width: this.width,
                                height: this.height
                            }, this.id);
                            if (allload == value.imglist.length) {
                                that.event._dispatch('ctcornerstone.brushfirstload');
                                that.gotoLayer(that.nowLayNum(), value.sId);
                            }
                        };
                        img.onerror = function () {
                            allload++;
                            if (allload == value.imglist.length) {
                                that.event._dispatch('ctcornerstone.brushfirstload');
                                that.gotoLayer(that.nowLayNum(), value.sId);
                            }
                        };
                        img.src = value.imglist[i];
                    }, 300);
                } else {
                    allload++;
                    if (allload == value.imglist.length) {
                        that.event._dispatch('ctcornerstone.brushfirstload');
                        that.gotoLayer(that.nowLayNum(), value.sId);
                    }
                }
            };

            for (var i = 0; i < value.imglist.length; i++) {
                _loop2(i);
            }
            this.sequencelist.setLayerInfo(value, num);
            //this.addVlaue = value
        }
    }]);

    return ctcornerstone;
}(ctcornerstone_base);

//原型链一定要有的


module.exports = ctcornerstone;

/***/ }),

/***/ 697:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(641);

/*
 
 
 */

var ctcornerstone = function (_ctcornerstone_base) {
    _inherits(ctcornerstone, _ctcornerstone_base);

    function ctcornerstone(app, dom, value, addMore) {
        _classCallCheck(this, ctcornerstone);

        var _this = _possibleConstructorReturn(this, (ctcornerstone.__proto__ || Object.getPrototypeOf(ctcornerstone)).call(this, app, dom, value, addMore));

        _this.freehand = __webpack_require__(698);
        //console.log(this.freehand)
        return _this;
    }

    _createClass(ctcornerstone, [{
        key: "ctEvent",
        value: function ctEvent(id, imageAddress, data, total) {
            var that = this;

            this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.ImageRendered', function (value) {
                //console.log(that.initFrist[id])
                if (that.model.seriesInfo[that.cornerstoneArray[id].sId]) {
                    value.image.columnPixelSpacing = that.model.seriesInfo[that.cornerstoneArray[id].sId].info.data.columnPixelSpacing;
                    value.image.rowPixelSpacing = that.model.seriesInfo[that.cornerstoneArray[id].sId].info.data.rowPixelSpacing;
                }
                if (that.model.seriesInfo[that.cornerstoneArray[id].sId]) {
                    that.model.seriesInfo[that.cornerstoneArray[id].sId].info.data.column = value.image.columns;
                    that.model.seriesInfo[that.cornerstoneArray[id].sId].info.data.row = value.image.rows;
                }
                //console.log(value, 'dksajldkjaksd')

                //console.log(that.model.seriesInfo[that.cornerstoneArray[id].sId], 'that.model.seriesInfo[that.cornerstoneArray[id].sId]')
                if (that.model.seriesInfo[that.cornerstoneArray[id].sId]) {
                    if (that.model.seriesInfo[that.cornerstoneArray[id].sId].info.data.fileType == "DCM") {
                        that.showWWC(value.viewport, that.cornerstoneArray[id].sId, id);
                    }
                }
                if (that.baseLineOpen) {
                    if (that.nowLayNum(id) != Tool.changeToName(imageAddress[value.currentCount * 1], 'jpg')) {
                        that.makeBaseLine(that.cornerstoneArray[id].sId, Tool.changeToName(imageAddress[value.currentCount * 1], 'jpg'));
                    }
                    if (that.nowLine) {
                        if (that.nowLine[that.cornerstoneArray[id].sId]) {
                            var point = that.nowLine[that.cornerstoneArray[id].sId];
                            if (point.length != 0) {
                                var ctx = value.canvasContext;
                                ctx.beginPath();
                                ctx.mozImageSmoothingEnabled = false;
                                ctx.lineWidth = Math.floor(value.image.columns / 512);
                                ctx.strokeStyle = '#f00';
                                ctx.moveTo(point[0].x, point[0].y);
                                ctx.lineTo(point[1].x, point[1].y);
                                ctx.stroke();
                            }
                        }
                    }
                }
                if (that.crossOpen && !that.crossmove) {
                    that.calflow(id);
                }

                var who = ES.selctorDoc(value.element).parent();
                var nowId = ES.selctorDoc(value.element).attr('id').replace('ct', '') * 1;
                var layers = Tool.changeToName(imageAddress[value.currentCount * 1], 'jpg');
                that.dom.find('.ct' + id + ' .layer').html(layers + '/' + total);
                that.dom.find('.ct' + id + ' .sc').html(that.cornerstoneArray[id].getViewport().scale.toFixed(2));
                var nodeA = that.nodeInfo ? that.nodeInfo[layers] : [];
                nodeA = nodeA ? nodeA : [];

                var fliterNodes = nodeA.filter(function (item) {
                    if (!item.show) {
                        var toolData = that.cornerstoneArray[id].getAllState();
                        toolData.map(function (items) {
                            if (items.uuid && items.uuid == item.nodeInfo.uuid) {
                                that.cornerstoneArray[id].clearSigleData(items.tooltype, items, true);
                            }
                        });
                    }
                    return item.sId == that.cornerstoneArray[id].sId && item.show;
                });
                var brushInfoAll = that.brushManage.brushInfo[layers] ? that.brushManage.brushInfo[layers] : {};
                var brushNodes = {};

                for (var i in brushInfoAll) {
                    if (brushInfoAll[i].sId) {
                        var index = brushInfoAll[i].sId.split('_').lastIndexOf(that.cornerstoneArray[id].sId);
                        if (index != -1 && brushInfoAll[i].show) {
                            brushNodes[i] = brushInfoAll[i];
                        }
                    }
                }
                // console.log(brushNodes, 'brushNodesbrushNodesbrushNodes', brushInfoAll)
                if (that.nodeShow) {
                    //console.log(brushInfoAll)
                    that.drawImg(brushNodes, value);
                }
                //return
                //console.log(fliterNodes, 'fliterNodesfliterNodesfliterNodesfliterNodes', nodeA)
                //that.dom.find('.ct' + id + ' .cal').html('')
                if (that.nodeShow) {

                    that.drawNode(fliterNodes, value);
                }
                var nowVO = that.cornerstoneArray[id].getViewport().voi;
                //console.log(that.nowWWC[id], 'that.nowWWC[id]that.nowWWC[id]that.nowWWC[id]', nowVO)
                if (that.nowWWC[id]) {
                    if (nowVO.windowCenter != that.nowWWC[id].c || nowVO.windowWidth != that.nowWWC[id].w) {
                        console.log(nowVO.windowCenter, nowVO.windowWidth, 'lungWindownlungWindownlungWindown');
                        that.lungWindown(nowVO.windowCenter, nowVO.windowWidth);
                        //that.lungWindown(that.nowWWC[id].c, that.nowWWC[id].d)
                    }
                }
                //console.log(that.cornerstoneArray[id].getViewport())
                if (that.controlename == 'brushFan' || that.controlename == 'earseFan' || that.controlename == 'brushFanTe') {
                    if (that.nowWWC[id]) {
                        //console.log(that.nowWWC, 'that.nowWWCthat.nowWWC')
                        that.lungWindown(that.nowWWC[id].c, that.nowWWC[id].w);
                    }
                }
                if (!that.initFrist[id]) {
                    that.initFrist[id] = true;
                    var nowCOlor = that.controlename;
                    if ((value.image.rows > 1000 || value.image.columns > 1000) && value.image.rate < 1) {
                        that.defaultFunction("brushFanTe");
                    }
                    that.defaultFunction("");
                    if (nowCOlor) {
                        that.defaultFunction(nowCOlor);
                    }
                    that.event._dispatch('ctcornerstone.loadingfinish', {
                        sId: that.cornerstoneArray[id].sId
                    });
                }
                if (that.changeLayeIdTime == null) {
                    // console.log(that.nowLayNum(id))
                    that.cornerstoneArray[id].progress.setPosBar(that.nowLayNum(id));
                }
            });

            //return
            //bursh以外的标注事件
            this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.ModifiedFinsh', function (value) {
                //  console.log(that.controlename)
                //console.log('Cornerstone_Class.ModifiedFinsh',value)
                if (that.controlename != "zoomFan" && that.controlename != "wlFan" && that.controlename != "restFan") {
                    var sid = that.cornerstoneArray[id].sId;
                    if (!that.model.seriesInfo[sid].needAnno) {
                        return;
                    }
                }
                // console.log(value.splitHandle.id, 'ModifiedFinshModifiedFinshModifiedFinshModifiedFinsh')
                //console.log(value)
                that.model.controlStauts.delete = true;
                var layer = that.getAlllayer(ES.selctorDoc(value.element).attr('id').replace('ct', '') * 1);
                //console.log(value)
                // return
                var element = that.cornerstoneArray[layer[layer.length - 1]];
                var e = value.e;
                //console.log(value.splitHandle.handles)
                var handles = value.splitHandle.handles;
                var sx = handles.start ? handles.start.x : handles.end.x;
                var sy = handles.start ? handles.start.y : handles.end.y;
                var ex = handles.end ? handles.end.x : handles.start.x;
                var ey = handles.end ? handles.end.y : handles.start.y;
                var startX = (sx + ex) / 2;
                var startY = (sy + ey) / 2;
                var maxd = Math.max(ey - sy, ex - sx);
                var mind = Math.max(ey - sy, ex - sx);
                //var position = that.getPosition(startX, startY)

                var moveAllElementData = {
                    "handles": handles,
                    "id": value.splitHandle.id,
                    "uuid": value.splitHandle.uuid,
                    "tooltype": e.detail.toolType,
                    "layerNumber": that.nowLayNum(id), // element.axialStack1.currentImageIdIndex + 1,
                    "diameter": mind,
                    "meanHu": value.splitHandle.meanStdDev ? value.splitHandle.meanStdDev.mean : 0,
                    "makeType": 0,
                    "diameterm": maxd.toFixed(2) //, //(xq * value.spsec).toFixed(2),
                    // "spliteV": JSON.stringify(value.splitHandle ? value.splitHandle : "")

                    //console.log('================', e.detail.toolType, value.splitHandle.uuid)
                };if (e.detail.toolType == 'simpleAngle') {
                    var handel = handles;
                    moveAllElementData.pointArray = [handel.start.x, handel.start.y, handel.middle.x, handel.middle.y, handel.end.x, handel.end.y].toString();
                    moveAllElementData.rangel = value.splitHandle.rAngle;
                }
                if (e.detail.toolType == 'alignment') {
                    var _handel = handles;
                    moveAllElementData.pointArray = [_handel.start.x, _handel.start.y, _handel.middle.x, _handel.middle.y, _handel.middle1.x, _handel.middle1.y, _handel.end.x, _handel.end.y].toString();
                    moveAllElementData.rangel = value.splitHandle.rAngle;
                }
                if (e.detail.toolType == 'rectangleRoi' || e.detail.toolType == 'ellipticalRoi' || e.detail.toolType == "length") {
                    //  console.log(value)
                    var _handel2 = handles;
                    moveAllElementData.pointArray = [_handel2.start.x, _handel2.start.y, null, null, _handel2.end.x, _handel2.end.y].toString();
                    moveAllElementData.rangel = 0;
                }

                //console.log(moveAllElementData,'moveAllElementDatamoveAllElementDatamoveAllElementData')
                that.cornerstoneArray[id].moveAllElementData = moveAllElementData;
            });

            //获取标注信息
            this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.MeasurementEnd', function (value) {
                //console.log(value,'valuevaluevalue')
                //画笔特殊情况，因为画笔只有面积的变化，他不大依赖点位信息，只有面积信息，所以所有的信息最后变成一张png图片
                console.log('=================', that.cornerstoneArray[id].moveAllElementData, that.tooltype);
                if (!value) {
                    return;
                }
                if (that.controlename != "zoomFan" && that.controlename != "wlFan" && that.controlename != "restFan") {
                    var sid = that.cornerstoneArray[id].sId;
                    if (!that.model.seriesInfo[sid].needAnno) {
                        return;
                    }
                }
                value.sId = that.cornerstoneArray[id].sId;
                that.model.controlStauts.delete = true;
                var layerNumber = that.nowLayNum(id); //that.cornerstoneArray[0].axialStack1.currentImageIdIndex + 1
                //console.log(that.controlename ,'that.controlename')
                if (that.controlename == 'brushFan' || that.controlename == 'earseFan') {
                    if (!that.model.nidusChoose) {
                        return;
                    }
                    var imageAnnotationToolType = that.model.nidusChoose.toolType.imageAnnotationToolType;
                    if (imageAnnotationToolType != 'MAGIC_STICK_SINGLE' && imageAnnotationToolType != 'POLYGON' && imageAnnotationToolType != 'QSELECT' && imageAnnotationToolType != 'REGION_PAINT' && imageAnnotationToolType != 'FREEHAND') {
                        that.brushId = null;
                        return;
                    }
                    if (imageAnnotationToolType == 'MAGIC_STICK_SINGLE' || imageAnnotationToolType == 'POLYGON' || imageAnnotationToolType == 'QSELECT' || imageAnnotationToolType == 'REGION_PAINT' || imageAnnotationToolType == 'FREEHAND') {
                        value.layerNumber = layerNumber;
                        console.log(that.model.nidusChoose);
                        value.backId = that.model.nidusChoose.bid;
                        value.toolType = value.toolType ? value.toolType : {
                            type: that.model.nidusChoose.toolType.imageAnnotationToolType
                        };
                        that.updateAllCanvas(value.sId);
                        //cornerstone.updateImage(that.cornerstoneArray[id].element)
                        that.event._dispatch('ctcornerstone.editBrush', value);
                        return;
                    }
                }
                //多边形
                if (that.controlename == 'polygonFan') {
                    /*let nowId = value.uuid // that.model.nidusChoose ? that.model.nidusChoose.uuid : value.uuid
                    if (that.model.nidusChoose) {
                        if (that.model.nidusChoose.toolType.imageAnnotation == that.tooltype.imageAnnotation) {
                            nowId = that.model.nidusChoose.uuid
                        }
                    }*/
                    // let imageAll = new Image()
                    // imageAll.onload = function() {
                    var brushInfo = that.brushManage.creatBrush(value.layerNumber, that.freehand.endPath(), value.uuid, that.cornerstoneArray[id].sId, {
                        w: that.freehand.canvas.width,
                        h: that.freehand.canvas.height
                    });

                    // console.log(that.brushManage.brushInfo)
                    that.cornerstoneArray[id].moveAllElementData.image = brushInfo.image;
                    if (that.model.nidusChoose) {
                        if (that.model.nidusChoose.toolType.imageAnnotationToolType == 'POLYGON') {
                            if (that.model.nidusChoose.toolType.imageAnnotation == that.tooltype.imageAnnotation) {
                                value.backId = that.model.nidusChoose.bid;
                                that.event._dispatch('ctcornerstone.editBrush', value);
                                that.updateAllCanvas(value.sId);
                                //cornerstone.updateImage(that.cornerstoneArray[id].element)
                                that.cornerstoneArray[id].moveAllElementData = null;
                                return;
                            }
                        }
                    }
                    value.show = true;
                    that.sequencelist.addNode(value);
                    that.event._dispatch('ctcornerstone.addImageResult', value);
                    that.updateAllCanvas(value.sId);
                    //cornerstone.updateImage(that.cornerstoneArray[id].element)
                    that.cornerstoneArray[id].moveAllElementData = null;
                    // }
                    //imageAll.src = that.freehand.endPath().src

                    return;
                }
                //自由画笔
                if (that.controlename == 'freehandFan') {

                    //let imageAll = new Image()
                    //imageAll.onload = function() {
                    var _brushInfo = that.brushManage.creatBrush(value.layerNumber, that.freehand.noneClosePath(), value.uuid, that.cornerstoneArray[id].sId, {
                        w: that.freehand.canvas.width,
                        h: that.freehand.canvas.height
                    });

                    // console.log(that.brushManage.brushInfo)
                    that.cornerstoneArray[id].moveAllElementData.image = _brushInfo.image;
                    if (that.model.nidusChoose) {
                        if (that.model.nidusChoose.toolType.imageAnnotationToolType == 'FREEHAND') {
                            if (that.model.nidusChoose.toolType.imageAnnotation == that.tooltype.imageAnnotation) {
                                value.backId = that.model.nidusChoose.bid;
                                that.event._dispatch('ctcornerstone.editBrush', value);
                                that.updateAllCanvas(value.sId);
                                //cornerstone.updateImage(that.cornerstoneArray[id].element)
                                that.cornerstoneArray[id].moveAllElementData = null;
                                return;
                            }
                        }
                    }
                    value.show = true;
                    that.sequencelist.addNode(value);
                    that.event._dispatch('ctcornerstone.addImageResult', value);
                    that.updateAllCanvas(value.sId);
                    //cornerstone.updateImage(that.cornerstoneArray[id].element)
                    that.cornerstoneArray[id].moveAllElementData = null;
                    //}
                    //imageAll.src = that.freehand.noneClosePath().src

                    return;
                }
                if (that.controlename == 'regionpaintFan') {
                    console.log(value);
                    if (that.model.nidusChoose) {
                        if (that.model.nidusChoose.toolType.imageAnnotationToolType == 'REGION_PAINT') {
                            if (that.model.nidusChoose.toolType.imageAnnotation == that.tooltype.imageAnnotation) {
                                value.backId = that.model.nidusChoose.bid;
                                that.event._dispatch('ctcornerstone.editBrush', value);
                                that.updateAllCanvas(value.sId);
                                //cornerstone.updateImage(that.cornerstoneArray[id].element)
                                that.cornerstoneArray[id].moveAllElementData = null;
                                return;
                            }
                        }
                    }
                    value.show = true;
                    that.sequencelist.addNode(value);
                    that.updateAllCanvas(value.sId);
                    //cornerstone.updateImage(that.cornerstoneArray[id].element)
                    that.event._dispatch('ctcornerstone.addImageResult', value);
                    that.cornerstoneArray[id].moveAllElementData = null;
                    return;
                }
                console.log(value, 'cobbFan', that.controlename, value.tooltype, value.uuid);
                console.log(cornerstoneTools.getToolState(that.cornerstoneArray[id].element, "length"));

                if (that.controlename == 'cobbFan' && !value.uuid) {
                    //let typeC = that.controlename.replace('Fan', '')
                    console.log(that.model.nidusChoose);
                    if (!that.model.nidusChoose) {
                        console.log('addd');
                        that.cobbAdd(value, layerNumber, id);
                        return;
                    }
                    if (that.model.nidusChoose && that.model.nidusChoose.type != 'cobb') {
                        console.log('addd');
                        that.cobbAdd(value, layerNumber, id);
                        return;
                    }
                    if (that.model.nidusChoose) {
                        var _data = that.drawInfo.getInfo(that.model.nidusChoose);
                        if (_data.lineA.length == 2) {
                            console.log('addd');
                            that.cobbAdd(value, layerNumber, id);
                            return;
                        }
                        if (_data.lineA.length < 2) {
                            //value.uuid = that.model.nidusChoose.uuid
                            that.setSpliceUUID(value, 'length', that.model.nidusChoose.uuid, id);
                            _data.lineA.push(value.handles);
                            that.dom.find('.ct' + id + ' .cal').html('cobb角' + Tool.calAngel(_data.lineA[0], _data.lineA[1]));
                            _data.setDataType = 'number';
                            that.event._dispatch('ctcornerstone.editNode', _data);
                            return;
                        }
                    }
                }
                if ((that.controlename == 'rectangleRoiFan' || that.controlename == 'ellipticalRoiFan' || that.controlename == 'simpleAngleFan' || that.controlename == 'lengthFan' || that.controlename == 'alignmentFan') && !value.uuid) {
                    console.log(that.controlename, 'that.controlenamethat.controlenamethat.controlenamethat.controlename');
                    var type = that.controlename.replace('Fan', '');
                    if (type == value.tooltype) {
                        if (!value.uuid) {
                            that.setSpliceUUID(value, type, value.id, id);
                        }
                        that.drawInfo.setInfo(value);
                        value.setDataType = 'number';
                        value.toolType = that.tooltype;
                        value.layerNumber = layerNumber;
                        value.show = true;
                        value.type = type;
                        //value.sId=that.cornerstoneArray[id].sId
                        that.sequencelist.addNode(value);
                        if (!that.nodeInfo) {
                            that.nodeInfo = {};
                        }
                        if (!that.nodeInfo[layerNumber]) {
                            that.nodeInfo[layerNumber] = [];
                        }
                        that.nodeInfo[layerNumber].push({
                            layerNumber: layerNumber,
                            type: value.tooltype,
                            nodeInfo: value,
                            sId: value.sId,
                            show: true
                        });
                        that.event._dispatch('ctcornerstone.addNode', value);
                        return;
                    }
                }
                if (value.tooltype) {
                    if ((value.tooltype == "rectangleRoi" || value.tooltype == 'ellipticalRoi' || value.tooltype == 'simpleAngle' || value.tooltype == 'length' || value.tooltype == "alignment") && value.uuid) {
                        //console.log(value, 'rectangleRoirectangleRoirectangleRoirectangleRoirectangleRoi', JSON.stringify(value))
                        that.drawInfo.setInfo(value);
                        if (value.type == "cobb") {
                            var nowData = that.cornerstoneArray[id].geSiglneState('length');
                            console.log(nowData);
                            if (nowData) {
                                value.lineA = [];
                                nowData.data.map(function (item) {
                                    if (item.uuid == value.uuid) {
                                        value.lineA.push(item.handles);
                                    }
                                });
                                if (value.lineA.length == 2) {
                                    that.dom.find('.ct' + id + ' .cal').html('cobb角:' + Tool.calAngel(value.lineA[0], value.lineA[1]));
                                }
                            }
                        }
                        value.imageAnnotationId = value.toolType.imageAnnotationId || value.imageAnnotationId;
                        value.imageAnnotationToolId = value.toolType.id || value.imageAnnotationToolId;
                        value.imageAnnotationToolType = value.toolType.type || value.imageAnnotationToolType;
                        value.imageAnnotationType = value.toolType.imageAnnotation || value.imageAnnotationType;
                        ///console.log(value, that.drawInfo.info)
                        value.setDataType = 'number';
                        that.event._dispatch('ctcornerstone.editNode', value);
                    }
                }
            });

            //bursh移动侦听
            this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.brushDown', function (value) {
                if (that.controlename == 'brushFan') {}
            });

            this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.click', function (value) {
                console.log(that.controlename, value.e.detail, '=======');
                if (!that.controlename || that.controlename == "zoomFan" || that.controlename == "wlFan") {
                    var x = value.e.detail.currentPoints.image.x;
                    var y = value.e.detail.currentPoints.image.y;
                    var layersNum = that.nowLayNum(id);
                    var nodeA = that.nodeInfo ? that.nodeInfo[layersNum] : [];
                    nodeA = nodeA ? nodeA : [];
                    nodeA = nodeA.filter(function (item) {
                        return item.show;
                    });
                    var backId = void 0;
                    nodeA.map(function (item1) {
                        var nodeInfo = item1.nodeInfo;
                        if (nodeInfo.handles) {
                            if (nodeInfo.handles.middle && nodeInfo.handles.middle1) {
                                var xmax = Math.max(nodeInfo.handles.start.x, nodeInfo.handles.end.x, nodeInfo.handles.middle.x);
                                var xmin = Math.max(nodeInfo.handles.start.x, nodeInfo.handles.end.x, nodeInfo.handles.middle.x);
                                var ymax = Math.max(nodeInfo.handles.start.y, nodeInfo.handles.end.y, nodeInfo.handles.middle.y);
                                var ymin = Math.max(nodeInfo.handles.start.y, nodeInfo.handles.end.y, nodeInfo.handles.middle.y);
                                if (xmin < x && xmax > x && ymin < y && ymax > y) {
                                    backId = nodeInfo.backId || nodeInfo.uuid;
                                    that.sequencelist.clickById({
                                        uuid: backId
                                    });
                                }
                                return;
                            }
                            if (nodeInfo.handles.start.x < x && nodeInfo.handles.end.x > x && nodeInfo.handles.start.y < y && nodeInfo.handles.end.y > y) {
                                backId = nodeInfo.backId || nodeInfo.uuid;
                                console.log('aaaaaaaaaaaa');
                                that.sequencelist.clickById({
                                    uuid: backId
                                });
                                return;
                            }
                        }
                        if (nodeInfo.pointA) {
                            var nx = [20000, 0];
                            var ny = [20000, 0];
                            nodeInfo.pointA.map(function (itptem) {
                                nx[0] = nx[0] < itptem.start.x ? nx[0] : itptem.start.x;
                                nx[1] = nx[1] > itptem.start.x ? nx[1] : itptem.start.x;
                                ny[0] = ny[0] < itptem.start.y ? ny[0] : itptem.start.y;
                                ny[1] = ny[1] > itptem.start.y ? ny[1] : itptem.start.y;
                            });
                            console.log(nx, ny);
                            if (nx[0] < x && nx[1] > x && ny[0] < y && ny[1] > y) {
                                backId = nodeInfo.backId || nodeInfo.uuid;
                                that.sequencelist.clickById({
                                    uuid: backId
                                });
                                return;
                            }
                            console.log(nodeInfo);
                        }
                    });
                    if (backId) {
                        return;
                    }
                    var brushInfoAll = that.brushManage.brushInfo[layersNum] ? that.brushManage.brushInfo[layersNum] : {};
                    var brushNodes = {};
                    console.log(brushInfoAll);
                    for (var i in brushInfoAll) {
                        if (brushInfoAll[i].sId) {
                            var index = brushInfoAll[i].sId.split('_').lastIndexOf(that.cornerstoneArray[id].sId);
                            if (index != -1) {
                                var dataNum = Math.floor(y) * value.e.detail.image.width + Math.floor(x);
                                console.log(dataNum);
                                if (brushInfoAll[i].orginimage.includes(dataNum)) {
                                    backId = brushInfoAll[i].backId || brushInfoAll[i].id;
                                    that.sequencelist.clickById({
                                        uuid: backId
                                    });
                                    return;
                                }
                                // brushInfoAll[i].orginimage
                            }
                        }
                    }
                    //console.log(that.nodeInfo, that.nowLayNum(id))
                    return;
                }
                if (that.controlename != "zoomFan" && that.controlename != "wlFan" && that.controlename != "restFan") {
                    var sid = that.cornerstoneArray[id].sId;
                    if (!that.model.seriesInfo[sid].needAnno) {
                        return;
                    }
                }
                if (that.controlename == 'magicStickSingleFan') {
                    //console.log(value)
                    value.layerNumber = that.nowLayNum(id);
                    value.toolType = that.tooltype;
                    value.id = value.uuid = Tool.guid();
                    value.type = that.controlename.replace('Fan', '');
                    value.imageAnnotationId = value.toolType.imageAnnotationId;
                    value.imageAnnotationToolId = value.toolType.id;
                    value.imageAnnotationToolType = value.toolType.type;
                    value.imageAnnotationType = value.toolType.imageAnnotation;
                    value.sId = that.cornerstoneArray[id].sId;
                    that.sequencelist.addNode(value);
                    var pianyi = [[0, 0], [0, 1], [1, 0], [1, 1]];
                    value.points = [];
                    for (var _i = 0; _i < 4; _i++) {
                        var _data2 = {
                            image: value.e.detail.image,
                            currentPoints: {
                                image: {
                                    x: value.e.detail.currentPoints.image.x + pianyi[_i][0],
                                    y: value.e.detail.currentPoints.image.y + pianyi[_i][1]
                                }
                            }
                        };
                        _data2.currentPoints.image.ct = that.model.getDicomValue(_data2).hu;
                        //console.log(data.currentPoints.image)
                        value.points.push(_data2.currentPoints.image);
                    }
                    value.ct = that.model.getDicomValue(value.e.detail);
                    that.event._dispatch('ctcornerstone.makeMagic', value);
                }
                if (that.controlename == "quickselectFan") {
                    if (that.model.nidusChoose) {
                        if (that.model.nidusChoose.sId != that.cornerstoneArray[id].sId) {
                            that.app.alert.show({
                                title: ' ',
                                msg: '选择的病灶跟当前选中序列不是同一序列，请取消病灶选中，或者切换序列',
                                close: true
                            });
                            return;
                        }
                    }
                    //let uuid = that.cornerstoneArray[id].moveAllElementData ? that.cornerstoneArray[id].moveAllElementData.uuid : ""
                    var uuid = ""; //that.model.nidusChoose ? that.model.nidusChoose.uuid : uuid
                    if (that.model.nidusChoose) {
                        if (that.model.nidusChoose.toolType.imageAnnotationToolType == 'QSELECT') {
                            if (that.model.nidusChoose.toolType.imageAnnotation == that.tooltype.imageAnnotation) {
                                uuid = that.model.nidusChoose.uuid;
                            }
                        }
                    }
                    //let points = that.model.floodFill_newRGB32(value.e.detail, that.cornerstoneTools_config.quickselect_config)
                    var points = that.model.makeCiclePoint(value.e.detail, that.cornerstoneTools_config.quickselect_config);
                    //console.log(value.e.detail.image.width)
                    var brushInfo = that.brushManage.setBrush(that.nowLayNum(id), points, 0, {
                        w: value.e.detail.image.width,
                        h: value.e.detail.image.height
                    }, uuid, that.cornerstoneArray[id].sId);
                    brushInfo.toolType = that.tooltype;
                    brushInfo.layerNumber = that.nowLayNum(id);
                    brushInfo.type = 'brush';
                    brushInfo.imageAnnotationId = that.tooltype.imageAnnotationId;
                    brushInfo.imageAnnotationToolId = that.tooltype.id;
                    brushInfo.imageAnnotationToolType = that.tooltype.type;
                    brushInfo.imageAnnotationType = that.tooltype.imageAnnotation;
                    brushInfo.sId = that.cornerstoneArray[id].sId;
                    brushInfo.show = true;
                    that.cornerstoneArray[id].moveAllElementData = brushInfo;
                    if (that.model.nidusChoose) {
                        if (that.model.nidusChoose.sId != that.cornerstoneArray[id].sId) {
                            return;
                        }
                        if (that.model.nidusChoose.toolType.imageAnnotationToolType == 'QSELECT') {
                            if (that.model.nidusChoose.toolType.imageAnnotation == that.tooltype.imageAnnotation) {
                                brushInfo.backId = that.model.nidusChoose.bid;
                                that.updateAllCanvas(that.cornerstoneArray[id].sId);
                                //cornerstone.updateImage(that.cornerstoneArray[id].element)
                                that.event._dispatch('ctcornerstone.editBrush', brushInfo);
                                that.cornerstoneArray[id].moveAllElementData = null;
                                return;
                            }
                        }
                    }
                    console.log(brushInfo, 'brushInfobrushInfobrushInfobrushInfobrushInfobrushInfobrushInfobrushInfo');
                    that.sequencelist.addNode(brushInfo);
                    that.updateAllCanvas(that.cornerstoneArray[id].sId);
                    //cornerstone.updateImage(that.cornerstoneArray[id].element)
                    that.event._dispatch('ctcornerstone.addImageResult', brushInfo);
                    that.cornerstoneArray[id].moveAllElementData = null;
                    //console.log(points)
                }
                if (that.controlename == 'alignmentFan' && !that.cornerstoneArray[id].moveAllElementData) {
                    //let typeC = that.controlename.replace('Fan', '')
                    return;
                    console.log(that.model.nidusChoose, that.tooltype);
                }
            });

            this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.mousedown', function (value) {
                console.log(that.controlename, that.cornerstoneArray[id].moveAllElementData, 'Cornerstone_Class.mousedown');
                if (that.controlename != "zoomFan" && that.controlename != "wlFan" && that.controlename != "restFan" && that.controlename) {
                    var sid = that.cornerstoneArray[id].sId;
                    if (!that.model.seriesInfo[sid].needAnno) {
                        that.app.alert.show({
                            title: ' ',
                            msg: '该序列不能标注',
                            close: true
                        });
                        return;
                    }
                }
                if (that.cornerstoneArray[id].moveAllElementData) {
                    if (that.cornerstoneArray[id].moveAllElementData.uuid && (that.cornerstoneArray[id].moveAllElementData.tooltype == "simpleAngle" || that.cornerstoneArray[id].moveAllElementData.tooltype == "alignment")) {
                        var avalue = that.drawInfo.getInfo(that.cornerstoneArray[id].moveAllElementData);
                        //console.log(avalue, that.cornerstoneArray[id].moveAllElementData)
                        if (avalue) {
                            avalue.handles = that.cornerstoneArray[id].moveAllElementData.handles;
                            avalue.imageAnnotationId = avalue.toolType.imageAnnotationId || avalue.imageAnnotationId;
                            avalue.imageAnnotationToolId = avalue.toolType.id || avalue.imageAnnotationToolId;
                            avalue.imageAnnotationToolType = avalue.toolType.type || avalue.imageAnnotationToolType;
                            avalue.imageAnnotationType = avalue.toolType.imageAnnotation || avalue.imageAnnotationType;
                            avalue.setDataType = 'number';
                            that.event._dispatch('ctcornerstone.editNode', avalue);
                            that.cornerstoneArray[id].moveAllElementData = null;
                            return;
                        }
                    }
                    if (!that.cornerstoneArray[id].moveAllElementData.uuid && (that.cornerstoneArray[id].moveAllElementData.tooltype == "simpleAngle" || that.cornerstoneArray[id].moveAllElementData.tooltype == "alignment")) {
                        var _value = that.cornerstoneArray[id].moveAllElementData;
                        var type = that.controlename.replace('Fan', '');
                        var layerNumber = that.nowLayNum(id);
                        that.setSpliceUUID(_value, type, _value.id, id);
                        that.drawInfo.setInfo(_value);
                        _value.setDataType = 'number';
                        _value.toolType = that.tooltype;
                        _value.layerNumber = layerNumber;
                        _value.show = true;
                        _value.type = type;
                        _value.sId = that.cornerstoneArray[id].sId;
                        that.sequencelist.addNode(_value);
                        if (!that.nodeInfo) {
                            that.nodeInfo = {};
                        }
                        if (!that.nodeInfo[layerNumber]) {
                            that.nodeInfo[layerNumber] = [];
                        }
                        that.nodeInfo[layerNumber].push({
                            layerNumber: layerNumber,
                            type: _value.tooltype,
                            nodeInfo: _value,
                            sId: _value.sId,
                            show: true
                        });
                        //that.cornerstoneArray[id].moveAllElementData = moveAllElementData
                        that.event._dispatch('ctcornerstone.addNode', _value);
                        return;
                    }
                }

                if (that.controlename == 'brushFan' || that.controlename == 'earseFan') {
                    if (!that.model.nidusChoose) {
                        //console.log(value.tooltype)
                        if (value.toolType) {
                            that.sequencelist.addNode(value);
                        } else {
                            that.app.alert.show({
                                title: ' ',
                                msg: '没有对应的病灶',
                                close: true
                            });
                        }
                        return;
                    }
                }
                //console.log(that.cornerstoneTools_config,that.controlename.replace('Fan','_config'),that.controlename)

                if (that.controlename == "polygonFan" || that.controlename == "freehandFan") {
                    var lineWidth = that.cornerstoneTools_config[that.controlename.replace('Fan', '_config')].lineWidth;
                    var e = value.e;
                    var wh = {
                        width: e.detail.image.width,
                        height: e.detail.image.height
                    };
                    console.log(that.cornerstoneArray[id].moveAllElementData, that.model.nidusChoose);
                    var image = void 0;
                    if (that.model.nidusChoose) {
                        if (that.model.nidusChoose.sId != that.cornerstoneArray[id].sId) {
                            that.app.alert.show({
                                title: ' ',
                                msg: '选择的病灶跟当前选中序列不是同一序列，请取消病灶选中，或者切换序列',
                                close: true
                            });
                            return;
                        }

                        var nowbackName = that.controlename.replace('Fan', '');
                        if (that.model.nidusChoose.toolType.imageAnnotationToolType == nowbackName.toUpperCase()) {
                            if (that.model.nidusChoose.toolType.imageAnnotation == that.tooltype.imageAnnotation) {
                                console.log('same');
                                //if (that.model.nidusChoose.toolType.imageAnnotationToolType == 'POLYGON') {
                                var _data3 = {
                                    layerNumber: that.nowLayNum(id),
                                    uuid: that.model.nidusChoose.uuid
                                };
                                var info = that.brushManage.getInfo(_data3);
                                image = info ? that.brushManage.getInfo(_data3).image : null;
                            } else {
                                image = null;
                            }
                        } else {
                            image = null;
                        }
                    } else {
                        that.freehand.pointEnd = null;
                        image = that.cornerstoneArray[id].moveAllElementData ? that.cornerstoneArray[id].moveAllElementData.image : null;
                    }
                    that.chooseHU = that.model.getDicomValue(value.e.detail);
                    console.log(lineWidth, e.detail);
                    that.freehand.creatPath(e.detail.startPoints.image, wh, image, lineWidth, that.controlename.replace('Fan', ''));
                }
            });

            this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.MouseDrag', function (value) {
                //console.log(value.e, 'MeasurementEndMeasurementEndMeasurementEnd', that.controlename)
                //console.log('aaaaaaaaaaa')
                if (value.e.mousePos == 2) {
                    return;
                }
                if (that.controlename != "zoomFan" && that.controlename != "wlFan" && that.controlename != "restFan") {
                    var sid = that.cornerstoneArray[id].sId;
                    if (!that.model.seriesInfo[sid].needAnno) {
                        return;
                    }
                }
                value.layerNumber = that.nowLayNum(id);
                var radius = that.cornerstoneTools_config.brush_config.radius; // cornerstoneTools.brush.getConfiguration().radius
                var lineWidth = that.cornerstoneTools_config.brush_config.lineWidth;
                //console.log(cornerstoneTools.brush.getConfiguration())
                var brushInfo = null;
                var uuid = that.cornerstoneArray[id].moveAllElementData ? that.cornerstoneArray[id].moveAllElementData.uuid : "";
                if (that.controlename == "polygonFan" || that.controlename == "freehandFan") {
                    if (that.model.nidusChoose) {
                        if (that.model.nidusChoose.sId != that.cornerstoneArray[id].sId) {
                            return;
                        }
                        if (that.model.nidusChoose.toolType.imageAnnotationToolType == that.controlename || that.model.nidusChoose.toolType.imageAnnotationToolType == that.controlename.replace('Fan', '').toUpperCase()) {
                            //if (that.model.nidusChoose.toolType.imageAnnotationToolType == 'polygonFan' || that.model.nidusChoose.toolType.imageAnnotationToolType == 'POLYGON') {
                            if (that.model.nidusChoose.toolType.imageAnnotation == that.tooltype.imageAnnotation) {
                                uuid = that.model.nidusChoose.uuid;
                            }
                        }
                    }
                    //console.log(that.findHU(value.e.detail), value.e.detail.currentPoints.image)
                    console.log(value.layerNumber, uuid);
                    var point = value.e.detail.currentPoints.image; //that.model.findHU(value.e.detail, that.cornerstoneTools_config.polygon_config, that.chooseHU) || value.e.detail.currentPoints.image
                    console.log(value.e.detail, 'value.e.detailvalue.e.detailvalue.e.detail');
                    //let imageAll = new Image()
                    //imageAll.onload = function() {
                    var _brushInfo2 = that.brushManage.creatBrush(value.layerNumber, that.freehand.drawPath(point), uuid, that.cornerstoneArray[id].sId, {
                        w: value.e.detail.image.width,
                        h: value.e.detail.image.height
                    });
                    _brushInfo2.toolType = that.tooltype;
                    _brushInfo2.layerNumber = value.layerNumber;
                    _brushInfo2.type = 'brush';
                    _brushInfo2.imageAnnotationId = that.tooltype.imageAnnotationId;
                    _brushInfo2.imageAnnotationToolId = that.tooltype.id;
                    _brushInfo2.imageAnnotationToolType = that.tooltype.type;
                    _brushInfo2.imageAnnotationType = that.tooltype.imageAnnotation;
                    _brushInfo2.show = true;
                    that.cornerstoneArray[id].moveAllElementData = _brushInfo2;
                    that.updateAllCanvas(that.cornerstoneArray[id].sId);
                    // }
                    //imageAll.src = that.freehand.drawPath(point).src

                    //cornerstone.updateImage(that.cornerstoneArray[id].element)
                    return;
                }

                if (that.controlename == "regionpaintFan") {
                    if (that.model.nidusChoose) {
                        //console.log(that.model.nidusChoose.toolType.imageAnnotationToolType)
                        if (that.model.nidusChoose.toolType.imageAnnotationToolType == 'regionpaintFan' || that.model.nidusChoose.toolType.imageAnnotationToolType == 'REGION_PAINT') {
                            if (that.model.nidusChoose.toolType.imageAnnotation == that.tooltype.imageAnnotation) {
                                uuid = that.model.nidusChoose.uuid;
                            }
                        }
                        if (that.model.nidusChoose.sId != that.cornerstoneArray[id].sId) {
                            return;
                        }
                        if (that.model.nidusChoose.sId != that.cornerstoneArray[id].sId) {
                            return;
                        }
                    }
                    //console.log(that.findHU(value.e.detail), value.e.detail.currentPoints.image)
                    // console.log(value.e.detail.image)
                    var _brushInfo3 = that.brushManage.setBrush(value.layerNumber, value.e.detail.currentPoints.image, radius, {
                        w: value.e.detail.image.width,
                        h: value.e.detail.image.height
                    }, uuid, that.cornerstoneArray[id].sId);
                    _brushInfo3.toolType = that.tooltype;
                    _brushInfo3.layerNumber = value.layerNumber;
                    _brushInfo3.type = 'brush';
                    _brushInfo3.imageAnnotationId = that.tooltype.imageAnnotationId;
                    _brushInfo3.imageAnnotationToolId = that.tooltype.id;
                    _brushInfo3.imageAnnotationToolType = that.tooltype.type;
                    _brushInfo3.imageAnnotationType = that.tooltype.imageAnnotation;
                    _brushInfo3.show = true;
                    that.cornerstoneArray[id].moveAllElementData = _brushInfo3;
                    that.updateAllCanvas(that.cornerstoneArray[id].sId);
                    //cornerstone.updateImage(that.cornerstoneArray[id].element)
                    return;
                }
                that.model.controlStauts.delete = true;
                if (that.app.parpam['type'] == 'preview' && that.model.nidusChoose) {
                    that.model.nidusChoose.bid = that.model.nidusChoose.uuid;
                }
                if (that.controlename == 'brushFan' || that.controlename == 'earseFan') {
                    if (!that.model.nidusChoose) {
                        return;
                    } else {
                        if (that.model.nidusChoose.sId != that.cornerstoneArray[id].sId) {
                            return;
                        }
                    }
                }
                //console.log('brushFan', that.controlename)
                if (that.controlename == 'brushFan') {
                    // that.nowImage =
                    uuid = that.model.nidusChoose ? that.model.nidusChoose.uuid : "";
                    if (that.model.nidusChoose.toolType.imageAnnotationToolType == "MAGIC_STICK_SINGLE") {
                        uuid = that.model.nidusChoose ? that.model.nidusChoose.bid : "";
                    }
                    brushInfo = that.brushManage.setBrush(value.layerNumber, value.e.detail.currentPoints.image, radius, {
                        w: value.e.detail.image.width,
                        h: value.e.detail.image.height
                    }, uuid, that.cornerstoneArray[id].sId);
                    that.updateAllCanvas(that.cornerstoneArray[id].sId);
                    //cornerstone.updateImage(that.cornerstoneArray[id].element)

                    //that.gotoLayer(that.nowLayNum())
                    // that.drawInfo.setBrush(value.layerNumber, value.e.detail.currentPoints.image, radius, value.e.detail.image.width)
                }
                if (that.controlename == 'earseFan') {
                    console.log('earseFan', '====================', value.layerNumber, uuid);
                    uuid = that.model.nidusChoose ? that.model.nidusChoose.uuid : "";
                    if (that.model.nidusChoose.toolType.imageAnnotationToolType == "MAGIC_STICK_SINGLE") {
                        uuid = that.model.nidusChoose ? that.model.nidusChoose.bid : "";
                    }
                    brushInfo = that.brushManage.removeBrush(value.layerNumber, value.e.detail.currentPoints.image, radius, {
                        w: value.e.detail.image.width,
                        h: value.e.detail.image.height
                    }, uuid);
                    that.updateAllCanvas(that.cornerstoneArray[id].sId);
                    //cornerstone.updateImage(that.cornerstoneArray[id].element)
                }

                that.cornerstoneArray[id].moveAllElementData = brushInfo;
            });

            //标注移除
            this.cornerstoneArray[id].event._addEvent('Cornerstone_Class.MeasurementRemove', function (value) {
                //console.log(that.model.controlStauts.delete)
                if (!that.model.controlStauts.delete) {
                    return;
                }
                console.log(value, 'MeasurementRemoveMeasurementRemoveMeasurementRemoveMeasurementRemove', that.cornerstoneArray[id].moveAllElementData);
                if (value.id) {
                    that.endDone(value, 0);
                }
            });
            ES.selctorDoc(window).on('mousemove', function (e) {
                //console.log(that.controlename)
                var cid = ES.selctorDoc(e.target).parent().attr('id');
                //console.log(cid)
                if (cid) {
                    cid = cid.replace('ct', '') * 1;
                    if (that.cornerstoneArray[cid]) {
                        that.mousemoveView = that.cornerstoneArray[cid].getViewport();
                        that.mousePos = {
                            x: e.pageX,
                            y: e.pageY
                        };
                    } else {
                        that.mousemoveView = null;
                        that.mousePos = null;
                    }
                }
                if (that.controlename == 'quickselectFan') {
                    if (cid != null) {
                        that.makeCicle();
                    }
                } else if (that.controlename == 'brushFan' || that.controlename == 'earseFan') {
                    if (cid != null) {
                        console.log('================');
                        that.makeBrushCicle();
                    }
                } else {
                    that.dom.find('.cicle').hide();
                }
            });
        }
    }, {
        key: "alignmentAdd",
        value: function alignmentAdd(value, id, who) {
            value.layerNumber = this.nowLayNum(id);
            this.drawInfo.setInfo(value);
            value.show = true;
            value.toolType = this.tooltype;
            value.id = value.uuid = Tool.guid();
            value.type = this.controlename.replace('Fan', '');
            value.imageAnnotationId = value.toolType.imageAnnotationId;
            value.imageAnnotationToolId = value.toolType.id;
            value.imageAnnotationToolType = value.toolType.type;
            value.imageAnnotationType = value.toolType.imageAnnotation;
            value.sId = this.cornerstoneArray[id].sId;
            if (value.e) {
                value.pointA = [{
                    start: {
                        x: value.e.detail.currentPoints.image.x,
                        y: value.e.detail.currentPoints.image.y
                    }
                }];
            } else {
                value.pointA = [{}];
            }
            console.log(value);
            value.handles = {
                start: {},
                end: {}
            };
            if (!this.nodeInfo) {
                this.nodeInfo = {};
            }
            if (!this.nodeInfo[value.layerNumber]) {
                this.nodeInfo[value.layerNumber] = [];
            }
            this.nodeInfo[value.layerNumber].push({
                layerNumber: value.layerNumber,
                type: value.type,
                nodeInfo: value,
                sId: value.sId,
                show: true
            });
            this.sequencelist.addNode(value);
            this.event._dispatch('ctcornerstone.addNode', value);
        }
    }, {
        key: "cobbAdd",
        value: function cobbAdd(value, layerNumber, id) {
            var typeC = this.controlename.replace('Fan', '');
            if (!value.uuid) {
                this.setSpliceUUID(value, 'length', value.id, id);
            }
            this.drawInfo.setInfo(value);
            value.setDataType = 'number';
            value.toolType = this.tooltype;
            value.layerNumber = layerNumber;
            value.type = typeC;
            value.lineA = [value.handles];
            value.show = true;
            //value.sId=that.cornerstoneArray[id].sId
            this.sequencelist.addNode(value);
            if (!this.nodeInfo) {
                this.nodeInfo = {};
            }
            if (!this.nodeInfo[layerNumber]) {
                this.nodeInfo[layerNumber] = [];
            }
            this.nodeInfo[layerNumber].push({
                layerNumber: layerNumber,
                type: value.tooltype,
                nodeInfo: value,
                sId: value.sId,
                show: true
            });
            this.event._dispatch('ctcornerstone.addNode', value);
        }
    }, {
        key: "makeCicle",
        value: function makeCicle() {
            if (!this.mousemoveView) {
                return;
            }
            var radius = this.cornerstoneTools_config.quickselect_config.deviation;
            var showRadius = Math.ceil(radius * this.mousemoveView.scale);
            this.dom.find('.cicle').hide();
            this.dom.find('.cicle').css({
                "width": showRadius,
                "height": showRadius,
                'border-radius': showRadius,
                'broder': '1px dashed #000',
                "background": 'transparent',
                "transform": "translate(" + (this.mousePos.x - showRadius / 2) + "px," + (this.mousePos.y - showRadius / 2) + "px)",
                "display": "block"
            });
        }
    }, {
        key: "makeBrushCicle",
        value: function makeBrushCicle() {
            if (!this.mousemoveView) {
                return;
            }
            var radius = this.cornerstoneTools_config.brush_config.radius;
            var showRadius = Math.ceil(radius * this.mousemoveView.scale);
            this.dom.find('.cicle').hide();
            this.dom.find('.cicle').css({
                "width": showRadius,
                "height": showRadius,
                'border-radius': showRadius,
                'broder': '0',
                "background": '#f00',
                "transform": "translate(" + (this.mousePos.x - showRadius / 2) + "px," + (this.mousePos.y - showRadius / 2) + "px)",
                "display": "block"
            });
        }

        //为了快速选择做的玩意

    }, {
        key: "updateAllCanvas",
        value: function updateAllCanvas(sId) {
            for (var i = 0; i < this.sceen; i++) {
                if (this.cornerstoneArray[i] && this.cornerstoneArray[i].sId == sId) {
                    //this.gotoLayer(this.nowLayNum(i),sId)
                    cornerstone.updateImage(this.cornerstoneArray[i].element);
                }
            }
        }
    }, {
        key: "drawImg",
        value: function drawImg(brushInfoAll, value) {
            var aa = cornerstone.pixelToCanvas(value.element, {
                x: 0,
                y: 0
            });
            var allmove = cornerstone.getViewport(value.element);
            for (var bid in brushInfoAll) {
                if (brushInfoAll[bid].image) {

                    var image = brushInfoAll[bid].image;
                    /*if (bid == this.model.nidusChoose.bid) {
                        imge = this.brushManage.resetColor(brushInfoAll[bid].image)
                    } else {
                        imge = brushInfoAll[bid].image
                    }*/
                    var w = brushInfoAll[bid].image.width;
                    var h = brushInfoAll[bid].image.height;
                    /*if (value.image.rows > 1025 || value.image.columns > 1025) {
                        value.canvasContext.drawImage(image, 0, 0, image.width, image.height, aa.x, aa.y, image.width * allmove.scale, image.height * allmove.scale)
                    } else {*/
                    value.canvasContext.drawImage(image, 0, 0);
                    //}
                    //value.canvasContext.drawImage(imge,0,0)
                    //console.log(imge,brushInfoAll[bid].image.width,brushInfoAll[bid].image.height,aa,allmove)
                    //}
                }
            }
        }
    }, {
        key: "drawNode",
        value: function drawNode(nodeA, value) {
            var _value$image = value.image,
                columnPixelSpacing = _value$image.columnPixelSpacing,
                rowPixelSpacing = _value$image.rowPixelSpacing;

            var all = 0;
            for (var i = 0; i < nodeA.length; i++) {
                //console.log(nodeA[i].type)
                var ntype = nodeA[i].type;
                //ctx.fillStyle = '#f00'
                switch (nodeA[i].type) {
                    case "cobb":
                        ntype = 'length';
                        break;
                }
                var drawneed = true;
                //  console.log(nodeA[i].type)

                var dataTool = cornerstoneTools.getToolState(value.element, ntype);
                if (dataTool) {
                    //  console.log(dataTool.data)
                    dataTool.data.map(function (item) {
                        // console.log(item, 'itemitem')
                        if (item.uuid == nodeA[i].nodeInfo.uuid) {
                            drawneed = false;
                            all++;
                        }
                    });
                }
                if (this.model.nidusChoose) {
                    if (this.model.nidusChoose.uuid == nodeA[i].nodeInfo.uuid || this.model.nidusChoose.id == nodeA[i].nodeInfo.uuid) {
                        var handles = nodeA[i].nodeInfo.handles;
                        var ctx = value.canvasContext;
                        ctx.lineWidth = 1;
                        ctx.strokeStyle = '#f00';
                        ctx.beginPath();
                        ctx.mozImageSmoothingEnabled = false;
                        if (nodeA[i].type == 'cobb') {
                            var tempLineA = nodeA[i].nodeInfo.lineA;
                            if (tempLineA.length == 2) {
                                var tempHandles = tempLineA[0].handles;
                                var _tempHandles$start = tempHandles.start,
                                    x1 = _tempHandles$start.x,
                                    y1 = _tempHandles$start.y;
                                var _tempHandles$end = tempHandles.end,
                                    x2 = _tempHandles$end.x,
                                    y2 = _tempHandles$end.y;

                                var spx = (x1 + x2) / 2;
                                var spy = (y1 + y2) / 2;
                                ctx.strokeRect(spx, spy, 2, 2);
                                this.dom.find('.' + value.element.id + ' .cal').html('cobb角' + Tool.calAngel(tempHandles, tempLineA[1].handles));
                            }
                        } else {
                            console.log(handles, 'handleshandleshandles');
                            var _handles$start = handles.start,
                                x3 = _handles$start.x,
                                y3 = _handles$start.y;
                            var _handles$end = handles.end,
                                x4 = _handles$end.x,
                                y4 = _handles$end.y;

                            ctx.moveTo((x3 * 1 + x4 * 1) / 2, y3 * 1 - 5);
                            ctx.lineTo((x3 * 1 + x4 * 1) / 2, y3 * 1 - 3);
                            ctx.lineTo((x3 * 1 + x4 * 1) / 2 + 2, y3 * 1 - 3);
                            ctx.lineTo((x3 * 1 + x4 * 1) / 2 + 2, y3 * 1 - 5);
                            ctx.lineTo((x3 * 1 + x4 * 1) / 2, y3 * 1 - 5);
                            ctx.stroke();
                            ctx.fillStyle = "#f00";
                            var handlesLen = handles.length;
                            if (!handlesLen) {
                                var dx = (x3 - x4) * (columnPixelSpacing || 1);
                                var dy = (y3 - y4) * (rowPixelSpacing || 1);
                                handlesLen = Math.sqrt(dx * dx + dy * dy).toFixed(2);
                            }
                            ctx.fillText(handlesLen, (x3 * 1 + x4 * 1) / 2, y3 * 1 - 5);
                            if (nodeA[i].type == 'alignment') {
                                this.drawAlignment(value, nodeA[i], '#f00');
                            }
                        }
                    }
                }

                //console.log(drawneed, all)
                //onsole.log(nodeA)
                /*if (nodeA[i].type == 'alignment') {
                    ctx.mozImageSmoothingEnabled = false;
                    nodeA[i].nodeInfo.pointA.map((itemPoint) => {
                        if (itemPoint.start) {
                            ctx.strokeRect(itemPoint.start.x, itemPoint.start.y, 3, 3)
                        }
                    })
                    ctx.stroke();
                }*/
                if (drawneed) {
                    //console.log(nodeA[i].nodeInfo)
                    if (nodeA[i].type == 'cobb') {
                        nodeA[i].nodeInfo.lineA.map(function (item) {
                            //console.log(item)
                            cornerstoneTools.addToolState(value.element, 'length', item);
                        });
                        return;
                    }
                    cornerstoneTools.addToolState(value.element, nodeA[i].type, nodeA[i].nodeInfo);
                    cornerstoneTools[nodeA[i].type].activate(value.element, 1);
                    this.defaultFunction(this.controlename);
                }
            }

            if (all == 0 && nodeA.length != 0) {
                this.defaultFunction(this.controlename);
            }
        }
    }, {
        key: "drawAlignment",
        value: function drawAlignment(value, nodeA, color, textshow) {
            console.log(nodeA);
            console.log(this.model.seriesInfo[nodeA.sId].info.data);
            var ctx = value.canvasContext;
            var fontSize = 8 + Math.floor(Math.max(this.model.seriesInfo[nodeA.sId].info.data.row, this.model.seriesInfo[nodeA.sId].info.data.column) / 256 * 6);
            fontSize = fontSize > 30 ? 30 : fontSize;
            //fontSize = fontSize < 16 ? 16 : fontSize
            ctx.font = 'bold ' + fontSize + 'px Arial';
            var numPos = 1;
            ctx.lineWidth = 1;
            ctx.strokeStyle = color;
            ctx.mozImageSmoothingEnabled = false;
            var xA = [];
            var rightA = [];
            for (var i in nodeA.nodeInfo.handles) {
                if (nodeA.nodeInfo.handles[i].x) {
                    if (xA.length == 0) {
                        xA.push({
                            p: nodeA.nodeInfo.handles[i],
                            key: i
                        });
                    } else {
                        var len = xA.length;
                        var aa = [];
                        var done = false;
                        for (var j = 0; j < len; j++) {
                            if (j == 0 && nodeA.nodeInfo.handles[i].x < xA[j].p.x) {
                                aa.push({
                                    p: nodeA.nodeInfo.handles[i],
                                    key: i
                                });
                                done = true;
                            }
                            aa.push(xA[j]);
                            //console.log(nodeA.nodeInfo.handles[i])
                            if (xA[j + 1] && nodeA.nodeInfo.handles[i].x > xA[j].p.x && nodeA.nodeInfo.handles[i].x < xA[j + 1].p.x) {
                                console.log(i);
                                if (!done) {
                                    aa.push({
                                        p: nodeA.nodeInfo.handles[i],
                                        key: i
                                    });
                                    done = true;
                                }
                            }
                            if (!xA[j + 1]) {
                                if (!done) {
                                    aa.push({
                                        p: nodeA.nodeInfo.handles[i],
                                        key: i
                                    });
                                }
                            }
                        }
                        xA = aa;
                    }
                }
            }
            console.log(xA);
            var num = 0;
            var showNum = void 0;
            for (var j = 0; j < 4; j++) {
                ctx.fillStyle = "#0f0";
                switch (xA[j].key) {
                    case "start":
                        showNum = 1;
                        break;
                    case "middle":
                        showNum = 2;
                        break;
                    case "middle1":
                        showNum = 3;
                        break;
                    case "end":
                        showNum = 4;
                        break;
                }
                if (j < 2) {
                    ctx.fillText(showNum, xA[j].p.x - fontSize, xA[j].p.y);
                } else {
                    ctx.fillText(showNum, xA[j].p.x + 5, xA[j].p.y);
                }
            }
            /*for (var j in xA) {
                num++
                ctx.fillStyle = "#0f0"
                let showNum
                console.log(xA[j])
                switch (xA[j].key) {
                    case "start":
                        showNum = 1
                        break
                    case "middle":
                        showNum = 2
                        break
                    case "middle1":
                        showNum = 3
                        break
                    case "end":
                        showNum = 4
                        break
                }
                if (num <= 2) {
                    ctx.fillText(showNum, xA[j].p.x - fontSize, xA[j].p.y)
                } else {
                    ctx.fillText(showNum, xA[j].p.x + 5, xA[j].p.y)
                }
             }*/
            /*nodeA.nodeInfo.pointA.map((itemPoint) => {
                if (itemPoint.start) {
                    ctx.strokeRect(itemPoint.start.x, itemPoint.start.y, 3, 3)
                    if (textshow) {
                        ctx.fillStyle = "#0f0"
                        ctx.fillText(numPos, itemPoint.start.x + 5, itemPoint.start.y)
                    }
                }
                numPos++
            })*/

            //ctx.stroke();
        }
    }]);

    return ctcornerstone;
}(ctcornerstone_base);

//原型链一定要有的


module.exports = ctcornerstone;

/***/ }),

/***/ 698:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var freedhand = function () {
    function freedhand() {
        _classCallCheck(this, freedhand);
    }

    _createClass(freedhand, [{
        key: "creatPath",
        value: function creatPath(point, wh, img, lw, type) {
            console.log(wh);
            wh = wh ? wh : {
                width: 512,
                height: 512
            };
            this.craetCanvas(wh, lw);
            if (img) {
                this.ctx.drawImage(img, 0, 0);
            }
            this.type = type;
            this.ctx.beginPath();
            if (type == "freehand") {
                if (this.pointEnd) {
                    this.ctx.moveTo(this.pointEnd.x, this.pointEnd.y);
                    this.ctx.lineTo(point.x, point.y);
                } else {
                    this.ctx.moveTo(point.x, point.y);
                }
                //let imgData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height)
                /*let pointChange = []
                let d = -1
                for (let i = 0; i < imgData.data.length / 4; i++) {
                    if (imgData.data[i * 4 + 1] + imgData.data[i * 4] + imgData.data[i * 4 + 2] > 128) {
                        let y1 = Math.floor(i / this.canvas.width)
                        let x1 = Math.floor(i % this.canvas.width)
                        let d1 = (x1 - Math.round(point.x)) * (x1 - Math.round(point.x)) + (y1 - Math.round(point.y)) * (y1 - Math.round(point.y))
                        if (d == -1) {
                            this.pointChange[0] = {
                                x: x1,
                                y: y1
                            }
                            d = d1
                        }
                        if (d1 < d) {
                            this.pointChange[0] = {
                                x: x1,
                                y: y1
                            }
                            d = d1
                        }
                    }
                }
                if (this.pointChange.length == 0) {
                    this.pointChange.push({
                        x: Math.round(point.x),
                        y: Math.round(point.y)
                    })
                }*/
            } else {
                this.ctx.moveTo(point.x, point.y);
            }
        }
    }, {
        key: "drawPath",
        value: function drawPath(point) {
            var arr = [];
            this.pointEnd = point;
            this.ctx.lineTo(point.x, point.y);
            this.ctx.stroke();

            var imgData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
            for (var i = 0; i < imgData.data.length / 4; i++) {
                //imgData.data[i * 4 + 3] = 0
                var cd = imgData.data[i * 4 + 1] + imgData.data[i * 4] + imgData.data[i * 4 + 2];
                if (imgData.data[i * 4 + 3] != 0) {
                    if (this.ctx.lineWidth == 1 && this.type != "polygon") {
                        this.donePoint(cd, imgData, i, arr);
                    } else {
                        if (cd > 128) {
                            arr.push(i);
                            // imgData.data[i * 4 + 3] = 128
                        }
                    }
                }
            }
            console.log();
            if (this.ctx.lineWidth == 1 && this.type != "polygon") {
                this.arrmove(arr, imgData);
            }
            //this.arrmove(arr,imgData)
            return arr; //image
        }
    }, {
        key: "arrmove",
        value: function arrmove(arr, imgData) {
            var newArr = [];
            for (var i = 0; i < arr.length; i++) {
                var dataIndex = arr[i] - this.canvas.width;
                //console.log(arr.lastIndexOf(dataIndex),dataIndex)
                if (arr.lastIndexOf(dataIndex) == -1) {} else {
                    newArr.push(arr[i]);
                }
            }
            for (var j = 0; j < newArr.length; j++) {
                var _dataIndex = newArr[j] - this.canvas.width;
                //console.log(arr.lastIndexOf(dataIndex),dataIndex)
                if (newArr.lastIndexOf(_dataIndex) == -1) {} else {
                    arr.push(newArr[i]);
                }
            }
            newArr = null;
            //arr=[]
            //arr=newArr
        }
    }, {
        key: "donePoint",
        value: function donePoint(data, imgData, i, arr) {
            if (data > 128 && imgData.data[(i - 1) * 4 + 3] == 0) {
                arr.push(i);
            }
            if (data > 128 && imgData.data[(i - 1) * 4 + 3] != 0 && imgData.data[(i + 1) * 4 + 3] != 0 && imgData.data[(i + this.canvas.width) * 4 + 3] == 0) {
                arr.push(i);
            }
            if (data > 128 && imgData.data[(i + this.canvas.width - 1) * 4 + 3] != 0) {
                arr.push(i + this.canvas.width - 1);
            }
        }
    }, {
        key: "noneClosePath",
        value: function noneClosePath() {
            var arr = [];
            var imgData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
            for (var i = 0; i < imgData.data.length / 4; i++) {
                //imgData.data[i * 4 + 3] = 0
                var cd = imgData.data[i * 4 + 1] + imgData.data[i * 4] + imgData.data[i * 4 + 2];
                if (this.ctx.lineWidth == 1) {
                    this.donePoint(cd, imgData, i, arr);
                } else {
                    if (cd > 128) {
                        arr.push(i);
                        // imgData.data[i * 4 + 3] = 128
                    }
                }
            }
            if (this.ctx.lineWidth == 1) {
                this.arrmove(arr, imgData);
            }
            imgData = null;
            return arr; //image
        }
    }, {
        key: "endPath",
        value: function endPath() {
            this.ctx.closePath();
            this.ctx.fill();
            this.ctx.stroke();
            var arr = [];
            var imgData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
            for (var i = 0; i < imgData.data.length / 4; i++) {
                imgData.data[i * 4 + 3] = 0;
                if (imgData.data[i * 4 + 1] > 128) {
                    arr.push(i);
                    //imgData.data[i * 4 + 3] = 128
                }
            }
            //this.ctx.putImageData(imgData, 0, 0)
            //var image = new Image();
            //image.src = this.canvas.toDataURL("image/png");
            return arr; //image
        }
    }, {
        key: "craetCanvas",
        value: function craetCanvas(wh, lw) {
            if (this.canvas) {
                this.ctx = null;
                this.canvas = null;
            }
            this.canvas = document.createElement("canvas");
            this.canvas.width = wh.width;
            this.canvas.height = wh.height;
            this.ctx = this.canvas.getContext("2d");
            this.ctx.lineWidth = lw ? lw : 1;
            this.ctx.strokeStyle = "rgba(0,200,0,1)";
            this.ctx.fillStyle = "rgba(0,200,0,0.5)";
        }
    }]);

    return freedhand;
}();

//原型链一定要有的


module.exports = new freedhand();

/***/ }),

/***/ 699:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(700);

var ctcornerstone = function (_ctcornerstone_base) {
    _inherits(ctcornerstone, _ctcornerstone_base);

    function ctcornerstone(app, dom, value, addMore) {
        _classCallCheck(this, ctcornerstone);

        var _this = _possibleConstructorReturn(this, (ctcornerstone.__proto__ || Object.getPrototypeOf(ctcornerstone)).call(this, app, dom, value, addMore));

        _this.html = __webpack_require__(702);
        var Model = __webpack_require__(703);
        _this.model = new Model(_this.app);
        _this.drawInfo = __webpack_require__(704);
        try {
            _this.hitArea = new createjs.Shape();
            _this.hitArea.graphics.beginFill("#000").drawRect(0, 0, _this.model._pathSize, _this.model._pathSize);
        } catch (err) {
            console.log(err);
        }
        _this.controlename = 'move';
        _this.freehand = __webpack_require__(705);
        //console.log(this.freehand)
        return _this;
    }

    _createClass(ctcornerstone, [{
        key: "complete",
        value: function complete() {
            this.moduleLoad();
            this.tpLoad();
            if (location.href.includes('drapCanvasPro')) {
                document.getElementById("canvas_box").className = "drapCanvasPro";
                console.log(document.getElementById("canvas_box"), '我是dom');
            }
        }

        //加载缩略图和进度条模块

    }, {
        key: "tpLoad",
        value: function tpLoad() {
            var _this2 = this;

            var thumbnailprogress = __webpack_require__(706);
            this.tpControl = this.app.loadModule(thumbnailprogress, this.dom.find('#canvas_box .tp'));
            this.tpControl.model = this.model;
            this.tpControl.event._addEvent('ThumbnailProgress.dragThumbnail', function (value) {
                _this2.moveBoX(value);
            });
            this.tpControl.event._addEvent('ThumbnailProgress.borClick', function (value) {
                _this2.stage.mouseX = _this2.model._vpCanvasInfo.width / 2;
                _this2.stage.mouseY = _this2.model._vpCanvasInfo.height / 2;
                _this2.scaleCanvas(value.x, value.y);
            });
            this.tpControl.event._addEvent('ThumbnailProgress.progress', function (e) {
                _this2.stage.mouseX = _this2.model._vpCanvasInfo.width / 2;
                _this2.stage.mouseY = _this2.model._vpCanvasInfo.height / 2;
                _this2.tpControl.progressPos.call(_this2, e.pageY);
            });

            this.tpControl.event._addEvent('ThumbnailProgress.changeImage', function (value) {
                _this2.setContainerPos(value.spos);
                _this2.model.nowImageLevel = value.level;
                _this2.model.pathSize = value.pathSize;
                _this2.handlerImageLoad();
            });
            this.tpControl.event._addEvent('ThumbnailProgress.scaleImage', function (value) {
                _this2.setContainerPos(value.spos);
                _this2.model.pathSize = value.pathSize;
                _this2.scaleBox();
            });
        }
    }, {
        key: "initCT",
        value: function initCT(totalImage, imageAddress, data) {
            this.model.serinfo = data.data;
            this.model.orginImgSizes = data.data.segmentationInfo;
            this.tpControl.initBreviaryImg();
            //this.initBreviaryImg()
            this.initImgCanvas();
            this.ctEvent();
        }

        //图片加载

    }, {
        key: "loadImage",
        value: function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(path, pos, bitmapPos) {
                var _this3 = this;

                var image;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (!(path.lastIndexOf('undefined') != -1)) {
                                    _context.next = 2;
                                    break;
                                }

                                return _context.abrupt("return");

                            case 2:
                                image = new Image();
                                // image.src = `proxyImg/images/real/${path}.jpg`

                                image.src = path;
                                image.crossOrigin = "Anonymous";
                                image.onload = function (e) {
                                    _this3.makeSingleBitmap(pos, e.target, bitmapPos);
                                };

                                image.onerror = function (e) {
                                    console.log('no path');
                                };

                            case 7:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function loadImage(_x, _x2, _x3) {
                return _ref.apply(this, arguments);
            }

            return loadImage;
        }()
    }, {
        key: "makeSingleBitmap",
        value: function makeSingleBitmap(pos, img, bitmapPos) {
            //console.log(this.model.imagePool[pos],pos,bitmapPos)
            if (!this.model.imagePool[pos]) {
                var bitmap = new createjs.Bitmap(img);
                this.model.imagePool[pos] = bitmap;
                bitmap.hitArea = this.hitArea;
                this.container.addChild(this.model.imagePool[pos]);
            } else {
                this.model.imagePool[pos].image = img;
            }
            this.model.imagePool[pos].x = bitmapPos.bitmapNumx * this.model._pathSize;
            this.model.imagePool[pos].y = bitmapPos.bitmapNumy * this.model._pathSize;
            this.model.imagePool[pos].scale = this.model._pathSize / this.model._section;
            this.model.imagePool[pos].bx = bitmapPos.bitmapNumx;
            this.model.imagePool[pos].by = bitmapPos.bitmapNumy;
            this.renderStage();
            //this.stage.update()
        }
    }, {
        key: "queryImgs",
        value: function queryImgs() {
            if (this.model.numberList.length == 0) {
                return;
            }

            var numberList = [];
            this.model.numberList.forEach(function (item) {
                var k = Object.keys(item)[0];
                if (k != "blank") {
                    numberList.push(Number(k));
                }
            });
            var queryImgs = [];
            console.log(this.model.numberList);
            console.log(numberList);
            if (numberList.length != 0) {
                this.event._dispatch('ctcornerstone.loadImage', {
                    seriesInstanceUID: this.model.serinfo.seriesInstanceUID,
                    fileType: "BIG_IMAGE",
                    windowType: this.model.nowImageLevel,
                    numberList: numberList
                });
            } else {
                this.makeImage({
                    data: {
                        list: []
                    }
                });
            }
        }
    }, {
        key: "makeImage",
        value: function makeImage(value) {
            var _this4 = this;

            var queryImgs = [];

            for (var i = 0; i < value.data.list.length; i++) {
                var item = value.data.list[i];
                //console.log(item.urlWAN,item.number)
                queryImgs[item.number] = item.urlWAN; //.replace('http://proximadev.cn-sh2.ufileos.com', '/proxyImg') //做了图片代理，可以不做的，主要是觉得那个会增加损耗。所以不高兴用
            }
            this.model.numberList.forEach(function (item) {
                var k = Object.keys(item)[0];
                if (k != "blank") {
                    var url = queryImgs[Number(k)];
                    //console.log(Number(k),url,item)
                    _this4.loadImage(url, item[k].i, item[k].bit);
                } else {
                    _this4.makeSingleBitmap(item[k].i, _this4.model.blank, item[k].bit);
                }
            });
        }
        //事件

    }, {
        key: "ctEvent",
        value: function ctEvent() {
            var _this5 = this;

            var isScale = true;
            this.stage.addEventListener("stagemousedown", function (e) {
                isScale = false;
                if (e.nativeEvent.buttons == 2) {
                    isScale = true;
                    return;
                }
                _this5.dragOffset.x = _this5.stage.mouseX;
                _this5.dragOffset.y = _this5.stage.mouseY;
                if (_this5.controlename == "brushFan" || _this5.controlename == "earseFan") {
                    if (!_this5.model.nidusChoose) {
                        isScale = true;
                        _this5.app.alert.show({
                            title: ' ',
                            msg: '没有对应的病灶',
                            close: true
                        });
                        return;
                    }
                }
                if (e.nativeEvent.buttons == 1) {
                    _this5.craetData();
                }
            });
            this.stage.addEventListener("stagemousemove", function (e) {
                var moveX = _this5.stage.mouseX - _this5.dragOffset.x;
                var moveY = _this5.stage.mouseY - _this5.dragOffset.y;
                _this5.dragOffset.x = _this5.stage.mouseX;
                _this5.dragOffset.y = _this5.stage.mouseY;
                if (e.nativeEvent.buttons == 2) {
                    // console.log('aaaaaaaaaaaa', moveX, moveY)
                    _this5.moveBoX({
                        moveX: moveX,
                        moveY: moveY
                    });
                }
                if (isScale) return;
                if (e.nativeEvent.buttons == 1) {
                    switch (_this5.controlename.replace('Fan', '')) {
                        case "move":
                            _this5.moveBoX({
                                moveX: moveX,
                                moveY: moveY
                            });
                            break;
                        case "freehand":
                            _this5.drawLine();
                            break;
                        case "zoom":
                            //console.log('aaaaaaaaaaaa', moveX, moveY)
                            _this5.scaleCanvas(moveX, moveY);
                            break;
                        case "brush":
                            _this5.editLine('add');
                            break;
                        case "earse":
                            _this5.editLine('remove');
                            break;
                    }
                }
            });
            this.stage.addEventListener("stagemouseup", function (e) {
                isScale = true;
                _this5.endDraw();
            });
            /*this.stage.addEventListener("stagemousemove", e => {
                if (!isScale) return
                this.dragOffset.x = this.stage.mouseX
                this.dragOffset.y = this.stage.mouseY
            })*/
        }
    }, {
        key: "setSequence",
        value: function setSequence(value, childrens) {
            var _this6 = this;

            //let that = this
            //console.log(childrens)
            this.nodeInfo = childrens.length != 0 ? {} : null;
            var sData = value; // [{ id: 1, imageAddress: this.baseData.imageAddress, totalImage: this.baseData.totalImage, major: 'master' }]
            console.log(childrens, '我是粗来的值==============', sData);
            sData.map(function (item) {
                item.id = _typeof(item.id) == 'object' ? item.id.series : item.id;
                item.sequenceName = _typeof(item.sequenceName) == 'object' ? item.sequenceName.series : item.sequenceName;
                item.studyId = _typeof(item.studyId) == 'object' ? item.studyId.series : item.studyId;
            });
            childrens.map(function (item) {
                //console.log(item)
                if (!_this6.nodeInfo[item.layerNumber]) {
                    _this6.nodeInfo[item.layerNumber] = [];
                }
                if (!_this6.model.nidusComponentData[item.id]) {
                    _this6.model.nidusComponentData[item.id] = {};
                }
                var daa = {};
                //daa.nodeInfo.uuid = item.uuid
                daa.layerNumber = item.layerNumber;
                //console.log('+++++++++++++++')
                daa.sId = item.sId;
                daa.type = item.type;
                daa.uuid = item.uuid;
                daa.show = true;
                daa.nodeInfo = {
                    uuid: item.uuid,
                    id: item.id
                };
                console.log(item, 'item');
                _this6.nodeInfo[item.layerNumber].push(daa);
                _this6.drawInfo.setInfo(item);
                if (item.annotationItemResultList) {
                    item.annotationItemResultList.map(function (res) {
                        _this6.model.nidusComponentData[item.id][res.annotationItemId] = res;
                    });
                }
                if (item.orginannotationItemResultList) {
                    _this6.model.nidusComponentData[item.id].orginannotationItemResultList = item.orginannotationItemResultList;
                }
                _this6.model.nidusComponentData[item.id].doctorName = item.doctorName;
                _this6.model.nidusComponentData[item.id].imageRemark = item.imageRemark;
            });
            //alert(1)
            this.sequencelist.setData(sData, childrens);
            this.drawNode(false);
            this.renderStage();
        }
    }, {
        key: "creatShape",
        value: function creatShape(type, borderColor) {
            var that = this;
            var shape = new createjs.Shape();
            shape.graphics.beginStroke(borderColor ? "#0f0" : "#f00");
            shape.graphics.setStrokeStyle(this.cornerstoneTools_config['freehand_config'].lineWidth, "round", "round");
            shape.x = this.model.imageLeftPoint.x;
            shape.y = this.model.imageLeftPoint.y;
            shape.addEventListener("click", function (evt) {
                that.sequencelist.clickById({
                    uuid: evt.target.uuid
                });
            });
            if (this.stage) {
                if (type) {
                    this.stage.addChild(shape);
                }
            }
            console.log(this.stage);
            return shape;
        }
    }, {
        key: "craetData",
        value: function craetData() {
            switch (this.controlename.replace('Fan', '')) {
                case "freehand":
                    this.drawData = this.model.nidusChoose ? this.drawInfo.getInfo(this.model.nidusChoose) : this.drawInfo.setInfo({
                        path: {},
                        uuid: null
                    });

                    //this.drawData.path()
                    this.drawData.type = 'freehandline';
                    this.drawData.setDataType = 'number';
                    this.drawData.layerNumber = 1;
                    this.drawData.sId = this.model.serinfo.seriesInstanceUID;
                    this.drawData.imageAnnotationId = this.tooltype.imageAnnotationId;
                    this.drawData.imageAnnotationToolId = this.tooltype.id;
                    this.drawData.imageAnnotationToolType = this.tooltype.type;
                    this.drawData.imageAnnotationType = this.tooltype.imageAnnotation;
                    console.log(this.tooltype);
                    this.drawData.toolType = this.tooltype;
                    if (!this.model.nidusChoose) {
                        var pos = this.model.calSaveXYPos({
                            x: this.stage.mouseX,
                            y: this.stage.mouseY
                        });
                        pos.father = null;
                        pos.child = null;
                        console.log(pos);
                        this.drawData.path[pos.x + '_' + pos.y] = pos;
                        this.prePoint = pos;
                        //console.log()
                        this.drawData.shape = this.creatShape(true, false);
                        var _drawPos = this.model.calXYPos({
                            x: this.stage.mouseX,
                            y: this.stage.mouseY
                        });
                        this.drawData.shape.graphics.moveTo(_drawPos.x, _drawPos.y);
                        this.drawData.shape.uuid = this.drawData.uuid;
                        this.drawData.show = true;
                        this.renderStage(false);
                    } else {
                        var _drawPos2 = this.model.calSaveXYPos({
                            x: this.stage.mouseX,
                            y: this.stage.mouseY
                        });
                        this.prePoint = _drawPos2;
                        var data = this.drawInfo.getInfo(this.model.nidusChoose);
                        var _modelD = this.model.calGetMinDistance(data.path, _drawPos2);
                        data.shape.graphics.moveTo(_modelD.x, _modelD.y);
                        var _drawPoss = this.model.calXYPos({
                            x: this.stage.mouseX,
                            y: this.stage.mouseY
                        });
                        data.shape.graphics.lineTo(_drawPoss.x, _drawPoss.y);
                    }
                    break;
                case "brush":
                    this.drawData = this.drawInfo.getInfo(this.model.nidusChoose);
                    var drawPos = this.model.calSaveXYPos({
                        x: this.stage.mouseX,
                        y: this.stage.mouseY
                    });
                    var modelD = this.model.calGetMinDistance(this.drawData.path, drawPos);
                    this.prePoint = drawPos;
                    this.drawData.shape.graphics.moveTo(modelD.x, modelD.y);
                    var drawPoss = this.model.calXYPos({
                        x: this.stage.mouseX,
                        y: this.stage.mouseY
                    });
                    this.drawData.shape.graphics.lineTo(drawPoss.x, drawPoss.y);
                    break;
            }
        }
    }, {
        key: "drawLine",
        value: function drawLine() {
            var data = this.drawData;
            var pos = this.model.calSaveXYPos({
                x: this.stage.mouseX,
                y: this.stage.mouseY
            });
            if (pos.x == this.prePoint.x && pos.y == this.prePoint.y) {
                return;
            }
            var key = this.prePoint.x + '_' + this.prePoint.y;
            if (!this.drawData.path[key].child) {
                this.drawData.path[key].child = pos.x + '_' + pos.y;
                data.path[pos.x + '_' + pos.y] = pos;
                pos.father = key;
                pos.child = null;
            } else {
                this.drawData.path[key].father = pos.x + '_' + pos.y;
                data.path[pos.x + '_' + pos.y] = pos;
                pos.child = key;
                pos.father = null;
            }
            /*&pos.father = this.prePoint.x + '_' + this.prePoint.y
            pos.child = null
            this.drawData.path[pos.father].child = pos.x + '_' + pos.y
            data.path[pos.x + '_' + pos.y] = pos*/
            this.prePoint = pos;
            var drawPos = this.model.calXYPos({
                x: this.stage.mouseX,
                y: this.stage.mouseY
            });
            data.shape.graphics.lineTo(drawPos.x, drawPos.y);
            this.renderStage();
        }
    }, {
        key: "endDraw",
        value: function endDraw() {
            if (!this.drawData) {
                return;
            }
            var data = {};
            var aa = this.model.returnNull(this.drawData.path);
            if (aa) {
                var drawPos = this.model.calShowXYPos(this.drawData.path[aa]);
                this.drawData.shape.graphics.lineTo(drawPos.x, drawPos.y);
                this.renderStage();
            }
            for (var i in this.drawData) {
                data[i] = this.drawData[i];
            }
            console.log(this.drawData);
            if (!this.model.nidusChoose && this.drawData) {
                this.sequencelist.addNode(data);
                if (!this.nodeInfo) {
                    this.nodeInfo = {};
                }
                if (!this.nodeInfo[1]) {
                    this.nodeInfo[1] = [];
                }
                this.nodeInfo[1].push({
                    layerNumber: 1,
                    type: data.tooltype,
                    nodeInfo: data,
                    sId: this.model.serinfo.seriesInstanceUID,
                    show: true
                });
                this.event._dispatch('ctcornerstone.addNode', this.drawData);
            } else {
                console.log(this.drawData);
                this.event._dispatch('ctcornerstone.editNode', this.drawData);
            }
            this.drawData = null;
            this.prePoint = null;
        }
    }, {
        key: "editLine",
        value: function editLine(type) {
            //console.log(this.model.nidusChoose.uuid)
            //console.log(data.shape)
            if (type == 'add') {
                this.drawLine();
            } else {
                this.drawData = this.drawInfo.getInfo(this.model.nidusChoose);
                var data = this.drawData;
                this.drawData.shape.graphics.clear();
                this.drawData.shape.graphics.beginStroke("#f00");
                this.drawData.shape.graphics.setStrokeStyle(this.cornerstoneTools_config['freehand_config'].lineWidth, "round", "round");
                this.model.removeData(this.drawData.path, {
                    x: this.stage.mouseX,
                    y: this.stage.mouseY,
                    d: this.cornerstoneTools_config['earse_config'].radius
                });
                this.reDrawShape(this.drawData.path, this.drawData.shape);
                this.renderStage();
            }
        }
    }, {
        key: "reDrawShape",
        value: function reDrawShape(path, shape) {
            for (var i in path) {
                var item = path[i];
                if (item.child) {
                    var p0 = this.model.calShowXYPos(item);
                    shape.graphics.moveTo(p0.x, p0.y);
                    //console.log(path[item.child], item.child, item)
                    if (path[item.child]) {
                        var p1 = this.model.calShowXYPos(path[item.child]);
                        shape.graphics.lineTo(p1.x, p1.y);
                    }
                }
            }
        }
        //初始化场景

    }, {
        key: "initImgCanvas",
        value: function initImgCanvas() {
            var _this7 = this;

            this.canvas = document.getElementById('canvas');
            var size = this.model.getCanvasSize();
            this.canvas.width = size.width;
            this.canvas.height = size.height;
            this.stage = new createjs.Stage(canvas);
            this.container = new createjs.Container();
            this.container.x = this.model.imageLeftPoint.x;
            this.container.y = this.model.imageLeftPoint.y;
            this.stage.addChild(this.container);
            //createjs.Ticker.setFPS(60)
            this.dragOffset = {
                x: 0,
                y: 0
                //this.dragOffset = new createjs.Point()
                // 滚轮缩放
            };window.onmousewhee = document.onmousewheel = function (event) {
                var delta = 0;
                if (!event) event = window.event;
                if (event.wheelDelta) {
                    //IE、chrome浏览器使用的是wheelDelta，并且值为“正负120”
                    delta = event.wheelDelta / 120;
                    if (window.opera) delta = -delta; //因为IE、chrome等向下滚动是负值，FF是正值，为了处理一致性，在此取反处理
                }
                console.log(delta);
                if (delta) {
                    _this7.scaleCanvas("", delta);
                }
            };
            //console.log('handlerImageLoad')
            this.handlerImageLoad();
        }
    }, {
        key: "handlerImageLoad",
        value: function handlerImageLoad() {
            var _this8 = this;

            var leftTopX = Math.floor(-this.model.imageLeftPoint.x / this.model._pathSize); //获取格子的列下标 
            var leftTopY = Math.floor(-this.model.imageLeftPoint.y / this.model._pathSize); //获取格子的行下标
            leftTopX = leftTopX < 0 ? 0 : leftTopX;
            leftTopY = leftTopY < 0 ? 0 : leftTopY;
            var sx = Math.floor(this.model.imageLeftPoint.x % this.model._pathSize); //获取格子的x坐标
            var sy = Math.floor(this.model.imageLeftPoint.x % this.model._pathSize); //获取格子的y坐标

            this.orginImg = this.model._orginImgSizes[this.model.nowImageLevel];
            console.log(this.orginImg, "我是最新的倍数");
            this.tpControl.orginImg = this.orginImg;
            var colnum = this.model._vpCanvasInfo.colnum;
            var row = this.model._vpCanvasInfo.row;
            var showNum = row * colnum;
            this.model.numberList = [];
            //console.log(this.model._vpCanvasInfo,'this.model._vpCanvasInfo')
            // this.container.clear()
            // console.log(leftTopX, leftTopY, this.model.imageLeftPoint.x, this.model.imageLeftPoint.y)
            for (var i = 0; i < showNum; i++) {
                var bitmapNumx = leftTopX + i % colnum;
                var bitmapNumy = leftTopY + Math.floor(i / colnum);
                //用的那张图
                var back = this.model.backImageNumber({
                    bitmapNumx: bitmapNumx,
                    bitmapNumy: bitmapNumy
                });
                var obj = {};
                obj[back] = {
                    i: i,
                    bit: {
                        bitmapNumx: bitmapNumx,
                        bitmapNumy: bitmapNumy
                    }
                };
                this.model.numberList.push(obj);
            }

            this.queryImgs();
            setTimeout(function () {
                _this8.tpControl.makeShowArea();
            }, 100);

            //this.makeShowArea()
            this.tpControl.changProgress();
        }
        //设置场景位置

    }, {
        key: "setContainerPos",
        value: function setContainerPos(pos) {
            this.model.imageLeftPoint.x = this.model.imageLeftPoint.x + pos.moveX;
            this.model.imageLeftPoint.y = this.model.imageLeftPoint.y + pos.moveY;
            this.container.x = this.model.imageLeftPoint.x;
            this.container.y = this.model.imageLeftPoint.y;
        }
        //移动

    }, {
        key: "moveBoX",
        value: function moveBoX(pos) {
            this.setContainerPos(pos);
            var length = this.model.imagePool.length;
            this.model.numberList = [];
            //console.log(length)
            for (var i = 0; i < length; i++) {
                var changeImage = false;
                var bitmapNumx = Math.round(this.model.imagePool[i].x / this.model._pathSize);
                var bitmapNumy = Math.round(this.model.imagePool[i].y / this.model._pathSize);
                if (this.model.imagePool[i].x + this.container.x + this.model._pathSize <= -this.model._pathSize / 2) {
                    bitmapNumx += this.model._vpCanvasInfo.colnum;
                    changeImage = true;
                }
                if (this.model.imagePool[i].x + this.container.x >= this.model._vpCanvasInfo.width + this.model._pathSize / 2) {
                    bitmapNumx -= this.model._vpCanvasInfo.colnum;
                    changeImage = true;
                }
                if (this.model.imagePool[i].y + this.container.y + this.model._pathSize < -this.model._pathSize / 2) {
                    bitmapNumy += this.model._vpCanvasInfo.row;
                    changeImage = true;
                }
                if (this.model.imagePool[i].y + this.container.y >= this.model._vpCanvasInfo.height + this.model._pathSize / 2) {
                    bitmapNumy -= this.model._vpCanvasInfo.row;
                    changeImage = true;
                }

                if (changeImage) {
                    var back = this.model.backImageNumber({
                        bitmapNumx: bitmapNumx,
                        bitmapNumy: bitmapNumy
                    });
                    var obj = {};
                    //console.log({ bitmapNumx, bitmapNumy }, i)
                    obj[back] = {
                        i: i,
                        bit: {
                            bitmapNumx: bitmapNumx,
                            bitmapNumy: bitmapNumy
                        }
                    };
                    this.model.numberList.push(obj);
                }
            }
            //console.log('aaaaaaaaaaaaaaa', this.model.numberList)
            this.queryImgs();
            this.tpControl.makeShowArea();
            //this.makeShowArea()
            this.drawNode(false);
            this.renderStage();
            //this.stage.update()
        }
        //缩放

    }, {
        key: "scaleCanvas",
        value: function scaleCanvas(moveX, moveY) {
            if (!moveY) {
                return;
            }
            var changeNum = moveY < 0 ? -2 : 2;

            //console.log('aaaaaa')
            if (this.model.nowImageLevel == '1x' && this.model._pathSize + changeNum < this.model._section - this.model._changeRange) {
                return;
            }
            if (this.model.nowImageLevel == this.model._orginImgSizes.length + 'x' && this.model._pathSize + changeNum >= this.model._section + this.model._changeRange) {
                return;
            }
            var cr = this.getColRow({
                x: this.model.imageLeftPoint.x,
                y: this.model.imageLeftPoint.y
            }, {
                x: this.stage.mouseX,
                y: this.stage.mouseY
            });
            var pos = {
                moveX: -cr.col * changeNum,
                moveY: -cr.row * changeNum
            };
            this.setContainerPos(pos);
            this.model.pathSize = this.model._pathSize + changeNum;

            if (this.model._pathSize > this.model._section + this.model._changeRange) {
                //console.log('aaaaaaccc')
                this.model.pathSize = this.model._section - this.model._changeRange;
                this.model.nowImageLevel = this.model.nowImageLevel.replace('x', '') * 1 + 1 + "x";
                this.drawNode(true);
                this.handlerImageLoad();
                return;
            }
            if (this.model._pathSize < this.model._section - this.model._changeRange) {
                //console.log('aaaaaaddd')
                this.model.pathSize = this.model._section + this.model._changeRange;
                this.model.nowImageLevel = this.model.nowImageLevel.replace('x', '') * 1 - 1 + "x";
                this.drawNode(true);
                this.handlerImageLoad();
                return;
            }
            this.scaleBox();
        }
    }, {
        key: "scaleBox",
        value: function scaleBox() {
            for (var i = 0; i < this.model.imagePool.length; i++) {
                this.model.imagePool[i].scale = this.model._pathSize / this.model._section;
                this.model.imagePool[i].x = this.model._pathSize * this.model.imagePool[i].bx; //Math.floor(num % this.orginImg.colnum)
                this.model.imagePool[i].y = this.model._pathSize * this.model.imagePool[i].by; // Math.floor(num / this.orginImg.colnum)
            }
            this.tpControl.makeShowArea();
            //this.makeShowArea()
            this.tpControl.changProgress();
            //console.log('wwwwwwwwwwww')
            this.drawNode(true);
            console.log('scaleBox2');
            this.renderStage();
            //this.stage.update()
        }
    }, {
        key: "getColRow",
        value: function getColRow(screen, boxpos) {
            var col = Math.floor((boxpos.x - screen.x) / this.model._pathSize);
            var row = Math.floor((boxpos.y - screen.y) / this.model._pathSize);
            return {
                col: col,
                row: row
            };
        }
    }, {
        key: "resize",
        value: function resize() {
            var cw = ES.selctorDoc(window).box().clientWidth;
            var ch = ES.selctorDoc(window).box().clientHeight - 60 - 64;
            this.dom.find('.ctcornerstone').css({
                'width': cw
            });
            this.dom.find('.ctcornerstone .slist').css({
                'width': cw - 290 - 180
            });
            this.dom.find('.ctcornerstone .xulielist').css({
                'height': ch
            });
            this.dom.find('.ctcornerstone .info').css({
                'height': ch
            });
            this.dom.find('.ctcornerstone .nidus_content').css({
                'height': ch
            });
            this.dom.find('#canvas_box').css({
                width: this.model._vpCanvasInfo.width - 1,
                height: this.model._vpCanvasInfo.height
            });
            if (this.nidusControl) {
                this.nidusControl.resize();
            }
            if (this.nidusControlAll) {
                this.nidusControlAll.resize();
            }
        }
    }, {
        key: "close",
        value: function close() {}

        //删除病症

    }, {
        key: "doneDelete",
        value: function doneDelete(key, value) {
            console.log(key, value);
            this.stage.removeChild(value.shape);
            this.drawInfo.removeInfo(value);
            this.sequencelist.removeNode(value);
            this.nodeInfo[1] = this.nodeInfo[1].filter(function (item) {
                return item.uuid != value.uuid;
            });
            this.model.nidusChoose = null;
            this.renderStage();
            this.event._dispatch('ctcornerstone.deleteNode', {
                backId: value.backId
            });
        }
    }, {
        key: "renderStage",
        value: function renderStage() {
            //console.log('wwww', this.nodeInfo)
            //console.log(this.nodeInfo)
            this.event._dispatch('cttool.renderStage');
            this.stage.update();
        }

        //st代表是否要强制重新刷新

    }, {
        key: "drawNode",
        value: function drawNode(st) {
            var _this9 = this;

            console.log(this.nodeInfo);
            if (this.nodeInfo) {
                if (this.nodeInfo[1]) {
                    this.nodeInfo[1].forEach(function (item) {
                        item.uuid = item.uuid || (item.nodeInfo ? item.nodeInfo.uuid : "");
                        var datae = _this9.drawInfo.getInfo(item);
                        console.log(datae.shape);
                        if (datae) {
                            if (st && datae.shape) {
                                _this9.stage.removeChild(datae.shape);
                                datae.shape = null;
                            }
                            if (item.show) {
                                if (!datae.shape) {
                                    if (_this9.model.nidusChoose && _this9.model.nidusChoose.uuid == datae.uuid) {
                                        datae.shape = _this9.creatShape(true, true);
                                    } else {
                                        datae.shape = _this9.creatShape(true, false);
                                    }
                                    datae.shape.uuid = item.uuid;

                                    // datae.shape = this.creatShape(true, false)
                                    _this9.reDrawShape(datae.path, datae.shape);
                                } else {
                                    datae.shape.x = _this9.model.imageLeftPoint.x;
                                    datae.shape.y = _this9.model.imageLeftPoint.y;
                                }
                            }
                        }
                    });
                }
            }
        }

        //tool

    }, {
        key: "freehandFan",
        value: function freehandFan() {
            this.controlename = 'freehand';
        }
    }, {
        key: "movefun",
        value: function movefun() {
            this.controlename = 'move';
        }
    }, {
        key: "zoomFan",
        value: function zoomFan() {
            this.controlename = 'scale';
        }
    }, {
        key: "brushFan",
        value: function brushFan() {
            this.controlename = 'brush';
        }
    }, {
        key: "earseFan",
        value: function earseFan() {
            this.controlename = 'earse';
        }
    }, {
        key: "restFan",
        value: function restFan() {}
    }]);

    return ctcornerstone;
}(ctcornerstone_base);

//原型链一定要有的


module.exports = ctcornerstone;

/***/ }),

/***/ 7:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//import {firstName, lastName, year} from 'http://172.16.100.221:44444/footer/footer.js';
//这边基本上引入需要使用的资源less，api，需要使用的模块等等。

var MarkBase = function (_Interstellar$pagesBa) {
    _inherits(MarkBase, _Interstellar$pagesBa);

    function MarkBase(app, api, dom, model) {
        _classCallCheck(this, MarkBase);

        return _possibleConstructorReturn(this, (MarkBase.__proto__ || Object.getPrototypeOf(MarkBase)).call(this, app, api, dom, model));
    }

    //初始化


    _createClass(MarkBase, [{
        key: 'complete',
        value: function complete() {
            this.useinfo = JSON.parse(this.app.local.get('all'));
            this.nowTaskOver = false;
            this.type = 'doctor';
            //this.imageType = "DCM"
            this.imageType = "JPG";
            this.imageDataType = "orgin";
            __webpack_require__(648);
            this.cornerstoneLoad();
            this.styleModel(1);
            this.dicommenuLoad();

            this.modalLoad();
            this.baseApi();
            this.btnEvent();
            this.resize();
        }
        //---------------------------------会自动允许---------------------------------
        //获取序列结果id之后自动运行的方法

    }, {
        key: 'series_result_id',
        value: function series_result_id() {
            console.log(this.model.series_result_id);
            this.start_series();
        }

        //获取项目信息之后自动运行的方法

    }, {
        key: 'projectInfo',
        value: function projectInfo() {
            console.log('projectInfoprojectInfo');
            this.annotationIteminit();
            this.setWWC();
        }

        //设置默认窗宽窗位

    }, {
        key: 'setWWC',
        value: function setWWC() {
            // console.log(this.model.projectInfo)
            if (this.model.projectInfo.window) {
                this.dicommenu.defaultWWC(this.model.projectInfo.window);
            }
        }

        //获取序列结果以后自动运行的方法

    }, {
        key: 'seriesResult',
        value: function seriesResult() {
            this.seriesInfo();
        }

        //数据都准备好了，结果值拿好了，序列对应的信息也拿好了。全部进入这个方法，开始初始化序列，结果什么乱起八糟的东西了

    }, {
        key: 'seriesInfo',
        value: function seriesInfo() {
            var _this2 = this;

            var seriesInfoNum = 0;
            var seriesResultNum = 0;
            for (var i in this.model.seriesInfo) {
                if (this.model.seriesInfo[i].imgs) {
                    seriesInfoNum++;
                }
            }
            for (var j in this.model.seriesResult) {
                seriesResultNum++;
            }
            console.log(seriesResultNum, seriesInfoNum);
            if (seriesInfoNum == seriesResultNum && seriesResultNum != 0 && seriesInfoNum != 0) {
                console.log('data ready');
                this.cornerstoneStart(); //cornerstone初始化
                setTimeout(function () {
                    _this2.listInit();
                }, 400);
            }
        }

        //---------------------------------后续方法---------------------------------
        //----------------------------各大模块初始化------------------------------
        //影像区加载初始化

    }, {
        key: 'cornerstoneLoad',
        value: function cornerstoneLoad() {
            var _this3 = this;

            var that = this;
            var cornerstoneClass = void 0;
            if (window.location.hash.lastIndexOf('markview') != -1 || window.location.hash.lastIndexOf('markaudit') != -1) {
                cornerstoneClass = __webpack_require__(696);
            } else {
                if (window.location.hash.lastIndexOf('drapCanvas') == -1) {
                    cornerstoneClass = __webpack_require__(697);
                } else {
                    cornerstoneClass = __webpack_require__(699);
                }
            }
            this.cornerstoneContorl = this.app.loadModule(cornerstoneClass, this.dom.find('.mark-content'));

            this.cornerstoneContorl.event._addEvent('ctcornerstone.imgloadError', function (value) {
                if (that.progress) {
                    that.progress.stopAll();
                    that.progress.close();
                }
            });
            this.cornerstoneContorl.event._addEvent('ctcornerstone.loadingfinish', function (value) {
                // console.log(value,'aaaaaaaaaaaaaaaaa')
                that.makeWwC(value.sId);
                if (that.progress) {
                    that.progress.stopAll();
                }
            });
            //HU的值显示
            this.cornerstoneContorl.event._addEvent('ctcornerstone.HUShow', function (value) {
                //console.log(value)
                var infoData = _this3.model.seriesInfo[value.sId].info;
                //console.log(infoData,value)
                if (infoData.data.fileType == "DCM") {
                    if (_this3.imageDataType != "orgin") {
                        value.hu = (infoData.wwc.hight * 1 - infoData.wwc.low * 1) * value.hu / 255 + infoData.wwc.low * 1;
                    }
                } else {
                    value.hu = "";
                }
                _this3.cornerstoneContorl.huValue(value);
            });
            this.cornerstoneContorlOther();
        }
    }, {
        key: 'cornerstoneContorlOther',
        value: function cornerstoneContorlOther() {}
        //************************弹框区*************************

        //菜单加载

    }, {
        key: 'dicommenuLoad',
        value: function dicommenuLoad() {
            var _this4 = this;

            var that = this;
            var configTool = __webpack_require__(710);
            var tool_user = configTool(1);
            var dicommenu = __webpack_require__(711);
            this.dicommenu = this.app.loadModule(dicommenu, this.dom.find('.mark-menu'), tool_user);
            if (window.location.hash.lastIndexOf('view') != -1) {
                this.dicommenu.closeYY();
            }

            this.dicommenu.event._addEvent('dicommenu.choose', function (value) {
                //if(that.dicommenu.chooseData=='')
                console.log(that.dicommenu.chooseData);
                if (JSON.stringify(that.dicommenu.chooseData) == "{}") {
                    that.cornerstoneContorl.defaultFunction(null, null);
                    return;
                }
                var menuChoose = that.dicommenu.chooseData;
                var tooltype = that.dicommenu.chooseData.data;
                //console.log(tooltype)
                that.cornerstoneContorl.defaultFunction(menuChoose.fun + 'Fan', tooltype);
            });
            this.dicommenu.event._addEvent('dicommenu.wlchange', function (value) {
                var menuChoose = that.dicommenu.chooseData.wl;
                //console.log(menuChoose)
                var sId = that.cornerstoneContorl.getSid();
                //that.cornerstoneContorl.changeWWCImage()
                if (menuChoose.w != null && menuChoose.c != null) {
                    /*let wwc = that.getwwc({
                        wc: menuChoose.c * 1,
                        ww: menuChoose.w * 1
                    }, sId)*/
                    var wwc = that.model.projectInfo.seriesImgFileType == 2 ? {
                        wc: menuChoose.c,
                        ww: menuChoose.w
                    } : that.getwwc({
                        wc: menuChoose.c * 1,
                        ww: menuChoose.w * 1
                    }, sId);
                    console.log(that.getMMCImage(menuChoose.w * 1, sId));
                    that.cornerstoneContorl.lungWindown(wwc.wc * 1, wwc.ww * 1, that.getMMCImage(menuChoose.w * 1, sId));
                } else {
                    var sinfo = that.model.seriesInfo[sId].info;
                    if (sinfo.data.windowCenterUpper && sinfo.data.windowWidthUpper) {
                        //console.log('aaaaaa', sinfo.data.windowCenterUpper, sinfo.data.windowWidthUpper)
                        /*let wwc1 = that.getwwc({
                            wc: sinfo.data.windowCenterUpper * 1,
                            ww: sinfo.data.windowWidthUpper * 1
                        }, sId)*/
                        var wwc1 = that.model.projectInfo.seriesImgFileType == 2 ? {
                            wc: sinfo.data.firstWindowCenter,
                            ww: sinfo.data.firstWindowWidth
                        } : that.getwwc({
                            wc: sinfo.data.firstWindowCenter * 1,
                            ww: sinfo.data.firstWindowWidth * 1
                        }, sId, 'def');
                        that.cornerstoneContorl.lungWindown(wwc1.wc * 1, wwc1.ww * 1, that.getMMCImage(null, sId));
                        return;
                    }
                    that.cornerstoneContorl.lungWindown(null, null, that.getMMCImage(null, sId));
                }
            });
            this.dicommenu.event._addEvent('dicommenu.splitScreen', function (value) {
                that.cornerstoneContorl.setScreen(value);
            });

            // 获取copd的值
            this.dicommenu.event._addEvent('dicommenu.setCopdVal', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var _ref2, data;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (that.cornerstoneContorl.model.nidusChoose) {
                                    _context.next = 5;
                                    break;
                                }

                                that.alerError('请选择病症');
                                that.dom.find(".dicommenu .fun_btn_copd").removeClass('choose');
                                that.dom.find('.chooseDate1').hide();
                                return _context.abrupt('return');

                            case 5:
                                _context.prev = 5;
                                _context.next = 8;
                                return _this4.api.HttpRequest.POST('/anno/image_result/getSegThresholdByIarId', {
                                    iarId: that.cornerstoneContorl.model.nidusChoose.bid * 1
                                });

                            case 8:
                                _ref2 = _context.sent;
                                data = _ref2.data;

                                that.dom.find('.chooseDate1 input[name="copdData"]').val(data);
                                _context.next = 16;
                                break;

                            case 13:
                                _context.prev = 13;
                                _context.t0 = _context['catch'](5);

                                console.log(_context.t0);

                            case 16:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this4, [[5, 13]]);
            })));
            this.dicommenu.event._addEvent('dicommenu.CTData', function (value) {
                if (value.value > -850) {
                    that.alerError('阈值不能超过-850!');
                    that.dom.find('.chooseDate1 input[name="copdData"]').val(-850);
                    return;
                }
                if (value.value < -1200) {
                    that.alerError('阈值不能低于-1200!');
                    that.dom.find('.chooseDate1 input[name="copdData"]').val(-1200);
                    return;
                }
                value.value = value.value * 1;
                if (typeof value.value != 'number' || value.value % 1 != 0) {
                    that.alerError('请输入整数');
                    return;
                }

                console.log(that.cornerstoneContorl.model.nidusChoose);
                var item = JSON.parse(JSON.stringify(that.cornerstoneContorl.model.nidusChoose));
                item.backId = item.bid;
                if (!that.cornerstoneContorl.model.nidusChoose.bid) {
                    that.alerError('请选择copd类型');
                    return;
                }
                var data = {
                    segThreshold: value.value * 1,
                    iarId: that.cornerstoneContorl.model.nidusChoose.bid * 1
                };
                if (!that.api.alg_sar_reset_mask_image) return;
                that.app.loading.show();
                that.api.alg_sar_reset_mask_image(data).done(function (res) {
                    that.api.anno_iar_read({
                        "id": data.iarId * 1
                    }).done(function (res) {
                        that.app.loading.hide();
                        var data = {
                            id: item.result,
                            images: res.data.imageList,
                            sId: that.cornerstoneContorl.model.nidusChoose.sId
                            //console.log('getAllimageDatagetAllimageDatagetAllimageData', res.data)
                        };that.creatAllPoint(data, item, false, false);
                    });
                });
            });
            this.dicommenu.event._addEvent('dicommenu.done', function () {
                var clickChoose = that.dicommenu.chooseData;
                if (clickChoose.click.lastIndexOf('del') != -1) {
                    that.cornerstoneContorl.clearData('meas');
                } else {
                    that.openRemove();
                }
            });
            this.dicommenu.event._addEvent('dicommenu.mpr', function () {
                if (!that.cornerstoneContorl.mpr) {
                    that.cornerstoneContorl.openmpr();
                    that.cornerstoneContorl.mpr = true;
                }
            });
            this.dicommenu.event._addEvent('dicommenu.yinyang', function (value) {
                that.api.series_result_yayAttributes({
                    sarIdList: that.getSarIds(),
                    yayAttributes: value.data
                });
            });
            this.dicommenu.event._addEvent('dicommenu.reset', function () {
                that.cornerstoneContorl.defaultFunction('resizeCon');
            });
            this.dicommenu.event._addEvent('dicommenu.shc', function (value) {
                _this4.cornerstoneContorl.controlNodeShowHide(value);
            });
            this.dicommenu.event._addEvent('dicommenu.setData', function (value) {
                console.log(value, '===========');
                _this4.cornerstoneContorl.setConfigByDicommeun(value);
            });
            this.dicommenu.event._addEvent('dicommenu.errorMSG', function (value) {
                _this4.alerError(value.msg);
            });
            this.dicommenu.event._addEvent('dicommenu.baseLine', function (value) {
                _this4.cornerstoneContorl.baseLineSt(value.st, 'baseLine');
            });
            this.dicommenu.event._addEvent('dicommenu.cross', function (value) {
                _this4.cornerstoneContorl.baseLineSt(value.st, 'cross');
            });
        }
    }, {
        key: 'getMMCImage',
        value: function getMMCImage(ww, sId) {
            console.log(ww, 'aaaaaaaaaaaaaaaaaaaaa');
            if (this.imageType == "DCM") {
                return this.model.seriesInfo[sId].imagesAll.default.imgs.toString().split(',');
            }
            if (ww != null) {
                if (ww <= 200) {
                    if (this.model.seriesInfo[sId].imagesAll.SMALL) {
                        return this.model.seriesInfo[sId].imagesAll.SMALL.imgs.toString().split(',');
                    }
                }
                if (ww > 1000) {
                    if (this.model.seriesInfo[sId].imagesAll.LARGE) {
                        return this.model.seriesInfo[sId].imagesAll.LARGE.imgs.toString().split(',');
                    }
                }
                return this.model.seriesInfo[sId].imagesAll.default.imgs.toString().split(',');
            }
            return this.model.seriesInfo[sId].imagesAll.default.imgs.toString().split(',');
        }

        //弹窗加载

    }, {
        key: 'modalLoad',
        value: function modalLoad() {
            var progressClass = __webpack_require__(646);
            this.progress = this.app.loadModal(progressClass, {
                adv: true
            });
            this.progress.hide();
            var alertS = __webpack_require__(726);

            this.alertSubmit = this.app.loadModal(alertS, {
                adv: true
            });
            console.log(this.alertSubmit, '哈哈哈');
            this.alertSubmit.hide();
        }

        //----------------------------各大模块初始化------------------------------
        //----------------------------调用接口开始流程------------------------------

        //接口调用，获取信息

    }, {
        key: 'baseApi',
        value: function baseApi() {
            var _this5 = this;

            this.app.loading.show();
            this.api.project_anno_read({
                projectId: this.app.parpam['projectId']
            }).done(function (value) {
                _this5.app.loading.hide();
                console.log('projectInfoprojectInfo', value.data);
                _this5.model.setData('projectInfo', value.data);
                _this5.imageDataType = String(value.data.seriesImgFileType) == "2" ? "orgin" : "noneOrgin";
                //this.imageType = String(value.data.seriesImgFileType) == 2 ? "DCM" : "JPG"
            });
            this.apiload();
        }
    }, {
        key: 'apiload',
        value: function apiload() {}

        //关闭菜单功能，生成病症的选项

    }, {
        key: 'annotationIteminit',
        value: function annotationIteminit() {
            var projectInfo = this.model.projectInfo;
            var tool = {};
            projectInfo.imageAnnotationList.map(function (item) {
                item.toolList.map(function (res) {
                    if (!tool[res.type]) {
                        tool[res.type] = [];
                    }
                    var tempD = JSON.parse(JSON.stringify(res));
                    tempD.imageAnnotation = item.type;
                    tempD.imageAnnotationId = item.id;
                    tool[res.type].push(tempD);
                });
            });
            this.model.toolInfo = tool;
            for (var i in tool) {
                switch (i) {
                    case "ELLIPSE":
                        this.dicommenu.openadd(tool[i], "ellipticalRoi");
                        break;
                    case "RECTANGLE":
                        this.dicommenu.openadd(tool[i], "rectangleRoi");
                        //this.dicommenu.openadd(tool[i], "simpleAngle")
                        break;
                    case "COBB":
                        this.dicommenu.openadd(tool[i], "cobb");
                        break;
                    case "ALIGNMENT":
                        this.dicommenu.openadd(tool[i], "alignment");
                        break;
                    case "PEN":
                        this.dicommenu.openadd(tool[i], "brush");
                        this.dicommenu.openadd(tool[i], "earse");
                        break;
                    case "POINT":
                        this.dicommenu.openadd(tool[i], "brush");
                        this.dicommenu.openadd(tool[i], "earse");
                        break;
                    case "ANGLE":
                        this.dicommenu.openadd(tool[i], "simpleAngle");
                        break;
                    case "LINE":
                        this.dicommenu.openadd(tool[i], "length");
                        break;
                    case "MAGIC_STICK_SINGLE":
                        this.dicommenu.openadd(tool[i], "magicStickSingle");
                        this.dicommenu.openadd(tool[i], "brush");
                        this.dicommenu.openadd(tool[i], "earse");
                        break;
                    case "FREEHAND":
                        this.dicommenu.openadd(tool[i], "freehand");
                        this.dicommenu.openadd(tool[i], "brush");
                        this.dicommenu.openadd(tool[i], "earse");
                        break;
                    case "FREEHANDLINE":
                        this.dicommenu.openadd(tool[i], "freehand");
                        this.dicommenu.openadd(tool[i], "brush");
                        this.dicommenu.openadd(tool[i], "earse");
                        break;
                    case "POLYGON":
                        this.dicommenu.openadd(tool[i], "polygon");
                        this.dicommenu.openadd(tool[i], "brush");
                        this.dicommenu.openadd(tool[i], "earse");
                        break;
                    case "QSELECT":
                        this.dicommenu.openadd(tool[i], "quickselect");
                        this.dicommenu.openadd(tool[i], "brush");
                        this.dicommenu.openadd(tool[i], "earse");
                        break;
                    case "REGION_PAINT":
                        this.dicommenu.openadd(tool[i], "regionpaint");
                        this.dicommenu.openadd(tool[i], "brush");
                        this.dicommenu.openadd(tool[i], "earse");
                        break;
                }
            }
            //翻译所有的标注组件信息
            var nidusinfo = {
                all: {}
            };
            console.log(projectInfo.annotationItemList, '我是哈啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊');
            nidusinfo.all = this.translateData(projectInfo.annotationItemList);
            for (var _i = 0; _i < projectInfo.imageAnnotationList.length; _i++) {
                var teampData = projectInfo.imageAnnotationList[_i].annotationItemList;
                if (teampData.length != 0) {
                    nidusinfo[projectInfo.imageAnnotationList[_i].type] = this.translateData(projectInfo.imageAnnotationList[_i].annotationItemList);
                }
            }
            //console.log(this.model.taskInfo.studyAnno,'this.model.taskInfo.studyAnnothis.model.taskInfo.studyAnnothis.model.taskInfo.studyAnno')

            console.log(nidusinfo, '===============');
            this.cornerstoneContorl.model.nidusComponentInfo = Tool.clone(nidusinfo);
            nidusinfo = null;
            console.log(nidusinfo);
            this.series_get();

            //this.cornerstoneContorl.makeAllInfo()
        }

        //************************标注相关*************************
        //获取需要标注的序列

    }, {
        key: 'series_get',
        value: function series_get() {}

        //标注基础信息准备完成，进入这一轮标注的起始点

    }, {
        key: 'start_series',
        value: function start_series() {
            var data = this.model.series_result_id;
            console.log(data, 'data');
            for (var i = 0; i < data.seriesInstanceUids.length; i++) {
                //  console.log(data.seriesInstanceUids[i])
                this.getSeriesAllImage(data.seriesInstanceUids[i]);
            }
            this.result_get_fromback();
        }
    }, {
        key: 'getSeriesAllImage',
        value: function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(data) {
                var seriesInstanceUID, value, tdata, temp, res, imagesAll, j, urlPath, item, posNum, i, aa, w, imageId, url;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                seriesInstanceUID = _typeof(data.seriesInstanceUid) == "object" ? data.seriesInstanceUid.series : data.seriesInstanceUid;

                                this.model.seriesInfo[seriesInstanceUID] = {};
                                this.model.seriesInfo[seriesInstanceUID].needAnno = _typeof(data.seriesInstanceUid) == "object" ? data.seriesInstanceUid.needAnno : data.needAnno;
                                this.app.loading.show();
                                console.log(data);

                                console.log(seriesInstanceUID, _typeof(data.seriesInstanceUid));
                                if (seriesInstanceUID.lastIndexOf('-') != -1) {
                                    seriesInstanceUID = seriesInstanceUID.split('-')[0];
                                }
                                _context2.next = 9;
                                return this.api.sys_transfer({
                                    service: "DR",
                                    method: '/v1/series/read',
                                    params: JSON.stringify({
                                        "seriesInstanceUID": seriesInstanceUID
                                    })
                                });

                            case 9:
                                value = _context2.sent;

                                this.app.loading.hide();
                                this.model.seriesInfo[seriesInstanceUID].info = value;
                                if (value.data.fileType == 'DCM' && value.data.modality != 'DR' && value.data.modality != 'CX' && value.data.modality != 'CR' && value.data.modality != 'DX') {
                                    this.dicommenu.openadd([], "mpr");
                                    this.dicommenu.openadd([], "add");
                                    this.dicommenu.openadd([], "sub");
                                    this.dicommenu.openadd([], "copd");
                                }
                                //this.imageType = value.data.fileType
                                _context2.t0 = value.data.fileType;
                                _context2.next = _context2.t0 === "DCM" ? 16 : _context2.t0 === "NII" ? 18 : _context2.t0 === "JPG" ? 20 : 22;
                                break;

                            case 16:
                                if (this.imageDataType == 'noneOrgin') {
                                    this.imageType = "JPG";
                                } else {
                                    this.imageType = "DCM";
                                }
                                return _context2.abrupt('break', 24);

                            case 18:
                                this.imageType = "JPG";
                                return _context2.abrupt('break', 24);

                            case 20:
                                if (this.imageDataType == 'noneOrgin') {
                                    this.imageType = "JPG_COMPRESS";
                                } else {
                                    this.imageType = "JPG";
                                }
                                return _context2.abrupt('break', 24);

                            case 22:
                                this.imageType = "JPG";
                                return _context2.abrupt('break', 24);

                            case 24:
                                if (!(!value.data.jpgInfo && value.data.fileType == "DCM" && !this.model.taskInfo)) {
                                    _context2.next = 27;
                                    break;
                                }

                                this.app.alert.show({
                                    title: ' ',
                                    msg: '数据异常,点击确认进入下一个序列',
                                    close: false,
                                    sure: function sure() {
                                        that.discaseToDone({
                                            type: 98,
                                            des: '序列加载异常'
                                        });
                                    }
                                });
                                return _context2.abrupt('return');

                            case 27:
                                tdata = JSON.parse(value.data.jpgInfo);

                                this.model.seriesInfo[seriesInstanceUID].info.wwc = value.data.jpgInfo ? tdata : {
                                    low: 0,
                                    hight: 255,
                                    flag: 0
                                };
                                this.model.series_result_id.conclusion = value.data.conclusion;
                                this.model.series_result_id.finding = value.data.finding;
                                temp = this.model.seriesInfo[seriesInstanceUID].info.data.pixelSpacing ? this.model.seriesInfo[seriesInstanceUID].info.data.pixelSpacing.split('\\') : [1, 1];

                                this.model.seriesInfo[seriesInstanceUID].info.data.pixelSpacing = temp; // this.model.seriesInfo[seriesInstanceUID].info.data.pixelSpacing ? temp[0] * 1 : 1
                                this.model.seriesInfo[seriesInstanceUID].info.data.columnPixelSpacing = temp[0];
                                this.model.seriesInfo[seriesInstanceUID].info.data.rowPixelSpacing = temp[1];
                                this.model.setData('seriesInfo', this.model.seriesInfo);

                                _context2.next = 38;
                                return this.api.sys_transfer({
                                    service: "DR",
                                    method: '/v1/image/query',
                                    params: JSON.stringify({
                                        "seriesInstanceUID": seriesInstanceUID,
                                        "fileType": this.imageType
                                    })
                                });

                            case 38:
                                res = _context2.sent;


                                //console.log('image_queryimage_query', res.data, JSON.parse(res.data.jpgInfoLarge), JSON.parse(res.data.jpgInfoSmall), JSON.parse(res.data.jpgInfo))
                                //this.model.seriesInfo[data.seriesInstanceUid].imgs = []
                                console.log(seriesInstanceUID);
                                if (!this.model.seriesInfo[seriesInstanceUID]) {
                                    this.model.seriesInfo[seriesInstanceUID] = {};
                                }
                                this.model.seriesInfo[seriesInstanceUID].imagesAll = {};
                                imagesAll = this.model.seriesInfo[seriesInstanceUID].imagesAll;

                                if (this.imageType != "DCM") {
                                    this.model.seriesInfo[seriesInstanceUID].infoAll = {};
                                    this.model.seriesInfo[seriesInstanceUID].infoAll.large = res.data.jpgInfoLarge ? res.data.jpgInfoLarge : null;
                                    this.model.seriesInfo[seriesInstanceUID].infoAll.small = res.data.jpgInfoSmall ? res.data.jpgInfoSmall : null;
                                    this.model.seriesInfo[seriesInstanceUID].infoAll.default = res.data.jpgInfo ? res.data.jpgInfo : '{"low": 0,"hight": 255,"flag": 0}';
                                    if (!this.model.seriesInfo[seriesInstanceUID].info) {
                                        this.model.seriesInfo[seriesInstanceUID].info = {};
                                    }
                                    this.model.seriesInfo[seriesInstanceUID].info.wwc = JSON.parse(this.model.seriesInfo[seriesInstanceUID].infoAll.default);
                                }

                                // console.log('aaa', res.data.list)
                                _context2.next = 46;
                                return this.getPeoplePostion(seriesInstanceUID, data.imageList);

                            case 46:
                                // 执行完这个在执行下边的吗
                                this.model.seriesInfo[seriesInstanceUID].imgsTotal = null;
                                if (res.data.list) {
                                    for (j = 0; j < res.data.list.length; j++) {
                                        urlPath = void 0;
                                        item = res.data.list[j];
                                        //console.log('aaa', res.data.list[j], item)

                                        if (this.imageType != "DCM") {
                                            urlPath = 'myImageLoader:' + item.urlWAN; //.replace('proximatest.cn-sh2.ufileos.com', window.location.host + '/img')
                                        } else {
                                            urlPath = 'wadouri:' + item.urlWAN; //.replace('proximatest.cn-sh2.ufileos.com', window.location.host + '/img')
                                        }
                                        //let posArr = item.path.split('/')
                                        posNum = item.number; // Tool.changeToName(item.path) //posArr[posArr.length - 1].replace('.' + this.imageType.toLowerCase(), '') * 1 - 1

                                        if (!this.model.seriesInfo[seriesInstanceUID].imgsTotal) {
                                            this.model.seriesInfo[seriesInstanceUID].imgsTotal = 1; // item.number * 1
                                        } else if (this.model.seriesInfo[seriesInstanceUID].imgsTotal < item.number * 1) {
                                            this.model.seriesInfo[seriesInstanceUID].imgsTotal = item.number * 1;
                                        }
                                        if (item.windowType) {
                                            if (!imagesAll[item.windowType]) {
                                                imagesAll[item.windowType] = {};
                                                imagesAll[item.windowType].imgs = [];
                                            }
                                            imagesAll[item.windowType].imgs[posNum] = urlPath;
                                        } else {
                                            if (!imagesAll['default']) {
                                                imagesAll['default'] = {};
                                                imagesAll['default'].imgs = [];
                                            }
                                            imagesAll['default'].imgs[posNum] = urlPath;
                                        }
                                    }
                                }

                                if (!res.data.list || res.data.list.length == 0) {
                                    imagesAll['default'] = {};
                                    imagesAll['default'].imgs = [];
                                }
                                for (i in imagesAll) {
                                    if (data.imageList) {
                                        aa = [];

                                        for (w = 0; w < data.imageList.length; w++) {
                                            imageId = data.imageList[w];
                                            url = imagesAll[i].imgs[imageId] ? imagesAll[i].imgs[imageId] : null;
                                            //console.log(url)

                                            aa.push(url);
                                        }
                                        imagesAll[i].imgs = JSON.parse(JSON.stringify(aa));
                                        aa = null;
                                    }
                                    imagesAll[i].imgs = imagesAll[i].imgs.filter(function (item) {
                                        return item;
                                    });
                                }
                                this.model.seriesInfo[seriesInstanceUID].imgs = this.model.seriesInfo[seriesInstanceUID].imagesAll['default'].imgs.toString().split(',');
                                this.model.seriesInfo[seriesInstanceUID].imgs = this.model.seriesInfo[seriesInstanceUID].imgs.filter(function (item) {
                                    return item;
                                });
                                this.model.setData('seriesInfo', this.model.seriesInfo);

                            case 53:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function getSeriesAllImage(_x) {
                return _ref3.apply(this, arguments);
            }

            return getSeriesAllImage;
        }()
    }, {
        key: 'getPeoplePostion',
        value: function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(seriesInstanceUID, imglist) {
                var res, j, item, aa, w, imageId, url;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return this.api.sys_transfer({
                                    service: "DR",
                                    method: '/v1/image/query',
                                    params: JSON.stringify({
                                        "seriesInstanceUID": seriesInstanceUID,
                                        "fileType": "DCM"
                                    })
                                    /*this.api.image_query({
                                        group: data.seriesInstanceUid,
                                        'fileType': this.imageType*/
                                });

                            case 2:
                                res = _context3.sent;

                                if (!this.model.seriesInfo[seriesInstanceUID].people) {
                                    this.model.seriesInfo[seriesInstanceUID].people = [];
                                }
                                for (j = 0; j < res.data.list.length; j++) {
                                    item = res.data.list[j];
                                    //console.log(item, 'item.ImageOrientationPatientitem.ImageOrientationPatientitem.ImageOrientationPatient')

                                    if (item.imageOrientationPatient || item.imagePositionPatient) {
                                        //console.log('daskjkdlajkl')
                                        item.info = item.info ? item.info : {};
                                        item.info.imagePositionPatient = item.imagePositionPatient.split('\\');
                                        item.info.ImageOrientationPatient = item.imageOrientationPatient.split('\\');
                                        //console.log(item.imagePositionPatient)
                                        this.model.seriesInfo[seriesInstanceUID].people[item.number] = {
                                            imagePositionPatient: item.info.imagePositionPatient,
                                            ImageOrientationPatient: item.info.ImageOrientationPatient
                                        };
                                    } else {
                                        this.model.seriesInfo[seriesInstanceUID].people.push(null);
                                    }
                                }
                                if (imglist) {
                                    aa = [];

                                    for (w = 0; w < imglist.length; w++) {
                                        imageId = imglist[w];
                                        url = this.model.seriesInfo[seriesInstanceUID].people[imageId] ? this.model.seriesInfo[seriesInstanceUID].people[imageId] : null;

                                        aa.push(url);
                                    }
                                    this.model.seriesInfo[seriesInstanceUID].people = JSON.parse(JSON.stringify(aa));
                                    aa = null;
                                }

                            case 6:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function getPeoplePostion(_x2, _x3) {
                return _ref4.apply(this, arguments);
            }

            return getPeoplePostion;
        }()
    }, {
        key: 'result_get_fromback',
        value: function result_get_fromback() {
            if (window.location.hash.lastIndexOf('markaudit') != -1 || window.location.hash.lastIndexOf('drapCanvasAud') != -1 || window.location.hash.lastIndexOf('drapCanvsPro') != -1) {
                this.audito_result_get_fromback();
            }
        }
    }, {
        key: 'audito_result_get_fromback',
        value: function audito_result_get_fromback() {
            var _this6 = this;

            if (this.model.taskInfo) {
                if (this.model.taskInfo.hasYay * 1 == 1) {
                    this.dicommenu.openYY();
                }
            }
            var need = 'all';
            if (this.model.taskInfo.studyAnno) {
                need = 'study';
            }

            var _loop = function _loop(i) {
                _this6.api.series_result_read({
                    sarId: _this6.model.series_result_id.seriesInstanceUids[i].seriesAnnotationResultId //this.model.series_result_id.seriesAnnotationResultId
                }).done(function (value) {
                    _this6.model.translateBackData(value, _this6.model.projectInfo.annotationItemList);
                    var sIdcon = _this6.model.series_result_id.seriesInstanceUids[i].seriesInstanceUid;
                    var seriesInstanceUID = (typeof sIdcon === 'undefined' ? 'undefined' : _typeof(sIdcon)) == "object" ? sIdcon.series : sIdcon.seriesInstanceUid;
                    value.data.seriesInstanceUid = value.data.seriesUid; //seriesInstanceUID
                    _this6.model.seriesResult[value.data.seriesUid] = value;
                    _this6.model.series_result_id.remark = value.data.remark;
                    if (need == 'all' || need == 'study') {
                        console.log(value.data.annoResultList, 'value.data.annoResultList');
                        for (var w = 0; w < value.data.annoResultList.length; w++) {
                            _this6.dicommenu.addDoctorSocre(value.data.annoResultList[w].doctorName, value.data.annoResultList[w].hasYay ? value.data.annoResultList[w].yayAttributes : "无");
                        }
                        if (need == 'study') {
                            need = 'close';
                        }
                    }

                    if (value.data.yayAttributes) {
                        _this6.dicommenu.openYY();
                        _this6.dicommenu.setYY(value.data.yayAttributes);
                    }
                    _this6.model.setData('seriesResult', _this6.model.seriesResult);
                    if (window.location.hash.lastIndexOf('view') != -1) {
                        _this6.dicommenu.closeYY();
                        return;
                    }
                    if (i == _this6.model.series_result_id.seriesInstanceUids.length - 1) {
                        _this6.api.audit_annoitem_update({
                            sarIdList: _this6.getSarIds(), //value.data.sarId,
                            type: "ANNOITEM",
                            resultList: _this6.model.changeItemDataToBackendCheck(value.data.annotationItemResultList)
                        }).done(function () {});
                    }
                });
            };

            for (var i = 0; i < this.model.series_result_id.seriesInstanceUids.length; i++) {
                _loop(i);
            }
        }

        //************************标注相关*************************

        //************************影像数据列表************************
        //影像信息获得数据后进行加载内容

    }, {
        key: 'cornerstoneStart',
        value: function cornerstoneStart() {
            var _this7 = this;

            if (this.model.projectInfo.isYayAttributes) {
                this.dicommenu.openYY();
            }
            //console.log(this.model.seriesResult,this.model.taskInfo,this.model.projectInfo)
            this.dicommenu.setYY(this.model.seriesResult);
            for (var i in this.model.seriesInfo) {
                var data = this.model.seriesInfo[i];
                //console.log(data)
                window.fileTypeName = data.info.data.fileType;
                this.cornerstoneContorl.imageType = this.imageType;
                if (this.model.taskInfo.studyAnno) {
                    this.dicommenu.openadd([], "screen");
                }
                console.log('cornerstone准备初始化');
                //console.log(data.imgsTotal, data.imgs, data.info)
                this.cornerstoneContorl.penRealy = false;
                this.cornerstoneContorl.initCT(data.imgsTotal, data.imgs, data.info);
                this.cornerstoneContorl.event._addEvent('ctcornerstone.wlChange', function (value) {
                    var menuChoose = {
                        c: value.wwc.c,
                        w: value.wwc.w
                    };
                    var wwc = _this7.model.projectInfo.seriesImgFileType == 2 ? {
                        wc: menuChoose.c,
                        ww: menuChoose.w
                    } : _this7.getwwc({
                        wc: menuChoose.c * 1,
                        ww: menuChoose.w * 1
                    }, value.sId);
                    console.log(wwc, value);
                    _this7.cornerstoneContorl.lungWindown(wwc.wc * 1, wwc.ww * 1, _this7.getMMCImage(wwc.ww * 1, value.sId));
                });
                console.log('cornerstone初始化');
                return;
            }
        }
    }, {
        key: 'getWidth',
        value: function getWidth(url) {
            return new Promise(function (resolve, reject) {
                var images = new Image();
                images.src = url;
                images.onload = function () {
                    if (this.width > 2000 || this.height > 2000) {
                        resolve(true);
                    } else {
                        resolve(false);
                    }
                };
            });
        }

        //初始化标注结果，当前序列

    }, {
        key: 'listInit',
        value: function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                var seriesResult, studyInfo, data, reslutData, annotationItemResultList, i, seriesUid, seriesInfo, nee, tempImageAnnotationResultList;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                //let seriesInfo = this.model.seriesInfo.info.data
                                seriesResult = this.model.seriesResult;
                                studyInfo = this.model.series_result_id;
                                data = {
                                    studyId: studyInfo.studyInstanceUid,
                                    sequenceName: studyInfo.studyInstanceUid,
                                    major: "major",
                                    id: studyInfo.studyInstanceUid
                                };
                                reslutData = [];
                                annotationItemResultList = null;
                                //console.log(seriesResult)
                                //console.log(this.model.seriesInfo,seriesResult)

                                for (i in seriesResult) {
                                    seriesUid = seriesResult[i].data.seriesInstanceUid || seriesResult[i].data.seriesUid;
                                    seriesInfo = this.model.seriesInfo[seriesUid] ? this.model.seriesInfo[seriesUid].info.data : {
                                        modality: null,
                                        fileType: "JPG"
                                    };
                                    nee = false;

                                    if (seriesInfo.fileType == "DCM" && (seriesInfo.modality == 'DX' || seriesInfo.modality == 'DR' || seriesInfo.modality == 'CR')) {
                                        //nee = true
                                    }
                                    tempImageAnnotationResultList = seriesResult[i].data.imageAnnotationResultList;

                                    this.model.translateDataReslut(tempImageAnnotationResultList, seriesUid, nee);

                                    reslutData = reslutData.concat(tempImageAnnotationResultList);
                                    this.model.seriesInfo[seriesUid].sarId = i;
                                    this.model.seriesInfo[seriesUid].hasMarked = !!tempImageAnnotationResultList.length;
                                    if (!annotationItemResultList) {
                                        annotationItemResultList = seriesResult[i].data.annotationItemResultList;
                                    }
                                    this.cornerstoneContorl.fileTypeName = seriesInfo.fileType;
                                }
                                //console.log(reslutData, this.model.taskInfo.studyAnno, data, this.model.seriesInfo)
                                this.cornerstoneContorl.model.seriesInfo = this.model.seriesInfo;
                                //console.log(this.model.seriesInfo)
                                if (this.model.taskInfo.studyAnno && !this.model.projectInfo.largeFigure) {
                                    this.cornerstoneContorl.setSequenceLists(this.model.seriesInfo, this.imageType);
                                } else {
                                    this.cornerstoneContorl.closeSequenceLists();
                                }
                                this.cornerstoneContorl.setSequence([data], reslutData);
                                studyInfo.showReport = this.model.projectInfo.showReport; //doctorNidduleAll

                                this.cornerstoneContorl.setSeriesNidusData(annotationItemResultList, studyInfo, seriesResult);
                                this.getAllimageData(reslutData);

                            case 12:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function listInit() {
                return _ref5.apply(this, arguments);
            }

            return listInit;
        }()
    }, {
        key: 'getAllimageData',
        value: function getAllimageData(imageAnnotationResultList) {
            var _this8 = this;

            var seriesResultData = imageAnnotationResultList; // this.model.seriesResult.data.imageAnnotationResultList
            var that = this;
            var open = false;
            this.model.loadData = {
                total: 0,
                num: 0
            };
            seriesResultData.map(function () {
                var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(item) {
                    var anId, resRead;
                    return regeneratorRuntime.wrap(function _callee5$(_context5) {
                        while (1) {
                            switch (_context5.prev = _context5.next) {
                                case 0:
                                    anId = String(item.id).lastIndexOf('_') != -1 ? item.id.split('_')[1] : item.id;

                                    if (!(item.imageAnnotationToolType == "MAGIC_STICK_SINGLE")) {
                                        _context5.next = 9;
                                        break;
                                    }

                                    // open = true
                                    console.log(item);
                                    item.brush = true;
                                    _context5.next = 6;
                                    return that.api.magicToolRead({
                                        id: anId
                                    });

                                case 6:
                                    resRead = _context5.sent;

                                    that.baseMagicTranData(item.id, resRead, item, false);
                                    _this8.model.loadData.total++;

                                case 9:
                                    //console.log(item.imageAnnotationToolType, '======================')
                                    if (item.imageAnnotationToolType == "POLYGON" || item.imageAnnotationToolType == "QSELECT" || item.imageAnnotationToolType == "REGION_PAINT" || item.imageAnnotationToolType == "FREEHAND") {
                                        _this8.model.loadData.total++;
                                        item.brush = true;
                                        //let anId = String(item.id).lastIndexOf('_') != -1 ? item.id.split('_')[1] : item.id
                                        _this8.api.anno_iar_read({
                                            "id": anId * 1
                                        }).done(function (res) {
                                            if (!res.data) {
                                                that.model.loadData.total--;
                                            }
                                            var data = {
                                                id: item.result,
                                                images: res.data.imageList,
                                                sId: item.sId
                                            };
                                            var LESION = Tool.configxlkformat(that.app.constmap.LESION);

                                            var who = LESION.find(function (res) {
                                                return res.idx == item.imageAnnotationType;
                                            });
                                            var needFlag = false;

                                            if (who && who.val == '心脏分割') {
                                                needFlag = true;
                                                console.log(res.data.imageList[0]);
                                                var numPos = res.data.imageList[0].urlWan.split('?')[0].split('/');
                                                console.log(numPos);
                                                that.cornerstoneContorl.setNname(anId * 1, numPos[numPos.length - 2] * 1);
                                                console.log(anId * 1, res.data.imageList[0]);
                                            }
                                            var cloneData = false;
                                            if (who && who.val == 'MCA供血分区') {
                                                cloneData = true;
                                            }
                                            that.creatAllPoint(data, item, false, needFlag, cloneData);
                                            //console.log('getAllimageDatagetAllimageDatagetAllimageData', res.data)
                                            //that.creatAllPoint(data, item, false, needFlag)
                                        });
                                    }

                                case 10:
                                case 'end':
                                    return _context5.stop();
                            }
                        }
                    }, _callee5, _this8);
                }));

                return function (_x4) {
                    return _ref6.apply(this, arguments);
                };
            }());
            if (open) {
                this.cornerstoneContorl.updataSequencelist(seriesResultData[0]);
                var magicloadingClass = __webpack_require__(645);
                that.magicloading = that.app.loadModal(magicloadingClass, {
                    adv: true,
                    title: '正在加载标注过的病症数据，请耐心等待'
                });
            }
        }

        //接口统一由标注平台封包的结果

    }, {
        key: 'creatAllPoint',
        value: function creatAllPoint(imgs, data, apineed, whichModel, cloneData) {
            var postData = {};
            postData.result = imgs.id;
            var rid = void 0;
            var otherSid = void 0;
            for (var i in this.model.seriesResult) {
                if (this.model.seriesResult[i].data.seriesInstanceUid == data.sId) {
                    rid = i;
                } else {
                    otherSid = this.model.seriesResult[i].data.seriesInstanceUid;
                }
            }

            postData.seriesAnnotationResultId = rid; // this.model.seriesResult.data.id //.info.data.seriesInstanceUID
            postData.imageAnnotationId = data.toolType.imageAnnotationId;
            postData.imageAnnotationToolId = data.toolType.id;
            var serInfo = this.model.seriesInfo[data.sId];
            var newdata = {
                imglist: this.model.getImagesBack(imgs.images, serInfo.info.wwc.flag, serInfo.imgsTotal),
                id: data.backId,
                rid: data.backId,
                sId: data.sId
            };
            if (cloneData) {
                //let newdataClone = Tool.clone(newdata)
                newdata.sId += "_" + otherSid;
                this.cornerstoneContorl.updateSequencelistSid(newdata);
                //this.needApiAll(data, apineed, newdataClone, postData)
            }

            if (whichModel) {
                newdata.imglist = this.model.getImages(imgs.images, serInfo.info.wwc.flag, serInfo.imgsTotal);
            }
            newdata.needScale = this.model.judgeX(serInfo.info.data.fileType, serInfo.info.data.modality);
            this.needApiAll(data, apineed, newdata, postData);
        }

        //创造一个钙化灶

    }, {
        key: 'creatOnePoint',
        value: function creatOnePoint(imgs, data, apineed) {
            //console.log(this.model.seriesResult)
            var seriesResultId = void 0;
            for (var i in this.model.seriesResult) {
                if (this.model.seriesResult[i].data.seriesInstanceUid == data.sId) {
                    seriesResultId = i;
                }
            }
            var postData = {};
            postData.result = imgs.id;
            postData.seriesAnnotationResultId = seriesResultId;
            postData.imageAnnotationId = data.toolType.imageAnnotationId;
            postData.imageAnnotationToolId = data.toolType.id;
            var serInfo = this.model.seriesInfo[data.sId];
            var newdata = {
                imglist: this.model.getImages(imgs.images, serInfo.info.wwc.flag, serInfo.imgsTotal),
                id: data.backId,
                rid: imgs.id,
                sId: data.sId
            };
            newdata.needScale = this.model.judgeX(this.model.seriesInfo[data.sId].info.data.fileType, this.model.seriesInfo[data.sId].info.data.modality);
            /*if (this.model.seriesInfo[data.sId].info.data.fileType == "DCM" && (this.model.seriesInfo[data.sId].info.data.modality == 'DX' || this.model.seriesInfo[data.sId].info.data.modality == 'DR' || this.model.seriesInfo[data.sId].info.data.modality == 'CR')) {
                //true
            }*/
            this.needApiAll(data, apineed, newdata, postData);
        }

        /**
         * 魔法棒 数据转换
         * @param createId 创建返回的id
         * @param resRead 读取创建返回的数据
         * @param data 选择的数据
         * @param apineed 布尔值
         */

    }, {
        key: 'baseMagicTranData',
        value: function baseMagicTranData(createId, resRead, data, apineed, seriesResultId) {
            var serInfo = this.model.seriesInfo[data.sId];
            var newdata = {
                imglist: this.model.getImages(resRead.data.imageList, serInfo.info.wwc.flag, serInfo.imgsTotal),
                id: createId,
                rid: createId,
                sId: data.sId,
                needScale: this.model.judgeX(serInfo.info.data.fileType, serInfo.info.data.modality)
            };
            data.id = createId;
            data.backId = createId;
            if (apineed) {
                data.brush = true;
                this.cornerstoneContorl.updataSequencelist(data);
            }
            this.cornerstoneContorl.setbrush(newdata);
            // this.needApiAll(data, apineed, newdata, postData)
        }
    }, {
        key: 'needApiAll',
        value: function needApiAll(data, apineed, newdata, postData) {}

        //---------------------------------------
        //获取窗宽窗位

    }, {
        key: 'getwwc',
        value: function getwwc(orignwc, sId, def) {
            var all = [orignwc.wc - orignwc.ww / 2, orignwc.ww / 2 + orignwc.wc];
            console.log(orignwc, this.model.seriesInfo[sId].info.wwc, def);
            if (this.imageType != "DCM") {
                this.model.seriesInfo[sId].info.wwc = JSON.parse(this.model.seriesInfo[sId].infoAll.default);
                if (!def) {
                    if (orignwc.ww <= 200) {
                        if (this.model.seriesInfo[sId].infoAll.small) {
                            this.model.seriesInfo[sId].info.wwc = JSON.parse(this.model.seriesInfo[sId].infoAll.small);
                        }
                    }
                    if (orignwc.ww > 1000) {
                        if (this.model.seriesInfo[sId].infoAll.large) {
                            this.model.seriesInfo[sId].info.wwc = JSON.parse(this.model.seriesInfo[sId].infoAll.large);
                        }
                    }
                }
            } else {
                return orignwc;
            }
            if (this.model.seriesInfo[sId].info.wwc) {
                var mindata = this.model.seriesInfo[sId].info.wwc.low * 1;
                var range = this.model.seriesInfo[sId].info.wwc.hight * 1 - this.model.seriesInfo[sId].info.wwc.low * 1;
                //console.log(mindata, range, all)
                var minS = 255 * (all[0] - mindata) / range;
                var maxS = 255 * (all[1] - mindata) / range;
                //minS = minS < 0 ? 0 : minS
                //maxS = maxS > 255 ? 255 : maxS
                //console.log(maxS, minS)
                return {
                    wc: (minS + maxS) / 2,
                    ww: maxS - minS
                };
            } else {
                return orignwc;
            }
        }
    }, {
        key: 'makeWwC',
        value: function makeWwC(sId) {
            //sId为序列号
            if (this.dicommenu.chooseData) {
                var menuChoose = this.dicommenu.chooseData.wl ? this.dicommenu.chooseData.wl : {
                    c: null,
                    w: null
                };
                if (menuChoose.c == null && menuChoose.w == null) {
                    console.log(this.model.seriesInfo, sId, '');
                    var sinfo = this.model.seriesInfo[sId].info;
                    //if(menuChoose.w)
                    if (sinfo.data.firstWindowCenter && sinfo.data.firstWindowWidth && sinfo.data.jpgInfo != "{}") {
                        /*let wwc1 = this.getwwc({
                            wc: sinfo.data.windowCenterUpper * 1,
                            ww: sinfo.data.windowWidthUpper * 1
                        }, sId)*/
                        var wwc1 = this.model.projectInfo.seriesImgFileType == 2 ? {
                            wc: sinfo.data.firstWindowCenter,
                            ww: sinfo.data.firstWindowWidth
                        } : this.getwwc({
                            wc: sinfo.data.firstWindowCenter * 1,
                            ww: sinfo.data.firstWindowWidth * 1
                        }, sId, 'def');
                        this.cornerstoneContorl.lungWindown(wwc1.wc * 1, wwc1.ww * 1, this.getMMCImage(wwc1.ww, sId));
                    } else if (sinfo.data.firstWindowCenter && sinfo.data.firstWindowWidth && this.imageType == "DCM") {
                        var _wwc = this.model.projectInfo.seriesImgFileType == 2 ? {
                            wc: sinfo.data.firstWindowCenter,
                            ww: sinfo.data.firstWindowWidth
                        } : this.getwwc({
                            wc: sinfo.data.firstWindowCenter * 1,
                            ww: sinfo.data.firstWindowWidth * 1
                        }, sId, 'def');
                        console.log(_wwc);
                        this.cornerstoneContorl.lungWindown(_wwc.wc * 1, _wwc.ww * 1, this.getMMCImage(_wwc.ww, sId));
                    } else {
                        this.cornerstoneContorl.lungWindown(null, null, this.getMMCImage(null, sId));
                    }
                } else {
                    /*let wwc = this.getwwc({
                        wc: menuChoose.c * 1,
                        ww: menuChoose.w * 1
                    }, sId)*/
                    var wwc = this.model.projectInfo.seriesImgFileType == 2 ? {
                        wc: menuChoose.c,
                        ww: menuChoose.w
                    } : this.getwwc({
                        wc: menuChoose.c * 1,
                        ww: menuChoose.w * 1
                    }, sId);
                    this.cornerstoneContorl.lungWindown(wwc.wc * 1, wwc.ww * 1, this.getMMCImage(menuChoose.w * 1, sId));
                }
            } else {
                this.cornerstoneContorl.lungWindown(null, null, this.getMMCImage(null, sId));
            }
        }

        //--------------------------废片处理

    }, {
        key: 'openRemove',
        value: function openRemove() {
            var _this9 = this;

            var removeseries = __webpack_require__(733);
            var discardList = this.model.projectInfo.discardList ? this.model.projectInfo.discardList : null;
            var remove_s = this.app.loadModal(removeseries, {
                adv: false,
                class: "xs",
                title: "请选择该序列标为废片的原因",
                data: discardList
            });
            remove_s.event._addEvent('modal.confirm', function () {
                //console.log(remove_s.res, 'remove_s.resremove_s.resremove_s.res')
                var sorce = JSON.parse(JSON.stringify(remove_s.res));
                if (JSON.stringify(remove_s.res) == "{}") {
                    remove_s.showError(0);
                    return;
                }
                if (remove_s.res.type = "99" && !remove_s.res.des) {
                    remove_s.showError(1);
                    return;
                }

                _this9.discaseToDone(sorce, remove_s);
                remove_s.close();
            });
        }
        //----------------------------------------一些通用方法不牵扯流程---------------------------------
        //翻译组件的信息为渲染和扩展准备

    }, {
        key: 'translateData',
        value: function translateData(list) {

            var obj = {};

            var _loop2 = function _loop2(i) {
                var teampData = list[i];
                var key = teampData.id; //teampData.componentName
                obj[key] = list[i];
                obj[key].id = teampData.id;
                obj[key].type = teampData.componentType;
                obj[key].name = teampData.componentName;
                if (teampData.componentParameter) {
                    if (_typeof(JSON.parse(teampData.componentParameter)) == 'object') {
                        if (JSON.parse(teampData.componentParameter).hasnull) {
                            teampData.type = "checkbox-sp";
                        }
                    } else {
                        teampData.componentParameter = null;
                    }
                }
                //console.log(teampData.componentData, 'teampData.componentData')
                if (teampData.componentData) {
                    obj[key].data = {};
                    if (teampData.type == "checkbox-sp") {
                        obj[key].data["-1"] = "无";
                    }
                    if (_typeof(JSON.parse(teampData.componentParameter)) == 'object') {
                        JSON.parse(teampData.componentData).map(function (item) {
                            obj[key].data[item.code] = item.text;
                        });
                    } else {
                        teampData.componentData = null;
                    }
                }
            };

            for (var i = 0; i < list.length; i++) {
                _loop2(i);
            }
            return obj;
        }
        //获取的序列的总张数

    }, {
        key: 'getSericesTotal',
        value: function getSericesTotal(array) {
            //sid为序列sericesId
            var len = array.length - 1;
            //let len = this.model.seriesInfo[sId].imgs.length - 1
            var total = Tool.changeToName(array[len]);
            return total;
        }

        //************************废片区*************************

    }, {
        key: 'discaseToDone',
        value: function discaseToDone(value, dom) {}
        //************************废片区*************************

        //************************弹框区*************************
        //提交整个序列事件

    }, {
        key: 'btnEvent',
        value: function btnEvent() {}

        //提交当前在标注的序列

    }, {
        key: 'submitSeries',
        value: function submitSeries() {}

        //经过检查能够进行提交了

    }, {
        key: 'series_submit',
        value: function series_submit() {}

        //检查报错部分并且要显示的部分

    }, {
        key: 'errorShow',
        value: function errorShow(item, node) {}
    }, {
        key: 'alerError',
        value: function alerError(msg) {
            this.app.alert.show({
                title: ' ',
                msg: msg,
                close: true
            });
        }

        //缓存里面的序列用完了以后的事情

    }, {
        key: 'submitFinish',
        value: function submitFinish(data) {}

        //页面切换的需要清空的

    }, {
        key: 'dispose',
        value: function dispose() {
            if (this.cornerstoneContorl) {
                this.cornerstoneContorl.close();
            }
            if (this.progress) {
                this.progress.close();
            }
            if (this.alertSubmit) {
                this.alertSubmit.close();
            }
            ES.selctorDoc(window).off('keydown');
            ES.selctorDoc(window).off('mousemove');
            this.app.alert.hide();
        }

        //系统自适应

    }, {
        key: 'resize',
        value: function resize() {
            if (this.cornerstoneContorl) {
                this.cornerstoneContorl.resize();
            }
        }
    }, {
        key: 'getSarIds',
        value: function getSarIds() {
            var ids = [];
            for (var i in this.model.seriesResult) {
                ids.push(i);
            }
            return ids.toString();
        }
    }]);

    return MarkBase;
}(Interstellar.pagesBase);

window.MarkBase = window.MarkBase || MarkBase;
module.exports = MarkBase;

/***/ }),

/***/ 700:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(701);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./cttool.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./cttool.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 701:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".ctcornerstone {\n  width: 100%;\n  position: relative;\n}\n.ctcornerstone .drapCanvasPro {\n  margin-right: 174px;\n}\n.ctcornerstone #canvas_box {\n  position: relative;\n  overflow: hidden;\n  float: left;\n}\n.ctcornerstone .cicle {\n  position: fixed;\n  border: 1px dashed #000;\n  display: none;\n  background: transparent;\n  top: 0;\n  left: 0;\n  z-index: 1000;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  pointer-events: none;\n}\n.ctcornerstone .xulielist {\n  float: left;\n  width: 180px;\n  background: #0a2634;\n}\n.ctcornerstone .info {\n  float: left;\n  width: 290px;\n  background: #0a2634;\n}\n.ctcornerstone .nidus_content {\n  position: absolute;\n  width: 290px;\n  top: 0;\n  right: 0;\n  display: none;\n  z-index: 20;\n}\n.ctcornerstone .allcornerstone {\n  position: relative;\n}\n.ctcornerstone .slist {\n  position: absolute;\n  left: 180px;\n  bottom: 0;\n  height: 100px;\n}\n.ctcornerstone .submit_data {\n  width: 200px;\n  height: 30px;\n  position: absolute;\n  left: 50%;\n  margin-left: -100px;\n  background: #0a2634;\n  border-radius: 5px;\n  display: none;\n}\n.ctcornerstone .submit_data span {\n  font-size: 14px;\n  line-height: 30px;\n  color: #d2effc;\n}\n", ""]);

// exports


/***/ }),

/***/ 702:
/***/ (function(module, exports) {

module.exports = "<div class=ctcornerstone> <div class=xulielist></div> <div id=canvas_box> <canvas id=canvas oncontextmenu=return!1 unselectable=on onselectstart=return!1 onmousedown=return!1></canvas> <div class=tp></div> </div> <div class=info></div> <div class=nidus_content></div> <div style=clear:both></div> <div class=slist></div> <div class=cicle unselectable=on onselectstart=return!1 onmousedown=return!1 onmouseover=return!1 onmousemove=return!1></div> </div> <div style=clear:both></div>";

/***/ }),

/***/ 703:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//这边基本上引入需要使用的资源less，api，需要使用的模块等等。
//存放在里面用的一些静态信息。这些都是由接口获取的，然后由页面直接传入
/*
nidusComponentInfo 保存所有组件信息。组件信息分为两块，一块是整体序列的信息，key值为all
另外一块是病症的组件信息。分别以病症的命名来保存的

nidusComponentData 保存每个被标注出来的病症的组件数据是什么

nidusChoose 选择了的病灶信息
*/

var ctmanage = function (_Interstellar$modelBa) {
  _inherits(ctmanage, _Interstellar$modelBa);

  function ctmanage(app) {
    _classCallCheck(this, ctmanage);

    var _this = _possibleConstructorReturn(this, (ctmanage.__proto__ || Object.getPrototypeOf(ctmanage)).call(this, app));

    _this.nidusComponentInfo = {};
    _this.nidusComponentData = {};
    _this.nidusChoose = null;
    _this.seriesInfo = {};
    _this.controlStauts = {
      delete: true
    };
    _this.allresult = null;
    var wh = _this.getCanvasSize();

    _this._pathSize = 254;
    _this._section = 254;
    _this._changeRange = Math.round(_this._section / 3);
    var crl = _this.viewPortColRow({ w: wh.width, h: wh.height });
    _this.blank = "";
    _this.seriesNext = [];
    _this.getBlankImg();
    _this._vpCanvasInfo = {
      width: wh.width,
      height: wh.height,
      colnum: crl.col,
      row: crl.row,
      length: crl.length
    };
    _this._orginImgSizes = {};

    _this.sequence = {}; // 图片信息
    _this.numberList = [];
    _this.breviaryImg = {
      width: 600,
      height: 225,
      top: 0,
      left: 0
    };
    _this._breviaryImgBorder = {
      width: 148,
      height: 148
    };
    _this.imageLeftPoint = { x: 0, y: 0 };
    _this.imagePool = [];
    _this.beforeImages = [];
    _this.afterImages = [];
    _this.nowImageLevel = "1x";
    return _this;
  }

  _createClass(ctmanage, [{
    key: "viewPortColRow",
    value: function viewPortColRow(wh) {
      return {
        col: Math.ceil(1.5 * wh.w / this._pathSize) + 2,
        row: Math.ceil(1.5 * wh.h / this._pathSize) + 2,
        length: (Math.ceil(1.5 * wh.w / this._pathSize) + 2) * (Math.ceil(1.5 * wh.h / this._pathSize) + 2)
      };
    }
  }, {
    key: "changeViewPort",
    value: function changeViewPort(vp) {
      this.setPrivate(this._vpCanvasInfo, vp);
      //this._vpCanvasInfo = value
    }
  }, {
    key: "backImageNumber",
    value: function backImageNumber(cr) {
      if (cr.bitmapNumx >= this._orginImgSizes[this.nowImageLevel].colnum || cr.bitmapNumy >= this._orginImgSizes[this.nowImageLevel].row) {
        return 'blank';
      }
      if (cr.bitmapNumy < 0 || cr.bitmapNumx < 0) {
        return 'blank';
      }
      return cr.bitmapNumx + cr.bitmapNumy * this._orginImgSizes[this.nowImageLevel].colnum + 1;
    }
  }, {
    key: "getCanvasSize",
    value: function getCanvasSize() {
      var width = window.innerWidth - 180 - 289;
      var height = window.innerHeight - 60 - 60;
      if (location.href.includes('drapCanvasPro')) {
        width -= 174;
      }
      return {
        width: width,
        height: height
      };
    }
  }, {
    key: "getBlankImg",
    value: function getBlankImg() {
      var _this2 = this;

      var image = new Image();
      image.onload = function (e) {
        _this2.blank = e.target;
      };
      image.src = '/images/blank.jpg';
      image.crossOrigin = "Anonymous";
    }
  }, {
    key: "returnRate",
    value: function returnRate() {
      var nowwidth = this._orginImgSizes[this.nowImageLevel].width * (this._pathSize / this._section);
      var maxWidth = this._orginImgSizes[this._orginImgSizes.length + 'x'].width;
      return maxWidth / nowwidth;
    }
  }, {
    key: "calSaveXYPos",
    value: function calSaveXYPos(data) {
      var rate = this.returnRate();
      var xd = Math.round((data.x - this.imageLeftPoint.x) * rate);
      var yd = Math.round((data.y - this.imageLeftPoint.y) * rate);
      return { x: xd, y: yd };
    }
  }, {
    key: "calXYPos",
    value: function calXYPos(data) {
      var xd = Math.round(data.x - this.imageLeftPoint.x);
      var yd = Math.round(data.y - this.imageLeftPoint.y);
      return { x: xd, y: yd };
    }
  }, {
    key: "calShowXYPos",
    value: function calShowXYPos(data) {
      var rate = 1 / this.returnRate();
      var xd = data.x * rate;
      var yd = data.y * rate;
      return { x: xd, y: yd };
    }
  }, {
    key: "returnNull",
    value: function returnNull(data) {
      var arr = [];
      for (var i in data) {
        if (!data[i].father || !data[i].child) {
          arr.push(i);
        }
      }
      var rate = 1 / this.returnRate();
      if (arr[0] && arr[1]) {
        var a = data[arr[0]];
        var b = data[arr[1]];
        var d = (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);
        d = d * rate * rate;
        if (d < 300) {
          if (!data[arr[0]].child) {
            data[arr[0]].child = data[arr[1]].x + '_' + data[arr[1]].y;
            data[arr[1]].father = data[arr[0]].x + '_' + data[arr[0]].y;
            return arr[1];
          } else {
            data[arr[1]].child = data[arr[0]].x + '_' + data[arr[0]].y;
            data[arr[0]].father = data[arr[1]].x + '_' + data[arr[1]].y;
            return arr[0];
          }
        }
      }

      return false;
    }
  }, {
    key: "removeData",
    value: function removeData(data, now) {
      var rate = this.returnRate();
      var xy = this.calXYPos({ x: now.x, y: now.y });
      var rangeX = [(xy.x - now.d) * rate, (xy.x + now.d) * rate];
      var rangeY = [(xy.y - now.y) * rate, (xy.y + now.d) * rate];
      for (var i in data) {
        if (data[i].x >= rangeX[0] && data[i].x <= rangeX[1] && data[i].y >= rangeY[0] && data[i].y <= rangeY[1]) {
          var f = data[i].father;
          var c = data[i].child;
          //console.log(i, f, c)
          delete data[i];
          if (data[f]) {
            data[f].child = null;
          }
          if (data[c]) {
            data[c].father = null;
          }
        }
      }
    }
  }, {
    key: "calGetMinDistance",
    value: function calGetMinDistance(data, point) {
      var who = void 0;
      var d = null;

      for (var i in data) {
        if (!data[i].father || !data[i].child) {
          var now = (data[i].x - point.x) * (data[i].x - point.x) + (data[i].y - point.y) * (data[i].y - point.y);
          //console.log(now,data[i])
          if (d == null) {
            d = now;
            who = i;
          } else {
            if (now < d) {
              who = i;
            }
          }
        }
      }
      //console.log(data[who],this.calShowXYPos(data[who].x, data[who].y))
      if (who) {
        if (!data[who].father || !data[who].child) {
          data[point.x + '_' + point.y] = { x: point.x, y: point.y };
          if (data[who].father) {
            data[point.x + '_' + point.y].father = who;
            data[who].child = point.x + '_' + point.y;
          } else {
            data[point.x + '_' + point.y].child = who;
            data[who].father = point.x + '_' + point.y;
          }
          return this.calShowXYPos({ x: data[who].x, y: data[who].y });
        } else {
          data[point.x + '_' + point.y] = { x: point.x, y: point.y, father: null, child: null };
          return this.calShowXYPos({ x: point.x, y: point.y });
        }
      } else {
        data[point.x + '_' + point.y] = { x: point.x, y: point.y, father: null, child: null };
        return this.calShowXYPos({ x: point.x, y: point.y });
      }
    }
  }, {
    key: "pathSize",
    get: function get() {
      return this._pathSize;
    },
    set: function set(value) {
      this.setPrivate(this, { _pathSize: value });
    }
  }, {
    key: "orginImgSizes",
    set: function set(value) {
      this.setPrivate(this, { _orginImgSizes: value });
    }
  }]);

  return ctmanage;
}(Interstellar.modelBase);

module.exports = ctmanage;

/***/ }),

/***/ 704:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//该类是对于基本的画圆什么的一些信息的管理
var manager = function () {
    function manager() {
        _classCallCheck(this, manager);

        this.init();
    }

    _createClass(manager, [{
        key: "init",
        value: function init() {
            this.info = {};
            this.singelId = Tool.getSigleId();
            this.brushInfo = {};
        }
    }, {
        key: "setInfo",
        value: function setInfo(value) {
            if (!value.uuid) {
                value.uuid = Tool.getSigleId();
            }
            this.info[value.uuid] = value;
            return this.info[value.uuid];
        }
    }, {
        key: "getInfo",
        value: function getInfo(value) {
            return this.info[value.uuid];
        }
    }, {
        key: "getAll",
        value: function getAll() {
            return this.info;
        }
    }, {
        key: "removeInfo",
        value: function removeInfo(value) {
            delete this.info[value.uuid];
        }
    }, {
        key: "removeAll",
        value: function removeAll() {
            this.info = {};
        }
    }]);

    return manager;
}();

//原型链一定要有的


module.exports = new manager();

/***/ }),

/***/ 705:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var freedhand = function () {
    function freedhand() {
        _classCallCheck(this, freedhand);
    }

    _createClass(freedhand, [{
        key: "creatPath",
        value: function creatPath() {}
    }]);

    return freedhand;
}();

//原型链一定要有的


module.exports = new freedhand();

/***/ }),

/***/ 706:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
model为外面的数据同步

事件
1.ThumbnailProgress.borClick 进度条的上下按钮
2.ThumbnailProgress.changeImage 缩放的时候需要换图
3.ThumbnailProgress.scaleImage 缩放的时候只缩放图片
4.ThumbnailProgress.dragThumbnail 拖动缩略图的红框
*/
var nowRange = 132;
var value = '';

var ThumbnailProgress = function (_Interstellar$moduleB) {
  _inherits(ThumbnailProgress, _Interstellar$moduleB);

  function ThumbnailProgress(app, dom, value, addMore) {
    _classCallCheck(this, ThumbnailProgress);

    var _this = _possibleConstructorReturn(this, (ThumbnailProgress.__proto__ || Object.getPrototypeOf(ThumbnailProgress)).call(this, app, dom, value, addMore));

    __webpack_require__(707);
    _this.html = __webpack_require__(709);
    _this.name = "ThumbnailProgress";
    _this.model = {};
    value = value;
    return _this;
  }

  _createClass(ThumbnailProgress, [{
    key: "complete",
    value: function complete() {
      //   this.initBreviaryImg()
      if (window.location.hash.lastIndexOf('/drapCanvasAud/') != -1 || window.location.hash.lastIndexOf('/drapCanvasAudEdit/') != -1) {
        this.dom.find('.breviary').css({ 'right': 180 });
        this.dom.find('.progress').css({ 'right': 200 });
      }
    }
    //缩略图

  }, {
    key: "initBreviaryImg",
    value: function initBreviaryImg() {
      var _this2 = this;

      var imageSrc = new Image();
      var that = this;
      imageSrc.id = "bre_img";
      imageSrc.onload = function () {
        that.dom.find('#bre_img').attr('src', this.src);
        var posObect = { width: 0, height: 0, top: 0, left: 0 };
        if (this.width / this.height < that.model._breviaryImgBorder.width / that.model._breviaryImgBorder.height) {
          posObect.height = that.model._breviaryImgBorder.height;
          posObect.top = 0;
          posObect.width = this.width * that.model._breviaryImgBorder.height / this.height;
          posObect.left = (that.model._breviaryImgBorder.width - posObect.width) / 2;
        } else {
          posObect.width = that.model._breviaryImgBorder.width;
          posObect.left = 0;
          posObect.height = this.height * that.model._breviaryImgBorder.width / this.width;
          posObect.top = (that.model._breviaryImgBorder.height - posObect.height) / 2;
        }
        that.model.breviaryImg = JSON.parse(JSON.stringify(posObect));
        that.dom.find('#bre_img').css(posObect);
        //that.dragDivPos({ changeX:0, changeY:0 })
        that.makeShowArea();
      };
      //console.log(this.model._orginImgSizes.thumbnail, "我是缩略图啊 ")
      imageSrc.src = this.model._orginImgSizes.thumbnail;
      imageSrc.crossOrigin = "Anonymous";
      var pos = {};
      this.dom.find('#drag_div').on('mousedown', function (e) {
        pos = { x: e.pageX, y: e.pageY };
        _this2.rate = _this2.model.breviaryImg.width / (_this2.orginImg.colnum * _this2.model._pathSize);
        _this2.dom.find('#breviary').on('mousemove', function (ev) {
          var changeX = ev.pageX - pos.x;
          var changeY = ev.pageY - pos.y;
          _this2.dragDivPos({ changeX: changeX, changeY: changeY });
          pos = { x: ev.pageX, y: ev.pageY };
        });
        _this2.dom.find('#breviary').on('mouseup', function (ev) {
          _this2.dom.find('#breviary').off("mousemove");
        });
      });
      this.dom.find('#bre_img').on('click', function (e) {
        _this2.rate = _this2.model.breviaryImg.width / (_this2.orginImg.colnum * _this2.model._pathSize);
        var box = document.querySelector("#breviary").getClientRects()[0];
        var px = e.pageX - box.left;
        var py = e.pageY - box.top;
        var xyA = _this2.returnXY();
        var changeX = Math.floor(px - _this2.dom.find('#drag_div').dom[0].dom.style.width.replace('px', '') * 1 / 2 - xyA[0] * 1);
        var changeY = Math.floor(py - _this2.dom.find('#drag_div').dom[0].dom.style.height.replace('px', '') * 1 / 2 - xyA[1] * 1);
        //console.log(changeX, changeY)
        _this2.dragDivPos({ changeX: changeX, changeY: changeY });
      });
      this.dom.find('.bor').on('click', function (e) {
        _this2.event._dispatch('ThumbnailProgress.borClick', { x: 0, y: e.target.innerHTML == '-' ? -1 : 1 });
        //this.scaleCanvas(0, (e.target.innerHTML == '-' ? -1 : 1))
      });

      this.dom.find('#myProgress').on('click', function (e) {

        _this2.event._dispatch('ThumbnailProgress.progress', e);
        // this.progressPos(e.pageY)
      });
    }
    //进度条

  }, {
    key: "progressPos",
    value: function progressPos(posY) {
      console.log(posY, '我是哈哈哈');
      var pos = posY - document.getElementById("myProgress").getClientRects()[0].top;
      var levelFenduan = nowRange / this.model._orginImgSizes.length;
      var level = Math.floor((nowRange - pos) / levelFenduan);
      level = level > this.model._orginImgSizes.length ? level - 1 + "x" : level + 1 + "x";
      //console.log(this.model._sectio, (192 - pos) % levelFenduan, this.model._changeRange / 100)
      var pathSize = this.model._section + Math.floor((nowRange - pos) % levelFenduan * (this.model._changeRange / 100));
      var spos = void 0;
      console.log(level, '我是层级');
      if (level != this.model.nowImageLevel) {
        var rate = 1 - this.model._orginImgSizes[level].colnum * pathSize / (this.model._orginImgSizes[this.model.nowImageLevel].colnum * this.model._pathSize);
        spos = {
          moveX: (this.stage.mouseX - this.model.imageLeftPoint.x) * rate,
          moveY: (this.stage.mouseY - this.model.imageLeftPoint.y) * rate
          // this.event._dispatch('ThumbnailProgress.changeImage', { spos, level, pathSize })
        };this.setContainerPos(spos);
        this.model.nowImageLevel = level;
        this.model.pathSize = pathSize;
        this.handlerImageLoad();
      } else {
        var cr = this.getColRow({ x: this.model.imageLeftPoint.x, y: this.model.imageLeftPoint.y }, { x: this.stage.mouseX, y: this.stage.mouseY });
        spos = { moveX: -cr.col * (pathSize - this.model.pathSize), moveY: -cr.row * (pathSize - this.model.pathSize)
          // this.event._dispatch('ThumbnailProgress.scaleImage', { spos, pathSize })
        };console.log(spos, '我说哈啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊');
        this.setContainerPos(spos);
        this.model.pathSize = pathSize;
        this.scaleBox();
      }
    }
  }, {
    key: "changProgress",
    value: function changProgress() {
      var levelFenduan = nowRange / this.model._orginImgSizes.length;
      var jg = 0.5 * levelFenduan * (this.model.pathSize - this.model._section + this.model._changeRange) / this.model._changeRange;
      var h = (this.model.nowImageLevel.replace('x', '') * 1 - 1) * levelFenduan + jg;
      h += 'px';
      // this.dom.find('#').css({ height: h })
      this.dom.find(".progress_val").css({ height: h });
      //document.querySelector(".progress_val").style.height = h
      //document.querySelector(".select_size").style.bottom = h
    }
    //缩略图

  }, {
    key: "dragDivPos",
    value: function dragDivPos(pos) {
      var xyA = this.returnXY();
      var dx = Math.floor(xyA[0] * 1 + pos.changeX);
      var dy = Math.floor(xyA[1] * 1 + pos.changeY);
      var translates = "translate(" + dx + "px," + dy + "px)";
      this.dom.find('#drag_div').css({ transform: translates });
      var moveX = -pos.changeX / this.rate;
      var moveY = -pos.changeY / this.rate;
      this.event._dispatch('ThumbnailProgress.dragThumbnail', { moveX: moveX, moveY: moveY });
      //this.moveBoX({ moveX, moveY })
    }
  }, {
    key: "returnXY",
    value: function returnXY() {
      var transform = this.dom.find('#drag_div').dom[0].dom.style.transform;
      var x = transform.split(",")[0].split("(")[1].split("px")[0];
      var y = transform.split(",")[1].split(")")[0].split("px")[0];
      return [x, y];
    }
  }, {
    key: "makeShowArea",
    value: function makeShowArea() {
      //console.log(this.model._vpCanvasInfo, this.model.breviaryImg,this.orginImg)
      var nowscale = this.model._pathSize / this.model._section;
      var rate = this.model.breviaryImg.width / (this.orginImg.width * nowscale); //(this.orginImg.colnum * this.model._pathSize)
      var ratex = this.model._vpCanvasInfo.width > this.orginImg.width * nowscale ? 1 : this.model._vpCanvasInfo.width / (this.orginImg.width * nowscale);
      var ratey = this.model._vpCanvasInfo.height > this.orginImg.height * nowscale ? 1 : this.model._vpCanvasInfo.height / (this.orginImg.height * nowscale);
      console.log(rate, ratey, this.orginImg, nowscale);
      console.log(this.model._vpCanvasInfo.height);
      var dragDivCss = {};
      var dx = this.model.breviaryImg.left - (ratex == 1 ? 0 : this.model.imageLeftPoint.x * rate);
      var dy = this.model.breviaryImg.top - (ratey == 1 ? 0 : this.model.imageLeftPoint.y * rate);
      console.log(this.model.imageLeftPoint.x, this.model.imageLeftPoint.y);
      dragDivCss.width = this.model.breviaryImg.width * ratex;
      dragDivCss.height = this.model.breviaryImg.height * ratey;
      dragDivCss.transform = "translate(" + dx + "px," + dy + "px)";
      this.dom.find('#drag_div').css(dragDivCss);
    }
  }, {
    key: "getColRow",
    value: function getColRow(screen, boxpos) {
      var col = Math.floor((boxpos.x - screen.x) / this.model._pathSize);
      var row = Math.floor((boxpos.y - screen.y) / this.model._pathSize);
      return { col: col, row: row };
    }
  }]);

  return ThumbnailProgress;
}(Interstellar.moduleBase);

//原型链一定要有的


module.exports = ThumbnailProgress;

/***/ }),

/***/ 707:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(708);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./thumbnailprogress.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./thumbnailprogress.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 708:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".thumbnailprogress .progress {\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  width: 10px;\n  height: 200px;\n  right: 23px;\n  top: 158px;\n  left: auto;\n  margin: 0;\n  background: transparent;\n}\n.thumbnailprogress .progress #myProgress {\n  border-radius: 6px;\n  width: 6px;\n  height: 192px;\n  background: #01111E;\n  margin-left: 4px;\n  position: relative;\n}\n.thumbnailprogress .progress .select_size {\n  width: 14px;\n  height: 14px;\n  border: 2px solid #448E97;\n  background: white;\n  position: absolute;\n  bottom: 0;\n  border-radius: 14px;\n  left: 50%;\n  transform: translateX(-50%);\n  z-index: 9999;\n  box-sizing: border-box;\n}\n.thumbnailprogress .progress .progress_val {\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  border-radius: 14px;\n  height: 0;\n  width: 6px;\n  background: #448E97;\n}\n.thumbnailprogress .progress .bor {\n  border: 1px solid #448E97;\n  color: #448E97;\n  height: 12px;\n  width: 12px;\n  font-size: 14px;\n  text-align: center;\n  line-height: 12px;\n  background: white;\n  margin: 10px 0;\n}\n.thumbnailprogress .btn_opear {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n}\n.thumbnailprogress .breviary {\n  border: 1px solid #01111E;\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 148px;\n  height: 148px;\n  background: #fff;\n  overflow: hidden;\n}\n.thumbnailprogress .breviary .breviary_conter {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n.thumbnailprogress .breviary .drag_div {\n  border: 1px solid red;\n  box-sizing: border-box;\n  position: absolute;\n  z-index: 99999999;\n  top: 0;\n  left: 0;\n}\n.thumbnailprogress .breviary #bre_img {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n}\n", ""]);

// exports


/***/ }),

/***/ 709:
/***/ (function(module, exports) {

module.exports = "<div class=thumbnailprogress> <div id=breviary class=breviary> <div class=breviary_conter> <img src=xxxHTMLLINKxxx0.45485076942471680.9824998894626353xxx id=bre_img alt=\"\" draggable=false onmousedown=return!1 onmousemove=return!1> <div id=drag_div class=drag_div></div> </div> </div> <div class=progress> <div class=\"reduce bor\">-</div> <div id=myProgress value=10> <div class=progress_val></div> </div> <div class=\"add bor\">+</div> </div> </div>";

/***/ }),

/***/ 710:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function marktool_config(type) {
    //type 为1的时候代表审核，为false的时候代表代表标注


    //每一个key值代表工具名称
    //t代表是互斥操作，还是独立操作，m代表是互斥操作。s代表是独立操作
    //c代表是否可以操作
    /*cobb颈椎病的特殊角,alignment脊椎顺列
     */
    var normal = {
        brush: { t: 'm', c: true },
        ellipticalRoi: { t: 'm', c: true },
        rectangleRoi: { t: 'm', c: true },
        length: { t: 'm', c: true },
        earse: { t: 'm', c: true },
        simpleAngle: { t: 'm', c: true },
        magicStickSingle: { t: 'm', c: true },
        polygon: { t: 'm', c: true },
        freehand: { t: 'm', c: true },
        quickselect: { t: 'm', c: true },
        regionpaint: { t: 'm', c: true },
        copd: { t: 'm', c: true },
        screen: { t: 'm', c: true },
        mpr: { t: 'm', c: true },
        add: { t: 'm', c: false },
        sub: { t: 'm', c: false },
        cobb: { t: 'm', c: false },
        alignment: { t: 'm', c: false },
        //ct_text:{ t: 'm', c: true },
        upstep: { t: 's', c: true },
        nextstep: { t: 's', c: true },
        line: { t: 'm', c: true },
        zoom: { t: 'm', c: true },
        pan: { t: 'm', c: true },
        magnify: { t: 'm', c: true },
        rest: { t: 'm', c: true },
        proe: { t: 'm', c: true },
        rectangle_text: { t: 'm', c: true },
        light: { t: 'm', c: true },
        wl: { t: 'm', c: true },
        wl_text: { t: 's', c: true },
        del: { t: 's', c: true },
        layer_del: { t: 's', c: true },
        all_del: { t: 's', c: true },
        yinyang: { t: 's', c: true },
        next_task: { t: 's', c: true }
    };
    if (type == '1') {
        normal = {
            screen: { t: 'm', c: false },
            mpr: { t: 'm', c: false },
            add: { t: 'm', c: false },
            sub: { t: 'm', c: false },
            cobb: { t: 'm', c: false },
            copd: { t: 'm', c: false },
            alignment: { t: 'm', c: false },
            brush: { t: 'm', c: false },
            ellipticalRoi: { t: 'm', c: false },
            rectangleRoi: { t: 'm', c: false },
            length: { t: 'm', c: false },
            earse: { t: 'm', c: false },
            simpleAngle: { t: 'm', c: false },
            magicStickSingle: { t: 'm', c: false },
            polygon: { t: 'm', c: false },
            freehand: { t: 'm', c: false },
            quickselect: { t: 'm', c: false },
            regionpaint: { t: 'm', c: false },
            //ct_text:{ t: 'm', c: false },
            upstep: { t: 's', c: true },
            nextstep: { t: 's', c: true },
            line: { t: 'm', c: true },
            zoom: { t: 'm', c: true },
            pan: { t: 'm', c: true },
            magnify: { t: 'm', c: true },
            rest: { t: 'm', c: true },
            proe: { t: 'm', c: true },
            rectangle_text: { t: 'm', c: true },
            light: { t: 'm', c: true },
            wl: { t: 'm', c: true },
            wl_text: { t: 's', c: true },
            del: { t: 's', c: true },
            layer_del: { t: 's', c: true },
            all_del: { t: 's', c: true },
            yinyang: { t: 's', c: true },
            next_task: { t: 's', c: true }
        };
    }
    return normal;
}
module.exports = marktool_config;

/***/ }),

/***/ 711:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(712);
/*
获取配置参数，根据不同页面可以调用不同的内容
入参格式：
{
  xxx: { t: 'm', c: false }
}
xxx代表工具名称，
t为工具跟其他工具是否关联，m为关联，s为单独
c代表当前是开还是关，false为关，true为开

event有如下几个
dicommenu.wlchange 窗宽窗位改变
dicommenu.choose 工具改变
dicommenu.done 为工具当中的按钮事件,单层删除，标位废片等
dicommenu.setData 为工具设置一些工具配置参数，如画笔大小，画笔范围等
返回值：{type:xxxx,value:123}
dicommenu.errorMSG 为工具出现的错误信息
返回值：{msg:xxx}

this.chooseData.wl获取窗宽窗位值
this.chooseData.click获取当前点击了那个按钮
this.chooseData.fun获取当前是那个工具被激活
*/

var dicommenu = function (_Interstellar$moduleB) {
    _inherits(dicommenu, _Interstellar$moduleB);

    function dicommenu(app, dom, value, addMode) {
        _classCallCheck(this, dicommenu);

        var _this = _possibleConstructorReturn(this, (dicommenu.__proto__ || Object.getPrototypeOf(dicommenu)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(714);
        _this.name = "dicommenu";
        _this.chooseData = {
            ctVal: 200
        };
        _this.tool = {
            data: {}
        };
        return _this;
    }

    _createClass(dicommenu, [{
        key: "complete",
        value: function complete() {
            var that = this;
            var woptions = [];
            this.app.constmap.WINDOW.children.map(function (item) {
                woptions.push({
                    optionname: item.name,
                    val: item.name,
                    idx: item.remark
                });
            });

            //下拉框
            __webpack_require__.e/* require.ensure */(52/* duplicate */).then((function () {
                var dropdown = that.dropdown = __webpack_require__(638);
                var guojihua = that.app.loadModule(dropdown, that.dom.find('.wl'), {
                    className: "ctdrop",
                    firstSelect: {
                        optionname: '选择窗位',
                        val: '选择窗位',
                        idx: ''
                    },
                    data: woptions
                });
                guojihua.event._addEvent('option.click', function (value) {
                    var data = value.idx.split('*');
                    that.chooseData.wl = {
                        w: data[1],
                        c: data[0]
                    };
                    that.event._dispatch('dicommenu.wlchange');
                });
                guojihua.event._addEvent('dropDown.clear', function (value) {
                    //that.set_wl('', '')
                    //that.dom.find('.wl_text input').val('')
                    that.chooseData.wl = {
                        w: null,
                        c: null
                    };
                    that.event._dispatch('dicommenu.wlchange');
                    //console.log(value)
                });
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);

            //范围选择
            this.initRange();
            //初始化菜单打开关闭
            for (var i in this.initDate) {
                if (!this.initDate[i].c) {
                    var dom = this.dom.find('.dicommenu li[fun=' + i + ']');
                    dom.attr('close', 'close');
                    var name = dom.attr('title');
                    dom.attr('title', name + ' 已禁用');
                    //console.log('=============')
                    dom.css({
                        'cursor': 'auto',
                        'background': '#01111e',
                        'color': '#706F6F'
                    });
                    //console.log(dom.find('input').dom)datava
                    var inputName = dom.find('input').attr('name');
                    if (dom.find('input').dom && inputName != 'copdData' && inputName != 'datava') {
                        dom.find('input').attr('readonly', 'readonly');
                    }
                }
            }
            this.btn_event();
        }

        //范围选择器初始化

    }, {
        key: "initRange",
        value: function initRange() {
            var _this2 = this;

            var rangechoose = __webpack_require__(715);
            var configArr = [{
                name: "半径",
                type: "bradius",
                value: 4,
                max: 30,
                min: 1
            }, {
                name: "粗细",
                type: "lineWidth",
                value: 1,
                max: 10,
                min: 1
            }, {
                name: "半径",
                type: "bradius",
                value: 4,
                max: 30,
                min: 1
            }, {
                name: "半径",
                type: "bradius",
                value: 3,
                max: 80,
                min: 1
            }];
            for (var i = 0, len = configArr.length; i < len; i++) {
                var temprangechoose = this.app.loadModule(rangechoose, this.dom.find('.chooseDate').eq(i), configArr[i]);
                temprangechoose.event._addEvent('rangetextchoose.change', function (value) {
                    //console.log(value)
                    _this2.synchronization(configArr, value);
                    _this2.event._dispatch('dicommenu.setData', value);
                });
                temprangechoose.event._addEvent('rangetextchoose.errorMSG', function (value) {
                    _this2.event._dispatch('dicommenu.errorMSG', value);
                });
                configArr[i].classObject = temprangechoose;
            }
            this.dom.find('.chooseDate1 .sure-btn').on('click', function () {
                var copdVal = _this2.dom.find('.chooseDate1 input[name="copdData"]').val();
                localStorage.setItem("copdVal", copdVal);
                var data = {
                    value: copdVal
                };
                _this2.event._dispatch('dicommenu.CTData', data);
            });
            /*let temprangeC = this.app.loadModule(rangechoose, this.dom.find('.chooseDate1'), {
                name: "阈值",
                type: "bradius",
                value: -920,
                max: 0,
                min: -1024
            })
            temprangeC.event._addEvent('rangetextchoose.change', (value) => {
                //console.log(value)
                //this.synchronization(configArr, value)
                this.event._dispatch('dicommenu.CTData', value)
            })
            temprangeC.event._addEvent('rangetextchoose.errorMSG', (value) => {
                this.event._dispatch('dicommenu.errorMSG', value)
            })*/
        }
    }, {
        key: "synchronization",
        value: function synchronization(allClass, value) {
            for (var i = 0, len = allClass.length; i < len; i++) {
                if (allClass[i].type == value.type) {
                    allClass[i].classObject.setAllData(value.value);
                    //allClass[i].classObject.setDragPos(value.value)
                }
            }
        }

        //鼠标事件

    }, {
        key: "btn_event",
        value: function btn_event() {
            var _this3 = this;

            var that = this;
            this.dom.find('.dicommenu .mask').on('click', function () {
                ES.selctorDoc(this).hide();
                that.dom.find('.chooseDate').hide();
                that.dom.find(".dicommenu .hover_vp").hide();
            });

            /*-----------------------华丽的分割线-----------------------------*/
            /*无范围选择的工具*/
            this.dom.find('.dicommenu .fun_btn .iconfont').on('click', function () {
                var dom = ES.selctorDoc(this).parent();
                that.dom.find('.chooseDate').hide();
                that.dom.find(".dicommenu .hover_vp").hide();
                switch (dom.attr('fun')) {
                    case "rest":
                        //重置按钮

                        that.event._dispatch('dicommenu.reset');
                        break;
                    case "mpr":
                        //mpr切换按钮

                        that.event._dispatch('dicommenu.mpr');
                        break;
                    default:
                        if (that.toBtn_choose(dom)) {
                            console.log(dom.attr('fun'), 'funfufnf');
                            that.chooseData.fun = dom.attr('fun');
                        }
                        that.event._dispatch('dicommenu.choose');
                        break;
                }
            });

            /*-----------------------华丽的分割线-----------------------------*/
            /*有范围选择的工具*/
            this.dom.find('.dicommenu .fun_btn_spice .iconfont').on('click', function (e) {
                var dom = ES.selctorDoc(this).parent();
                that.dom.find('.chooseDate').hide();
                that.dom.find(".dicommenu .hover_vp").hide();
                //console.log(dom.find('i').attr('enable'))

                var st = that.toBtn_choose(dom);

                console.log(st);
                if (st || st == null) {
                    dom.find('.chooseDate').show();
                }
                if (st) {
                    //console.log('pppppppppppp')
                    that.chooseData.fun = dom.attr('fun');
                }
                that.event._dispatch('dicommenu.choose');
            });

            /*this.dom.find('.ct_text input').on('blur', function() {
                that.chooseData.ctVal = that.dom.find('.ct_text input').val()
            })*/

            /*-----------------------华丽的分割线-----------------------------*/
            /*按钮类型，非icon样子的操作 ，标为废片，单层删除等*/
            this.dom.find('.btn-c').on('click', function () {
                var dom = ES.selctorDoc(this);
                that.toBtn_choose(dom);
                that.chooseData.click = dom.attr('fun');
                that.event._dispatch('dicommenu.done');
            });
            this.dom.find('.btn-yy').on('click', function () {
                var dom = ES.selctorDoc(this);
                if (that.toBtn_choose(dom)) {
                    that.dom.find('.btn-yy .btn').removeClass('light');
                    dom.find('.btn').addClass('light');
                    that.event._dispatch('dicommenu.yinyang', {
                        data: dom.attr('data')
                    });
                }
            });
            this.dom.find('.opende').on('click', function () {
                var dom = ES.selctorDoc(this).find('div');
                var st = true;
                if (dom.html() == "隐藏标注") {
                    st = false;
                    dom.html("显示标注");
                } else {
                    st = true;
                    dom.html("隐藏标注");
                }
                that.event._dispatch('dicommenu.shc', {
                    stauts: st
                });
            });

            /*-----------------------华丽的分割线-----------------------------*/
            /*多视窗*/
            this.dom.find('.dicommenu .screen').on('click', function (e) {
                if (_this3.dom.find('.dicommenu .screen').attr('close') == 'close') {
                    return false;
                }
                var screen = document.querySelector(".dicommenu .screen");
                _this3.dom.find('.chooseDate').hide();
                if (screen.children[1].style.display == 'block') {
                    _this3.dom.find(".dicommenu .hover_vp").hide();
                } else {
                    _this3.dom.find(".dicommenu .hover_vp").show();
                }
            });

            this.dom.find(".dicommenu .vp_item").on('click', function (e) {
                var dom = ES.selctorDoc(this);
                var screen = that.dom.find(".dicommenu .screen").firstchildren('i');
                screen.removeAttr('class');
                screen.attr('class', dom.find('i').attr('class'));
                that.event._dispatch('dicommenu.splitScreen', dom.attr('code') * 1);
            });

            /*-----------------------华丽的分割线-----------------------------*/

            /*基准线和十字瞄准线*/
            this.dom.find('.dicommenu .fun_btn_single').on('click', function () {
                if (that.dom.find('.dicommenu .fun_btn_single').attr('close') == 'close') {
                    return false;
                }
                that.dom.find('.dicommenu .fun_btn_single1').removeClass('choose');
                var dom = ES.selctorDoc(this);
                that.dom.find('.chooseDate').hide();
                that.dom.find(".dicommenu .hover_vp").hide();
                if (dom.hasClass('choose')) {
                    dom.removeClass('choose');
                    that.event._dispatch('dicommenu.baseLine', {
                        st: false
                    });
                } else {
                    dom.addClass('choose');
                    that.event._dispatch('dicommenu.baseLine', {
                        st: true
                    });
                }
            });
            this.dom.find('.dicommenu .fun_btn_single1').on('click', function () {
                if (that.dom.find('.dicommenu .fun_btn_single').attr('close') == 'close') {
                    return false;
                }
                that.dom.find('.dicommenu .fun_btn_single').removeClass('choose');
                var dom = ES.selctorDoc(this);
                that.dom.find('.chooseDate').hide();
                that.dom.find(".dicommenu .hover_vp").hide();
                dom.addClass('choose');
                that.event._dispatch('dicommenu.cross', {
                    st: true
                });
            });

            /*-----------------------华丽的分割线-----------------------------*/
            /*copd*/
            this.dom.find('.dicommenu .chooseDate1').on('click', function () {
                console.log("我是点击了 希望能阻止");
                return;
            });
            this.dom.find('.dicommenu .icon-bianji1').on('click', function () {
                var dom = that.dom.find(".dicommenu .fun_btn_copd");
                if (dom.hasClass('choose')) {
                    dom.removeClass('choose');
                    that.dom.find('.chooseDate1').hide();
                } else {
                    dom.addClass('choose');
                    that.dom.find('.chooseDate1').show();
                    that.event._dispatch("dicommenu.setCopdVal");
                }
                that.dom.find(".dicommenu .hover_vp").hide();
            });

            /*当前页面的情况*/
            if (this.app.parpam['type']) {
                if (this.app.parpam['type'].lastIndexOf('viewer') != -1) {
                    this.dom.find('li[fun="remove_xu"]').remove();
                }
            }
        }
    }, {
        key: "openYY",
        value: function openYY() {
            this.dom.find('.btn-yy').show();
        }
    }, {
        key: "closeYY",
        value: function closeYY() {
            this.dom.find('.btn-yy').attr('close', 'close');
        }
    }, {
        key: "addDoctorSocre",
        value: function addDoctorSocre(name, sorce) {
            console.log(sorce, name);
            if (sorce == '无') return;

            this.dom.find('.yyshow').append('<p>' + name + ':' + (sorce == 1 ? '阴' : '阳') + '</p>');
        }
    }, {
        key: "setYY",
        value: function setYY(value) {
            var yayAttributes = null;
            for (var i in value) {
                yayAttributes = value[i].data.yayAttributes;
            }
            if (yayAttributes == 1) {
                this.dom.find('.btn-yy .btn').eq(0).addClass('light');
            } else if (yayAttributes == 2) {
                this.dom.find('.btn-yy .btn').eq(1).addClass('light');
            }
        }
    }, {
        key: "defaultWWC",
        value: function defaultWWC(value) {
            //console.log(value, 'defaultWWCdefaultWWCdefaultWWCdefaultWWC')
            this.dom.find('.ctdrop input').val(value.name);
            this.dom.find('.ctdrop input').attr('data-idx', value.remark);
            this.chooseData.wl = {
                w: value.remark.split('*')[1] * 1,
                c: value.remark.split('*')[0] * 1
            };
        }

        //魔法棒初期设置最大和最小值

    }, {
        key: "makeValueRange",
        value: function makeValueRange(dom, value) {
            var _this4 = this;

            var data = value;
            var setyz = __webpack_require__(719);
            var setyzControl = this.app.loadModal(setyz, {
                adv: false,
                class: "sm",
                data: data.property
            });
            setyzControl.event._addEvent('modal.confirm', function () {
                var mm = JSON.parse(data.property);
                //console.log(mm, setyzControl.data)
                if (setyzControl.data.yzmin * 1 > setyzControl.data.yzmax * 1) {
                    setyzControl.showError('最小值大于最大值');
                    return;
                }
                if (setyzControl.data.yzmin * 1 < mm.yzmin * 1 || setyzControl.data.yzmax * 1 > mm.yzmax * 1) {
                    setyzControl.showError('填写的值不在预设值范围内');
                    return;
                }
                if (_this4.toBtn_choose(dom)) {
                    _this4.chooseData.fun = dom.attr('fun');
                    _this4.chooseData.data.userChoose = setyzControl.data;
                    setyzControl.close();
                    _this4.event._dispatch('dicommenu.choose');
                }
            });
        }

        //工具栏的选择状态

    }, {
        key: "toBtn_choose",
        value: function toBtn_choose(dom) {
            if (dom.attr('close') == 'close') {
                return "false";
            }
            this.dom.find('.dropNid').hide();
            //console.log(this.tool.data)
            var btnStauts = "";
            if (dom.find('.iconfont').attr('enable') == 'enable') {
                var hasClass = dom.hasClass('choose');
                this.dom.find('.dicommenu .fun_btn').removeClass('choose');
                this.dom.find('.dicommenu .fun_btn_spice').removeClass('choose');
                if (!hasClass) {
                    dom.addClass('choose');
                    btnStauts = "choose";
                } else {
                    btnStauts = "cancel";
                }
                //this.dom.find('.dicommenu .fun_btn').removeClass('choose')
                //this.dom.find('.dicommenu .fun_btn_spice').removeClass('choose')
            }
            //console.log(this.tool.data)
            if (dom.find('.chooseDate').dom) {
                dom.find('.dropNid').css({
                    'margin-top': 50
                });
            }
            if (dom.attr('fun') == "brush" || dom.attr('fun') == "earse") {
                if (btnStauts == "choose") {
                    this.chooseData.data = this.tool.data[dom.attr('fun')][0];
                } else {
                    this.chooseData = {};
                    return false;
                }
                return true;
            }
            if (this.tool.data[dom.attr('fun')]) {
                if (this.tool.data[dom.attr('fun')].length > 1) {
                    if (btnStauts == "choose") {
                        dom.find('.dropNid').show();
                        return null;
                    } else {
                        dom.find('.dropNid').hide();
                        return false;
                    }
                }
                if (btnStauts == "choose") {
                    this.chooseData.data = this.tool.data[dom.attr('fun')][0];
                } else {
                    this.chooseData = {};
                    return false;
                }
            }
            return true;
        }
    }, {
        key: "resetAll",
        value: function resetAll() {
            this.dom.find('.dicommenu .fun_btn').removeClass('choose');
        }
        //设置窗宽窗位值

    }, {
        key: "set_wl",
        value: function set_wl(w, c) {
            //this.dom.find('.wl_text input').eq(0).val(w)
            //this.dom.find('.wl_text input').eq(1).val(c)
            this.chooseData.wl = {
                w: w ? w : null,
                c: c ? c : null
            };
        }
        //控制菜单开关，决定那个菜单打开

    }, {
        key: "openadd",
        value: function openadd(data, value) {
            var _this5 = this;

            //console.log(data)
            var dom = this.dom.find('.dicommenu li[fun=' + value + ']');
            dom.removeAttr('close');
            dom.removeAttr('style');
            dom.attr('title', dom.attr('title').split(' ')[0]);
            //console.log(data, 'dataaaaaaaaaaaaaaaa', value, this.tool.data[value], this.tool.data)
            if (this.tool.data[value]) {
                //this.tool.data[value]
            } else {
                this.tool.data[value] = data;
                if (this.tool.data[value].length > 1 && value != 'brush' && value != 'earse' && value != 'screen' && value != 'mpr') {
                    //console.log('aaaa')
                    this.dom.find('li[fun="' + value + '"] .dropNid').remove();
                    this.dom.find('li[fun="' + value + '"]').append('<div class="dropNid"></div>');
                    var htmlS = '';
                    var LESION = Tool.configxlkformat(this.app.constmap.LESION);

                    var _loop = function _loop(i) {
                        var who = LESION.find(function (res) {
                            return res.idx == _this5.tool.data[value][i].imageAnnotation;
                        });
                        who.optionname = who.name;
                        htmlS += '<li data="' + i + '" funName="' + value + '">' + who.val + '</li>';
                    };

                    for (var i = 0; i < this.tool.data[value].length; i++) {
                        _loop(i);
                    }
                    this.dom.find('li[fun="' + value + '"] .dropNid').html(htmlS);
                    var that = this;
                    this.dom.find('li[fun="' + value + '"] .dropNid li').on('click', function () {
                        var dom = ES.selctorDoc(this);
                        that.chooseData.fun = dom.attr('funName');
                        that.chooseData.data = that.tool.data[dom.attr('funName')][dom.attr('data')];
                        console.log('==============');
                        that.dom.find('.dropNid').hide();
                        that.event._dispatch('dicommenu.choose');
                    });
                }
            }
            //console.log('aaaa,bb')
            /*if (dom.find('input').dom) {
                dom.find('input').removeAttr('readonly')
            }*/
        }
    }]);

    return dicommenu;
}(Interstellar.moduleBase);

module.exports = dicommenu;

/***/ }),

/***/ 712:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(713);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./dicommenu.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./dicommenu.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 713:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".dicommenu {\n  height: 100%;\n  position: relative;\n}\n.dicommenu .mask {\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100%;\n  position: relative;\n}\n.dicommenu .mask .mask {\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  display: none;\n  background: transparent;\n  border: 1px solid #d2effc;\n  padding: 0 5px;\n  border-radius: 4px;\n  margin-left: 2px;\n  height: 25px;\n}\n.dicommenu .ct_text {\n  width: auto;\n  margin: 0 12px;\n}\n.dicommenu .ct_text span {\n  margin-right: 3px;\n  color: #d2effc;\n}\n.dicommenu .ct_text input {\n  width: 45px;\n  color: #d2effc;\n  background: transparent;\n  border: 1px solid #d2effc;\n  padding: 0 5px;\n  border-radius: 4px;\n  margin-left: 2px;\n  height: 25px;\n}\n.dicommenu .wl {\n  width: 100px !important;\n  margin-top: 5px;\n}\n.dicommenu .textshow {\n  width: auto;\n  float: right;\n  margin-right: 5px;\n}\n.dicommenu .textshow span {\n  font-size: 16px;\n  letter-spacing: 3px;\n}\n.dicommenu .textshow span i {\n  color: #f00;\n  font-size: 16px;\n  font-style: normal;\n}\n.dicommenu .line-d {\n  width: 1px;\n  height: 36px;\n  background: #d2effc;\n}\n.dicommenu .btn-c {\n  width: auto;\n  margin-left: 5px;\n  cursor: pointer;\n}\n.dicommenu .btn-c .btn {\n  border: 1px solid #fff;\n  padding: 0 5px;\n  line-height: 25px;\n  width: auto !important;\n  border-radius: 4px;\n  height: 25px;\n  margin-top: 5px;\n}\n.dicommenu .luan {\n  position: absolute;\n  top: -5px;\n  left: 681px;\n  width: 80px;\n  text-align: center;\n}\n.dicommenu .luan span {\n  color: #d2effc;\n}\n.dicommenu .luan .zou {\n  display: inline-block;\n  border-top: 1px dashed #d2effc;\n  border-left: 1px dashed #d2effc;\n  width: 20px;\n  height: 10px;\n  position: relative;\n  top: 4px;\n}\n.dicommenu .luan .you {\n  display: inline-block;\n  border-top: 1px dashed #d2effc;\n  border-right: 1px dashed #d2effc;\n  width: 20px;\n  height: 10px;\n  position: relative;\n  top: 4px;\n}\n.dicommenu .toolsImg {\n  background: #000;\n  width: 100%;\n  padding-left: 5px;\n  margin-top: 12px;\n  font-size: 12px;\n}\n.dicommenu .toolsImg #makeimg_id.disabled {\n  pointer-events: none;\n}\n.dicommenu .toolsImg .wl_text {\n  width: auto;\n  margin: 0 12px;\n}\n.dicommenu .toolsImg .wl_text span {\n  margin-right: 3px;\n  color: #d2effc;\n}\n.dicommenu .toolsImg .wl_text input {\n  width: 45px;\n  color: #d2effc;\n  background: transparent;\n  border: 1px solid #d2effc;\n  padding: 0 5px;\n  border-radius: 4px;\n  margin-left: 2px;\n  height: 25px;\n}\n.dicommenu .toolsImg .ct_text {\n  width: auto;\n  margin: 0 12px;\n}\n.dicommenu .toolsImg .ct_text span {\n  margin-right: 3px;\n  color: #d2effc;\n}\n.dicommenu .toolsImg .ct_text input {\n  width: 45px;\n  color: #d2effc;\n  background: transparent;\n  border: 1px solid #d2effc;\n  padding: 0 5px;\n  border-radius: 4px;\n  margin-left: 2px;\n  height: 25px;\n}\n.dicommenu .toolsImg .wl {\n  width: 92px !important;\n  margin-top: 5px;\n}\n.dicommenu .toolsImg .textshow {\n  width: auto;\n  float: right;\n  margin-right: 5px;\n}\n.dicommenu .toolsImg .textshow span {\n  font-size: 16px;\n  letter-spacing: 3px;\n}\n.dicommenu .toolsImg .textshow span i {\n  color: #f00;\n  font-size: 16px;\n  font-style: normal;\n}\n.dicommenu .toolsImg .line-d {\n  width: 1px;\n  height: 36px;\n  background: #d2effc;\n}\n.dicommenu .toolsImg .btn-c {\n  width: auto;\n  margin-right: 5px;\n  cursor: pointer;\n}\n.dicommenu .toolsImg .btn-c .btn {\n  border: 1px solid #fff;\n  padding: 0 5px;\n  line-height: 25px;\n  width: auto !important;\n  border-radius: 4px;\n  height: 25px;\n  margin-top: 5px;\n}\n.dicommenu .toolsImg .btn-yy {\n  width: auto;\n  margin-right: 5px;\n  cursor: pointer;\n  display: none;\n}\n.dicommenu .toolsImg .btn-yy .btn {\n  border: 1px solid #fff;\n  padding: 0 5px;\n  line-height: 25px;\n  width: auto !important;\n  border-radius: 4px;\n  height: 25px;\n  margin-top: 5px;\n}\n.dicommenu .toolsImg .btn-yy .light {\n  color: #000;\n  background: #fff;\n}\n.dicommenu .toolsImg .red .btn {\n  color: #f00;\n}\n.dicommenu .toolsImg .opende {\n  width: auto;\n  margin-right: 5px;\n  cursor: pointer;\n}\n.dicommenu .toolsImg .opende .btn {\n  border: 1px solid #fff;\n  padding: 0 5px;\n  line-height: 25px;\n  width: auto !important;\n  border-radius: 4px;\n  height: 25px;\n  margin-top: 5px;\n}\n.dicommenu .toolsImg .yinyang {\n  width: 110px;\n  margin-right: 15px;\n}\n.dicommenu .toolsImg .radiobox {\n  width: 10px;\n  height: 10px;\n  border-radius: 6px;\n  margin: -1px 5px;\n  cursor: pointer;\n  border: 1px solid #d2effc;\n  position: relative;\n}\n.dicommenu .toolsImg .radiobox.choose:before {\n  width: 6px;\n  height: 6px;\n  content: \"\";\n  position: absolute;\n  border-radius: 4px;\n  border: 0;\n  left: 2px;\n  top: 2px;\n  background: #d2effc;\n}\n.dicommenu .toolsImg .spice {\n  color: #89de03;\n}\n.dicommenu .toolsImg .spice i {\n  font-size: 16px;\n}\n.dicommenu .toolsImg > li {\n  width: 36px;\n  height: 36px;\n  position: relative;\n  float: left;\n  text-align: center;\n  line-height: 36px;\n  color: #d2effc;\n  border-radius: 4px;\n}\n.dicommenu .toolsImg .fun_btn,\n.dicommenu .toolsImg .fun_btn_single,\n.dicommenu .toolsImg .fun_btn_copd,\n.dicommenu .toolsImg .fun_btn_spice,\n.dicommenu .toolsImg .fun_btn_single1 {\n  cursor: pointer;\n  background: #01111e;\n}\n.dicommenu .toolsImg .fun_btn .dropNid,\n.dicommenu .toolsImg .fun_btn_single .dropNid,\n.dicommenu .toolsImg .fun_btn_copd .dropNid,\n.dicommenu .toolsImg .fun_btn_spice .dropNid,\n.dicommenu .toolsImg .fun_btn_single1 .dropNid {\n  width: 60px;\n  text-align: left;\n  position: absolute;\n  z-index: 100;\n  background: #01111e;\n  color: #fff;\n  margin-top: 15px;\n  display: none;\n}\n.dicommenu .toolsImg .fun_btn .dropNid li,\n.dicommenu .toolsImg .fun_btn_single .dropNid li,\n.dicommenu .toolsImg .fun_btn_copd .dropNid li,\n.dicommenu .toolsImg .fun_btn_spice .dropNid li,\n.dicommenu .toolsImg .fun_btn_single1 .dropNid li {\n  padding-left: 5px;\n}\n.dicommenu .toolsImg .fun_btn .dropNid li:hover,\n.dicommenu .toolsImg .fun_btn_single .dropNid li:hover,\n.dicommenu .toolsImg .fun_btn_copd .dropNid li:hover,\n.dicommenu .toolsImg .fun_btn_spice .dropNid li:hover,\n.dicommenu .toolsImg .fun_btn_single1 .dropNid li:hover {\n  background: #fbfbfb;\n  color: #000;\n}\n.dicommenu .toolsImg .fun_btn.choose {\n  background: #fbfbfb;\n  color: #000;\n}\n.dicommenu .toolsImg .fun_btn_spice.choose {\n  background: #fbfbfb;\n  color: #000;\n}\n.dicommenu .toolsImg .fun_btn:hover {\n  background: #fbfbfb;\n  color: #000;\n}\n.dicommenu .toolsImg .fun_btn_spice {\n  position: relative;\n}\n.dicommenu .toolsImg .fun_btn_spice .chooseDate {\n  display: none;\n  position: absolute;\n  top: 50px;\n  left: 0;\n  z-index: 20000;\n  width: 200px;\n}\n.dicommenu .toolsImg .aaaawewuoew {\n  display: none;\n}\n.dicommenu .toolsImg .fun_btn_copd {\n  position: relative;\n}\n.dicommenu .toolsImg .fun_btn_copd .chooseDate1 {\n  display: none;\n  position: absolute;\n  top: 50px;\n  left: 0;\n  z-index: 20000;\n  width: 200px;\n  background: #01111e;\n  color: #d2effc;\n}\n.dicommenu .toolsImg .fun_btn_spice:hover {\n  background: #fbfbfb;\n  color: #000;\n}\n.dicommenu .toolsImg .fun_btn_single:hover {\n  background: #fbfbfb;\n  color: #000;\n}\n.dicommenu .toolsImg .fun_btn_single.choose {\n  background: #fbfbfb;\n  color: #000;\n}\n.dicommenu .toolsImg .fun_btn_single1:hover {\n  background: #fbfbfb;\n  color: #000;\n}\n.dicommenu .toolsImg .fun_btn_single1.choose {\n  background: #fbfbfb;\n  color: #000;\n}\n.dicommenu .choose {\n  background: #fbfbfb !important;\n  color: #000 !important;\n}\n.dicommenu .hover_vp {\n  display: none;\n  position: absolute;\n  z-index: 9999;\n  width: 200px;\n  background: #0c1e21;\n  border-radius: 8px;\n}\n.dicommenu .hover_vp .vp_item {\n  display: flex;\n  align-items: center;\n  color: #fff;\n  font-size: 14px;\n  justify-content: space-around;\n  margin-top: 10px;\n}\n.dicommenu .hover_vp .vp_item:hover {\n  background: white;\n  color: black !important;\n}\n.dicommenu .yyshow {\n  position: absolute;\n  top: 2px;\n  right: 165px;\n  color: #fff;\n  line-height: 16px;\n}\n", ""]);

// exports


/***/ }),

/***/ 714:
/***/ (function(module, exports) {

module.exports = "<div class=dicommenu> <ul class=\"tc mt15 toolsImg\"> <li class=\"mb20 fun_btn\" fun=zoom title=缩放> <div class=\"iconfont icon-fangda\" enable=enable></div> </li> <li class=\"mb20 screen\" title=多视窗 fun=screen> <div class=\"iconfont icon-fenping\" enable=enable></div> <div class=hover_vp> <div class=vp_item code=1> <i class=\"iconfont icon-fenping\"></i> <div>1*1</div> </div> <div class=vp_item code=2> <i class=\"iconfont icon-liangfenping\"></i> <div>2*1</div> </div> <div class=vp_item code=3> <i class=\"iconfont icon-shusanping\"></i> <div>3*1</div> </div> <div class=vp_item code=4> <i class=\"iconfont icon-sifenping\"></i> <div>2*2</div> </div> <div class=vp_item code=6> <i class=\"iconfont icon-fenping1\"></i> <div>3*2</div> </div> <div class=vp_item code=8> <i class=\"iconfont icon-fenpingcopy\"></i> <div>4*2</div> </div> </div> </li> <li class=\"mb20 fun_btn\" fun=wl title=窗位> <div class=\"iconfont icon-tiaochuang\" enable=enable style=font-size:19px></div> </li> <li class=\"mb20 wl\" fun=light title=自动调节窗高窗位> <div class=\"iconfont icon-chizi\" enable=enable></div> </li><li class=\"mb20 fun_btn\" fun=mpr title=MPR> <div class=\"iconfont icon-mpr\" enable=enable></div> </li> <li class=\"mb20 fun_btn_single\" fun=add title=基准线> <div class=\"iconfont icon-jizhunxian\" enable=enable></div> </li> <li class=\"mb20 fun_btn_single1\" fun=sub title=十字瞄准线> <div class=\"iconfont icon-shizixian\" enable=enable></div> </li> <li class=\"mb20 fun_btn_copd\" fun=copd title=copd阈值筛选> <div class=\"iconfont icon-bianji1\" enable=enable></div> <div class=chooseDate1> <input type=text name=copdData> <span class=\"btn sure-btn\">确认</span> </div> </li> <li class=\"mb20 fun_btn\" fun=rest title=刷新> <div class=\"iconfont icon-shuaxin\" enable=enable></div> </li> <li class=\"mb20 line-d\"></li> <li class=\"mb20 fun_btn_spice\" fun=regionpaint title=区域勾面> <div class=\"iconfont icon-danxinggoumian\" enable=enable></div> <div class=chooseDate></div> </li> <li class=\"mb20 fun_btn_spice\" fun=freehand title=自由画笔> <div class=\"iconfont icon-huabi\" enable=enable></div> <div class=chooseDate></div> </li> <li class=\"mb20 fun_btn_spice\" fun=polygon title=多边形> <div class=\"iconfont icon-duobianxing-zhanshi\" enable=enable></div> </li> <li class=\"mb20 fun_btn_spice\" fun=quickselect title=快速选择> <div class=\"iconfont icon-caozuoxing-kuaisuxua\" enable=enable></div> </li> <li class=\"mb20 fun_btn aaaawewuoew\" fun=magicStickSingle title=单点魔法棒 style=width:0> <div class=\"iconfont icon-moshu\" enable=enable style=font-size:20px;display:none></div> </li> <li class=\"mb20 fun_btn\" fun=ellipticalRoi title=圆形> <div class=\"iconfont icon-yuanxing\" enable=enable></div> </li> <li class=\"mb20 fun_btn\" fun=rectangleRoi title=矩形> <div class=\"iconfont icon-juxing\" enable=enable></div> </li> <li class=\"mb20 fun_btn\" fun=cobb title=Cobb角> <div class=\"iconfont icon-ShapeCopy\" enable=enable></div> </li> <li class=\"mb20 fun_btn\" fun=alignment title=椎体定位> <div class=\"iconfont icon-guke\" enable=enable></div> </li>  <li class=\"mb20 fun_btn\" fun=length title=直线> <div class=\"iconfont icon-Rectangle\" enable=enable></div> </li> <li class=\"mb20 fun_btn\" fun=simpleAngle title=角度> <div class=\"iconfont icon-jiaodu\" enable=enable></div> </li> <li class=\"mb20 line-d\"></li> <li class=\"mb20 spice fun_btn\" fun=line title=尺子> <div class=\"iconfont icon-chizi\" enable=enable style=font-size:18px></div> </li> <li class=\"mb20 line-d\"></li> <li class=\"mb20 fun_btn_spice\" fun=brush title=画笔> <div class=\"iconfont icon-huabi\" enable=enable></div> <div class=chooseDate></div> </li> <li class=\"mb20 fun_btn_spice\" fun=earse title=橡皮擦> <div class=\"iconfont icon-xiangpica\" enable=enable></div> <div class=chooseDate></div> </li> <li class=\"mb20 line-d\"></li> <li class=\"mb20 btn-c\" fun=layer_del> <div class=btn title=单层清除测量数据>单层删除</div> </li> <li class=\"mb20 opende\" fun=openmark> <div class=btn>隐藏标注</div> </li> <li class=\"mb20 btn-c\" style=float:right;margin-right:20px fun=remove_xu> <div class=btn>标为废片</div> </li> <li class=\"mb20 btn-yy\" data=1 style=float:right;margin-right:5px> <div class=btn>标为阴性</div> </li> <li class=\"mb20 btn-yy red\" data=2 style=float:right;margin-right:5px> <div class=btn>标为阳性</div> </li> </ul> <div class=yyshow></div> </div> ";

/***/ }),

/***/ 715:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
入参
{name: "半径",type: "bradius",value: 5,max: 30,min:1}
name:代表在范围选择器前面的名字
type:代表是什么类型
value:代表当前值是多少
max:代表范围的最大值
min:代表范围的最小值

事件
rangetextchoose.errorMSG 错误信息事件
返回值为{msg:xxx}

rangetextchoose.change 当范围选择有变化的时候做的处理
返回值为{type:xxxx,value:123}
type为入参的时候给到的当前选择器所要的类型
value为当前选择器的值

数据
this.moveDis = 可以移动的距离
this.max = 允许选择的最大值
this.min = 允许选择的最小值
this.startPos = 拖动按钮的最小位置
this.nowPos=拖动按钮当前在的位置信息
*/
__webpack_require__(716);

var ctlist = function (_Interstellar$moduleB) {
    _inherits(ctlist, _Interstellar$moduleB);

    function ctlist(app, dom, value, addMode) {
        _classCallCheck(this, ctlist);

        var _this = _possibleConstructorReturn(this, (ctlist.__proto__ || Object.getPrototypeOf(ctlist)).call(this, app, dom, value, addMode));

        _this.name = "rangetextchoose";
        _this.html = __webpack_require__(718);

        return _this;
    }

    _createClass(ctlist, [{
        key: "complete",
        value: function complete() {
            this.moveDis = 94;
            this.max = this.nowParam.max ? this.nowParam.max : 100;
            this.min = this.nowParam.min != null || this.nowParam.min != undefined ? this.nowParam.min : 1;
            this.startPos = -2;
            this.dom.find('.range-text .name').html(this.nowParam.name + ':');
            this.nowPos = this.startPos + this.moveDis * (this.nowParam.value - this.min) / (this.max - this.min);
            this.setInputVal(this.nowParam.value);
            this.initAll();
        }

        //设置input框的值和拖动器的位置,
        /*
        value为number类型,作用为当前数值是多少，
        whoIn为boolean true的时候更新位置，false为更新输入框
        */

    }, {
        key: "setInputVal",
        value: function setInputVal(value, whoIn) {
            if (whoIn) {
                this.nowPos = this.startPos + this.moveDis * (value - this.min) / (this.max - this.min);
                this.dom.find('.controlbar .controlR').css({
                    'left': this.nowPos
                });
            }
            if (!whoIn) {
                this.dom.find('input[name=datava]').val(value);
            }
        }

        //input 和拖拽同时更新

    }, {
        key: "setAllData",
        value: function setAllData(value) {
            this.nowPos = this.startPos + this.moveDis * (value - this.min) / (this.max - this.min);
            this.dom.find('input[name=datava]').val(this.calReturnValue());
            this.dom.find('.controlbar .controlR').css({
                'left': this.nowPos
            });
        }

        //初始化整个模块

    }, {
        key: "initAll",
        value: function initAll() {
            var _this2 = this;

            var st = false;
            var that = this;
            var max = this.nowParam.max;
            var downpagex = void 0;
            this.dom.find('.range-mask').on('click', function () {
                that.dom.find('.range-mask').hide();
                that.dom.find('.control-content').hide();
            });
            this.dom.find('.controlbar .barbg').on('click', function (e) {
                e.stopPropagation();
                that.nowPos = e.offsetX;
                that.setInputVal(that.calReturnValue());
                that.changeEvent();
            });

            this.dom.find('input[name=datava]').change(function () {
                //this.setDragPos(this.dom.find('input[name=datava]').val())
                _this2.setInputVal(_this2.dom.find('input[name=datava]').val(), true);
                _this2.changeEvent();
            });
            this.dom.find('input[name=datava]').on('input', function () {
                //this.setDragPos(this.dom.find('input[name=datava]').val())
                _this2.setInputVal(_this2.dom.find('input[name=datava]').val(), true);
                _this2.changeEvent();
            });

            /*this.dom.find('input[name=datava]').blur(() => {
                this.setInputVal(this.dom.find('input[name=datava]').val())
                this.changeEvent()
            })*/
            this.dom.find('.controlbar .controlR').on('mousedown', function (e) {
                st = true;
                downpagex = e.pageX;
            });
            this.dom.on('mousemove', function (e) {
                if (st) {
                    var chaju = e.pageX - downpagex;
                    that.nowPos = that.nowPos + chaju;
                    that.setInputVal(that.calReturnValue());
                    that.changeEvent();
                    downpagex = e.pageX;
                }
            });

            /*this.dom.on('mouseup', function(e) {
                e.stopPropagation()
                st = false
                    //  console.log(e)
            })*/
            this.dom.find('.controlbar').on('mouseup', function (e) {
                e.stopPropagation();
                st = false;
            });
            this.dom.find('.controlbar').on('mouseleave', function (e) {
                e.stopPropagation();
                st = false;
            });
        }

        //将位置值转换成数值

    }, {
        key: "calReturnValue",
        value: function calReturnValue() {
            this.nowPos = this.nowPos < this.startPos ? this.startPos : this.nowPos;
            this.nowPos = this.nowPos > this.moveDis + this.startPos ? this.moveDis + this.startPos : this.nowPos;
            var nowData = this.min + Math.round((this.nowPos - this.startPos) * (this.max - this.min) / this.moveDis);
            nowData = nowData > this.max ? this.max : nowData;
            nowData = nowData < this.min ? this.min : nowData;
            return nowData;
        }
    }, {
        key: "changeEvent",
        value: function changeEvent() {
            var type = this.nowParam.type;
            if (this.dom.find('input[name=datava]').val() * 1 > this.max) {
                this.event._dispatch('rangetextchoose.errorMSG', {
                    msg: "超过边界"
                });
                this.dom.find('input[name=datava]').val(this.max);
            }
            this.event._dispatch('rangetextchoose.change', {
                'type': type,
                'value': this.dom.find('input[name=datava]').val()
            });
        }
    }]);

    return ctlist;
}(Interstellar.moduleBase);

module.exports = ctlist;

/***/ }),

/***/ 716:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(717);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./rangetextchoose.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./rangetextchoose.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 717:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".rangetextchoose {\n  width: 100%;\n  min-width: 180px;\n  position: relative;\n  background: #0c1e21;\n  height: 40px;\n  border-radius: 8px;\n  text-align: left;\n}\n.rangetextchoose .range-text {\n  color: #fff;\n  padding: 0 10px;\n  height: 24px;\n  line-height: 24px;\n  margin-top: 7px;\n  font-size: 14px;\n  float: left;\n  z-index: 5;\n}\n.rangetextchoose .range-text span {\n  -webkit-touch-callout: none;\n  /* iOS Safari */\n  -webkit-user-select: none;\n  /* Chrome/Safari/Opera */\n  -khtml-user-select: none;\n  /* Konqueror */\n  -moz-user-select: none;\n  /* Firefox */\n  -ms-user-select: none;\n  /* Internet Explorer/Edge */\n  user-select: none;\n}\n.rangetextchoose .range-mask {\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  background: transparent;\n  display: none;\n  top: -86px;\n  left: 0;\n}\n.rangetextchoose .controlbar {\n  float: left;\n  width: 100px;\n  height: 40px;\n  z-index: 10;\n  position: relative;\n}\n.rangetextchoose .controlbar .barbg {\n  width: 100%;\n  height: 6px;\n  background: #fff;\n  border-radius: 3px;\n  margin-top: 16px;\n}\n.rangetextchoose .controlbar .controlR {\n  width: 12px;\n  height: 12px;\n  border-radius: 10px;\n  background: #448e97;\n  position: absolute;\n  top: 13px;\n  left: -2px;\n}\n.rangetextchoose .new {\n  float: right;\n  width: 25px;\n  margin-right: 10px;\n}\n.rangetextchoose .new input {\n  width: 100%;\n  text-align: center;\n  background: transparent;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  height: 20px;\n  line-height: 20px;\n  font-size: 12px;\n  margin-top: 8px;\n  color: #fff;\n}\n", ""]);

// exports


/***/ }),

/***/ 718:
/***/ (function(module, exports) {

module.exports = "<div class=rangetextchoose> <div class=range-text> <span class=name></span> </div> <div class=range-mask></div> <div class=controlbar> <div class=barbg></div> <div class=controlR></div> </div> <div class=new> <input type=text name=datava> </div> </div>";

/***/ }),

/***/ 719:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(720);

var progress = function (_Interstellar$modalBa) {
    _inherits(progress, _Interstellar$modalBa);

    function progress(app, value, api, addMode) {
        _classCallCheck(this, progress);

        var _this = _possibleConstructorReturn(this, (progress.__proto__ || Object.getPrototypeOf(progress)).call(this, app, value, api, addMode));

        _this.html = __webpack_require__(722);
        _this.name = 'setyz';
        return _this;
    }

    _createClass(progress, [{
        key: 'complete',
        value: function complete() {
            var _this2 = this;

            console.log(this.initDate.data);
            if (this.initDate.data) {
                var ran = this.data = this.initDate.data ? JSON.parse(this.initDate.data) : { yzmin: "", yzmax: "" };
                this.dom.find('.setyz_content').html('请填写该影像标注的CT值，确认后进入影像标注的位置标注。<span class="yz">(预设值范围为' + ran.yzmin + '-' + ran.yzmax + ')</span>');
                this.dom.find('.setyz_set input[name="yzmin"]').val(ran.yzmin);
                this.dom.find('.setyz_set input[name="yzmax"]').val(ran.yzmax);
            } else {
                this.dom.find('.error-info').html('');
            }
            this.dom.find('.setyz_set input').on('focus', function () {
                _this2.dom.find('.error-info').addClass('hide');
            });
            this.dom.find('.setyz_set input').on('blur', function () {
                _this2.data = {
                    yzmin: _this2.dom.find('.setyz_set input[name="yzmin"]').val(),
                    yzmax: _this2.dom.find('.setyz_set input[name="yzmax"]').val()
                };
                _this2.dom.find('.error-info').addClass('hide');
            });
        }
    }, {
        key: 'showError',
        value: function showError(msg) {
            this.dom.find('.error-info').html(msg);
            this.dom.find('.error-info').removeClass('hide');
        }
    }]);

    return progress;
}(Interstellar.modalBase);

module.exports = progress;

/***/ }),

/***/ 720:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(721);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./setyz.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./setyz.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 721:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".setyz {\n  background: #fff;\n}\n.setyz .setyz_content {\n  font-size: 20px;\n  text-align: left;\n  padding: 0 10px 10px 10px;\n}\n.setyz .setyz_content .yz {\n  font-size: 14px;\n  color: #f00;\n}\n.setyz .setyz_set {\n  text-align: center;\n  margin: 10px 0;\n}\n.setyz .setyz_set input {\n  width: 90px;\n  height: 30px;\n  margin: 0 10px;\n  font-size: 16px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  line-height: 30px;\n  padding-left: 5px;\n}\n.setyz .error-info {\n  color: #f00;\n  font-size: 12px;\n  top: -7px;\n  left: 20px;\n  position: absolute;\n}\n", ""]);

// exports


/***/ }),

/***/ 722:
/***/ (function(module, exports) {

module.exports = "<div class=setyz> <span class=\"error-info hide\"></span> <div class=setyz_content>请填写该影像标注的CT值，确认后进入影像标注的位置标注。</div> <div class=setyz_set><input name=yzmin type=text><span>——</span><input name=yzmax type=text></div> </div>";

/***/ }),

/***/ 723:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(724);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./progress.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./progress.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 724:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".progress {\n  width: 480px;\n  height: 240px;\n  background: #0a2634;\n  border: 0;\n  border-radius: 10px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-left: -240px;\n  margin-top: -120px;\n}\n.progress .line {\n  width: 400px;\n  height: 20px;\n  border: 0;\n  border-radius: 10px;\n  position: absolute;\n  top: 120px;\n  left: 40px;\n  background: #fff;\n}\n.progress .blue {\n  background: #448E97;\n  width: 10px;\n}\n.progress .p-title {\n  font-size: 14px;\n  position: absolute;\n  top: 80px;\n  left: 40px;\n  color: #fff;\n  text-align: left;\n}\n.progress .p-name {\n  position: absolute;\n  top: 80px;\n  right: 25px;\n  font-size: 16px;\n  color: #fff;\n  text-align: left;\n}\n", ""]);

// exports


/***/ }),

/***/ 725:
/***/ (function(module, exports) {

module.exports = "<div class=progress> <p class=p-title>下载进度</p> <div class=line></div> <div class=\"line blue\"></div> <p class=p-name></p> </div>";

/***/ }),

/***/ 726:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(727);

var alert = function (_Interstellar$modalBa) {
    _inherits(alert, _Interstellar$modalBa);

    function alert(app, value, api, addMode) {
        _classCallCheck(this, alert);

        var _this = _possibleConstructorReturn(this, (alert.__proto__ || Object.getPrototypeOf(alert)).call(this, app, value, api, addMode));

        _this.html = __webpack_require__(729);
        _this.name = 'seriessubmit';
        _this.footer = false;
        _this.body = '';
        return _this;
    }

    _createClass(alert, [{
        key: 'sure',
        value: function sure(value) {
            this.hide();
        }
    }, {
        key: 'complete',
        value: function complete() {
            var that = this;
            that.resize();
            that.body = that.dom.find('.modal-body');
            this.dom.find('.modal-close').on('click', function () {
                that.hide();
            });
            that.dom.find('.btn-cancel').on('click', function () {
                that.hide();
                that.closeSure();
            });
            that.dom.find('.btn-confirm').on('click', function () {
                that.hide();
                that.sure();
            });
        }
    }, {
        key: 'resize',
        value: function resize() {
            var that = this;
            //that.dom.find('.modal-sm').css({'margin-left':-(that.dom.find('.modal-sm').box().clientWidth/2)+'px'})
        }
    }, {
        key: 'show',
        value: function show(value) {
            var that = this;
            var code;
            var hint = '';
            if (value.msg) {
                hint = value.msg;
                that.dom.find('.modal-title').html(value.title ? value.title : '错误提示');
                that.dom.find('.modal-body').html('<p style="width:320px;text-align:left;margin:0 auto;">' + hint + '</p>');
            } else {
                that.dom.find('.modal-title').html(value.title || '');
                that.dom.find('.modal-body').html(value.template || '');
            }

            if (value.sure && value.sure instanceof Function) {
                this.sure = value.sure;
            } else {
                this.sure = function () {
                    that.hide();
                };
            }
            if (value.closeSure && value.closeSure instanceof Function) {
                that.closeSure = value.closeSure;
            } else {
                that.closeSure = function () {};
            }
            if (value.noshadow) {
                that.dom.find('.modal').addClass('noshadow');
            } else {
                that.dom.find('.modal').removeClass('noshadow');
            }
            if (value.resetbody) {
                that.dom.find('.showalert').css({ 'padding': value.resetbody.padding });
            }
            that.dom.show();
        }
    }, {
        key: 'hide',
        value: function hide() {
            this.dom.hide();
        }
    }]);

    return alert;
}(Interstellar.modalBase);
//原型链一定要有的


module.exports = alert;

/***/ }),

/***/ 727:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(728);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./seriessubmit.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./seriessubmit.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 728:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".seriessubmit .modal-footer {\n  text-align: center;\n}\n.seriessubmit .modal-footer .btn-confirm {\n  color: #fff;\n  height: 40px;\n  width: 90px;\n  background: #4c9fa9;\n  display: inline-block;\n  line-height: 40px;\n  border-radius: 4px;\n  margin-right: 30px;\n  font-size: 12px;\n}\n.seriessubmit .modal-footer .btn-cancel {\n  border: 1px solid #4c9fa9;\n  color: #333333;\n  height: 40px;\n  width: 90px;\n  display: inline-block;\n  line-height: 40px;\n  border-radius: 4px;\n  font-size: 12px;\n}\n", ""]);

// exports


/***/ }),

/***/ 729:
/***/ (function(module, exports) {

module.exports = "<div class=\"modal modal-sm seriessubmit\"> <div class=modal-header> <p class=modal-title></p> <i class=\"modal-close icon-guanbi iconfont\"></i> </div> <div class=\"modal-body showalert\" style=\"padding:20px 10px 40px 10px\"></div> <div class=modal-footer> <a class=\"btn btn-confirm\">提交获取新序列</a> <a class=\"btn btn-cancel\">提交返回首页</a> </div> </div>";

/***/ }),

/***/ 730:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(731);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./magicloading.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./magicloading.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 731:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".magicloading {\n  width: 480px;\n  height: 240px;\n  background: #0a2634;\n  border: 0;\n  border-radius: 10px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-left: -240px;\n  margin-top: -120px;\n}\n.magicloading .content {\n  width: 100px;\n  color: #FFF;\n  border-radius: 10px;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  margin-left: -50px;\n  margin-top: -50px;\n  height: 100px;\n}\n.magicloading .content .pic {\n  background: url(/images/loading1.gif);\n  height: 100%;\n  width: 100%;\n}\n.magicloading .p-name {\n  width: 100%;\n  font-size: 16px;\n  color: #fff;\n  text-align: center;\n  position: absolute;\n  bottom: 50px;\n}\n", ""]);

// exports


/***/ }),

/***/ 732:
/***/ (function(module, exports) {

module.exports = "<div class=magicloading> <div class=content> <div class=pic> </div> </div> <p class=p-name>正在努力运算中，请耐心等待</p> </div>";

/***/ }),

/***/ 733:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(734);

var progress = function (_Interstellar$modalBa) {
    _inherits(progress, _Interstellar$modalBa);

    function progress(app, value, api, addMode) {
        _classCallCheck(this, progress);

        var _this = _possibleConstructorReturn(this, (progress.__proto__ || Object.getPrototypeOf(progress)).call(this, app, value, api, addMode));

        _this.html = __webpack_require__(736);
        _this.res = {};
        return _this;
    }

    _createClass(progress, [{
        key: 'complete',
        value: function complete() {
            var that = this;
            this.render();
            this.dom.find('.radio-box').on('click', function (e) {
                that.dom.find('.radio-box').removeClass('choose');
                var dom = ES.selctorDoc(this);
                that.dom.find('.error-info').addClass('hide');
                dom.addClass('choose');
                that.res.type = dom.parent().find('.name-des').attr('code');
                if (that.res.type == '99') {
                    that.dom.find('.reason').show();
                    that.res.des = that.dom.find('.reason textarea').val();
                } else {
                    that.dom.find('.reason').hide();
                    that.dom.find('.reason textarea').val('');
                    that.res.des = dom.parent().find('.name-des').html();
                }
                console.log(that.res.type, 'that.res.type that.res.type that.res.type that.res.type ');
            });
            this.dom.find('.reason textarea').on('blur', function () {
                console.log(that.dom.find('.reason textarea').val());
                that.res.des = that.dom.find('.reason textarea').val();
            });
        }
    }, {
        key: 'render',
        value: function render() {
            console.log(this.initDate.data);
            if (this.initDate.data) {
                var str = '';
                this.initDate.data.map(function (item) {
                    if (item.value * 1 != 98 && item.value * 1 != 99) {
                        str += '<li><span class="radio-box"></span><span class="name-des" code="' + item.value + '">' + item.name + '</span></li>';
                    }
                });
                str += ' <li><span class="radio-box"></span><span class="name-des" code="98">\u5E8F\u5217\u52A0\u8F7D\u5F02\u5E38</span></li>\n        <li><span class="radio-box"></span><span class="name-des" code="99">\u5176\u4ED6</span></li>\n        <li class="reason" style=\'display: none;clear:both;\'><span >\u5907\u6CE8</span><textarea ></textarea></li>';
                this.dom.find('.removeseries ul').html(str);
            }
        }
    }, {
        key: 'showError',
        value: function showError(code) {
            switch (code) {
                case 0:
                    this.dom.find('.error-info').html('必须选择原因');
                    break;
                case 1:
                    this.dom.find('.error-info').html('请填写备注信息');
                    break;
            }
            this.dom.find('.error-info').removeClass('hide');
        }
    }]);

    return progress;
}(Interstellar.modalBase);

module.exports = progress;

/***/ }),

/***/ 734:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(735);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./removeseries.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./removeseries.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 735:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".removeseries {\n  background: #fff;\n}\n.removeseries ul li {\n  width: 45%;\n  float: left;\n  margin-left: 10px;\n}\n.removeseries ul li .radio-box {\n  position: absolute;\n}\n.removeseries ul li .name-des {\n  margin-left: 20px;\n  margin-bottom: 15px;\n}\n.removeseries ul li textarea {\n  width: 190%;\n  resize: none;\n}\n.removeseries .error-info {\n  color: #f00;\n  font-size: 12px;\n  top: -7px;\n  left: 20px;\n  position: absolute;\n}\n", ""]);

// exports


/***/ }),

/***/ 736:
/***/ (function(module, exports) {

module.exports = "<div class=removeseries> <span class=\"error-info hide\">必须选择原因</span> <ul> <li><span class=radio-box></span><span class=name-des data=1>背景复杂</span></li> <li><span class=radio-box></span><span class=name-des data=2>部位不匹配</span></li> <li><span class=radio-box></span><span class=name-des data=4>肿块直径>3cm</span></li> <li><span class=radio-box></span><span class=name-des data=3>结节大于10个</span></li> <li><span class=radio-box></span><span class=name-des data=98>序列加载异常</span></li> <li><span class=radio-box></span><span class=name-des data=99>其他</span></li> <li class=reason style=display:none><span>备注</span><textarea></textarea></li> </ul> <div style=clear:both></div> </div>";

/***/ }),

/***/ 989:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, "#drapCanvasAudEdit-content-fade {\n  width: 100%;\n}\n#drapCanvasAudEdit-content-fade .dragCanvas {\n  width: 100%;\n  background: #fff;\n}\n#drapCanvasAudEdit-content-fade .dragCanvas .mark-header {\n  width: 100%;\n  height: 60px;\n  background-image: linear-gradient(-180deg, #0c1e21, #041d32 98%);\n  color: #d2effc;\n}\n#drapCanvasAudEdit-content-fade .dragCanvas .mark-header .back-icon {\n  margin-left: 10px;\n}\n#drapCanvasAudEdit-content-fade .dragCanvas .mark-header .lefta {\n  transform: rotate(-90deg);\n}\n#drapCanvasAudEdit-content-fade .dragCanvas .mark-header i {\n  width: 16px;\n  line-height: 60px;\n}\n#drapCanvasAudEdit-content-fade .dragCanvas .mark-header span {\n  font-size: 16px;\n  height: 60px;\n  line-height: 60px;\n  float: left;\n  margin-right: 10px;\n  overflow: hidden;\n  white-space: nowrap;\n}\n#drapCanvasAudEdit-content-fade .dragCanvas .mark-header .cotrol-btn {\n  display: flex;\n  margin-top: 8px;\n}\n#drapCanvasAudEdit-content-fade .dragCanvas .mark-header .cotrol-btn .btn {\n  width: 100px;\n  height: 40px;\n  color: #fff;\n  background: #448e97;\n  border-radius: 5px;\n  margin-right: 35px;\n  font-size: 16px;\n  text-align: center;\n  line-height: 40px;\n  border: 1px solid #448e97;\n  cursor: pointer;\n}\n#drapCanvasAudEdit-content-fade .dragCanvas .mark-header .cotrol-btn .btn:hover {\n  background: #3bcbdc;\n  border: 1px solid #3bcbdc;\n  transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n#drapCanvasAudEdit-content-fade .dragCanvas .mark-menu {\n  clear: both;\n  height: 60px;\n  width: 100%;\n  background: #01111e;\n  border-bottom: 2px solid #0a2634!important;\n  border-top: 2px solid #0a2634!important;\n}\n#drapCanvasAudEdit-content-fade .dragCanvas .mark-content {\n  clear: both;\n}\n", ""]);

// exports


/***/ })

});
//# sourceMappingURL=c71b04c74ac5794be39a.17.min.js.map