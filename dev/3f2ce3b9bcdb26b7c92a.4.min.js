webpackJsonp([4],{

/***/ 13:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//import {firstName, lastName, year} from 'http://172.16.100.221:44444/footer/footer.js';
//这边基本上引入需要使用的资源less，api，需要使用的模块等等。

var DataBase = function (_Interstellar$pagesBa) {
  _inherits(DataBase, _Interstellar$pagesBa);

  function DataBase(app, api, dom, model) {
    _classCallCheck(this, DataBase);

    var _this = _possibleConstructorReturn(this, (DataBase.__proto__ || Object.getPrototypeOf(DataBase)).call(this, app, api, dom, model));

    _this.apiData = {};
    return _this;
  }

  _createClass(DataBase, [{
    key: 'complete',
    value: function complete() {}
  }, {
    key: 'addli',
    value: function addli(value) {
      var _this2 = this;

      var tablist = __webpack_require__(740);
      var tabListControl = this.app.loadModule(tablist, this.dom.find('.topchoose'), { data: this.model.tablist, default: this.app.parpam['type'] });
      tabListControl.event._addEvent('tab.change', function (value) {
        _this2.toggletab(value);
        //this.app.changePage('imagedatagl1', { type: value.id })
      });
      this.changeAll(value ? value : this.model.condition[this.app.parpam['type']]);
    }
  }, {
    key: 'loadlist',
    value: function loadlist(type, data) {
      var that = this;
      this.tablecont = null;
      __webpack_require__.e/* require.ensure */(60).then((function () {
        that.table_group = __webpack_require__(643);
        that.table_single = __webpack_require__(640);
        switch (type) {
          case 'group':
            that.tablecont = that.app.loadModule(that.table_group, that.dom.find('.tablearea'), {
              id: 'tasktable',
              header: data ? data : that.model.tableconfig
            });
            that.resize();
            that.inittable();
            break;
          case 'single':
            that.tablecont = that.app.loadModule(that.table_single, that.dom.find('.tablearea'), {
              id: 'tasktable',
              header: data ? data : that.model.tableconfig
            });
            that.resize();
        }
        that.tablecont.event._addEvent('table.pagenumber', function (value) {
          that.model.apiData.page = parseInt(value);
          that.tablecont.changenum(that.model.apiData.page);
          that.search();
        });
        that.tablecont.event._addEvent('table.pagesize', function (value) {
          that.model.apiData.pageSize = value.num;
          that.model.apiData.page = 1;
          that.search(true);
        });
        that.tablecont.event._addEvent('table.action', function (value) {
          that.listaction(value);
        });
        that.tablecont.event._addEvent('table.onoff', function (value) {
          that.listOnOff(value);
        });
        that.tablecont.event._addEvent('table.listlink', function (value) {
          that.listlink(value);
        });
        that.search(true);
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
    }
  }, {
    key: 'changeAll',
    value: function changeAll(value) {

      var that = this;
      var datacondition = __webpack_require__(744);
      this.chooseData = this.app.loadModule(datacondition, this.dom.find('.filterarea'), { data: value });
      this.chooseData.event._addEvent('datacondition.moduledone', function () {
        that.conditionconfig();
        that.getapidata();
      });
      this.chooseData.event._addEvent('datacondition.dropinput', function (value) {
        console.log(value, 'dddd');
        that.getapidata(value);
      });
    }
  }, {
    key: 'getapidata',
    value: function getapidata() {}
  }, {
    key: 'conditionconfig',
    value: function conditionconfig() {}
  }, {
    key: 'getfiltercondition',
    value: function getfiltercondition() {
      return this.chooseData.data;
    }
  }, {
    key: 'initscroll',
    value: function initscroll(value) {
      var that = this;
      if (this.myScroll) {
        this.myScroll.refresh();
        return;
      }
      var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
      this.dom.find('.' + value).attr('id', rid);
      this.myScroll = new IScroll('#' + rid, {
        scrollbars: true,
        mouseWheel: true,
        probeType: 2,
        interactiveScrollbars: true,
        hideScrollbar: false,
        vScrollbar: true,
        shrinkScrollbars: 'scale',
        fadeScrollbars: false,
        disableMouse: true,
        disablePointer: true
      });

      this.myScroll.on('scroll', function () {
        var temph = ES.selctorDoc('.scrolltable').box().clientHeight;
        var mainh = ES.selctorDoc('.maintable').box().clientHeight;
        temph = temph > mainh ? mainh : temph;
        console.log(temph, 'temph');
        that.dom.find('.iScrollHorizontalScrollbar').css({ top: temph - this.y - 8 });
      });
      console.log(this.myScroll._events.scroll);
    }
  }, {
    key: 'inittable',
    value: function inittable() {
      if (this.myScroll1) {
        this.myScroll1.refresh();
        return;
      }
      var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
      ES.selctorDoc('.maintable').attr('id', rid);
      this.myScroll1 = new IScroll('#' + rid, {
        scrollbars: true,
        mouseWheel: true,
        scrollX: true,
        interactiveScrollbars: true,
        hideScrollbar: false,
        vScrollbar: true,
        shrinkScrollbars: 'scale',
        fadeScrollbars: false,
        disableMouse: true,
        disablePointer: true
      });
    }
  }]);

  return DataBase;
}(Interstellar.pagesBase);

window.DataBase = window.DataBase || DataBase;
module.exports = DataBase;

/***/ }),

/***/ 148:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(856);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./taskmanage.less", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./taskmanage.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 149:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var urlDict = {
  queryTask: '/task/search',
  startTask: '/task/start',
  projectNameSearch: "/project/name/search",
  taskNameSearch: '/task/name/search',
  taskVendorNameSearch: '/task/vendorName/search',
  task_clone: '/task/clone',
  task_end: '/task/end'
};
module.exports = {
  // 查询任务列表
  queryTask: function queryTask(data) {
    return this.HttpRequest.POST(urlDict.queryTask, data);
  },


  // 开始任务
  startTask: function startTask(id) {
    return this.HttpRequest.POST(urlDict.startTask, { id: id });
  },


  //查询项目名称
  projectNameSearch: function projectNameSearch(data) {
    return this.HttpRequest.POST(urlDict.projectNameSearch, data);
  },


  // 查询任务名称
  taskNameSearch: function taskNameSearch(data) {
    return this.HttpRequest.POST(urlDict.taskNameSearch, data);
  },


  // 查询所属项目
  taskVendorNameSearch: function taskVendorNameSearch(data) {
    return this.HttpRequest.POST(urlDict.taskVendorNameSearch, data);
  },
  task_clone: function task_clone(data) {
    return this.HttpRequest.POST(urlDict.task_clone, data);
  },
  task_end: function task_end(data) {
    return this.HttpRequest.POST(urlDict.task_end, data);
  }
};

/***/ }),

/***/ 150:
/***/ (function(module, exports) {

module.exports = "<div class=taskmanage> <div class=topchoose> </div> <div class=filterarea> </div> <div class=btnarea> <a class=\"searchbtn fillBtn\">查询</a> <a class=\"create strokeBtn\">创建任务</a> </div> <div class=tablearea> </div> </div> ";

/***/ }),

/***/ 151:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//这边基本上引入需要使用的资源less，api，需要使用的模块等等。

var taskmanage = function (_Interstellar$modelBa) {
  _inherits(taskmanage, _Interstellar$modelBa);

  function taskmanage(app) {
    _classCallCheck(this, taskmanage);

    var _this = _possibleConstructorReturn(this, (taskmanage.__proto__ || Object.getPrototypeOf(taskmanage)).call(this, app));

    _this.categories = {
      fs: 1,
      bl: 2,
      qt: 0,
      cs: 3
    };
    _this.apiData = { page: 1, pageSize: 10, type: 1, category: _this.categories[app.parpam['type']] };
    _this.tablist = [{ 'id': 'fs', 'name': '放射科' }, { 'id': 'bl', 'name': '病理科' }, { 'id': 'qt', 'name': '其它' }, { 'id': 'cs', 'name': '测试' }];
    _this.condition = [[{ "type": "dobuledropdown", "name": "taskIdList", "showname": "任务名称", "datatype": "obj", "data": [], "key": "taskIdList", "out": true, "input": true }], [{ "type": "dropdown", "name": "algPreAnnotation", "showname": "任务类型", "datatype": "obj", "data": [{ val: '人工标注', idx: 0 }, { val: '算法标注', idx: 1 }], "key": "algPreAnnotation", "out": true }], [{ "type": "dropdown", "name": "method", "showname": "任务方式", "datatype": "obj", "data": [{ val: '承包式', idx: 1 }, { val: '开放式', idx: 2 }], "key": "method", "out": true, "input": false }], [{ "type": "dropdown", "name": "status", "showname": "任务状态", "datatype": "obj", "data": [{ val: '待发布', idx: '1' }, { val: '进行中', idx: '2' }, { val: '已完成', idx: '3' }, { val: '已终结', idx: '4' }], "key": "status", "out": true }], [{ "type": "dobuledropdown", "name": "vendorIdList", "showname": "所属公司", "datatype": "obj", "data": [], "key": "vendorIdList", "out": true, "input": true }], [{ "type": "dropdown", "name": "sicknessType", "showname": "项目标签", "datatype": "obj", "data": Tool.configxlkformat(app.constmap['SICKNESS_TYPE']), "key": "status", "out": true }], [{ "type": "dropdown", "name": "projectFunction", "showname": "项目目标", "datatype": "obj", "data": Tool.configxlkformat(app.constmap['PROJECT_FUNCTION']), "key": "status", "out": true }], [{ "type": "dobuledropdown", "name": "projectIdList", "showname": "所属项目", "datatype": "obj", "data": [], "key": "projectIdList", "out": true, "input": true }], [{ "type": "time", "name": "inspectTime", "showname": "", "datatype": "obj", "data": null, "key": "inspectTime", "out": true }]];
    _this.tableconfig = {
      icon: {
        "id": { name: '<span>任务ID</span>', type: 'text', code: 'checkid', w: '5%', ww: '5%', n: "40" },
        "name": { name: '<span>任务名称</span>', type: 'text', code: 'pid', w: '5%', ww: '5%' },
        "method": { name: '<span>任务方式</span>', type: 'text', code: 'pname', w: '4%', ww: '4%' },
        "algPreAnnotation": { name: '<span>任务类型</span>', type: 'text', code: 'psex', w: '6%', ww: '6%' },
        "assignVendors": { name: '<span>所属公司</span>', type: 'text', code: 'age', w: '6%', ww: '6%' },
        "projectName": { name: '<span>所属项目</span>', type: 'text', code: 'age', w: '6%', ww: '6%' },
        "sicknessType": { name: '<span>项目标签</span>', type: 'text', code: 'age', w: '6%', ww: '6%' },
        "projectFunction": { name: '<span>项目目标</span>', type: 'text', code: 'age', w: '5%', ww: '5%' },
        "projectStatus": { name: '<span>项目状态</span>', type: 'text', code: 'age', w: '5%', ww: '5%' },
        "status": { name: '<span>任务状态</span>', type: 'text', code: 'age', w: '5%', ww: '5%' },
        "remark": { name: '<span>任务备注</span>', type: 'text', code: 'age', w: '5%', ww: '5%' },
        "startTime": { name: '<span>开始日期</span>', type: 'text', code: 'positive', w: '5%', ww: '5%' },
        "endTime": { name: '<span>结束日期</span>', type: 'text', code: 'shebei', w: '5%', ww: '5%' },
        "seriesTotalNum": { name: '<span>序列总量（*交叉次数）</span>', type: 'text', code: 'date', w: '6%', ww: '6%' },
        "seriesAvailableNum": { name: '<span style="line-height: 20px;">&nbsp;未标注序列数量<br>（包含交叉次数）</span>', type: 'text', code: 'date', w: '5%', ww: '5%' },
        "seriesSubmittedNum": { name: '<span style="line-height: 20px;">&nbsp;已提交序列数量<br>（包含交叉次数）</span>', type: 'text', code: 'date', w: '5%', ww: '5%' },
        "createTime": { name: '<span>创建日期</span>', type: 'text', code: 'action', w: '5%', ww: '5%' }
      },
      actionulwidth: 200,
      minwidth: 2800,
      type: 'center',
      actionicon: {
        "operation": { name: '<span data-i18n="action" data-name="操作">操作</span>', type: 'action', code: 'action', w: '100%', ww: '100%' }
      }
    };
    _this.listicon = {
      action: { //待发布
        config: { dis: 'inline', link: 'noLink', content: [{ text: '查看详情', key: 'view' }, { text: '编辑', key: 'edit' }, { text: '开始任务', key: 'start' }, { text: '复制', key: 'copy' }] }
      },
      action1: { //进行中且有人已标注但未提交
        config: { dis: 'inline', link: 'noLink', content: [{ text: '查看详情', key: 'view' }, { text: '终结任务', key: 'end' }, { text: '复制', key: 'copy' }] }
      },
      action2: { //进行中但未被标注
        config: { dis: 'inline', link: 'noLink', content: [{ text: '查看详情', key: 'view' }, { text: '暂停发布', key: 'stop' }, { text: '复制', key: 'copy' }] }
      },
      action3: { //进行中有人已提交
        config: { dis: 'inline', link: 'noLink', content: [{ text: '查看详情', key: 'view' }, { text: '终结任务', key: 'end' }, { text: '查阅已提交序列', key: 'viewxl' }, { text: '复制', key: 'copy' }] }
      },
      action4: { //已完成、已终结
        config: { dis: 'inline', link: 'noLink', content: [{ text: '查看详情', key: 'view' }, { text: '查阅已提交序列', key: 'viewxl' }, { text: '复制', key: 'copy' }] }
      },
      action5: { //已完成、已终结未提交
        config: { dis: 'inline', link: 'noLink', content: [{ text: '查看详情', key: 'view' }, { text: '复制', key: 'copy' }] }
      }
    };
    return _this;
  }

  return taskmanage;
}(Interstellar.modelBase);

module.exports = taskmanage;

/***/ }),

/***/ 70:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var taskmanage = function (_DataBase) {
  _inherits(taskmanage, _DataBase);

  function taskmanage() {
    _classCallCheck(this, taskmanage);

    return _possibleConstructorReturn(this, (taskmanage.__proto__ || Object.getPrototypeOf(taskmanage)).apply(this, arguments));
  }

  _createClass(taskmanage, [{
    key: 'complete',
    value: function complete() {
      var _this2 = this;

      this.taskType = window.location.hash.indexOf('taskmanage') !== -1 ? 1 : 3;
      this.changeAll(this.model.condition);
      this.addli(this.model.condition);
      this.model.tableconfig.tablewidth = ES.selctorDoc('.taskmanage').box().clientWidth - 240;
      this.loadlist('group');
      this.dom.find('.strokeBtn').on('click', function () {
        _this2.app.session.set('ischanged', false);
        if (_this2.taskType == 1) {
          _this2.app.changePage('createtask', { type: 'new' });
        } else {
          _this2.app.changePage('createbackflowtask1', { type: 'new' });
        }
      });
      this.dom.find('.fillBtn').on('click', function () {
        _this2.model.condition.forEach(function (val, idx) {
          if (val[0].name == 'inspectTime') {
            _this2.model.apiData.startCreateTime = _this2.getfiltercondition()[val[0].name][0].startTime;
            _this2.model.apiData.endCreateTime = _this2.getfiltercondition()[val[0].name][0].endTime;
          } else {
            _this2.model.apiData[val[0].name] = _this2.getfiltercondition()[val[0].name].toString() == '' ? null : _this2.getfiltercondition()[val[0].name].toString();
          }
        });
        _this2.model.apiData.projectIdList = _this2.model.apiData.projectIdList ? _this2.model.apiData.projectIdList.split(',').map(Number) : null;
        if (_this2.model.apiData.algPreAnnotation) {
          _this2.model.apiData.algPreAnnotation = _this2.model.apiData.algPreAnnotation == 1 ? true : false;
        }
        _this2.model.apiData.taskIdList = _this2.model.apiData.taskIdList ? _this2.model.apiData.taskIdList.split(',').map(Number) : null;
        _this2.model.apiData.vendorIdList = _this2.model.apiData.vendorIdList ? _this2.model.apiData.vendorIdList.split(',').map(Number) : null;
        _this2.model.apiData.page = 1;
        _this2.model.apiData.type = 1;
        _this2.search(true);
      });
    }
  }, {
    key: 'search',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(bool) {
        var _this3 = this;

        var data2, res;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                data2 = [];

                this.model.apiData.type = this.taskType;
                _context.next = 4;
                return this.api.queryTask(this.model.apiData);

              case 4:
                res = _context.sent;

                if (res.code == 0) {
                  if (res.data.list.length > 0) {
                    res.data.list.forEach(function (val, i) {
                      for (var _i in val) {
                        val[_i] = val[_i] == null ? '' : val[_i];
                      }
                      var obj = {};
                      val.vendors = '';
                      obj.id = val.id + ',' + val.projectStatus + ',' + val.seriesTotalNum / (val.crossMarkNum ? val.crossMarkNum : 1) + ',' + val.projectId + ',' + val.status;
                      val.assignVendors = val.assignVendors.length > 0 ? val.assignVendors.toString() : '';
                      val.remark = JSON.parse('"' + val.remark + '"');
                      switch (val.status) {
                        case 1:
                          val.status = '待发布';
                          obj.operation = _this3.model.listicon.action;
                          break;
                        case 2:
                          val.status = '进行中';
                          if (val.seriesAvailableNum === val.seriesTotalNum) {
                            obj.operation = _this3.model.listicon.action1;
                          } else {
                            obj.operation = _this3.model.listicon.action3;
                          }
                          break;
                        case 3:
                          val.status = '已完成';
                          if (val.seriesAvailableNum === val.seriesTotalNum) {
                            obj.operation = _this3.model.listicon.action5;
                          } else {
                            obj.operation = _this3.model.listicon.action4;
                          }
                          break;
                        case 4:
                          val.status = '已终结';
                          if (val.seriesAvailableNum === val.seriesTotalNum) {
                            obj.operation = _this3.model.listicon.action5;
                          } else {
                            obj.operation = _this3.model.listicon.action4;
                          }
                          break;
                      }
                      data2.push(obj);
                      val.method = val.method == 1 ? '承包式' : '开放式';
                      val.algPreAnnotation = val.algPreAnnotation ? '算法标注' : '人工标注';
                      val.projectStatus = val.projectStatus == 1 ? '未启用' : '已启用';
                      val.crossMarkNum = val.assignMethod == 2 ? 1 : val.crossMarkNum;
                      val.seriesTotalNum = val.crossMarkNum ? val.seriesTotalNum / val.crossMarkNum + '(*' + val.crossMarkNum + ')' : val.seriesTotalNum + '(*1)';
                      if (val.createTime) val.createTime = Tool.time(val.createTime, 'yyyy-mm-dd');
                      if (val.startTime) val.startTime = Tool.time(val.startTime, 'yyyy-mm-dd');
                      if (val.endTime) val.endTime = Tool.time(val.endTime, 'yyyy-mm-dd');
                      val.isassign = '';
                    });
                    this.tablecont.setData(res.data.list, data2);
                  } else {
                    this.tablecont.noData();
                  }
                }
                if (bool) {
                  this.tablecont.getTotal(res.data.pages, 2, res.data.total);
                }
                this.initscroll();

              case 8:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function search(_x) {
        return _ref.apply(this, arguments);
      }

      return search;
    }()
  }, {
    key: 'listaction',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(value) {
        var _this4 = this;

        var page;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                page = this.taskType === 1 ? 'createtask' : 'createbackflowtask1';
                _context5.t0 = value.classname;
                _context5.next = _context5.t0 === 'view' ? 4 : _context5.t0 === 'edit' ? 6 : _context5.t0 === 'copy' ? 8 : _context5.t0 === 'start' ? 10 : _context5.t0 === 'end' ? 12 : _context5.t0 === 'viewxl' ? 14 : 16;
                break;

              case 4:
                // this.app.changePage(this.taskType===1?'createtask':'createbackflowtask1', {
                //   type: 'view',
                //   taskid: value.id.split(',')[0],
                //   status:value.id.split(',')[4]
                //   // taskid: value.id.split(',')[0]
                // })
                window.open('http://' + window.location.host + '/#!/' + page + '/view/' + value.id.split(',')[0] + '//' + value.id.split(',')[4]);
                return _context5.abrupt('break', 16);

              case 6:
                // this.app.changePage(this.taskType===1?'createtask':'createbackflowtask1', {
                //   type: 'edit',
                //   taskid: value.id.split(',')[0],
                //   projectid: value.id.split(',')[3],
                //   status:value.id.split(',')[4]
                // })
                window.open('http://' + window.location.host + '/#!/' + page + '/edit/' + value.id.split(',')[0] + '/' + value.id.split(',')[3] + '/' + value.id.split(',')[4]);
                return _context5.abrupt('break', 16);

              case 8:
                this.app.alert.show({
                  title: ' ',
                  msg: '确认复制吗？',
                  close: true,
                  sure: function () {
                    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                      var copyRes;
                      return regeneratorRuntime.wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              _context2.next = 2;
                              return _this4.api.task_clone({ taskId: value.id.split(',')[0] });

                            case 2:
                              copyRes = _context2.sent;

                              if (copyRes.code == 0) {
                                _this4.model.apiData.page = 1;
                                _this4.search(true);
                              } else {
                                alert('复制失败');
                              }

                            case 4:
                            case 'end':
                              return _context2.stop();
                          }
                        }
                      }, _callee2, _this4);
                    }));

                    function sure() {
                      return _ref3.apply(this, arguments);
                    }

                    return sure;
                  }()
                });
                return _context5.abrupt('break', 16);

              case 10:
                if (value.id.split(',')[1] == 1) {
                  this.app.alert.show({
                    title: ' ',
                    msg: '此任务中引用的项目未启动，请先启动项目。',
                    close: true
                  });
                } else {
                  this.app.alert.show({
                    title: ' ',
                    msg: '是否确定开始任务，本次任务的需要标注的序列数量为' + value.id.split(',')[2] + '个，一旦开始序列数量即为锁定。',
                    close: true,
                    sure: function () {
                      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                        var res;
                        return regeneratorRuntime.wrap(function _callee3$(_context3) {
                          while (1) {
                            switch (_context3.prev = _context3.next) {
                              case 0:
                                _this4.app.loading.show();
                                _context3.next = 3;
                                return _this4.api.startTask(parseInt(value.id.split(',')[0]));

                              case 3:
                                res = _context3.sent;

                                _this4.app.loading.hide();
                                if (res.code == 0) {
                                  _this4.model.apiData.page = 1;
                                  _this4.search(true);
                                } else {
                                  _this4.app.alert.show({
                                    title: '提醒',
                                    msg: res.msg,
                                    close: true
                                  });
                                }

                              case 6:
                              case 'end':
                                return _context3.stop();
                            }
                          }
                        }, _callee3, _this4);
                      }));

                      function sure() {
                        return _ref4.apply(this, arguments);
                      }

                      return sure;
                    }()
                  });
                }
                return _context5.abrupt('break', 16);

              case 12:
                this.app.alert.show({
                  title: ' ',
                  msg: '是否确定要终结任务，一旦终结外部医生的任务即结束，本次任务也无法再次发布。',
                  close: true,
                  sure: function () {
                    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                      var res;
                      return regeneratorRuntime.wrap(function _callee4$(_context4) {
                        while (1) {
                          switch (_context4.prev = _context4.next) {
                            case 0:
                              _context4.next = 2;
                              return _this4.api.task_end({ taskId: value.id.split(',')[0] });

                            case 2:
                              res = _context4.sent;

                              if (res.code == 0) {
                                _this4.model.apiData.page = 1;
                                _this4.search(true);
                              } else {
                                alert('操作失败');
                              }

                            case 4:
                            case 'end':
                              return _context4.stop();
                          }
                        }
                      }, _callee4, _this4);
                    }));

                    function sure() {
                      return _ref5.apply(this, arguments);
                    }

                    return sure;
                  }()
                });
                return _context5.abrupt('break', 16);

              case 14:
                this.app.changePage('ytjtaskdetail', {
                  taskid: value.id.split(',')[0],
                  taskType: this.taskType
                });
                return _context5.abrupt('break', 16);

              case 16:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function listaction(_x2) {
        return _ref2.apply(this, arguments);
      }

      return listaction;
    }()
  }, {
    key: 'toggletab',
    value: function toggletab(value) {
      this.app.changePage(this.taskType == 1 ? 'taskmanage' : 'backflowtask', { type: value.id });
    }
  }, {
    key: 'getapidata',
    value: function getapidata(value) {
      if (value) {
        switch (value.name) {
          case 'taskIdList':
            this.chooseData.moduleobj.taskIdList.loading(true);
            this.taskNameSearch(value.data.data ? value.data.data.trim() : "");
            break;
          case 'projectIdList':
            this.chooseData.moduleobj.projectIdList.loading(true);
            this.projectNameSearch(value.data.data ? value.data.data.trim() : "");
            break;
          case 'vendorIdList':
            this.chooseData.moduleobj.vendorIdList.loading(true);
            this.taskVendorNameSearch(value.data.data ? value.data.data.trim() : "");
            break;
        }
      } else {
        this.chooseData.moduleobj.projectIdList.loading(true);
        this.chooseData.moduleobj.taskIdList.loading(true);
        this.chooseData.moduleobj.vendorIdList.loading(true);
        this.taskNameSearch('');
        this.taskVendorNameSearch('');
        this.projectNameSearch('');
      }
    }
  }, {
    key: 'projectNameSearch',
    value: function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(projectName) {
        var _ref7, data, projectNames;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.api.projectNameSearch({ projectName: projectName, type: window.location.hash.indexOf('taskmanage') !== -1 ? 1 : 3 });

              case 2:
                _ref7 = _context6.sent;
                data = _ref7.data;

                this.chooseData.moduleobj.projectIdList.loading(false);
                projectNames = data.list.map(function (item) {
                  return {
                    'idx': item.projectId,
                    'val': item.projectName
                  };
                });

                this.chooseData.renderHtml(projectNames, 'projectIdList');

              case 7:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function projectNameSearch(_x3) {
        return _ref6.apply(this, arguments);
      }

      return projectNameSearch;
    }()
  }, {
    key: 'taskNameSearch',
    value: function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(taskName) {
        var _ref9, data, taskNames;

        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.api.taskNameSearch({ taskName: taskName, type: window.location.hash.indexOf('taskmanage') !== -1 ? 1 : 3 });

              case 2:
                _ref9 = _context7.sent;
                data = _ref9.data;

                this.chooseData.moduleobj.taskIdList.loading(false);
                taskNames = data.list.map(function (item) {
                  return {
                    'idx': item.taskId,
                    'val': item.taskName
                  };
                });

                this.chooseData.renderHtml(taskNames, 'taskIdList');

              case 7:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function taskNameSearch(_x4) {
        return _ref8.apply(this, arguments);
      }

      return taskNameSearch;
    }()
  }, {
    key: 'taskVendorNameSearch',
    value: function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(vendorName) {
        var _ref11, data, taskVendorNames;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.api.taskVendorNameSearch({ vendorName: vendorName });

              case 2:
                _ref11 = _context8.sent;
                data = _ref11.data;

                this.chooseData.moduleobj.vendorIdList.loading(false);
                taskVendorNames = data.list.map(function (item) {
                  return {
                    'idx': item.vendorId,
                    'val': item.vendorName
                  };
                });

                this.chooseData.renderHtml(taskVendorNames, 'vendorIdList');

              case 7:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function taskVendorNameSearch(_x5) {
        return _ref10.apply(this, arguments);
      }

      return taskVendorNameSearch;
    }()
  }, {
    key: 'initscroll',
    value: function initscroll() {
      var _this5 = this;

      if (this.myScroll) {
        this.myScroll.refresh();
        return;
      }
      var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
      ES.selctorDoc('.scrolltable').attr('id', rid);
      this.myScroll = new IScroll('#' + rid, {
        scrollbars: true,
        mouseWheel: true,
        probeType: 2,
        interactiveScrollbars: true,
        hideScrollbar: false,
        vScrollbar: true,
        shrinkScrollbars: 'scale',
        fadeScrollbars: false,
        disableMouse: true,
        disablePointer: true
      });
      this.myScroll.on('scroll', function () {
        var temph = ES.selctorDoc('.scrolltable').box().clientHeight;
        var mainh = ES.selctorDoc('.maintable').box().clientHeight;
        temph = temph > mainh ? mainh : temph;
        _this5.dom.find('.iScrollHorizontalScrollbar').css({
          top: temph - _this5.y - 8
        });
      });
    }
  }, {
    key: 'inittable',
    value: function inittable() {
      if (this.myScroll1) {
        this.myScroll1.refresh();
        return;
      }
      var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
      ES.selctorDoc('.maintable').attr('id', rid);
      this.myScroll1 = new IScroll('#' + rid, {
        scrollbars: true,
        mouseWheel: true,
        scrollX: true,
        interactiveScrollbars: true,
        hideScrollbar: false,
        vScrollbar: true,
        shrinkScrollbars: 'scale',
        fadeScrollbars: false,
        disableMouse: true,
        disablePointer: true
      });
    }
  }, {
    key: 'resize',
    value: function resize() {
      var ch = ES.selctorDoc(window).box().clientHeight - 100;
      var cw = ES.selctorDoc(window).box().clientWidth - 240;
      ES.selctorDoc('.taskmanage').css({
        'height': ch,
        'width': cw
      });
      ES.selctorDoc('.scrolltable').css({
        'height': ch - 260
      });
    }
  }]);

  return taskmanage;
}(DataBase);

module.exports = taskmanage;

/***/ }),

/***/ 740:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(741);

var tab = function (_Interstellar$moduleB) {
    _inherits(tab, _Interstellar$moduleB);

    function tab(app, dom, value, addMode) {
        _classCallCheck(this, tab);

        var _this = _possibleConstructorReturn(this, (tab.__proto__ || Object.getPrototypeOf(tab)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(743);
        return _this;
    }

    _createClass(tab, [{
        key: 'complete',
        value: function complete() {
            this.btn();
        }
    }, {
        key: 'btn',
        value: function btn(value) {
            var that = this;
            this.dom.find('.tab .option').on('click', function () {
                that.dom.find('.tab .option').removeClass('selected');
                var dom = ES.selctorDoc(this);
                dom.addClass('selected');
                var sdata = { id: dom.attr('node_id'), name: dom.find('p').html(), pid: that.nowParam.id };
                that.event._dispatch('tab.change', sdata);
            });
        }
    }]);

    return tab;
}(Interstellar.moduleBase);

//原型链一定要有的


module.exports = tab;

/***/ }),

/***/ 741:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(742);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./tab.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./tab.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 742:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".tab .option {\n  float: left;\n  width: 100px;\n  text-align: center;\n  font-size: 14px;\n  color: #333333;\n  line-height: 40px;\n  cursor: pointer;\n}\n.tab .selected {\n  border-bottom: 1px solid #448E97;\n  font-weight: bold;\n}\n", ""]);

// exports


/***/ }),

/***/ 743:
/***/ (function(module, exports) {

module.exports = "<ul class=tab> <%=for(var w = 0;w < p.data.length; w++){\nvar stu=p.data[w];\nvar sel=\"\";\nif(p.default==stu.id){\n\tsel='selected';\n}\n=%> <li class=\"option <%==sel=%>\" node_id=\"<%==stu.id=%>\"> <p> <%==stu.name=%> </p> </li> <%=}=%> </ul> <div style=clear:both></div>";

/***/ }),

/***/ 744:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(745);
// var html = require('./tpl.html')

var bztoollist = function (_Interstellar$moduleB) {
    _inherits(bztoollist, _Interstellar$moduleB);

    function bztoollist(app, dom, value, addMode) {
        _classCallCheck(this, bztoollist);

        var _this = _possibleConstructorReturn(this, (bztoollist.__proto__ || Object.getPrototypeOf(bztoollist)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(747);
        _this.name = "datacondition";
        _this.data = {};
        _this.needCompent = {};

        _this.moduleobj = {};

        return _this;
    }

    _createClass(bztoollist, [{
        key: 'complete',
        value: function complete() {
            var _this2 = this;

            var that = this;
            this.dom.find('.btnarea .searchbtn').on('click', function (item) {
                _this2.event._dispatch('datacondition.search');
            });
            this.dom.find('.btnarea .exportlink').on('click', function (item) {
                _this2.event._dispatch('datacondition.export');
            });
            __webpack_require__.e/* require.ensure */(59).then((function () {
                var dropdown = __webpack_require__(638);
                that.needCompent['dropdown'] = dropdown;
                var duoxuanxlk = __webpack_require__(647);
                that.needCompent['duoxuanxlk'] = duoxuanxlk;
                var calendar = __webpack_require__(644);
                that.needCompent['calendar'] = calendar;
                that.setData();
                that.event._dispatch('datacondition.moduledone');
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
        }
    }, {
        key: 'setData',
        value: function setData(refreshdata) {
            var _this3 = this;

            this.dom.find('.condition').html('');
            if (refreshdata) {
                refreshdata.map(function (item) {
                    _this3.part(item);
                });
            } else {
                this.initDate.data.map(function (item) {
                    _this3.part(item);
                });
            }
        }
    }, {
        key: 'part',
        value: function part(value) {
            this.dom.find('.condition').append('<div class="content ' + value[0].name + '"></div>');
            this.data[value[0].name] = [];
            for (var i = 0; i < value.length; i++) {
                this.allControl(value[i], i);
            }
        }
    }, {
        key: 'allControl',
        value: function allControl(value, pos) {
            this.dom.find('.condition .' + value.name).append('<div class="signlecontent' + pos + ' fl"></div>');
            eval('this.' + value.type + '(value,pos)');
        }
    }, {
        key: 'dobuledropdown',
        value: function dobuledropdown(value, pos) {
            //console.log(value, 'dobuledropdowndobuledropdown')
            var that = this;
            var inputSt = value.input;
            var myname = this.app.loadModule(this.needCompent['duoxuanxlk'], this.dom.find('.condition .' + value.name + ' .signlecontent' + pos), {
                showname: value.showname,
                data: value.data,
                datatype: value.datatype,
                input: value.input ? value.input : false,
                code: value.name,
                pos: pos
            });
            myname.event._addEvent('duoxuan.select', function (value) {
                that.data[myname.initDate.code][myname.initDate.pos] = value.name;
            });
            myname.event._addEvent('duoxuan.input', function (value) {
                // if (inputSt) {
                //     that.data[myname.initDate.code]['key'] = value.data
                //     that.event._dispatch('datacondition.duoxuanInput')
                // }
                that.event._dispatch('datacondition.dropinput', { data: value, name: myname.initDate.code });
            });
            myname.event._addEvent('duoxuanxlk.clear', function (value) {
                that.data[myname.initDate.code][myname.initDate.pos] = '';
                that.event._dispatch('datacondition.dropinput', { data: '', name: myname.initDate.code });
            });
            that.moduleobj[myname.initDate.code] = myname;
        }
    }, {
        key: 'dropdown',
        value: function dropdown(item, pos) {
            var that = this;
            var myname = this.app.loadModule(this.needCompent['dropdown'], this.dom.find('.condition .' + item.name + ' .signlecontent' + pos), {
                className: 'xlk',
                firstSelect: { val: item.showname, idx: '' },
                data: item.data,
                code: item.name,
                datatype: item.datatype,
                input: item.input ? item.input : false

            });
            myname.event._addEvent('option.click', function (value) {
                that.data[myname.initDate.code][pos] = value.idx;
            });
            myname.event._addEvent('dropDown.clear', function (value) {
                that.data[myname.initDate.code][pos] = '';
                that.event._dispatch('datacondition.dropinput', { data: '', name: myname.initDate.code });
            });

            myname.event._addEvent('drop.input', function (value) {
                that.event._dispatch('datacondition.dropinput', { data: value, name: myname.initDate.code });
            });
            that.moduleobj[myname.initDate.code] = myname;
        }
    }, {
        key: 'dropdownS',
        value: function dropdownS(item, pos) {
            var that = this;
            this.dom.find('.condition .' + item.name + ' .signlecontent' + pos).append('<span class="radioonly" style="margin:0 10px 0 5px">' + item.showname + '</span>');
            this.dom.find('.condition .' + item.name + ' .signlecontent' + pos).append('<div class="dropdownContent" style="display: inline-block;"></div>');
            var fname = item.showname;
            if (item.name == "check" || item.name == "inspect") {
                fname = item.data[0].val;
            }
            var myname = this.app.loadModule(this.needCompent['dropdown'], this.dom.find('.condition .' + item.name + ' .signlecontent' + pos + ' .dropdownContent'), {
                className: 'xlk',
                firstSelect: { val: fname, idx: '' },
                data: item.data,
                code: item.name,

                datatype: item.datatype,
                input: item.input ? item.input : false

            });
            myname.event._addEvent('option.click', function (value) {
                console.log(myname.initDate.code);
                that.data[myname.initDate.code][pos] = value.idx;
            });
            myname.event._addEvent('dropDown.clear', function (value) {
                that.data[myname.initDate.code][pos] = '';
            });
            myname.event._addEvent('drop.input', function (value) {
                that.event._dispatch('datacondition.dropinput', { data: value, name: myname.initDate.code });
            });
            that.moduleobj[myname.initDate.code] = myname;
        }
    }, {
        key: 'dTexts',
        value: function dTexts(value, pos) {
            var _this4 = this;

            var str = '<span>' + value.showname + '</span> \n                <input type="text" class="lower dText" check="num"> \n                <label>-</label> \n            <input type="text" class="upper dText" check="num">';
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append(str);
            this.data[value.name].push({});
            this.dom.find('.condition .' + value.name + ' .lower').on('blur', function () {
                console.log(_this4.data, value.name);
                _this4.data[value.name][pos]['lower'] = _this4.dom.find('.condition .' + value.name + ' .lower').val();
            });
            this.dom.find('.condition .' + value.name + ' .upper').on('blur', function () {
                _this4.data[value.name][pos]['upper'] = _this4.dom.find('.condition .' + value.name + ' .upper').val();
            });
        }
    }, {
        key: 'dText',
        value: function dText(value, pos) {
            var _this5 = this;

            var str = '<input type="text" class="lower dText" check="num"> \n                <label>-</label> \n            <input type="text" class="upper dText" check="num">';
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append(str);
            this.data[value.name][pos] = {};
            console.log(this.data);
            this.dom.find('.condition .' + value.name + ' .lower').on('blur', function () {
                console.log(_this5.data, 'value.name');
                _this5.data[value.name][pos]['lower'] = _this5.dom.find('.condition .' + value.name + ' .lower').val();
            });
            this.dom.find('.condition .' + value.name + ' .upper').on('blur', function () {
                _this5.data[value.name][pos]['upper'] = _this5.dom.find('.condition .' + value.name + ' .upper').val();
            });
        }
    }, {
        key: 'texts',
        value: function texts(value, pos) {
            var _this6 = this;

            var str = '<span>' + value.showname + ('</span> \n        <input type="text" class="inputtext textData" style="display:inline-block" value="' + (value.data ? value.data : '') + '" ' + (value.input === false ? 'readonly' : '') + '>');
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append(str);
            this.dom.find('.condition .' + value.name + ' .textData').on('blur', function () {
                console.log(pos, value.name);
                _this6.data[value.name][pos] = _this6.data[value.name][pos] ? _this6.data[value.name][pos] : {};
                _this6.data[value.name][pos] = _this6.dom.find('.condition .' + value.name + ' .textData').val();
            });
        }
    }, {
        key: 'time',
        value: function time(value, pos) {
            var that = this;
            var code = value.name;
            that.data[code].push({});
            var todayTime = new Date();
            var Month = todayTime.getMonth() + 1 < 10 ? '0' + (todayTime.getMonth() + 1) : todayTime.getMonth() + 1;
            var today = todayTime.getFullYear() + '-' + Month + '-' + todayTime.getDate();
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append('<span class="radioonly">' + value.showname + '</span>');
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append('<div class="timefilter" style="display: inline-block;"></div>');
            var timeCotrol = this.app.loadModule(this.needCompent['calendar'], this.dom.find('.condition .' + value.name + ' .signlecontent' + pos + ' .timefilter'), { titleShow: false, defaultword: '请选择时间' });
            timeCotrol.event._addEvent('times1.day', function (value) {
                console.log(value, 'valuetime', that.data);
                that.data[code][pos]['startTime'] = value.st ? value.st + " 00:00:00" : '';
                that.data[code][pos]['endTime'] = value.et ? value.et + " 23:59:59" : '';
                console.log(that.apidata);
            });
            timeCotrol.event._addEvent('times.dele', function (value) {
                if (value.dom.hasClass('day_left')) {
                    that.data[code][pos]['startTime'] = '';
                } else {
                    that.data[code][pos]['endTime'] = '';
                }
            });
        }
    }, {
        key: 'text',
        value: function text(value, pos) {
            var _this7 = this;

            var str = '<input type="text" class="inputtext textData">';
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append(str);
            this.data[value.name][pos] = '';
            this.dom.find('.condition .' + value.name + ' .textData').on('blur', function () {
                console.log(_this7.dom.find('.condition .' + value.name + ' .signlecontent' + pos + ' .textData').val(), value.name);
                _this7.data[value.name][pos] = _this7.dom.find('.condition .' + value.name + ' .signlecontent' + pos + ' .textData').val();
            });
        }
    }, {
        key: 'editdone',
        value: function editdone(value, pos) {
            var _this8 = this;

            var str = '<a class="iconfont icon-bianji radioonly"></a>';
            var code = value.name;
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append(str);
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos + ' .icon-bianji').on('click', function () {
                _this8.event._dispatch('datacondition.editor', { code: code });
            });
        }
        //渲染下拉框内容

    }, {
        key: 'renderHtml',
        value: function renderHtml(value, type) {
            this.moduleobj[type].renderHtml(value);
        }
    }]);

    return bztoollist;
}(Interstellar.moduleBase);

//原型链一定要有的


module.exports = bztoollist;

/***/ }),

/***/ 745:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(746);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./datacondition.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./datacondition.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 746:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".datacondition {\n  position: relative;\n}\n.datacondition .condition .content {\n  float: left;\n  padding: 5px 0;\n}\n.datacondition .condition .content .textData,\n.datacondition .condition .content .dText {\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n}\n.datacondition .condition .icon-bianji {\n  margin: 0px 10px;\n  line-height: 30px;\n}\n.datacondition .condition .patientAgetype > div {\n  margin-right: 5px;\n}\n.datacondition .condition .check > div,\n.datacondition .condition .inspect > div {\n  margin-right: 5px;\n}\n.datacondition .condition .check .xlk,\n.datacondition .condition .inspect .xlk {\n  width: 80px;\n  height: 30px;\n  line-height: 30px;\n}\n.datacondition .condition .check .xlk .nowname,\n.datacondition .condition .inspect .xlk .nowname {\n  width: 60px;\n}\n.datacondition .btnarea {\n  position: absolute;\n  bottom: 20px;\n  transform: translate(-120px, 0px);\n  right: 0px;\n}\n.datacondition .btnarea .showData {\n  width: 110px;\n  height: 40px;\n  line-height: 40px;\n  border-radius: 4px;\n}\n.datacondition .btnarea .biaozhubtn {\n  display: inline-block;\n  padding: 0 20px;\n  height: 40px;\n  color: #fff;\n  line-height: 40px;\n  background: #4c9fa9;\n  border-radius: 4px;\n  text-align: center;\n}\n.datacondition .btnarea .searchbtn {\n  margin: 0 20px 0 30px;\n}\n.datacondition .btnarea .dwdiv {\n  position: relative;\n  display: inline-block;\n}\n.datacondition .btnarea .dwdiv > label {\n  width: 280px;\n  color: red;\n  position: absolute;\n  text-align: left;\n  left: 0;\n}\n", ""]);

// exports


/***/ }),

/***/ 747:
/***/ (function(module, exports) {

module.exports = "<div class=datacondition> <div class=condition></div> <div style=clear:both></div> </div>";

/***/ }),

/***/ 856:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".taskmanage {\n  margin: 20px;\n  background: #fff;\n  height: 100%;\n  overflow: hidden;\n}\n.taskmanage .topchoose {\n  margin-top: 20px;\n  border-bottom: 1px solid #ccc;\n  font-size: 0;\n}\n.taskmanage .topchoose a {\n  font-size: 14px;\n  height: 40px;\n  line-height: 40px;\n  width: 100px;\n  text-align: center;\n  display: inline-block;\n  cursor: pointer;\n  color: #333333;\n}\n.taskmanage .topchoose .choosed {\n  border-bottom: 1px solid #448E97;\n}\n.taskmanage .filterarea {\n  margin: 20px;\n  width: 1000px;\n}\n.taskmanage .filterarea .content {\n  margin-right: 20px;\n}\n.taskmanage .filterarea .content .xlk {\n  width: 170px;\n  height: 35px;\n  line-height: 35px;\n}\n.taskmanage .filterarea .content .xlk .nowname {\n  width: 94%;\n}\n.taskmanage .filterarea .content .duoxuanxlk {\n  width: 170px;\n  height: 35px;\n  line-height: 35px;\n}\n.taskmanage .filterarea .content .inputtext {\n  width: 160px;\n  padding-left: 10px;\n  height: 35px;\n  line-height: 35px;\n}\n.taskmanage .filterarea .inspectTime {\n  position: relative;\n}\n.taskmanage .filterarea .inspectTime .chooseData > div {\n  display: inline-block;\n}\n.taskmanage .filterarea .inspectTime .chooseData .showData {\n  width: 170px;\n  height: 35px;\n  line-height: 35px;\n  border-radius: 4px;\n}\n.taskmanage .btnarea {\n  position: absolute;\n  top: 40px;\n  right: 20px;\n}\n.taskmanage .btnarea .biaozhubtn {\n  margin-right: 20px;\n  height: 35px;\n  line-height: 35px;\n  padding: 0 20px;\n  background: #4c9fa9;\n  color: #fff;\n}\n.taskmanage .tablearea .actionul {\n  width: 140px!important;\n  left: -55px !important;\n}\n.taskmanage .tablearea .actiontable .ul {\n  overflow: unset;\n}\n.taskmanage .tablearea .list {\n  min-height: 350px;\n}\n", ""]);

// exports


/***/ })

});
//# sourceMappingURL=3f2ce3b9bcdb26b7c92a.4.min.js.map