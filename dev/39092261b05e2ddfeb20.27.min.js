webpackJsonp([27],{

/***/ 13:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//import {firstName, lastName, year} from 'http://172.16.100.221:44444/footer/footer.js';
//这边基本上引入需要使用的资源less，api，需要使用的模块等等。

var DataBase = function (_Interstellar$pagesBa) {
  _inherits(DataBase, _Interstellar$pagesBa);

  function DataBase(app, api, dom, model) {
    _classCallCheck(this, DataBase);

    var _this = _possibleConstructorReturn(this, (DataBase.__proto__ || Object.getPrototypeOf(DataBase)).call(this, app, api, dom, model));

    _this.apiData = {};
    return _this;
  }

  _createClass(DataBase, [{
    key: 'complete',
    value: function complete() {}
  }, {
    key: 'addli',
    value: function addli(value) {
      var _this2 = this;

      var tablist = __webpack_require__(740);
      var tabListControl = this.app.loadModule(tablist, this.dom.find('.topchoose'), { data: this.model.tablist, default: this.app.parpam['type'] });
      tabListControl.event._addEvent('tab.change', function (value) {
        _this2.toggletab(value);
        //this.app.changePage('imagedatagl1', { type: value.id })
      });
      this.changeAll(value ? value : this.model.condition[this.app.parpam['type']]);
    }
  }, {
    key: 'loadlist',
    value: function loadlist(type, data) {
      var that = this;
      this.tablecont = null;
      __webpack_require__.e/* require.ensure */(60).then((function () {
        that.table_group = __webpack_require__(643);
        that.table_single = __webpack_require__(640);
        switch (type) {
          case 'group':
            that.tablecont = that.app.loadModule(that.table_group, that.dom.find('.tablearea'), {
              id: 'tasktable',
              header: data ? data : that.model.tableconfig
            });
            that.resize();
            that.inittable();
            break;
          case 'single':
            that.tablecont = that.app.loadModule(that.table_single, that.dom.find('.tablearea'), {
              id: 'tasktable',
              header: data ? data : that.model.tableconfig
            });
            that.resize();
        }
        that.tablecont.event._addEvent('table.pagenumber', function (value) {
          that.model.apiData.page = parseInt(value);
          that.tablecont.changenum(that.model.apiData.page);
          that.search();
        });
        that.tablecont.event._addEvent('table.pagesize', function (value) {
          that.model.apiData.pageSize = value.num;
          that.model.apiData.page = 1;
          that.search(true);
        });
        that.tablecont.event._addEvent('table.action', function (value) {
          that.listaction(value);
        });
        that.tablecont.event._addEvent('table.onoff', function (value) {
          that.listOnOff(value);
        });
        that.tablecont.event._addEvent('table.listlink', function (value) {
          that.listlink(value);
        });
        that.search(true);
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
    }
  }, {
    key: 'changeAll',
    value: function changeAll(value) {

      var that = this;
      var datacondition = __webpack_require__(744);
      this.chooseData = this.app.loadModule(datacondition, this.dom.find('.filterarea'), { data: value });
      this.chooseData.event._addEvent('datacondition.moduledone', function () {
        that.conditionconfig();
        that.getapidata();
      });
      this.chooseData.event._addEvent('datacondition.dropinput', function (value) {
        console.log(value, 'dddd');
        that.getapidata(value);
      });
    }
  }, {
    key: 'getapidata',
    value: function getapidata() {}
  }, {
    key: 'conditionconfig',
    value: function conditionconfig() {}
  }, {
    key: 'getfiltercondition',
    value: function getfiltercondition() {
      return this.chooseData.data;
    }
  }, {
    key: 'initscroll',
    value: function initscroll(value) {
      var that = this;
      if (this.myScroll) {
        this.myScroll.refresh();
        return;
      }
      var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
      this.dom.find('.' + value).attr('id', rid);
      this.myScroll = new IScroll('#' + rid, {
        scrollbars: true,
        mouseWheel: true,
        probeType: 2,
        interactiveScrollbars: true,
        hideScrollbar: false,
        vScrollbar: true,
        shrinkScrollbars: 'scale',
        fadeScrollbars: false,
        disableMouse: true,
        disablePointer: true
      });

      this.myScroll.on('scroll', function () {
        var temph = ES.selctorDoc('.scrolltable').box().clientHeight;
        var mainh = ES.selctorDoc('.maintable').box().clientHeight;
        temph = temph > mainh ? mainh : temph;
        console.log(temph, 'temph');
        that.dom.find('.iScrollHorizontalScrollbar').css({ top: temph - this.y - 8 });
      });
      console.log(this.myScroll._events.scroll);
    }
  }, {
    key: 'inittable',
    value: function inittable() {
      if (this.myScroll1) {
        this.myScroll1.refresh();
        return;
      }
      var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
      ES.selctorDoc('.maintable').attr('id', rid);
      this.myScroll1 = new IScroll('#' + rid, {
        scrollbars: true,
        mouseWheel: true,
        scrollX: true,
        interactiveScrollbars: true,
        hideScrollbar: false,
        vScrollbar: true,
        shrinkScrollbars: 'scale',
        fadeScrollbars: false,
        disableMouse: true,
        disablePointer: true
      });
    }
  }]);

  return DataBase;
}(Interstellar.pagesBase);

window.DataBase = window.DataBase || DataBase;
module.exports = DataBase;

/***/ }),

/***/ 206:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//这边基本上引入需要使用的资源less，api，需要使用的模块等等。

var taggingNeedDetail = function (_Interstellar$pagesBa) {
  _inherits(taggingNeedDetail, _Interstellar$pagesBa);

  function taggingNeedDetail() {
    _classCallCheck(this, taggingNeedDetail);

    return _possibleConstructorReturn(this, (taggingNeedDetail.__proto__ || Object.getPrototypeOf(taggingNeedDetail)).apply(this, arguments));
  }

  _createClass(taggingNeedDetail, [{
    key: 'complete',
    value: function complete() {
      this.styleModel(1);
      this.getdictionary();
      this.id = this.app.parpam.id * 1;
      this.type = this.app.parpam.type;
      this.total = 0;
      this.resize();
      this.setTitle();
      this.render();
      this.dropobj = {};
      this.listData = {};
      this.searchData = { page: 1, pageSize: 10, id: this.id };
      this.modeList = [{ val: 'jpg化默认窗宽', idx: '1' }, { val: 'jpg化多窗宽', idx: '7' }, { val: 'jpg压缩', idx: '8' }, { val: '超大图切割', idx: '4' }, { val: 'dicom转mha', idx: '6' }, { val: 'nii转jpg默认窗宽', idx: '9' }, { val: 'nii转jpg多窗宽', idx: '10' }];
      this.conversion = __webpack_require__(979);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var that = this;
      this.dom.find('input[api="name"]').on('change', function () {
        that.model.apiData.name = ES.selctorDoc(this).val();
      });
      this.dom.find('.back').on('click', function () {
        _this2.app.changePage('taggingNeed');
      });
      this.dom.find('.batchStart').on('click', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var tempArr, i;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                tempArr = [];

                for (i in _this2.listData) {
                  tempArr.push(_this2.listData[i].id);
                }
                if (tempArr.length > 0) {
                  _this2.app.alert.show({
                    title: ' ',
                    msg: '确认执行吗？',
                    close: true,
                    sure: function () {
                      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                        var res;
                        return regeneratorRuntime.wrap(function _callee$(_context) {
                          while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                _context.next = 2;
                                return _this2.api.tagneed_batchExecuteTagTransfer({ idsList: tempArr });

                              case 2:
                                res = _context.sent;

                                if (res.code == 0) {
                                  _this2.listData = {};
                                  _this2.dom.find('.tablearea .choose').removeClass('choose');
                                  _this2.searchData.page = 1;
                                  _this2.tagneed_findTagNeedById(_this2.searchData, true);
                                } else {
                                  _this2.errorShow(res.msg);
                                }

                              case 4:
                              case 'end':
                                return _context.stop();
                            }
                          }
                        }, _callee, _this2);
                      }));

                      function sure() {
                        return _ref2.apply(this, arguments);
                      }

                      return sure;
                    }()
                  });
                } else {
                  _this2.errorShow('请选择需要执行的数据');
                }

              case 3:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, _this2);
      })));
      this.dom.find('.batchExport').on('click', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var tempArr, i, url;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                tempArr = [];

                for (i in _this2.listData) {
                  tempArr.push(_this2.listData[i].id);
                }
                if (tempArr.length > 0) {
                  url = _this2.app.domain1 + 'v1/tagneed/convertList/export?tagNeedId=' + _this2.id + '&tagTransferIdList=' + tempArr.join(',') + '&accessToken=' + window.localStorage.accessToken;
                  //let token = this.app.local.get('accessToken')

                  _this2.api.HttpRequest.downLoadFile(url, { "key": "accessToken", 'val': _this2.app.local.get('accessToken') });
                } else {
                  _this2.errorShow('请选择需要执行的数据');
                }

              case 3:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, _this2);
      })));
      this.dom.find('.batchRestart').on('click', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        var tempArr, i;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                tempArr = [];

                for (i in _this2.listData) {
                  tempArr.push(_this2.listData[i].id);
                }
                if (tempArr.length > 0) {
                  _this2.app.alert.show({
                    title: ' ',
                    msg: '确认重跑吗？',
                    close: true,
                    sure: function () {
                      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                        var res;
                        return regeneratorRuntime.wrap(function _callee4$(_context4) {
                          while (1) {
                            switch (_context4.prev = _context4.next) {
                              case 0:
                                _context4.next = 2;
                                return _this2.api.tagneed_restart({ tagTransferIdList: tempArr });

                              case 2:
                                res = _context4.sent;

                                if (res.code == 0) {
                                  _this2.listData = {};
                                  _this2.dom.find('.tablearea .choose').removeClass('choose');
                                  _this2.searchData.page = 1;
                                  _this2.tagneed_findTagNeedById(_this2.searchData, true);
                                } else {
                                  _this2.errorShow(res.msg);
                                }

                              case 4:
                              case 'end':
                                return _context4.stop();
                            }
                          }
                        }, _callee4, _this2);
                      }));

                      function sure() {
                        return _ref5.apply(this, arguments);
                      }

                      return sure;
                    }()
                  });
                } else {
                  _this2.errorShow('请选择需要重跑的数据');
                }

              case 3:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, _this2);
      })));
      this.dom.find('.icon-tianjia').on('click', function () {
        _this2.conversionModal = that.app.loadModal(that.conversion, { adv: true }, { modalConfig: _this2.modalConfig });
        _this2.conversionModal.event._addEvent('conversionList.export', function () {
          var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(value) {
            var temp, idList, i, res;
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    console.log(value, 'eeeeee', _this2.listData, _this2.nowList);
                    temp = _this2.nowList ? _this2.nowList : [];
                    idList = [];

                    if (_this2.nowList && _this2.type !== 'edit') {
                      _this2.nowList.forEach(function (v) {
                        idList.push(v.id);
                      });
                    }
                    for (i in value) {
                      temp.push(value[i]);
                      idList.push(value[i].id);
                    }
                    console.log(temp, 'ddddd');

                    if (!(_this2.type == 'edit')) {
                      _context6.next = 13;
                      break;
                    }

                    _context6.next = 9;
                    return _this2.api.tagneed_batchAddTagTransfer({ tagNeedId: _this2.id, gainIdsList: idList });

                  case 9:
                    res = _context6.sent;

                    if (res.code == 0) {
                      _this2.conversionModal.close();
                      _this2.searchData.page = 1;
                      _this2.tagneed_findTagNeedById(_this2.searchData, true);
                    }
                    _context6.next = 16;
                    break;

                  case 13:
                    _this2.conversionModal.close();
                    _this2.loadList(temp);
                    // this.listData = temp;
                    _this2.model.apiData.gainIdList = idList;

                  case 16:
                  case 'end':
                    return _context6.stop();
                }
              }
            }, _callee6, _this2);
          }));

          return function (_x) {
            return _ref6.apply(this, arguments);
          };
        }());
        _this2.conversionModal.event._addEvent('conversionList.search', function (value) {
          console.log(value, 'vvvv');
          _this2.tagneed_findTagInfoList(value);
        });
        _this2.tagneed_findTagInfoList({ page: 1, pageSize: 10 });
      });
      this.dropconfig = [{
        className: 'xlk',
        name: 'sicknessType',
        firstSelect: { val: '项目标签', idx: '' },
        data: Tool.configxlkformat(this.app.constmap['SICKNESS_TYPE'])
      }, {
        className: 'xlk',
        name: 'projectFunction',
        firstSelect: { val: '项目目标', idx: '' },
        data: Tool.configxlkformat(this.app.constmap['PROJECT_FUNCTION'])
      }];
      __webpack_require__.e/* require.ensure */(52/* duplicate */).then((function () {
        var dropdown = __webpack_require__(638);
        _this2.dropconfig.forEach(function (val, idx) {
          var drop = _this2.app.loadModule(dropdown, _this2.dom.find('.' + val.name), {
            className: val.className,
            firstSelect: val.firstSelect,
            data: val.data,
            input: val.input
          });
          drop.event._addEvent('option.click', function (value) {
            _this2.model.apiData[val.name] = value.idx;
            _this2.model.setData('apiData', _this2.model.apiData);
            console.log(_this2.model.apiData, 'tagchange');
            _this2.app.session.set('ischanged', true);
          });
          drop.event._addEvent('dropDown.clear', function (value) {
            _this2.model.setData('apiData', _this2.model.apiData);
            _this2.model.apiData[val.name] = '';
          });
          _this2.dropobj[val.name] = drop;
        });
        _this2.type_action();
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
      __webpack_require__.e/* require.ensure */(65).then((function () {
        var duoxuankuan = __webpack_require__(647);
        var mode = that.app.loadModule(duoxuankuan, that.dom.find('.mode'), {
          showname: '转换模式',
          data: _this2.modeList,
          datatype: 'obj'
        });
        mode.event._addEvent('duoxuan.select', function (value) {
          that.model.apiData['mode'] = value.name;
          console.log(that.model.apiData, 'apidata');
        });
        mode.event._addEvent('duoxuanxlk.clear', function (value) {
          that.model.apiData['mode'] = '';
        });
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
    }
  }, {
    key: 'setTitle',
    value: function setTitle() {
      var _this3 = this;

      var obj = {};
      this.model.listheader[this.type].tablewidth = ES.selctorDoc('.taggingNeedDetail').box().clientWidth - 40;
      __webpack_require__.e/* require.ensure */(53/* duplicate */).then((function () {
        var cont_table = __webpack_require__(640);
        _this3.table = _this3.app.loadModule(cont_table, _this3.dom.find('.revertTable'), {
          id: 'tablearea',
          header: _this3.model.listheader[_this3.type]
        });
        _this3.table.event._addEvent('table.action', function () {
          var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(value) {
            var json, url;
            return regeneratorRuntime.wrap(function _callee12$(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    console.log(value, 'ss');
                    _context12.t0 = value.classname;
                    _context12.next = _context12.t0 === 'start' ? 4 : _context12.t0 === 'delete' ? 6 : _context12.t0 === 'export' ? 8 : _context12.t0 === 'restart' ? 12 : _context12.t0 === 'stop' ? 14 : _context12.t0 === 'continue' ? 16 : 18;
                    break;

                  case 4:
                    _this3.app.alert.show({
                      title: ' ',
                      msg: '确认执行吗？',
                      close: true,
                      sure: function () {
                        var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                          var res1;
                          return regeneratorRuntime.wrap(function _callee7$(_context7) {
                            while (1) {
                              switch (_context7.prev = _context7.next) {
                                case 0:
                                  _context7.next = 2;
                                  return _this3.api.tagneed_executeTagTransfer({ id: value.id * 1 });

                                case 2:
                                  res1 = _context7.sent;

                                  if (res1.code == 0) {
                                    _this3.searchData.page = 1;
                                    _this3.tagneed_findTagNeedById(_this3.searchData, true);
                                  } else {
                                    _this3.errorShow(res1.msg);
                                  }

                                case 4:
                                case 'end':
                                  return _context7.stop();
                              }
                            }
                          }, _callee7, _this3);
                        }));

                        function sure() {
                          return _ref8.apply(this, arguments);
                        }

                        return sure;
                      }()
                    });
                    return _context12.abrupt('break', 18);

                  case 6:
                    _this3.app.alert.show({
                      title: ' ',
                      msg: '确认删除吗？',
                      close: true,
                      sure: function () {
                        var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                          var res, temp, arr;
                          return regeneratorRuntime.wrap(function _callee8$(_context8) {
                            while (1) {
                              switch (_context8.prev = _context8.next) {
                                case 0:
                                  if (!(_this3.type == 'edit')) {
                                    _context8.next = 7;
                                    break;
                                  }

                                  _context8.next = 3;
                                  return _this3.api.tagneed_batchDelTagTransfer({ idsList: [value.id * 1] });

                                case 3:
                                  res = _context8.sent;

                                  if (res.code == 0) {
                                    _this3.searchData.page = 1;
                                    _this3.tagneed_findTagNeedById(_this3.searchData, true);
                                  } else {
                                    _this3.errorShow(res.msg);
                                  }
                                  _context8.next = 13;
                                  break;

                                case 7:
                                  temp = _this3.nowList.filter(function (v) {
                                    return v.id !== value.id;
                                  });

                                  _this3.nowList = temp;
                                  arr = [];

                                  temp.forEach(function (v) {
                                    arr.push(v.id);
                                  });
                                  _this3.model.apiData.gainIdList = arr;
                                  _this3.loadList(temp);

                                case 13:
                                case 'end':
                                  return _context8.stop();
                              }
                            }
                          }, _callee8, _this3);
                        }));

                        function sure() {
                          return _ref9.apply(this, arguments);
                        }

                        return sure;
                      }()
                    });
                    return _context12.abrupt('break', 18);

                  case 8:
                    json = {
                      tagNeedId: _this3.id,
                      tagTransferIdList: value.id * 1
                      // let url = this.app.domain1 + 'v1/tagneed/convertList/export?param=' + encodeURI(JSON.stringify(json) + '&accessToken=' + window.localStorage.accessToken);
                    };
                    url = _this3.app.domain1 + 'v1/tagneed/convertList/export?tagNeedId=' + _this3.id + '&tagTransferIdList=' + value.id * 1 + '&accessToken=' + window.localStorage.accessToken;
                    //let token = this.app.local.get('accessToken')

                    _this3.api.HttpRequest.downLoadFile(url, { "key": "accessToken", 'val': _this3.app.local.get('accessToken') });
                    return _context12.abrupt('break', 18);

                  case 12:
                    _this3.alertTips('确认重跑吗', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                      var res1;
                      return regeneratorRuntime.wrap(function _callee9$(_context9) {
                        while (1) {
                          switch (_context9.prev = _context9.next) {
                            case 0:
                              _context9.next = 2;
                              return _this3.api.tagneed_restart({ tagTransferIdList: [value.id * 1] });

                            case 2:
                              res1 = _context9.sent;

                              if (res1.code == 0) {
                                _this3.searchData.page = 1;
                                _this3.tagneed_findTagNeedById(_this3.searchData, true);
                              } else {
                                _this3.errorShow(res1.msg);
                              }

                            case 4:
                            case 'end':
                              return _context9.stop();
                          }
                        }
                      }, _callee9, _this3);
                    })));
                    return _context12.abrupt('break', 18);

                  case 14:
                    _this3.alertTips('确认暂停吗', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                      var res1;
                      return regeneratorRuntime.wrap(function _callee10$(_context10) {
                        while (1) {
                          switch (_context10.prev = _context10.next) {
                            case 0:
                              _context10.next = 2;
                              return _this3.api.tagneed_restart({ tagTransferIdList: [value.id * 1] });

                            case 2:
                              res1 = _context10.sent;

                              if (res1.code == 0) {
                                _this3.searchData.page = 1;
                                _this3.tagneed_findTagNeedById(_this3.searchData, true);
                              } else {
                                _this3.errorShow(res1.msg);
                              }

                            case 4:
                            case 'end':
                              return _context10.stop();
                          }
                        }
                      }, _callee10, _this3);
                    })));
                    return _context12.abrupt('break', 18);

                  case 16:
                    _this3.alertTips('确认继续执行吗?', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
                      var res1;
                      return regeneratorRuntime.wrap(function _callee11$(_context11) {
                        while (1) {
                          switch (_context11.prev = _context11.next) {
                            case 0:
                              _context11.next = 2;
                              return _this3.api.tagneed_continueByTagTransferId({ tagTransferId: value.id * 1 });

                            case 2:
                              res1 = _context11.sent;

                              if (res1.code == 0) {
                                _this3.searchData.page = 1;
                                _this3.tagneed_findTagNeedById(_this3.searchData, true);
                              } else {
                                _this3.errorShow(res1.msg);
                              }

                            case 4:
                            case 'end':
                              return _context11.stop();
                          }
                        }
                      }, _callee11, _this3);
                    })));
                    return _context12.abrupt('break', 18);

                  case 18:
                  case 'end':
                    return _context12.stop();
                }
              }
            }, _callee12, _this3);
          }));

          return function (_x2) {
            return _ref7.apply(this, arguments);
          };
        }());
        _this3.table.event._addEvent('table.pagenumber', function (value) {
          _this3.dom.find('.tablearea .choose').removeClass('choose');
          _this3.listData = {};
          _this3.searchData.page = parseInt(value);
          _this3.table.changenum(_this3.searchData.page);
          _this3.tagneed_findTagNeedById(_this3.searchData, false);
        });
        _this3.table.event._addEvent('table.pagesize', function (value) {
          _this3.dom.find('.tablearea .choose').removeClass('choose');
          _this3.listData = {};
          _this3.searchData.page = 1;
          _this3.searchData.pageSize = value.num * 1;
          _this3.tagneed_findTagNeedById(_this3.searchData, true);
        });
        _this3.table.event._addEvent('table.check', function (value) {
          console.log(value, 'value.check');
          var temp = value;
          if (temp.type == 'add') {
            _this3.listData[temp.id] = value.data;
          } else {
            delete _this3.listData[temp.id];
          }
        });
        _this3.table.event._addEvent('table.allcheck', function (value) {
          console.log(value, 'value');
          var temp = value;
          if (value.type == 'add') {
            value.data.forEach(function (item) {
              _this3.listData[item.id] = item;
            });
          } else {
            value.data.forEach(function (item) {
              delete _this3.listData[item.id];
            });
          }
        });
        _this3.dom.find('.list-content').removeClass('hide');
        _this3.resize();
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
    }
  }, {
    key: 'type_action',
    value: function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.t0 = this.type;
                _context14.next = _context14.t0 === 'edit' ? 3 : _context14.t0 === 'view' ? 7 : 12;
                break;

              case 3:
                this.dom.find('.save').addClass('hide');
                this.tagneed_findTagNeedById(this.searchData, true);
                this.disabled('edit');
                return _context14.abrupt('break', 14);

              case 7:
                this.dom.find('.save').addClass('hide');
                this.tagneed_findTagNeedById(this.searchData, true);
                this.disabled('view');
                this.dom.find('.batchArea').remove();
                return _context14.abrupt('break', 14);

              case 12:
                this.dom.find('.save').on('click', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
                  var res;
                  return regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                      switch (_context13.prev = _context13.next) {
                        case 0:
                          _this4.dom.find('.inputLine').dom.forEach(function (val) {
                            val.find('.' + val.attr('redlabel')).removeClass('redborder');
                            val.find('.required').remove();
                            console.log(val, 'val');
                            if (Tool.checkForm(ES.selctorDoc(val).dom, 'red') !== '') {
                              if (val.find('.' + val.attr('redlabel'))) {
                                val.find('.' + val.attr('redlabel')).addClass('redborder');
                              }
                              val.find('.' + val.attr('redlabel')).after('<span class="required">' + Tool.checkForm(ES.selctorDoc(val).dom, 'red') + '</span>');
                            }
                          });

                          if (!(_this4.dom.find('.redborder').dom && _this4.dom.find('.redborder').dom.some(function (val) {
                            return !val.parent().hasClass('hide');
                          }))) {
                            _context13.next = 5;
                            break;
                          }

                          return _context13.abrupt('return', false);

                        case 5:
                          _context13.next = 7;
                          return _this4.api.tagneed_addTagNeed(_this4.model.apiData);

                        case 7:
                          res = _context13.sent;

                          if (res.code == 0) {
                            _this4.app.changePage('taggingNeed');
                          } else {
                            _this4.errorShow('保存失败');
                          }

                        case 9:
                        case 'end':
                          return _context13.stop();
                      }
                    }
                  }, _callee13, _this4);
                })));
                this.dom.find('.batchArea').remove();

              case 14:
              case 'end':
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function type_action() {
        return _ref13.apply(this, arguments);
      }

      return type_action;
    }()
  }, {
    key: 'tagneed_findTagNeedById',
    value: function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(data, bool) {
        var _this5 = this;

        var res, temp, html;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return this.api.tagneed_findTagNeedById(data);

              case 2:
                res = _context15.sent;

                if (res.code == 0) {
                  this.dom.find('input[api="name"]').val(res.data.name);
                  this.dropconfig.forEach(function (val) {
                    _this5.dom.find('.' + val.name + ' .option[data-idx="' + res.data[val.name] + '"]').click();
                  });
                  temp = res.data.mode.split(',');

                  console.log(temp, 'aaaa', this.modeList);
                  html = '';

                  temp.forEach(function (val) {
                    _this5.modeList.forEach(function (v) {
                      if (v.idx == val) {
                        html += v.val + '  ';
                      }
                    });
                  });
                  this.dom.find('.mode').html(html);
                  console.log(res.data.tagTransferPageInfo.list.length, 'res.data.tagTransferPageInfo.list.length');
                  this.loadList(res.data.tagTransferPageInfo.list, bool, res.data.tagTransferPageInfo.pages, res.data.tagTransferPageInfo.total);
                }
                this.initscroll();

              case 5:
              case 'end':
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function tagneed_findTagNeedById(_x3, _x4) {
        return _ref15.apply(this, arguments);
      }

      return tagneed_findTagNeedById;
    }()
  }, {
    key: 'alertTips',
    value: function alertTips(msg, callback) {
      this.app.alert.show({
        title: ' ',
        msg: msg,
        close: true,
        sure: callback
      });
    }
  }, {
    key: 'loadList',
    value: function loadList(list, bool, pages, total) {
      var _this6 = this;

      if (list.length > 0) {
        // this.total = res.data.total
        console.log(list, 'ddd');
        this.nowList = list;
        list.forEach(function (val, idx) {
          for (var i in val) {
            val[i] = val[i] == null ? '' : val[i];
          }
          if (_this6.type == 'new') {
            val.operation = _this6.model.listicon[_this6.type].action;
          } else {
            switch (val.status) {
              case 0:
                val.status = ' ';
                val.operation = _this6.model.listicon[_this6.type].action;
                break;
              case 1:
                val.status = '执行中';
                if (val.failNum > 0) {
                  val.operation = _this6.model.listicon[_this6.type].action3;
                } else if (val.successNum > 0) {
                  val.operation = _this6.model.listicon[_this6.type].action4;
                } else {
                  val.operation = _this6.model.listicon[_this6.type].action8;
                }
                break;
              case 2:
                val.status = '已完成';
                if (val.failNum > 0) {
                  val.operation = _this6.model.listicon[_this6.type].action3;
                } else if (val.successNum > 0) {
                  val.operation = _this6.model.listicon[_this6.type].action4;
                } else {
                  val.operation = _this6.model.listicon[_this6.type].action8;
                }
                break;
              case 4:
                val.status = '已暂停';
                if (val.successNum > 0 || val.failNum > 0) {
                  val.operation = _this6.model.listicon[_this6.type].action1;
                } else {
                  val.operation = _this6.model.listicon[_this6.type].action2;
                }
                break;
            }
          }
        });
        this.table.setData(list);
      } else {
        this.table.noData();
      }
      if (bool) {
        this.table.getTotal(pages, 2, total);
      }
      this.initscroll();
    }
  }, {
    key: 'tagneed_findTagInfoList',
    value: function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(data) {
        var res;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return this.api.tagneed_findTagInfoList(data);

              case 2:
                res = _context16.sent;

                if (res.code == 0) {
                  this.conversionModal.renderList(res.data);
                }

              case 4:
              case 'end':
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function tagneed_findTagInfoList(_x5) {
        return _ref16.apply(this, arguments);
      }

      return tagneed_findTagInfoList;
    }()
  }, {
    key: 'getdictionary',
    value: function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
        var res, temparr;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                this.constmap = {};
                this.modalConfig = {};
                _context17.next = 4;
                return this.api.getdictionary({ method: '/v1/data/request/algTarget/query/fuzzy', params: '{"type":"algTarget","value":""}', service: 'DR' });

              case 4:
                res = _context17.sent;

                if (res.code == 0) {
                  temparr = [];

                  res.data.map(function (item) {
                    temparr.push(item);
                  });
                  this.modalConfig.algTarget = temparr;
                  this.modalConfig.modality = this.app.constmap['MODALITY'];
                  this.modalConfig.bodyPart = this.app.constmap['BODY_PART'];
                }

              case 6:
              case 'end':
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function getdictionary() {
        return _ref17.apply(this, arguments);
      }

      return getdictionary;
    }()
  }, {
    key: 'disabled',
    value: function disabled(type) {
      for (var i in this.dropobj) {
        this.dropobj[i].disable();
      }
      this.dom.find('input').attr('disabled', 'disabled');
      if (type == 'view') {
        this.dom.find('.icon-tianjia').remove();
        this.dom.find('.batchArea').remove();
      }
    }
  }, {
    key: 'errorShow',
    value: function errorShow(msg) {
      this.app.alert.show({
        title: ' ',
        msg: msg,
        close: false
      });
    }
  }, {
    key: 'initscroll',
    value: function initscroll() {
      if (this.myScroll) {
        this.myScroll.refresh();
        return;
      }
      var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
      this.dom.find('.taggingNeedDetail .revertTable').attr('id', rid);
      this.myScroll = new IScroll('#' + rid, {
        scrollbars: true,
        mouseWheel: true,
        interactiveScrollbars: true,
        hideScrollbar: false,
        vScrollbar: true,
        shrinkScrollbars: 'scale',
        fadeScrollbars: false,
        disableMouse: true,
        disablePointer: true
      });
    }
  }, {
    key: 'resize',
    value: function resize() {
      var ch = ES.selctorDoc(window).box().clientHeight;
      var cw = ES.selctorDoc(window).box().clientWidth - 40;
      ES.selctorDoc('.taggingNeedDetail').css({
        'height': ch - 90,
        'width': cw
      });
      this.dom.find('.taggingNeedDetail .revertTable').css({ 'height': ch - 380, 'width': cw });
    }
  }]);

  return taggingNeedDetail;
}(Interstellar.pagesBase);

module.exports = taggingNeedDetail;

/***/ }),

/***/ 599:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(983);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./taggingNeedDetail.less", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./taggingNeedDetail.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 600:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var urlDict = {
  tagneed_addTagNeed: '/tagneed/addTagNeed',
  tagneed_findTagNeedById: '/tagneed/findTagNeedById',
  tagneed_batchDelTagTransfer: '/tagneed/batchDelTagTransfer',
  tagneed_findTagInfoList: '/tagneed/findTagInfoList',
  tagneed_batchAddTagTransfer: '/tagneed/batchAddTagTransfer',
  tagneed_batchExecuteTagTransfer: '/tagneed/batchExecuteTagTransfer',
  tagneed_executeTagTransfer: '/tagneed/executeTagTransfer',
  tagneed_findGainIdDict: '/tagneed/findGainIdDict',
  tagneed_continueByTagTransferId: '/tagneed/continueByTagTransferId',
  tagneed_restart: '/tagneed/restart',
  getdictionary: '/sys/transfer'
};
var api = {
  tagneed_addTagNeed: function tagneed_addTagNeed(value) {
    return this.HttpRequest.POST(urlDict.tagneed_addTagNeed, value);
  },
  tagneed_findTagNeedById: function tagneed_findTagNeedById(value) {
    return this.HttpRequest.POST(urlDict.tagneed_findTagNeedById, value);
  },
  tagneed_batchDelTagTransfer: function tagneed_batchDelTagTransfer(value) {
    return this.HttpRequest.POST(urlDict.tagneed_batchDelTagTransfer, value);
  },
  tagneed_findTagInfoList: function tagneed_findTagInfoList(value) {
    return this.HttpRequest.POST(urlDict.tagneed_findTagInfoList, value);
  },
  tagneed_batchAddTagTransfer: function tagneed_batchAddTagTransfer(value) {
    return this.HttpRequest.POST(urlDict.tagneed_batchAddTagTransfer, value);
  },
  tagneed_batchExecuteTagTransfer: function tagneed_batchExecuteTagTransfer(value) {
    return this.HttpRequest.POST(urlDict.tagneed_batchExecuteTagTransfer, value);
  },
  getdictionary: function getdictionary(value) {
    return this.HttpRequest.POST(urlDict.getdictionary, value);
  },
  tagneed_executeTagTransfer: function tagneed_executeTagTransfer(value) {
    return this.HttpRequest.POST(urlDict.tagneed_executeTagTransfer, value);
  },
  tagneed_continueByTagTransferId: function tagneed_continueByTagTransferId(value) {
    return this.HttpRequest.POST(urlDict.tagneed_continueByTagTransferId, value);
  },
  tagneed_restart: function tagneed_restart(value) {
    return this.HttpRequest.POST(urlDict.tagneed_restart, value);
  }

};
module.exports = api;

/***/ }),

/***/ 601:
/***/ (function(module, exports) {

module.exports = "<div class=taggingNeedDetail> <div class=scroll> <p class=title><a class=back>返回列表></a>标注需求</p> <div class=toparea> <div class=\"requirementName inputLine\" redlabel=inputBox> <span class=w135><label class=redstar>*</label>需求名称：</span> <input type=text class=\"inputBox apidata\" check=empty api=name /> </div> <div class=tagarea redlabel=xlk> <span><label class=redstar>*</label>项目类型：</span> <div class=inputLine redlabel=xlk> <div class=sicknessType check=empty></div> </div> <div class=inputLine redlabel=xlk> <div class=projectFunction check=empty></div> </div> </div> <div class=\"inputLine half\" redlabel=duoxuanxlk> <span><label class=redstar>*</label>转换模式：</span> <div class=mode check=empty></div> </div> <a class=\"biaozhubtn save\">保存</a> </div> <div class=tablearea> <p class=title>转换列表<i class=\"iconfont icon-tianjia\"></i></p> <div class=batchArea> <a class=\"strokeBtn batchExport\">批量导出</a> <a class=\"strokeBtn batchStart\">批量执行</a> <a class=\"strokeBtn batchRestart\">批量重跑</a> </div> <div class=revertTable></div> </div> </div> </div> ";

/***/ }),

/***/ 602:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//这边基本上引入需要使用的资源less，api，需要使用的模块等等。

var taggingNeedDetail = function (_Interstellar$modelBa) {
  _inherits(taggingNeedDetail, _Interstellar$modelBa);

  function taggingNeedDetail(app) {
    _classCallCheck(this, taggingNeedDetail);

    var _this = _possibleConstructorReturn(this, (taggingNeedDetail.__proto__ || Object.getPrototypeOf(taggingNeedDetail)).call(this, app));

    _this.tempquery = {};
    _this.apiData = {};
    _this.listheader = {
      new: {
        icon: {
          "tagTransferId": { name: '<span>序名</span>', type: 'text', code: 'checkid', w: '35%', ww: '35%', n: "40" },
          "id": { name: '<span>获取Id</span>', type: 'text', code: 'pid', w: '35%', ww: '35%' },
          "operation": { name: '<span>操作</span>', type: 'action', code: 'action', w: '30%', ww: '30%' }
        },
        initPagina: false,
        pagesizeSet: false,
        type: 'center',
        chose: 'all',
        chosew: '30px'
      },
      edit: {
        icon: {
          "id": { name: '<span>序名</span>', type: 'text', code: 'checkid', w: '15%', ww: '15%', n: "40" },
          "gainId": { name: '<span>获取编号</span>', type: 'text', code: 'pid', w: '25%', ww: '25%' },
          "status": { name: '<span>转换状态</span>', type: 'text', code: 'pname', w: '15%', ww: '15%' },
          "successNum": { name: '<span>成功序列数</span>', type: 'text', code: 'psex', w: '15%', ww: '15%' },
          "failNum": { name: '<span>失败序列数</span>', type: 'text', code: 'psex', w: '10%', ww: '10%' },
          "totalNum": { name: '<span>序列总数</span>', type: 'text', code: 'psex', w: '10%', ww: '10%' },
          "operation": { name: '<span>操作</span>', type: 'action', code: 'action', w: '10%', ww: '10%' }
        },
        type: 'center',
        chose: 'all',
        chosew: '30px'
      },
      view: {
        icon: {
          "id": { name: '<span>序名</span>', type: 'text', code: 'checkid', w: '15%', ww: '15%', n: "40" },
          "gainId": { name: '<span>获取编号</span>', type: 'text', code: 'pid', w: '25%', ww: '25%' },
          "status": { name: '<span>转换状态</span>', type: 'text', code: 'pname', w: '20%', ww: '20%' },
          "successNum": { name: '<span>成功序列数</span>', type: 'text', code: 'psex', w: '20%', ww: '20%' },
          "failNum": { name: '<span>失败序列数</span>', type: 'text', code: 'psex', w: '20%', ww: '20%' },
          "totalNum": { name: '<span>序列总数</span>', type: 'text', code: 'psex', w: '20%', ww: '20%' }
        },
        initPagina: true,
        pagesizeSet: true,
        type: 'center'
      }
    };
    _this.listicon = {
      new: {
        action: {
          delete: { dis: 'inline', link: 'noLink', content: '删除' }
        }
      },
      edit: {
        action: {
          start: { dis: 'inline', link: 'noLink', content: '执行' },
          delete: { dis: 'inline', link: 'noLink', content: '删除' }
        },
        action1: {
          continue: { dis: 'inline', link: 'noLink', content: '继续执行' },
          export: { dis: 'inline', link: 'noLink', content: '导出' }
        },
        action2: {
          continue: { dis: 'inline', link: 'noLink', content: '继续执行' }
        },
        action3: {
          restart: { dis: 'inline', link: 'noLink', content: '重跑' },
          export: { dis: 'inline', link: 'noLink', content: '导出' }
        },
        action4: {
          export: { dis: 'inline', link: 'noLink', content: '导出' }
        },
        action5: {
          stop: { dis: 'inline', link: 'noLink', content: '暂停' }
        },
        action6: {
          restart: { dis: 'inline', link: 'noLink', content: '重跑' }
        },
        action7: {
          stop: { dis: 'inline', link: 'noLink', content: '暂停' },
          export: { dis: 'inline', link: 'noLink', content: '导出' }
        },
        action8: {}
      },
      view: {
        action: {}
      }
    };
    return _this;
  }

  return taggingNeedDetail;
}(Interstellar.modelBase);

module.exports = taggingNeedDetail;

/***/ }),

/***/ 740:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(741);

var tab = function (_Interstellar$moduleB) {
    _inherits(tab, _Interstellar$moduleB);

    function tab(app, dom, value, addMode) {
        _classCallCheck(this, tab);

        var _this = _possibleConstructorReturn(this, (tab.__proto__ || Object.getPrototypeOf(tab)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(743);
        return _this;
    }

    _createClass(tab, [{
        key: 'complete',
        value: function complete() {
            this.btn();
        }
    }, {
        key: 'btn',
        value: function btn(value) {
            var that = this;
            this.dom.find('.tab .option').on('click', function () {
                that.dom.find('.tab .option').removeClass('selected');
                var dom = ES.selctorDoc(this);
                dom.addClass('selected');
                var sdata = { id: dom.attr('node_id'), name: dom.find('p').html(), pid: that.nowParam.id };
                that.event._dispatch('tab.change', sdata);
            });
        }
    }]);

    return tab;
}(Interstellar.moduleBase);

//原型链一定要有的


module.exports = tab;

/***/ }),

/***/ 741:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(742);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./tab.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./tab.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 742:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".tab .option {\n  float: left;\n  width: 100px;\n  text-align: center;\n  font-size: 14px;\n  color: #333333;\n  line-height: 40px;\n  cursor: pointer;\n}\n.tab .selected {\n  border-bottom: 1px solid #448E97;\n  font-weight: bold;\n}\n", ""]);

// exports


/***/ }),

/***/ 743:
/***/ (function(module, exports) {

module.exports = "<ul class=tab> <%=for(var w = 0;w < p.data.length; w++){\nvar stu=p.data[w];\nvar sel=\"\";\nif(p.default==stu.id){\n\tsel='selected';\n}\n=%> <li class=\"option <%==sel=%>\" node_id=\"<%==stu.id=%>\"> <p> <%==stu.name=%> </p> </li> <%=}=%> </ul> <div style=clear:both></div>";

/***/ }),

/***/ 744:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(745);
// var html = require('./tpl.html')

var bztoollist = function (_Interstellar$moduleB) {
    _inherits(bztoollist, _Interstellar$moduleB);

    function bztoollist(app, dom, value, addMode) {
        _classCallCheck(this, bztoollist);

        var _this = _possibleConstructorReturn(this, (bztoollist.__proto__ || Object.getPrototypeOf(bztoollist)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(747);
        _this.name = "datacondition";
        _this.data = {};
        _this.needCompent = {};

        _this.moduleobj = {};

        return _this;
    }

    _createClass(bztoollist, [{
        key: 'complete',
        value: function complete() {
            var _this2 = this;

            var that = this;
            this.dom.find('.btnarea .searchbtn').on('click', function (item) {
                _this2.event._dispatch('datacondition.search');
            });
            this.dom.find('.btnarea .exportlink').on('click', function (item) {
                _this2.event._dispatch('datacondition.export');
            });
            __webpack_require__.e/* require.ensure */(59).then((function () {
                var dropdown = __webpack_require__(638);
                that.needCompent['dropdown'] = dropdown;
                var duoxuanxlk = __webpack_require__(647);
                that.needCompent['duoxuanxlk'] = duoxuanxlk;
                var calendar = __webpack_require__(644);
                that.needCompent['calendar'] = calendar;
                that.setData();
                that.event._dispatch('datacondition.moduledone');
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
        }
    }, {
        key: 'setData',
        value: function setData(refreshdata) {
            var _this3 = this;

            this.dom.find('.condition').html('');
            if (refreshdata) {
                refreshdata.map(function (item) {
                    _this3.part(item);
                });
            } else {
                this.initDate.data.map(function (item) {
                    _this3.part(item);
                });
            }
        }
    }, {
        key: 'part',
        value: function part(value) {
            this.dom.find('.condition').append('<div class="content ' + value[0].name + '"></div>');
            this.data[value[0].name] = [];
            for (var i = 0; i < value.length; i++) {
                this.allControl(value[i], i);
            }
        }
    }, {
        key: 'allControl',
        value: function allControl(value, pos) {
            this.dom.find('.condition .' + value.name).append('<div class="signlecontent' + pos + ' fl"></div>');
            eval('this.' + value.type + '(value,pos)');
        }
    }, {
        key: 'dobuledropdown',
        value: function dobuledropdown(value, pos) {
            //console.log(value, 'dobuledropdowndobuledropdown')
            var that = this;
            var inputSt = value.input;
            var myname = this.app.loadModule(this.needCompent['duoxuanxlk'], this.dom.find('.condition .' + value.name + ' .signlecontent' + pos), {
                showname: value.showname,
                data: value.data,
                datatype: value.datatype,
                input: value.input ? value.input : false,
                code: value.name,
                pos: pos
            });
            myname.event._addEvent('duoxuan.select', function (value) {
                that.data[myname.initDate.code][myname.initDate.pos] = value.name;
            });
            myname.event._addEvent('duoxuan.input', function (value) {
                // if (inputSt) {
                //     that.data[myname.initDate.code]['key'] = value.data
                //     that.event._dispatch('datacondition.duoxuanInput')
                // }
                that.event._dispatch('datacondition.dropinput', { data: value, name: myname.initDate.code });
            });
            myname.event._addEvent('duoxuanxlk.clear', function (value) {
                that.data[myname.initDate.code][myname.initDate.pos] = '';
                that.event._dispatch('datacondition.dropinput', { data: '', name: myname.initDate.code });
            });
            that.moduleobj[myname.initDate.code] = myname;
        }
    }, {
        key: 'dropdown',
        value: function dropdown(item, pos) {
            var that = this;
            var myname = this.app.loadModule(this.needCompent['dropdown'], this.dom.find('.condition .' + item.name + ' .signlecontent' + pos), {
                className: 'xlk',
                firstSelect: { val: item.showname, idx: '' },
                data: item.data,
                code: item.name,
                datatype: item.datatype,
                input: item.input ? item.input : false

            });
            myname.event._addEvent('option.click', function (value) {
                that.data[myname.initDate.code][pos] = value.idx;
            });
            myname.event._addEvent('dropDown.clear', function (value) {
                that.data[myname.initDate.code][pos] = '';
                that.event._dispatch('datacondition.dropinput', { data: '', name: myname.initDate.code });
            });

            myname.event._addEvent('drop.input', function (value) {
                that.event._dispatch('datacondition.dropinput', { data: value, name: myname.initDate.code });
            });
            that.moduleobj[myname.initDate.code] = myname;
        }
    }, {
        key: 'dropdownS',
        value: function dropdownS(item, pos) {
            var that = this;
            this.dom.find('.condition .' + item.name + ' .signlecontent' + pos).append('<span class="radioonly" style="margin:0 10px 0 5px">' + item.showname + '</span>');
            this.dom.find('.condition .' + item.name + ' .signlecontent' + pos).append('<div class="dropdownContent" style="display: inline-block;"></div>');
            var fname = item.showname;
            if (item.name == "check" || item.name == "inspect") {
                fname = item.data[0].val;
            }
            var myname = this.app.loadModule(this.needCompent['dropdown'], this.dom.find('.condition .' + item.name + ' .signlecontent' + pos + ' .dropdownContent'), {
                className: 'xlk',
                firstSelect: { val: fname, idx: '' },
                data: item.data,
                code: item.name,

                datatype: item.datatype,
                input: item.input ? item.input : false

            });
            myname.event._addEvent('option.click', function (value) {
                console.log(myname.initDate.code);
                that.data[myname.initDate.code][pos] = value.idx;
            });
            myname.event._addEvent('dropDown.clear', function (value) {
                that.data[myname.initDate.code][pos] = '';
            });
            myname.event._addEvent('drop.input', function (value) {
                that.event._dispatch('datacondition.dropinput', { data: value, name: myname.initDate.code });
            });
            that.moduleobj[myname.initDate.code] = myname;
        }
    }, {
        key: 'dTexts',
        value: function dTexts(value, pos) {
            var _this4 = this;

            var str = '<span>' + value.showname + '</span> \n                <input type="text" class="lower dText" check="num"> \n                <label>-</label> \n            <input type="text" class="upper dText" check="num">';
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append(str);
            this.data[value.name].push({});
            this.dom.find('.condition .' + value.name + ' .lower').on('blur', function () {
                console.log(_this4.data, value.name);
                _this4.data[value.name][pos]['lower'] = _this4.dom.find('.condition .' + value.name + ' .lower').val();
            });
            this.dom.find('.condition .' + value.name + ' .upper').on('blur', function () {
                _this4.data[value.name][pos]['upper'] = _this4.dom.find('.condition .' + value.name + ' .upper').val();
            });
        }
    }, {
        key: 'dText',
        value: function dText(value, pos) {
            var _this5 = this;

            var str = '<input type="text" class="lower dText" check="num"> \n                <label>-</label> \n            <input type="text" class="upper dText" check="num">';
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append(str);
            this.data[value.name][pos] = {};
            console.log(this.data);
            this.dom.find('.condition .' + value.name + ' .lower').on('blur', function () {
                console.log(_this5.data, 'value.name');
                _this5.data[value.name][pos]['lower'] = _this5.dom.find('.condition .' + value.name + ' .lower').val();
            });
            this.dom.find('.condition .' + value.name + ' .upper').on('blur', function () {
                _this5.data[value.name][pos]['upper'] = _this5.dom.find('.condition .' + value.name + ' .upper').val();
            });
        }
    }, {
        key: 'texts',
        value: function texts(value, pos) {
            var _this6 = this;

            var str = '<span>' + value.showname + ('</span> \n        <input type="text" class="inputtext textData" style="display:inline-block" value="' + (value.data ? value.data : '') + '" ' + (value.input === false ? 'readonly' : '') + '>');
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append(str);
            this.dom.find('.condition .' + value.name + ' .textData').on('blur', function () {
                console.log(pos, value.name);
                _this6.data[value.name][pos] = _this6.data[value.name][pos] ? _this6.data[value.name][pos] : {};
                _this6.data[value.name][pos] = _this6.dom.find('.condition .' + value.name + ' .textData').val();
            });
        }
    }, {
        key: 'time',
        value: function time(value, pos) {
            var that = this;
            var code = value.name;
            that.data[code].push({});
            var todayTime = new Date();
            var Month = todayTime.getMonth() + 1 < 10 ? '0' + (todayTime.getMonth() + 1) : todayTime.getMonth() + 1;
            var today = todayTime.getFullYear() + '-' + Month + '-' + todayTime.getDate();
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append('<span class="radioonly">' + value.showname + '</span>');
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append('<div class="timefilter" style="display: inline-block;"></div>');
            var timeCotrol = this.app.loadModule(this.needCompent['calendar'], this.dom.find('.condition .' + value.name + ' .signlecontent' + pos + ' .timefilter'), { titleShow: false, defaultword: '请选择时间' });
            timeCotrol.event._addEvent('times1.day', function (value) {
                console.log(value, 'valuetime', that.data);
                that.data[code][pos]['startTime'] = value.st ? value.st + " 00:00:00" : '';
                that.data[code][pos]['endTime'] = value.et ? value.et + " 23:59:59" : '';
                console.log(that.apidata);
            });
            timeCotrol.event._addEvent('times.dele', function (value) {
                if (value.dom.hasClass('day_left')) {
                    that.data[code][pos]['startTime'] = '';
                } else {
                    that.data[code][pos]['endTime'] = '';
                }
            });
        }
    }, {
        key: 'text',
        value: function text(value, pos) {
            var _this7 = this;

            var str = '<input type="text" class="inputtext textData">';
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append(str);
            this.data[value.name][pos] = '';
            this.dom.find('.condition .' + value.name + ' .textData').on('blur', function () {
                console.log(_this7.dom.find('.condition .' + value.name + ' .signlecontent' + pos + ' .textData').val(), value.name);
                _this7.data[value.name][pos] = _this7.dom.find('.condition .' + value.name + ' .signlecontent' + pos + ' .textData').val();
            });
        }
    }, {
        key: 'editdone',
        value: function editdone(value, pos) {
            var _this8 = this;

            var str = '<a class="iconfont icon-bianji radioonly"></a>';
            var code = value.name;
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append(str);
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos + ' .icon-bianji').on('click', function () {
                _this8.event._dispatch('datacondition.editor', { code: code });
            });
        }
        //渲染下拉框内容

    }, {
        key: 'renderHtml',
        value: function renderHtml(value, type) {
            this.moduleobj[type].renderHtml(value);
        }
    }]);

    return bztoollist;
}(Interstellar.moduleBase);

//原型链一定要有的


module.exports = bztoollist;

/***/ }),

/***/ 745:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(746);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./datacondition.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./datacondition.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 746:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".datacondition {\n  position: relative;\n}\n.datacondition .condition .content {\n  float: left;\n  padding: 5px 0;\n}\n.datacondition .condition .content .textData,\n.datacondition .condition .content .dText {\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n}\n.datacondition .condition .icon-bianji {\n  margin: 0px 10px;\n  line-height: 30px;\n}\n.datacondition .condition .patientAgetype > div {\n  margin-right: 5px;\n}\n.datacondition .condition .check > div,\n.datacondition .condition .inspect > div {\n  margin-right: 5px;\n}\n.datacondition .condition .check .xlk,\n.datacondition .condition .inspect .xlk {\n  width: 80px;\n  height: 30px;\n  line-height: 30px;\n}\n.datacondition .condition .check .xlk .nowname,\n.datacondition .condition .inspect .xlk .nowname {\n  width: 60px;\n}\n.datacondition .btnarea {\n  position: absolute;\n  bottom: 20px;\n  transform: translate(-120px, 0px);\n  right: 0px;\n}\n.datacondition .btnarea .showData {\n  width: 110px;\n  height: 40px;\n  line-height: 40px;\n  border-radius: 4px;\n}\n.datacondition .btnarea .biaozhubtn {\n  display: inline-block;\n  padding: 0 20px;\n  height: 40px;\n  color: #fff;\n  line-height: 40px;\n  background: #4c9fa9;\n  border-radius: 4px;\n  text-align: center;\n}\n.datacondition .btnarea .searchbtn {\n  margin: 0 20px 0 30px;\n}\n.datacondition .btnarea .dwdiv {\n  position: relative;\n  display: inline-block;\n}\n.datacondition .btnarea .dwdiv > label {\n  width: 280px;\n  color: red;\n  position: absolute;\n  text-align: left;\n  left: 0;\n}\n", ""]);

// exports


/***/ }),

/***/ 747:
/***/ (function(module, exports) {

module.exports = "<div class=datacondition> <div class=condition></div> <div style=clear:both></div> </div>";

/***/ }),

/***/ 979:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(980);
// var html = require('./tpl.html')

var conversionList = function (_Interstellar$modalBa) {
    _inherits(conversionList, _Interstellar$modalBa);

    function conversionList(app, dom, value, addMode) {
        _classCallCheck(this, conversionList);

        var _this = _possibleConstructorReturn(this, (conversionList.__proto__ || Object.getPrototypeOf(conversionList)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(982);
        _this.name = 'conversionList';
        _this.searchData = { page: 1, pageSize: 10 };
        _this.exportData = {};
        _this.refreshPage = true;
        return _this;
    }

    _createClass(conversionList, [{
        key: 'complete',
        value: function complete() {
            var that = this;
            this.render();
            this.dom.find('.icon-guanbi').on('click', function () {
                that.close();
            });
            this.dom.find('.inputBox').on('change', function () {
                that.searchData[ES.selctorDoc(this).attr('api')] = ES.selctorDoc(this).val();
            });
            that.dom.find('.btnSearch').on('click', function () {
                that.refreshPage = true;
                that.searchData.page = 1;
                that.dom.find('.choose').removeClass('choose');
                that.event._dispatch('conversionList.search', that.searchData);
                that.exportData = {};
            });
            that.dom.find('.reportBtn').on('click', function () {
                that.dom.find('.choose').removeClass('choose');
                console.log(that.exportData, 'aaaa');
                if (JSON.stringify(that.exportData) !== '{}') {
                    that.event._dispatch('conversionList.export', that.exportData);
                    that.exportData = {};
                } else {
                    that.app.alert.show({
                        title: ' ',
                        msg: '请选择需要导入的获取编号',
                        close: false
                    });
                }
            });
            this.setTitle();
        }
    }, {
        key: 'render',
        value: function render() {
            var that = this;
            console.log(that.api.modalConfig);
            var config = [{
                className: 'xlk',
                name: 'algTarget',
                showname: '算法目的',
                datatype: 'arr',
                data: that.api.modalConfig.algTarget
            }, {
                className: 'xlk',
                name: 'modality',
                showname: '检查设备',
                data: Tool.configxlkformat(that.api.modalConfig.modality)
            }, {
                className: 'xlk',
                name: 'bodyPart',
                showname: '检查部位',
                data: Tool.configxlkformat(that.api.modalConfig.bodyPart)
            }];
            that.singleobj = {};
            __webpack_require__.e/* require.ensure */(52/* duplicate */).then((function () {
                var dropdown = __webpack_require__(638);
                config.forEach(function (val, idx) {
                    that.singleobj[val.name] = that.app.loadModule(dropdown, that.dom.find('.' + val.name), {
                        className: 'xlk',
                        firstSelect: { val: val.showname, idx: '' },
                        data: val.data,
                        input: val.input,
                        maxshownum: 5,
                        datatype: val.datatype
                    });
                    that.singleobj[val.name].event._addEvent('option.click', function (value) {
                        that.searchData[val.name] = value.idx;
                    });
                    that.singleobj[val.name].event._addEvent('dropDown.clear', function (value) {
                        that.searchData[val.name] = '';
                    });
                });
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
        }
    }, {
        key: 'setTitle',
        value: function setTitle() {
            var obj = {};
            var that = this;
            obj['icon'] = {
                "id": { name: '<span>获取编号</span>', type: 'text', code: 'checkid', w: '20%', ww: '20%', n: "45" },
                "algTarget": { name: '<span>算法目的</span>', type: 'text', code: 'checkid', w: '25%', ww: '25%' },
                "modality": { name: '<span>检查设备</span>', type: 'text', code: 'pid', w: '15%', ww: '15%' },
                "bodyPart": { name: '<span>检查部位</span>', type: 'text', code: 'pid', w: '15%', ww: '15%' },
                "acquireTime": { name: '<span>获取时间</span>', type: 'text', code: 'pid', w: '20%', ww: '20%' }
            };
            obj['type'] = 'center';
            obj['chose'] = 'all';
            obj['chosew'] = '30px';
            obj['tablewidth'] = ES.selctorDoc('.conversionList').box().clientWidth - 40;
            __webpack_require__.e/* require.ensure */(53/* duplicate */).then((function () {
                var cont_table = __webpack_require__(640);
                that.table = that.app.loadModule(cont_table, that.dom.find('.datatable'), {
                    id: 'datatable',
                    header: obj
                });
                that.table.event._addEvent('table.pagenumber', function (value) {
                    that.dom.find('.list-header .check-box').removeClass('choose');
                    that.searchData.page = parseInt(value);
                    that.exportData = {};
                    that.refreshPage = false;
                    that.table.changenum(that.searchData.page);
                    that.event._dispatch('conversionList.search', that.searchData);
                });
                that.table.event._addEvent('table.pagesize', function (value) {
                    that.searchData.pageSize = value.num * 1;
                    that.searchData.page = 1;
                    that.exportData = {};
                    that.refreshPage = true;
                    that.event._dispatch('conversionList.search', that.searchData);
                });
                that.table.event._addEvent('table.check', function (value) {
                    console.log(value, 'value.check');
                    var temp = value;
                    if (temp.type == 'add') {
                        that.exportData[temp.id] = value.data;
                    } else {
                        delete that.exportData[temp.id];
                    }
                    console.log(that.exportData, 'exportdata');
                });
                that.table.event._addEvent('table.allcheck', function (value) {
                    console.log(value, 'value');
                    var temp = value;
                    if (value.type == 'add') {
                        value.data.forEach(function (item) {
                            that.exportData[item.id] = item;
                        });
                    } else {
                        value.data.forEach(function (item) {
                            delete that.exportData[item.id];
                        });
                    }
                    console.log(that.exportData);
                });
                that.dom.find('.list-content').removeClass('hide');
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
        }
    }, {
        key: 'renderList',
        value: function renderList(res) {
            var that = this;
            console.log(res, 'ddddd');
            if (res.list.length > 0) {
                res.list.forEach(function (val, idx) {
                    for (var i in val) {
                        val[i] = val[i] == null ? '' : val[i];
                    }
                    if (val.acquireTime) val.acquireTime = Tool.time(val.acquireTime, 'yyyy-mm-dd');
                    Tool.configxlkformat(that.api.modalConfig.modality).forEach(function (a, b) {
                        if (a.idx == val.modality) {
                            val.modality = a.val;
                        }
                    });
                    Tool.configxlkformat(that.api.modalConfig.bodyPart).forEach(function (a, b) {
                        if (a.idx == val.bodyPart) {
                            val.bodyPart = a.val;
                        }
                    });
                });
                that.table.setData(res.list);
            } else {
                that.table.noData();
            }
            if (this.refreshPage) {
                this.table.getTotal(res.pages, 2, res.total);
            }
            that.initscrollmenu();
        }
    }, {
        key: 'initscrollmenu',
        value: function initscrollmenu() {
            if (this.myScroll) {
                this.myScroll.refresh();
                return;
            }
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            this.dom.find('.datatable').attr('id', rid);
            this.myScroll = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }]);

    return conversionList;
}(Interstellar.modalBase);

//原型链一定要有的


module.exports = conversionList;

/***/ }),

/***/ 980:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(981);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./conversionList.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./conversionList.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 981:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".conversionList {\n  box-sizing: border-box;\n  background: #fff;\n  border-radius: 4px;\n  font-family: \"Microsoft YaHei\";\n  font-size: 16px;\n  width: 800px;\n  height: 500px;\n  margin-left: -400px;\n  position: relative;\n  padding: 20px;\n}\n.conversionList .icon-guanbi {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  cursor: pointer;\n}\n.conversionList .filterarea {\n  width: 600px;\n  display: inline-block;\n}\n.conversionList .filterarea .inputLine {\n  display: inline-block;\n  margin-bottom: 5px;\n  position: relative;\n}\n.conversionList .filterarea .inputLine > input {\n  height: 30px;\n  line-height: 30px;\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n  width: 150px ;\n}\n.conversionList .filterarea .inputLine > div {\n  display: inline-block;\n}\n.conversionList .filterarea .inputLine .xlk {\n  height: 32px;\n  line-height: 32px;\n  width: 170px;\n}\n.conversionList .filterarea .rangechoose {\n  display: inline-block;\n  margin-bottom: 5px;\n}\n.conversionList .filterarea .rangechoose .startmonth {\n  position: relative;\n}\n.conversionList .filterarea .rangechoose .names {\n  width: 155px;\n}\n.conversionList .filterarea .chooseData {\n  display: inline-block;\n  height: 32px;\n  line-height: 32px;\n}\n.conversionList .filterarea .chooseData .showData {\n  width: 170px;\n  border-radius: 4px;\n}\n.conversionList .filterarea .startmonth {\n  display: inline-block;\n}\n.conversionList .datatable {\n  height: 300px;\n  overflow: hidden;\n}\n.conversionList .btnSearch {\n  float: right;\n  margin-right: 20px;\n}\n.conversionList .reportBtn {\n  position: absolute;\n  right: 20px;\n  bottom: 20px;\n}\n", ""]);

// exports


/***/ }),

/***/ 982:
/***/ (function(module, exports) {

module.exports = "<div class=\"conversionList modal\"> <div class=modal-header> <i class=\"iconfont icon-guanbi\"></i> </div> <div class=filterarea> <div class=inputLine redlabel=xlk> <div class=algTarget check=empty></div> </div> <div class=inputLine redlabel=xlk> <div class=modality check=empty></div> </div> <div class=inputLine redlabel=xlk> <div class=bodyPart check=empty></div> </div> <div class=inputLine redlabel=inputBox> <span class=names>获取编号：</span> <input type=text class=inputBox check=int api=id /> </div> </div> <a class=\"btnSearch strokeBtn\">查询</a> <div class=datatable></div> <div class=\"reportBtn fillBtn\">导入</div> </div> ";

/***/ }),

/***/ 983:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".taggingNeedDetail {\n  margin: 20px;\n  background: #fff;\n  font-size: 14px;\n}\n.taggingNeedDetail .title {\n  padding: 20px 0 0 20px;\n}\n.taggingNeedDetail .title .back {\n  color: #666;\n}\n.taggingNeedDetail .xlk {\n  height: 32px;\n  line-height: 32px;\n  width: 185px;\n}\n.taggingNeedDetail .requirementName .apidata {\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n  width: 180px;\n  height: 30px;\n  padding-left: 5px;\n}\n.taggingNeedDetail .toparea {\n  border-bottom: 1px solid #e8e8e8;\n  padding: 20px 0 20px 50px;\n}\n.taggingNeedDetail .toparea .half {\n  display: block;\n}\n.taggingNeedDetail .toparea .half .mode {\n  display: inline-block;\n}\n.taggingNeedDetail .toparea p {\n  height: 60px;\n  line-height: 60px;\n  font-size: 20px;\n}\n.taggingNeedDetail .toparea .tagarea .inputLine {\n  display: inline-block;\n}\n.taggingNeedDetail .toparea .biaozhubtn {\n  background: #4c9fa9;\n  color: #fff;\n  padding: 0 20px;\n  height: 40px;\n  line-height: 40px;\n  position: absolute;\n  top: 34px;\n  right: 38px;\n}\n.taggingNeedDetail .toparea > div {\n  margin-top: 10px;\n  line-height: 40px;\n}\n.taggingNeedDetail .toparea .project {\n  width: 50%;\n  overflow: hidden;\n}\n.taggingNeedDetail .toparea .series {\n  overflow: hidden;\n}\n.taggingNeedDetail .toparea .mode {\n  width: 185px;\n}\n.taggingNeedDetail .toparea .mode .duoxuanxlk {\n  height: 32px;\n}\n.taggingNeedDetail .tablearea {\n  position: relative;\n}\n.taggingNeedDetail .tablearea p {\n  line-height: 40px;\n}\n.taggingNeedDetail .tablearea .revertTable {\n  overflow: hidden;\n  position: relative;\n}\n.taggingNeedDetail .tablearea .icon-tianjia {\n  margin-left: 10px;\n  color: #4c9fa9;\n}\n.taggingNeedDetail .tablearea .batchArea {\n  position: absolute;\n  right: 20px;\n  top: 10px;\n}\n.taggingNeedDetail .disable {\n  display: none;\n}\n.taggingNeedDetail .required {\n  top: 23px;\n  left: 85px;\n}\n.taggingNeedDetail .tagarea .required {\n  left: 0;\n}\n", ""]);

// exports


/***/ })

});
//# sourceMappingURL=39092261b05e2ddfeb20.27.min.js.map