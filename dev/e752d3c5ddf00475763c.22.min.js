webpackJsonp([22,52],{

/***/ 197:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var createauditpro3 = function (_Interstellar$pagesBa) {
  _inherits(createauditpro3, _Interstellar$pagesBa);

  function createauditpro3() {
    _classCallCheck(this, createauditpro3);

    return _possibleConstructorReturn(this, (createauditpro3.__proto__ || Object.getPrototypeOf(createauditpro3)).apply(this, arguments));
  }

  _createClass(createauditpro3, [{
    key: 'complete',
    value: function complete() {
      this.app.header.openControl('auditproject');
      this.app.header.changeselected(3);
      this.type = this.app.parpam.type;
      this.id = this.app.parpam.projectid;
      this.status = parseInt(this.app.parpam.status);
      this.styleModel(1);
      this.loadmodules();
      this.resize();
      this.render();
      this.eventAdd();
      this.initscroll();
    }
  }, {
    key: 'loadmodules',
    value: function loadmodules() {
      var _this2 = this;

      __webpack_require__.e/* require.ensure */(57/* duplicate */).then((function () {
        var inputarea1 = __webpack_require__(751);
        _this2.inputarea = _this2.app.loadModule(inputarea1, _this2.dom.find('.project'), { type: 1 });
        _this2.inputarea.event._addEvent('inputarea.input', function () {
          var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(value) {
            var res;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _this2.inputarea.loading(true);
                    _context.next = 3;
                    return _this2.api.matchrate_query({ auditProjectId: _this2.id, name: value, type: 0 });

                  case 3:
                    res = _context.sent;

                    _this2.inputarea.loading(false);
                    if (res.code == 0) {
                      res.data.list.forEach(function (val, idx) {
                        val.id = val.id;
                        val.name = val.name;
                      });
                      res.data.list = res.data.list.filter(function (item) {
                        return JSON.stringify(_this2.model.projectIdList).lastIndexOf(item.id) == -1;
                      });
                      _this2.inputarea.setlist(res.data.list);
                    } else {
                      _this2.errorshow(res.msg);
                    }

                  case 6:
                  case 'end':
                    return _context.stop();
                }
              }
            }, _callee, _this2);
          }));

          return function (_x) {
            return _ref.apply(this, arguments);
          };
        }());
        _this2.inputarea.event._addEvent('inputarea.focus', function () {
          var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(value) {
            var res;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _this2.inputarea.loading(true);
                    _context2.next = 3;
                    return _this2.api.matchrate_query({ auditProjectId: _this2.id, name: '', type: 0 });

                  case 3:
                    res = _context2.sent;

                    _this2.inputarea.loading(false);
                    if (res.code == 0) {
                      res.data.list.forEach(function (val, idx) {
                        val.id = val.id;
                        val.name = val.name;
                      });
                      res.data.list = res.data.list.filter(function (item) {
                        return JSON.stringify(_this2.model.projectIdList).lastIndexOf(item.id) == -1;
                      });
                      _this2.inputarea.setlist(res.data.list);
                    } else {
                      _this2.errorshow(res.msg);
                    }

                  case 6:
                  case 'end':
                    return _context2.stop();
                }
              }
            }, _callee2, _this2);
          }));

          return function (_x2) {
            return _ref2.apply(this, arguments);
          };
        }());
        _this2.inputarea.event._addEvent('inputarea.maxnum', function (value) {
          _this2.errorshow('最多可添加10个项目名称');
        });
        _this2.inputarea.event._addEvent('inputarea.createitem', function () {
          var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(value) {
            var res;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    if (!(JSON.stringify(_this2.model.projectIdList).lastIndexOf(value) == -1)) {
                      _context3.next = 7;
                      break;
                    }

                    _this2.app.loading.show();
                    _context3.next = 4;
                    return _this2.api.import_project_edit({
                      auditProjectId: _this2.id,
                      importProjectId: parseInt(value),
                      action: 1
                    });

                  case 4:
                    res = _context3.sent;

                    _this2.app.loading.hide();
                    if (res.code == 0) {
                      if (_this2.status == 2) {
                        _this2.dom.find('.contentarea .icon-guanbi').remove();
                      }
                      _this2.model.projectIdList.push(parseInt(value));
                      ES.selctorDoc('.inputarea .mask').click();
                    } else {
                      _this2.errorshow(res.msg);
                      _this2.dom.find('.chooseditem').eq(-1).remove();
                    }

                  case 7:
                  case 'end':
                    return _context3.stop();
                }
              }
            }, _callee3, _this2);
          }));

          return function (_x3) {
            return _ref3.apply(this, arguments);
          };
        }());
        _this2.inputarea.event._addEvent('inputarea.deleteitem', function (value) {
          _this2.app.alert.show({
            title: ' ',
            msg: '该项目在审核源中可能存在已添加的任务，是否确认删除？确认删除，对应已添加的任务将被清除',
            close: true,
            sure: function () {
              var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                var res;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        _this2.app.loading.show();
                        _context4.next = 3;
                        return _this2.api.import_project_edit({
                          auditProjectId: _this2.id,
                          importProjectId: parseInt(value.id),
                          action: 3
                        });

                      case 3:
                        res = _context4.sent;

                        _this2.app.loading.hide();
                        if (res.code == 0) {
                          _this2.model.projectIdList = _this2.model.projectIdList.filter(function (item) {
                            return item !== parseInt(value.id);
                          });
                          _this2.inputarea.removedom(value.dom);
                          ES.selctorDoc('.inputarea .mask').click();
                          _this2.render();
                        } else {
                          _this2.errorshow(res.msg);
                        }

                      case 6:
                      case 'end':
                        return _context4.stop();
                    }
                  }
                }, _callee4, _this2);
              }));

              function sure() {
                return _ref4.apply(this, arguments);
              }

              return sure;
            }()
          });
        });
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
    }
  }, {
    key: 'eventAdd',
    value: function eventAdd() {
      var that = this;
      this.dom.find('.linkarea .viewbig').on('click', function () {
        that.showcomplist('big');
      });
      this.dom.find('.linkarea .viewsmall').on('click', function () {
        that.showcomplist('small');
      });
      this.dom.find('.auditsource .icon-tianjia').on('click', function () {
        that.showauditsource();
      });
    }
  }, {
    key: 'showcomplist',
    value: function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(value) {
        var _this3 = this;

        var config, res, images;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                config = {};

                this.app.loading.show();
                _context5.t0 = value;
                _context5.next = _context5.t0 === 'big' ? 5 : _context5.t0 === 'small' ? 11 : 17;
                break;

              case 5:
                _context5.next = 7;
                return this.api.addable_series_query({ projectIdList: this.model.projectIdList });

              case 7:
                res = _context5.sent;

                this.app.loading.hide();
                if (res.code == 0) {
                  if (res.data.seriesFormComponentList.length > 0) {
                    config = {
                      title: '查看序列征象',
                      data: res.data.seriesFormComponentList
                    };
                    this.showcomplistmodal(config);
                  } else {
                    this.errorshow('暂无数据，请重新配置');
                  }
                }
                return _context5.abrupt('break', 17);

              case 11:
                _context5.next = 13;
                return this.api.addable_image_query({
                  auditProjectId: this.id,
                  projectIdList: this.model.projectIdList
                });

              case 13:
                images = _context5.sent;

                this.app.loading.hide();
                if (images.code == 0) {
                  if (images.data.imageAnnoList.length > 0) {
                    config = {
                      title: '查看影像征象',
                      menudata: {},
                      type: 'project'
                    };
                    images.data.imageAnnoList.forEach(function (item, idx) {
                      item.imageType = Tool.configobjformat(_this3.app.constmap['LESION'])[item.imageType];
                      Tool.configxlkformat(_this3.app.constmap['TOOL_TYPE']).forEach(function (val) {
                        if (val.idx == item.imageToolType) {
                          item.imageToolType = val.val;
                        }
                      });
                      var obj = {
                        name: item.imageType + ' ' + item.imageToolType,
                        data: item.seriesFormComponentList
                      };
                      config.menudata[idx] = obj;
                    });
                    this.showcomplistmodal(config);
                  } else {
                    this.errorshow('暂无数据，请重新配置');
                  }
                }
                return _context5.abrupt('break', 17);

              case 17:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function showcomplist(_x4) {
        return _ref5.apply(this, arguments);
      }

      return showcomplist;
    }()
  }, {
    key: 'showcomplistmodal',
    value: function showcomplistmodal(config) {
      var _this4 = this;

      var complist = __webpack_require__(845);
      var showcomplist = this.app.loadModal(complist, { adv: true }, { config: config });
      showcomplist.event._addEvent('showcomplist.choosecomp', function () {
        var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(value) {
          var json, res, showcomponent;
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _this4.app.loading.show();
                  json = {
                    id: value.id
                  };
                  _context6.next = 4;
                  return _this4.api.formComponent_read(json);

                case 4:
                  res = _context6.sent;

                  _this4.app.loading.hide();
                  if (res.code == 0) {
                    showcomponent = __webpack_require__(787);

                    _this4.app.loadModal(showcomponent, { adv: true }, { type: 'view', data: res.data });
                  }

                case 7:
                case 'end':
                  return _context6.stop();
              }
            }
          }, _callee6, _this4);
        }));

        return function (_x5) {
          return _ref6.apply(this, arguments);
        };
      }());
    }
  }, {
    key: 'showauditsource',
    value: function showauditsource() {
      var _this5 = this;

      var auditsource = __webpack_require__(849);
      var temp = [];
      this.addauditsource = this.app.loadModal(auditsource, { adv: true }, { chooseddata: this.model.apiData.importTaskProjectList });
      this.addauditsource.event._addEvent('addauditsource.search', function (value) {
        value.auditProjectId = _this5.id;
        value.queryType = 1;
        _this5.task_source_query(value);
      });
      this.addauditsource.event._addEvent('addauditsource.adddata', function () {
        var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(value) {
          var res;
          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _this5.app.loading.show();
                  _context7.next = 3;
                  return _this5.api.import_task_edit({ auditProjectId: _this5.id, taskIdList: value.data, action: 1 });

                case 3:
                  res = _context7.sent;

                  _this5.app.loading.hide();
                  if (res.code == 0) {
                    _this5.addauditsource.close();
                    _this5.setsourcelist(value.list);
                    _this5.model.apiData.importTaskProjectList = value.list;
                  } else {
                    _this5.errorshow(res.msg);
                  }

                case 6:
                case 'end':
                  return _context7.stop();
              }
            }
          }, _callee7, _this5);
        }));

        return function (_x6) {
          return _ref7.apply(this, arguments);
        };
      }());
      this.task_source_query({ auditProjectId: this.id, queryType: 1 });
      this.matchrate_query('');
    }
  }, {
    key: 'matchrate_query',
    value: function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(value) {
        var res;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                if (this.addauditsource.xmmc) {
                  this.addauditsource.xmmc.loading(true);
                }
                _context8.next = 3;
                return this.api.matchrate_query({ auditProjectId: this.id, name: value, type: 1 });

              case 3:
                res = _context8.sent;

                this.addauditsource.xmmc.loading(false);
                if (res.code == 0) {
                  res.data.list.forEach(function (val, idx) {
                    val.idx = val.id;
                    val.val = val.name;
                  });
                  this.addauditsource.setxlk(res.data.list);
                }

              case 6:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function matchrate_query(_x7) {
        return _ref8.apply(this, arguments);
      }

      return matchrate_query;
    }()
  }, {
    key: 'setsourcelist',
    value: function setsourcelist(value) {
      var _this6 = this;

      var that = this;
      this.dom.find('.tasklist').html('');
      value.forEach(function (val, idx) {
        _this6.dom.find('.tasklist').append('<li data-id="' + val.taskId + '"><span class="taskname" title="' + val.taskName + '">' + val.taskName + '</span><i class="iconfont icon-shanchu"></i><span class="seriesnum">' + val.submitSeriesTotalNum + '</span><span>个已提交序列</span></li>');
      });
      this.initscroll();
      this.dom.find('.tasklist .icon-shanchu').on('click', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
        var _this7 = this;

        var res;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                that.app.loading.show();
                _context9.next = 3;
                return that.api.import_task_edit({
                  auditProjectId: that.id,
                  taskIdList: [ES.selctorDoc(this).parent().attr('data-id')],
                  action: 3
                });

              case 3:
                res = _context9.sent;

                that.app.loading.hide();
                if (res.code == 0) {
                  that.model.apiData.importTaskProjectList = that.model.apiData.importTaskProjectList.filter(function (item) {
                    return parseInt(item.taskId) !== parseInt(ES.selctorDoc(_this7).parent().attr('data-id'));
                  });
                  ES.selctorDoc(this).parent().remove();
                  that.initscroll();
                } else {
                  that.errorshow(res.msg);
                }

              case 6:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      })));
    }
  }, {
    key: 'task_source_query',
    value: function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(value) {
        var res;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                this.app.loading.show();
                _context10.next = 3;
                return this.api.task_source_query(value);

              case 3:
                res = _context10.sent;

                this.app.loading.hide();
                if (res.code == 0) {
                  this.addauditsource.setMain(res);
                }

              case 6:
              case 'end':
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function task_source_query(_x8) {
        return _ref10.apply(this, arguments);
      }

      return task_source_query;
    }()
  }, {
    key: 'render',
    value: function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
        var _this8 = this;

        var pagedata, json, res;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                pagedata = {};
                json = {
                  auditProjectId: this.id
                };

                this.app.loading.show();
                _context11.next = 5;
                return this.api.auditproject_read(json);

              case 5:
                res = _context11.sent;

                this.app.loading.hide();
                if (res.code == 0) {
                  pagedata = res.data;
                  this.proname = pagedata.name;
                  this.model.setData('apiData', pagedata);
                  if (pagedata.importProjectList) {
                    this.model.projectIdList = [];
                    this.dom.find('.chooseditem').remove();
                    pagedata.importProjectList.forEach(function (val) {
                      _this8.inputarea.createlabel(val.name, val.id, 'no');
                      _this8.model.projectIdList.push(val.id);
                    });
                  }
                  if (pagedata.importTaskProjectList) {
                    this.setsourcelist(pagedata.importTaskProjectList);
                  }
                } else {
                  this.errorshow(res.msg);
                }
                this.app.session.clearAll();
                if (this.type == 'view' || this.status == 2) {
                  // this.dom.find('.auditsource .icon-tianjia').remove()
                  this.dom.find('.tasklist .icon-shanchu').remove();
                  this.dom.find('.contentarea .icon-guanbi').remove();
                }
                if (this.type == 'view') {
                  this.inputarea.disable();
                }

              case 11:
              case 'end':
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function render() {
        return _ref11.apply(this, arguments);
      }

      return render;
    }()

    //报错弹窗

  }, {
    key: 'errorshow',
    value: function errorshow(msg) {
      this.app.alert.show({
        title: ' ',
        msg: msg,
        close: false
      });
    }
  }, {
    key: 'resize',
    value: function resize() {
      var ch = ES.selctorDoc(window).box().clientHeight - 100;
      var cw = ES.selctorDoc(window).box().clientWidth - 40;
      ES.selctorDoc('.createauditpro3').css({ 'height': ch, 'width': cw });
      this.initscroll();
    }
  }, {
    key: 'initscroll',
    value: function initscroll() {
      if (this.myScroll) {
        this.myScroll.refresh();
        return;
      }
      var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
      ES.selctorDoc('.createauditpro3').attr('id', rid);
      this.myScroll = new IScroll('#' + rid, {
        scrollbars: true,
        mouseWheel: true,
        interactiveScrollbars: true,
        hideScrollbar: false,
        vScrollbar: true,
        shrinkScrollbars: 'scale',
        fadeScrollbars: false,
        disableMouse: true,
        disablePointer: true
      });
    }
  }]);

  return createauditpro3;
}(Interstellar.pagesBase);

module.exports = createauditpro3;

/***/ }),

/***/ 563:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(958);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./createauditpro3.less", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./createauditpro3.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 564:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var urlDict = {
  matchrate_query: '/audit/project/matchrate/query',
  auditproject_read: '/audit/project/read',
  import_project_edit: '/audit/project/import/project/edit',
  addable_series_query: '/audit/project/annoitem/addable/series/query',
  addable_image_query: '/audit/project/annoitem/addable/image/query',
  formComponent_read: '/formComponent/read',
  task_source_query: '/audit/project/import/task/source/query',
  import_task_edit: '/audit/project/import/task/edit'
};
var api = {

  matchrate_query: function matchrate_query(value) {
    return this.HttpRequest.POST(urlDict.matchrate_query, value);
  },

  auditproject_read: function auditproject_read(value) {
    return this.HttpRequest.POST(urlDict.auditproject_read, value);
  },

  import_project_edit: function import_project_edit(value) {
    return this.HttpRequest.POST(urlDict.import_project_edit, value);
  },

  addable_series_query: function addable_series_query(value) {
    return this.HttpRequest.POST(urlDict.addable_series_query, value);
  },

  addable_image_query: function addable_image_query(value) {
    return this.HttpRequest.POST(urlDict.addable_image_query, value);
  },

  formComponent_read: function formComponent_read(value) {
    return this.HttpRequest.POST(urlDict.formComponent_read, value);
  },

  task_source_query: function task_source_query(value) {
    return this.HttpRequest.POST(urlDict.task_source_query, value);
  },

  import_task_edit: function import_task_edit(value) {
    return this.HttpRequest.POST(urlDict.import_task_edit, value);
  }
};
module.exports = api;

/***/ }),

/***/ 565:
/***/ (function(module, exports) {

module.exports = "<div class=createauditpro3> <div> <p class=title>第三步：审核源信息</p> <div class=showpro> <span>所属项目：</span> <div class=project></div> <p>在此能被搜索并添加的都是已经符合含有上一步“审核病灶”的项目</p> <div class=linkarea> <a class=viewbig>查看通用序列（大）征象</a> <a class=viewsmall>查看通用影像（小）征象</a> </div> </div> <div class=auditsource> <span class=yxtitle>审核源</span> <i class=\"iconfont icon-tianjia\" title=添加审核源></i> <ul class=tasklist> </ul> </div> </div> </div>";

/***/ }),

/***/ 566:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//这边基本上引入需要使用的资源less，api，需要使用的模块等等。

var createauditpro3 = function (_Interstellar$modelBa) {
    _inherits(createauditpro3, _Interstellar$modelBa);

    function createauditpro3(app) {
        _classCallCheck(this, createauditpro3);

        var _this = _possibleConstructorReturn(this, (createauditpro3.__proto__ || Object.getPrototypeOf(createauditpro3)).call(this, app));

        _this.apiData = { projectIdList: [] };
        _this.projectIdList = [];
        return _this;
    }

    return createauditpro3;
}(Interstellar.modelBase);

module.exports = createauditpro3;

/***/ }),

/***/ 638:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(737);
// var html = require('./tpl.html')

var index = function (_Interstellar$moduleB) {
  _inherits(index, _Interstellar$moduleB);

  function index(app, dom, value, addMode) {
    _classCallCheck(this, index);

    var _this = _possibleConstructorReturn(this, (index.__proto__ || Object.getPrototypeOf(index)).call(this, app, dom, value, addMode));

    _this.html = __webpack_require__(739);
    _this.name = "dropDown";
    return _this;
  }

  _createClass(index, [{
    key: 'complete',
    value: function complete() {
      this.dom.find('.drop-down').addClass(this.nowParam.className);
      var cw = ES.selctorDoc(window).box().clientWidth;
      var ch = ES.selctorDoc(window).box().clientHeight;
      this.dom.find('.mask').css({ 'width': cw, 'height': ch, 'left': 0, 'top': 0 });
      this.datatype = this.nowParam.datatype ? this.nowParam.datatype : 'obj';
      this.input = this.nowParam.input == undefined ? false : this.nowParam.input;
      this.maxshownum = this.nowParam.maxshownum == undefined ? 10 : this.nowParam.maxshownum;
      this.render();
    }
  }, {
    key: 'render',
    value: function render(value) {
      if (!value) {
        value = this.nowParam;
      }
      var that = this;
      that.firstSelect = value.firstSelect ? value.firstSelect : value.data[0];
      this.dom.find('.selected1 input').attr('data-idx', that.firstSelect.idx);
      this.dom.find('.selected1 input').attr('placeholder', that.firstSelect.val);
      that.renderHtml(value.data);
      that.bindEvent();
      that.event._dispatch('dropDown.done');
    }
  }, {
    key: 'renderHtml',
    value: function renderHtml(value) {
      // console.log('==========value',value,this.datatype)
      var that = this;
      that.data = value;
      var strHtml = '';
      if (this.datatype == 'obj') {
        for (var i = 0; i < value.length; i++) {
          if (that.firstSelect == value[i]) {
            strHtml += '<li class="option select" title="' + value[i].val + '" data-idx=' + value[i].idx + '' + ' props=' + (value[i].props ? value[i].props : "") + '>' + value[i].val + '</li>';
          } else {
            strHtml += '<li class="option" title="' + value[i].val + '" data-idx=' + value[i].idx + '' + ' props=' + (value[i].props ? value[i].props : "") + '>' + value[i].val + '</li>';
          }
        }
      } else {
        for (var _i = 0; _i < value.length; _i++) {
          if (that.firstSelect == value[_i]) {
            strHtml += '<li class="option select" title="' + value[_i] + '" data-idx=' + value[_i] + '>' + value[_i] + '</li>';
          } else {
            strHtml += '<li class="option" title="' + value[_i] + '" data-idx=' + value[_i] + '>' + value[_i] + '</li>';
          }
        }
      }
      this.dom.find('._dropdown1 .selectbox').html(strHtml);
      this.dom.find('.option').on('click', function () {
        that.dom.find('.option').removeClass('select');
        ES.selctorDoc(this).addClass('select');
        that.dom.find('.selected1 input').val(ES.selctorDoc(this).html());
        that.dom.find('.selected1 input').attr('data-idx', ES.selctorDoc(this).attr('data-idx'));
        that.dom.find('.selected1 input').attr('props', ES.selctorDoc(this).attr('props'));
        that.dom.find('._dropdown1').hide();
        that.dom.find('.icon').removeClass('drop');
        that.event._dispatch('option.click', {
          val: that.dom.find('.selected1 input').val(),
          idx: that.dom.find('.selected1 input').attr('data-idx'),
          props: that.dom.find('.selected1 input').attr('props')
        });
      });
      that.initscrollmenu();
    }
  }, {
    key: 'bindEvent',
    value: function bindEvent() {
      var that = this;
      this.dom.find('.selected1').on('click', function (e) {
        e.stopPropagation();
        var dom = ES.selctorDoc(this);
        dom.find('.icon').addClass('drop');
        dom.parent().find('._dropdown1').show();
        if (that.dom.find('.option').dom.length > that.maxshownum) {
          that.dom.find('.scroll').css({ height: that.dom.find('.drop-down').box().clientHeight * that.maxshownum });
          that.dom.find('.scroll').css({ overflow: 'hidden' });
          that.initscrollmenu();
        }
        that.dom.find('.mask').show();
      });
      this.dom.find('.selected1').on('mouseover', function () {
        var dom = ES.selctorDoc(this);
        var data = dom.find('input').attr('data-idx');
        if (data) {
          ES.selctorDoc(this).find('.icon-shanchutishiicon').show();
          ES.selctorDoc(this).find('.icon').hide();
        }
      });
      this.dom.find('.selected1').on('mouseout', function () {
        ES.selctorDoc(this).find('.icon-shanchutishiicon').hide();
        ES.selctorDoc(this).find('.icon').show();
      });
      this.dom.find('.selected1 .icon-shanchutishiicon').on('click', function (e) {
        e.stopPropagation();
        ES.selctorDoc(this).parent().find('.nowname').attr('placeholder', that.firstSelect.val);
        ES.selctorDoc(this).parent().find('.nowname').val('');
        ES.selctorDoc(this).parent().find('.nowname').attr('data-idx', that.firstSelect.idx);
        that.dom.find('.select').removeClass('select');
        that.event._dispatch('dropDown.clear');
      });
      this.dom.find('._dropdown1 .mask').on('click', function () {
        ES.selctorDoc(this).parent().hide();
        that.dom.find('.icon').removeClass('drop');
        that.dom.find('.loading_xlk').addClass('drop');
      });
      if (!that.input) {
        that.dom.find('.nowname').attr('readonly', 'readonly');
      } else {
        this.dom.find('.nowname').on('input', function () {
          that.event._dispatch('drop.input', { data: ES.selctorDoc(this).val(), classname: ES.selctorDoc(this).parent().parent().parent().attr('class') });
        });
        this.dom.find('.nowname').on('focus', function () {
          that.dom.find('.nowname').attr('placeholder', '');
        });
        this.dom.find('.nowname').on('blur', function () {
          that.dom.find('.nowname').attr('placeholder', that.nowParam.firstSelect.val);
        });
      }
    }
  }, {
    key: 'reset',
    value: function reset(value) {
      this.dom.find('.selected1 input').attr('placeholder', this.nowParam.firstSelect.val);
      this.dom.find('.selected1 input').val('');
      this.dom.find('.selected1 input').attr('data-idx', this.nowParam.firstSelect.idx);
      this.dom.find('.select').removeClass('select');
      this.dom.find('._dropdown1 .selectbox .option').eq(0).addClass('select');
      if (!value) {
        this.event._dispatch('option.click', {
          val: this.dom.find('.selected1 input').val(),
          idx: this.dom.find('.selected1 input').attr('data-idx')
        });
      }
    }
  }, {
    key: 'setChoose',
    value: function setChoose(value) {
      var that = this;
      that.data.forEach(function (val, idx) {
        if (val.idx == value) {
          this.dom.find('.selected1 input').attr('data-idx', val.idx);
          this.dom.find('.selected1 input').attr('placeholder', val.val);
        }
      });
    }
  }, {
    key: 'disable',
    value: function disable() {
      var that = this;
      that.dom.find('.selected1').off('click');
      that.dom.find('.selected1').off('mouseover');
      that.dom.find('.nowname').addClass('drop_disabled');
      that.dom.find('.nowname').attr('readonly', 'readonly');
      that.dom.find('.drop-down').addClass('drop_disabled');
    }
  }, {
    key: 'able',
    value: function able() {
      var that = this;
      that.dom.find('.nowname').removeClass('drop_disabled');
      that.dom.find('.drop-down').removeClass('drop_disabled');
      that.dom.find('.selected1').on('click', function (e) {
        e.stopPropagation();
        var dom = ES.selctorDoc(this).parent();
        dom.find('.icon').addClass('drop');
        dom.parent().find('._dropdown1').show();
        if (that.dom.find('.option').dom.length > that.maxshownum) {
          that.dom.find('.scroll').css({ height: that.dom.find('.drop-down').box().clientHeight * that.maxshownum });
          that.dom.find('.scroll').css({ overflow: 'hidden' });
          that.initscrollmenu();
        }
        that.dom.find('.mask').show();
      });
    }
  }, {
    key: 'loading',
    value: function loading(bool) {
      if (bool) {
        this.dom.find('.selectbox').html('');
        this.dom.find('.loading_xlk').removeClass('hide');
      } else {
        this.dom.find('.loading_xlk').addClass('hide');
      }
    }
  }, {
    key: 'initscrollmenu',
    value: function initscrollmenu() {
      if (this.myScroll1) {
        this.myScroll1.refresh();
        return;
      }
      var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
      this.dom.find('.scroll').attr('id', rid);
      this.myScroll1 = new IScroll('#' + rid, {
        scrollbars: true,
        mouseWheel: true,
        interactiveScrollbars: true,
        hideScrollbar: false,
        vScrollbar: true,
        shrinkScrollbars: 'scale',
        fadeScrollbars: false,
        disableMouse: true,
        disablePointer: true
      });
    }
  }]);

  return index;
}(Interstellar.moduleBase);

//原型链一定要有的


module.exports = index;

/***/ }),

/***/ 737:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(738);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./drop.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./drop.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 738:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, "@charset \"UTF-8\";\n.ctdrop {\n  background: none;\n  border: 1px solid #D2EFFC;\n  width: 90px;\n  color: #D2EFFC;\n  min-width: 90px;\n  font-size: 12px;\n  border-radius: 4px;\n  line-height: 25px;\n}\n.ctdrop .selected1 {\n  margin-left: 10px;\n  border: 0;\n}\n.ctdrop .selected1 input {\n  display: inline-block;\n  color: #D2EFFC;\n  cursor: pointer;\n  background: transparent;\n  border: 0;\n}\n.ctdrop .selected1 .icon-icon-test3 {\n  color: #D2EFFC;\n  font-size: 0.5rem;\n  margin-right: 1px;\n}\n.ctdrop .selected1 img {\n  position: absolute;\n  right: 5px;\n  top: 10px;\n}\n.xlk,\n.kxlk {\n  background: #fff;\n  width: 90px;\n  color: #333;\n  font-size: 12px;\n  position: relative;\n  border: 1px solid #e8e8e8;\n  border-radius: 4px;\n}\n.xlk .selected1,\n.kxlk .selected1 {\n  width: 100%;\n  height: 100%;\n}\n.xlk .selected1 .nowname,\n.kxlk .selected1 .nowname {\n  border-radius: 4px;\n  color: #333;\n  display: inline-block;\n  cursor: pointer;\n  border: none;\n  background: #fff;\n  height: 100%;\n  width: 88%;\n  margin-left: 10px;\n}\n.xlk .selected1 img,\n.kxlk .selected1 img {\n  position: absolute;\n  right: 5px;\n  top: 10px;\n}\n.xlk .selected1 .drop_disabled,\n.kxlk .selected1 .drop_disabled {\n  background: #e8e8e8;\n  cursor: not-allowed !important;\n}\n.listxlk {\n  background: #fff;\n  width: 90%;\n  height: 38px;\n  color: #333;\n  font-size: 12px;\n  position: relative;\n  border: 1px solid #e8e8e8;\n  border-radius: 4px;\n}\n.listxlk .selected1 {\n  width: 100%;\n  height: 90%;\n}\n.listxlk .selected1 input {\n  border-radius: 4px;\n  color: #333;\n  display: inline-block;\n  cursor: pointer;\n  border: none;\n  background: #fff;\n  height: 100%;\n  width: unset;\n  margin-left: 10px;\n}\n.listxlk .selected1 img {\n  position: absolute;\n  right: 5px;\n  top: 10px;\n}\n.listxlk .selectbox {\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n}\n.listxlk .selectbox .option {\n  height: 30px;\n  line-height: 30px;\n}\n.listxlk .selectbox .scroll {\n  overflow: hidden;\n  position: relative;\n}\n.selected1 {\n  text-align: left;\n  line-height: inherit;\n  font-family: \"Microsoft YaHei\";\n  font-size: inherit;\n  color: #333;\n  position: relative;\n  cursor: pointer;\n}\n.selected1 .nowname {\n  border: 1px solid #e8e8e8;\n  border-radius: 4px;\n  color: #333;\n  display: inline-block;\n  cursor: pointer;\n  background: #fff;\n  width: 100%;\n  height: 100%;\n}\n.selected1 .icon {\n  transform: rotate(-180deg);\n  vertical-align: middle;\n  transition: all 0.3s;\n  display: inline-block;\n  font-size: 12px;\n  position: absolute;\n  top: 0;\n  right: 5px;\n}\n.selected1 .drop {\n  transform: rotate(0deg);\n}\n.selected1 .icon-shanchutishiicon {\n  position: absolute;\n  font-size: 12px;\n  color: #e6e6e6;\n  width: 12px;\n  top: 0;\n  right: 5px;\n}\n.selected1 .drop_disabled {\n  background: #e8e8e8;\n  cursor: not-allowed !important;\n}\n._dropdown1 {\n  position: absolute;\n  display: none;\n  width: 100%;\n}\n._dropdown1 ul {\n  list-style: none;\n  width: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 4px;\n  overflow: hidden;\n  background: #fff;\n  font-family: \"Microsoft YaHei\";\n  font-size: inherit;\n  z-index: 15;\n  color: #333;\n  border: 1px solid #e8e8e8;\n}\n._dropdown1 li {\n  margin: 0 5px;\n  min-height: 24px;\n  text-align: left;\n  cursor: pointer;\n  white-space: nowrap;\n  overflow: hidden;\n}\n._dropdown1 li:hover {\n  color: #448E97;\n  background: #ECF3F4;\n}\n._dropdown1 li.select {\n  color: #333333;\n  background: #ECF3F4;\n}\n._dropdown1 .mask {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 9;\n}\n._dropdown1 .scroll {\n  position: relative;\n}\n.drop-down .selectbox {\n  min-height: 50px;\n}\n.drop-down .loading_xlk {\n  background: url(/images/loading1.gif) no-repeat 35px -28px;\n  height: 50px;\n  width: 100%;\n  top: 33px;\n  z-index: 2000;\n  position: absolute;\n}\n.drop_disabled .selected1 {\n  background: #e8e8e8;\n}\n.keepwhite {\n  background: #fff!important;\n}\n.keepwhite .selected1 {\n  background: #fff!important;\n}\n", ""]);

// exports


/***/ }),

/***/ 739:
/***/ (function(module, exports) {

module.exports = "<div class=drop-down> <div class=selected1> <input class=nowname type=text /> <i class=\"iconfont icon-shanchutishiicon\" style=display:none></i> <i class=\"iconfont icon-icon-test3 icon\"></i> </div> <div class=_dropdown1> <div class=scroll> <ul class=selectbox> </ul> </div> <div class=mask></div> </div> <div class=\"loading_xlk hide\"></div> </div>";

/***/ }),

/***/ 765:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(766);
// var html = require('./tpl.html')

var textcontrols = function (_Interstellar$moduleB) {
    _inherits(textcontrols, _Interstellar$moduleB);

    function textcontrols(app, dom, value, addMode) {
        _classCallCheck(this, textcontrols);

        var _this = _possibleConstructorReturn(this, (textcontrols.__proto__ || Object.getPrototypeOf(textcontrols)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(768);
        _this.name = "textcontrols";
        return _this;
    }

    _createClass(textcontrols, [{
        key: 'complete',
        value: function complete() {
            this.render();
            this.addevent();
            this.hasinput = {};
            var that = this;
            this.dom.find('.textname').on('change', function (res) {
                that.hasinput['textname'] = ES.selctorDoc(this).val();
            });
        }
    }, {
        key: 'render',
        value: function render(value) {
            var that = this;
            var dropdown = __webpack_require__(638);
            that.drop = that.app.loadModule(dropdown, that.dom.find('.texttype'), {
                className: 'xlk',
                firstSelect: {
                    val: '请选择',
                    idx: ''
                },
                data: [{
                    val: '文本型',
                    idx: 'text'
                }, {
                    val: '数字型',
                    idx: 'num'
                }]
            });
            that.drop.event._addEvent('option.click', function (res) {
                that.hasinput.texttype = res.idx;
            });
            if (value) {
                that.setData(value);
            }
        }
    }, {
        key: 'addevent',
        value: function addevent() {
            var that = this;
            that.dom.find('.labelsinput').on('keydown', function (e) {
                var keyCode = e.keyCode;
                if (event.keyCode === 13) {
                    if (ES.selctorDoc(this).val() != '') {
                        that.createlabel(ES.selctorDoc(this).val());
                    }
                }
            });
            that.dom.find('.labelsarea').on('blur', function () {
                if (ES.selctorDoc(this).val() != '') {
                    that.createlabel(ES.selctorDoc(this).val());
                }
            });
            that.dom.find('.labelsarea').on('click', function () {
                // that.dom.find('.labelsinput').focus();
                $('.labelsinput').focus();
            });
            that.dom.find('.labelsinput').on('input', function () {
                that.dom.find('.labelitem .icon-guanbi').off('click');
                that.event._dispatch('controls.inputlabel', { val: ES.selctorDoc(this).val() });
            });
        }
    }, {
        key: 'bindlabeldelete',
        value: function bindlabeldelete() {
            var that = this;
            that.dom.find('.labelitem .icon-guanbi').on('click', function () {
                ES.selctorDoc(this).parent().parent().remove();
                that.event._dispatch('controls.heightchange');
            });
        }
    }, {
        key: 'checkrequired',
        value: function checkrequired() {
            var that = this;
            that.dom.find('.inputLine').dom.forEach(function (val, idx) {
                val.find('.' + val.attr('redlabel')).removeClass('redborder');
                val.find('.required').remove();
                if (Tool.checkForm(ES.selctorDoc(val).dom, 'red') !== '') {
                    console.log(val.attr('redlabel'));
                    val.find('.' + val.attr('redlabel')).addClass('redborder');
                    val.find('.' + val.attr('redlabel')).after('<span class="required">' + Tool.checkForm(ES.selctorDoc(val).dom, 'red') + '</span>');
                }
            });
            if (that.dom.find('.redborder').dom) {
                return false;
            } else {
                return that.returndata();
            }
        }
    }, {
        key: 'returndata',
        value: function returndata() {
            var that = this;
            var obj = {};
            obj.type = 'text';
            obj.name = that.dom.find('.textname').val();
            obj.parameter = {};
            obj.parameter.texttype = that.dom.find('.texttype .nowname').attr('data-idx');
            //obj.parameter.isrequired=that.dom.find('.isrequired').hasClass('choose')
            obj.parameter = JSON.stringify(obj.parameter);
            var arr = [];
            if (that.dom.find('.labelsarea .labelitem').dom) {
                that.dom.find('.labelsarea .labelitem').dom.forEach(function (val, idx) {
                    if (val.attr('dataid')) {
                        arr.push(parseInt(val.attr('dataid')));
                    }
                });
            }
            obj.tagIdList = arr;
            return obj;
        }
    }, {
        key: 'setData',
        value: function setData(value) {
            var that = this;
            that.dom.find('.textname').val(value.name);
            console.log(that.dom.find('.texttype .nowname'));
            that.dom.find('.texttype .nowname').click();
            that.dom.find('.texttype .option[data-idx="' + JSON.parse(value.parameter).texttype + '"]').click();
            value.tagList.forEach(function (val, idx) {
                var label = '<span class="labelitem" dataid="' + val.id + '">\n' + '                            <label>' + val.text + '</label>\n' + '                            <span><i class="iconfont icon-guanbi"></i></span>\n' + '                        </span>';
                that.dom.find('.labelsinput').before(label);
            });
            that.bindlabeldelete();
        }
    }, {
        key: 'labelul',
        value: function labelul(value) {
            var that = this;
            var html = '';
            if (value) {
                value.forEach(function (val, idx) {
                    html += '<li class="labelli" dataid="' + val.id + '">' + val.text + '</li>';
                });
                that.dom.find('.labelul').html(html);
                that.dom.find('.labelli').on('click', function () {
                    ES.selctorDoc(this).parent().html('');
                    that.createlabel(ES.selctorDoc(this).html(), ES.selctorDoc(this).attr('dataid'));
                });
            } else {
                that.dom.find('.labelul').html('');
            }
        }
    }, {
        key: 'createlabel',
        value: function createlabel(value, value2) {
            var that = this;
            that.hasinput.tagList = '';
            if (that.dom.find('.mask').dom) that.dom.find('.mask').addClass('hide');
            that.dom.find('.labelul').html('');
            that.dom.find('.tips').css({ 'color': '#666' });
            if (that.dom.find('.labelitem').dom && that.dom.find('.labelitem').dom.length >= 10) {
                that.dom.find('.tips').css({ 'color': 'red' });
                that.dom.find('.labelsinput').val('');
            } else {
                var label = '<span class="labelitem" dataid="' + value2 + '">\n' + '                            <label>' + value + '</label>\n' + '                            <span><i class="iconfont icon-guanbi"></i></span>\n' + '                        </span>';
                that.dom.find('.labelsinput').before(label);
                if (!value2) {
                    that.event._dispatch('controls.createlabel', { val: that.dom.find('.labelsinput').val() });
                }
                that.dom.find('.labelitem .icon-guanbi').off('click');
                that.bindlabeldelete();
                that.dom.find('.labelsinput').val('');
                that.event._dispatch('controls.heightchange');
                that.hasinput.tagList = 'yes';
            }
        }
    }, {
        key: 'setid',
        value: function setid(value1, value2) {
            var that = this;
            console.log(value1, value2);
            that.dom.find('.labelitem').dom.forEach(function (val, idx) {
                if (val.find('label').html() == value2) {
                    val.attr('dataid', value1);
                }
            });
        }
    }, {
        key: 'getisinput',
        value: function getisinput() {
            console.log(this.hasinput, 'this,hasinput');
            return this.hasinput;
        }
    }]);

    return textcontrols;
}(Interstellar.moduleBase);

//原型链一定要有的


module.exports = textcontrols;

/***/ }),

/***/ 766:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(767);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./textcontrols.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./textcontrols.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 767:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".textcontrols {\n  margin-bottom: 50px;\n  margin-left: 60px;\n}\n.textcontrols .inputLine {\n  margin-left: 60px;\n  margin-bottom: 10px;\n}\n.textcontrols .inputLine > span {\n  width: 100px;\n}\n.textcontrols .inputLine > input {\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n  height: 35px;\n  line-height: 35px;\n  width: 250px;\n  padding-left: 20px;\n}\n.textcontrols .inputLine .texttype {\n  display: inline-block;\n}\n.textcontrols .inputLine .texttype .xlk {\n  height: 35px;\n  line-height: 35px;\n  width: 270px;\n}\n.textcontrols .inputLine .tips {\n  width: 150px;\n  margin-left: 20px;\n}\n.textcontrols .textparam {\n  margin-left: 63px;\n  margin-top: 40px;\n}\n.textcontrols .textparam > span {\n  margin-right: 20px;\n}\n.textcontrols .labelsarea {\n  width: 400px;\n  min-height: 100px;\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n  display: inline-block;\n  padding: 10px;\n  position: relative;\n}\n.textcontrols .labelsarea > span {\n  height: 22px;\n  line-height: 22px;\n  border: 1px solid red;\n  border-radius: 4px;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n.textcontrols .labelsarea > span label {\n  padding: 0 5px 0 10px;\n  font-size: 15px;\n  vertical-align: top;\n}\n.textcontrols .labelsarea > span i {\n  color: #fff;\n  font-size: 14px;\n  cursor: pointer;\n}\n.textcontrols .labelsarea > span span {\n  width: 22px;\n  height: 22px;\n  text-align: center;\n  background: red;\n  position: relative;\n}\n.textcontrols .labelsarea > span span:hover {\n  color: darkred;\n}\n.textcontrols .labelsarea > span span .icon-guanbi {\n  top: 0px;\n  right: 4px;\n}\n.textcontrols .labelsarea > input {\n  border: none;\n  margin-top: 10px;\n}\n.textcontrols .labelsarea .labelul {\n  position: absolute;\n  width: 95%;\n  background: #fff;\n  border-left: 1px solid #e8e8e8;\n  border-right: 1px solid #e8e8e8;\n}\n.textcontrols .labelsarea .labelul .labelli {\n  height: 30px;\n  line-height: 30px;\n  border-bottom: 1px solid #e8e8e8;\n  cursor: pointer;\n}\n.textcontrols .labelsarea .labelul .labelli:hover {\n  background: #ECF3F4;\n}\n.textcontrols .remarkline {\n  margin-top: 60px;\n}\n.textcontrols .remarkline > span {\n  vertical-align: top;\n}\n.textcontrols .required {\n  left: 400px;\n  top: 8px;\n}\n", ""]);

// exports


/***/ }),

/***/ 768:
/***/ (function(module, exports) {

module.exports = "<div class=\"textarea textcontrols hide\"> <div class=inputLine redlabel=inputBox> <label class=redstar>*</label> <span>文本框标题：</span> <input type=text class=\"textname inputBox\" check=empty title=标题 /> </div> <div class=inputLine redlabel=xlk> <label class=redstar>*</label> <span>文本类型：</span> <div class=texttype check=empty></div> </div> <div class=\"inputLine remarkline\"> <span>标签：</span> <div class=labelsarea> <input type=text class=labelsinput /> <ul class=labelul> </ul> </div> <span class=tips>最多可添加10个标签</span> </div> </div> ";

/***/ }),

/***/ 769:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(770);
// var html = require('./tpl.html')

var selectcontrols = function (_Interstellar$moduleB) {
    _inherits(selectcontrols, _Interstellar$moduleB);

    function selectcontrols(app, dom, value, addMode) {
        _classCallCheck(this, selectcontrols);

        var _this = _possibleConstructorReturn(this, (selectcontrols.__proto__ || Object.getPrototypeOf(selectcontrols)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(772);
        _this.name = "selectcontrols";
        return _this;
    }

    _createClass(selectcontrols, [{
        key: 'complete',
        value: function complete() {
            this.bindxlkli();
            this.addevent();
            this.hasinput = {};
            var that = this;
            this.dom.find('.inputBox').on('change', function () {
                that.hasinput[ES.selctorDoc(this).attr('class')] = ES.selctorDoc(this).val();
            });
            console.log(that.nowParam);
            switch (that.nowParam.controlType) {
                case 'radiobox':
                    that.dom.find('.wspan').html('单选框标题');
                    that.dom.find('.selectcontrols').addClass('radioboxarea');
                    break;
                case 'select':
                    that.dom.find('.selectcontrols').addClass('selectarea');
                    break;
            }
        }
    }, {
        key: 'addevent',
        value: function addevent() {
            var that = this;
            that.dom.find('.labelsinput').on('keydown', function (e) {
                var keyCode = e.keyCode;
                if (event.keyCode === 13) {
                    if (ES.selctorDoc(this).val() != '') {
                        that.createlabel(ES.selctorDoc(this).val());
                    }
                }
            });
            that.dom.find('.labelsarea').on('blur', function () {
                if (ES.selctorDoc(this).val() != '') {
                    that.createlabel(ES.selctorDoc(this).val());
                }
            });
            that.dom.find('.labelsarea').on('click', function () {
                // that.dom.find('.labelsinput').focus();
                $('.labelsinput').focus();
            });
            that.dom.find('.labelsinput').on('input', function () {
                that.dom.find('.labelitem .icon-guanbi').off('click');
                that.event._dispatch('controls.inputlabel', { val: ES.selctorDoc(this).val() });
            });
            that.dom.find('.check-box').on('click', function () {
                if (ES.selctorDoc(this).hasClass('choose')) {
                    ES.selctorDoc(this).removeClass('choose');
                } else {
                    ES.selctorDoc(this).addClass('choose');
                }
            });
        }
    }, {
        key: 'bindlabeldelete',
        value: function bindlabeldelete() {
            var that = this;
            that.dom.find('.labelitem .icon-guanbi').on('click', function () {
                ES.selctorDoc(this).parent().parent().remove();
            });
        }
    }, {
        key: 'bindxlkli',
        value: function bindxlkli() {
            var that = this;
            that.dom.find('.icon-tianjia').on('click', function () {
                that.dom.find('.itemarea').append('<li class="item">\n' + '<p class="inputLine" redlabel="inputBox">' + '<label class="redstar">*</label>' + '                    <span class="num">选项<label>' + (that.dom.find('.selectmain .item').dom.length + 1) + '</label></span>\n' + '                    <input type="text" class="item' + (that.dom.find('.selectmain .item').dom.length + 1) + 'value inputBox " check="empty" api="value"/>\n' + '</p>' + '<p class="inputLine" redlabel="inputBox">' + '<label class="redstar">*</label>\n' + '                <span>默认值</span>\n' + '                <input type="text" class="item' + (that.dom.find('.selectmain .item').dom.length + 1) + 'code inputBox " check="empty|num" api="code" reg ="/^[0-9]*$/" error="请输入大于等于0的整数"/>' + '                    <i class="iconfont icon-shanchu"></i>\n' + '</p>' + '                </li>');
                that.dom.find('.icon-tianjia').off('click');
                if (that.dom.find('.item').dom.length > 1 && that.nowParam.type !== 'correct') {
                    that.dom.find('.icon-shanchu').removeClass('hide');
                }
                console.log('aaaaa');
                that.bindxlkli();
                that.event._dispatch('controls.heightchange');
            });
            that.dom.find('.icon-shanchu').on('click', function () {
                ES.selctorDoc(this).parent().parent().remove();
                if (that.dom.find('.item').dom.length < 2) {
                    that.dom.find('.icon-shanchu').addClass('hide');
                }
                that.dom.find('.item').dom.forEach(function (val, idx) {
                    console.log(ES.selctorDoc(val).dom, 'number');
                    ES.selctorDoc(val).dom.find('.num label').html(idx + 1 + '');
                });
                that.event._dispatch('controls.heightchange');
            });
        }
    }, {
        key: 'checkrequired',
        value: function checkrequired() {
            var that = this;
            that.dom.find('.inputLine').dom.forEach(function (val, idx) {
                val.find('.' + val.attr('redlabel')).removeClass('redborder');
                val.find('.required').remove();
                if (Tool.checkForm(ES.selctorDoc(val).dom, 'red') !== '') {
                    console.log(val.attr('redlabel'));
                    val.find('.' + val.attr('redlabel')).addClass('redborder');
                    val.find('.' + val.attr('redlabel')).after('<span class="required">' + Tool.checkForm(ES.selctorDoc(val).dom, 'red') + '</span>');
                }
            });
            if (that.dom.find('.redborder').dom) {
                return false;
            } else {
                var result = that.returndata();
                if (result) {
                    return result;
                } else {
                    return false;
                }
            }
        }
    }, {
        key: 'returndata',
        value: function returndata() {
            var that = this;
            var obj = {};
            obj.type = that.nowParam.controlType;
            obj.name = that.dom.find('.xialaname').val();
            obj.parameter = {};
            obj.parameter.isdefault = that.dom.find('.isdefault').hasClass('choose');
            obj.parameter = JSON.stringify(obj.parameter);
            var arr = [];
            if (that.dom.find('.labelsarea .labelitem').dom) {
                that.dom.find('.labelsarea .labelitem').dom.forEach(function (val, idx) {
                    if (val.attr('dataid')) {
                        arr.push(parseInt(val.attr('dataid')));
                    }
                });
            }
            obj.tagIdList = arr;
            obj.data = [];
            var tempStr = ',';
            var tempStr1 = ',';
            var flag = true;
            that.dom.find('.itemarea li').dom.forEach(function (val, idx) {
                console.log(val, 'val');
                if (tempStr.lastIndexOf(',' + val.find('input[api=code]').val() + ',') != -1) {
                    val.find('input[api=code]').addClass('redborder');
                    val.find('input[api=code]').val('');
                    val.find('input[api=code]').after('<span class="required">重复</span>');
                    flag = false;
                    return;
                }
                if (tempStr1.lastIndexOf(',' + val.find('input[api=value]').val() + ',') != -1) {
                    val.find('input[api=value]').addClass('redborder');
                    val.find('input[api=value]').val('');
                    val.find('input[api=value]').after('<span class="required">重复</span>');
                    flag = false;
                    return;
                }
                tempStr += val.find('input[api=code]').val() + ',';
                tempStr1 += val.find('input[api=value]').val() + ',';
                var obj1 = {};
                console.log(val, val.find('input[api=value]').val(), val.find('input[api=code]').val());
                obj1.text = val.find('input[api=value]').val();
                obj1.code = val.find('input[api=code]').val();
                obj.data.push(obj1);
            });
            obj.data = JSON.stringify(obj.data);
            if (flag) {
                return obj;
            } else {
                return false;
            }
        }
    }, {
        key: 'render',
        value: function render(value) {
            console.log(value);
            var that = this;
            that.dom.find('.xialaname').val(value.name);
            if (JSON.parse(value.parameter).isdefault) {
                that.dom.find('.isdefault').click();
            }
            JSON.parse(value.data).forEach(function (val, idx) {
                if (idx != JSON.parse(value.data).length - 1) {
                    that.dom.find('.icon-tianjia').click();
                }
                that.dom.find('.item' + (idx * 1 + 1) + 'value').val(val.text);
                that.dom.find('.item' + (idx * 1 + 1) + 'code').val(val.code);
            });
            value.tagList.forEach(function (val, idx) {
                var label = '<span class="labelitem" dataid="' + val.id + '">\n' + '                            <label>' + val.text + '</label>\n' + '                            <span><i class="iconfont icon-guanbi"></i></span>\n' + '                        </span>';
                that.dom.find('.labelsinput').before(label);
            });
            that.bindlabeldelete();
        }
    }, {
        key: 'labelul',
        value: function labelul(value) {
            var that = this;
            var html = '';
            if (value) {
                value.forEach(function (val, idx) {
                    html += '<li class="labelli" dataid="' + val.id + '">' + val.text + '</li>';
                });
                that.dom.find('.labelul').html(html);
                that.dom.find('.labelli').on('click', function () {
                    ES.selctorDoc(this).parent().html('');
                    that.createlabel(ES.selctorDoc(this).html(), ES.selctorDoc(this).attr('dataid'));
                });
            } else {
                that.dom.find('.labelul').html('');
            }
        }
    }, {
        key: 'createlabel',
        value: function createlabel(value, value2) {
            var that = this;
            that.hasinput.tagList = '';
            if (that.dom.find('.mask').dom) that.dom.find('.mask').addClass('hide');
            that.dom.find('.labelul').html('');
            that.dom.find('.tips').css({ 'color': '#666' });
            if (that.dom.find('.labelitem').dom && that.dom.find('.labelitem').dom.length >= 10) {
                that.dom.find('.tips').css({ 'color': 'red' });
                that.dom.find('.labelsinput').val('');
            } else {
                var label = '<span class="labelitem" dataid="' + value2 + '">\n' + '                            <label>' + value + '</label>\n' + '                            <span><i class="iconfont icon-guanbi"></i></span>\n' + '                        </span>';
                that.dom.find('.labelsinput').before(label);
                if (!value2) {
                    that.event._dispatch('controls.createlabel', { val: that.dom.find('.labelsinput').val() });
                }
                that.dom.find('.labelitem .icon-guanbi').off('click');
                that.bindlabeldelete();
                that.dom.find('.labelsinput').val('');
                that.event._dispatch('controls.heightchange');
                that.hasinput.tagList = 'yes';
            }
        }
    }, {
        key: 'setid',
        value: function setid(value1, value2) {
            var that = this;
            that.dom.find('.labelitem').dom.forEach(function (val, idx) {
                if (val.find('label').html() == value2) {
                    val.attr('dataid', value1);
                }
            });
        }
    }, {
        key: 'getisinput',
        value: function getisinput() {
            return this.hasinput;
        }
    }]);

    return selectcontrols;
}(Interstellar.moduleBase);

//原型链一定要有的


module.exports = selectcontrols;

/***/ }),

/***/ 770:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(771);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./selectcontrols.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./selectcontrols.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 771:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".selectcontrols {\n  margin-bottom: 50px;\n  margin-left: 60px;\n}\n.selectcontrols .inputLine {\n  margin-left: 60px;\n  margin-bottom: 20px;\n}\n.selectcontrols .inputLine > span {\n  width: 50px;\n  white-space: nowrap;\n}\n.selectcontrols .inputLine > input {\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n  height: 35px;\n  line-height: 35px;\n  width: 100px;\n  padding-left: 20px;\n  margin-right: 10px;\n}\n.selectcontrols .inputLine .texttype {\n  display: inline-block;\n}\n.selectcontrols .inputLine .texttype .xlk {\n  height: 35px;\n  line-height: 35px;\n  width: 270px;\n}\n.selectcontrols .inputLine .tips {\n  width: 150px;\n  margin-left: 20px;\n}\n.selectcontrols .inputLine .wspan {\n  width: 100px;\n}\n.selectcontrols .inputLine .winput {\n  width: 250px;\n}\n.selectcontrols .labelsarea {\n  width: 400px;\n  min-height: 100px;\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n  display: inline-block;\n  padding: 10px;\n  position: relative;\n}\n.selectcontrols .labelsarea > span {\n  height: 22px;\n  line-height: 22px;\n  border: 1px solid red;\n  border-radius: 4px;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n.selectcontrols .labelsarea > span label {\n  padding: 0 5px 0 10px;\n  font-size: 15px;\n  vertical-align: top;\n}\n.selectcontrols .labelsarea > span i {\n  color: #fff;\n  font-size: 14px;\n  cursor: pointer;\n}\n.selectcontrols .labelsarea > span span {\n  width: 22px;\n  height: 22px;\n  text-align: center;\n  background: red;\n  position: relative;\n}\n.selectcontrols .labelsarea > span span:hover {\n  color: darkred;\n}\n.selectcontrols .labelsarea > span span .icon-guanbi {\n  top: 0px;\n  right: 4px;\n}\n.selectcontrols .labelsarea > input {\n  border: none;\n  margin-top: 10px;\n}\n.selectcontrols .labelsarea .labelul {\n  position: absolute;\n  width: 95%;\n  background: #fff;\n  border-left: 1px solid #e8e8e8;\n  border-right: 1px solid #e8e8e8;\n}\n.selectcontrols .labelsarea .labelul .labelli {\n  height: 30px;\n  line-height: 30px;\n  border-bottom: 1px solid #e8e8e8;\n  cursor: pointer;\n}\n.selectcontrols .labelsarea .labelul .labelli:hover {\n  background: #ECF3F4;\n}\n.selectcontrols .remarkline {\n  margin-top: 60px;\n}\n.selectcontrols .remarkline > span {\n  vertical-align: top;\n}\n.selectcontrols .selectparam {\n  margin-left: 63px;\n  margin-top: 40px;\n}\n.selectcontrols .selectparam > span {\n  margin-right: 20px;\n}\n.selectcontrols {\n  position: relative;\n}\n.selectcontrols .icon-tianjia {\n  color: #4c9fa9;\n  position: absolute;\n  left: 560px;\n  bottom: 30px;\n  z-index: 1000;\n  cursor: pointer;\n}\n.selectcontrols .icon-shanchu {\n  color: red;\n  cursor: pointer;\n  margin-left: 100px;\n}\n.selectcontrols .itemarea {\n  position: relative;\n}\n.selectcontrols .itemarea .item > p {\n  display: inline-block;\n}\n.selectcontrols .itemarea .item > p:nth-child(2n+1) {\n  margin-left: 80px;\n}\n.selectcontrols .itemarea .item > p:nth-child(2n) {\n  margin-left: 20px;\n}\n.selectcontrols .required {\n  left: 400px;\n  top: 8px;\n}\n.selectcontrols .item .required {\n  left: 65px;\n  top: 36px;\n}\n", ""]);

// exports


/***/ }),

/***/ 772:
/***/ (function(module, exports) {

module.exports = "<div class=\"selectcontrols hide\"> <div class=inputLine redlabel=inputBox> <label class=redstar>*</label> <span class=wspan>下拉菜单标题：</span> <input type=text class=\"xialaname inputBox winput\" check=empty /> </div> <div class=selectmain> <ul class=itemarea> <i class=\"iconfont icon-tianjia\"></i> <li class=item> <p class=inputLine redlabel=inputBox> <label class=redstar>*</label> <span>选项1</span> <input type=text class=\"item1value inputBox\" check=empty api=value /> </p> <p class=inputLine redlabel=inputBox> <label class=redstar>*</label> <span>默认值</span> <input type=text class=\"item1code inputBox\" check=empty|num api=code reg=/^[0-9]*$/ error=请输入大于等于0的整数 /> <i class=\"iconfont icon-shanchu hide\"></i> </p> </li> </ul> <div class=selectparam> <i class=\"isdefault check-box\"></i> <span>是否要设置默认值</span> <span>提示：设置的默认值是选项1</span> </div> <div class=\"inputLine remarkline\"> <span>标签：</span> <div class=labelsarea> <input type=text class=labelsinput /> <ul class=labelul> </ul> </div> <span class=tips>最多可添加10个标签</span> </div> </div> </div> ";

/***/ }),

/***/ 773:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(774);
// var html = require('./tpl.html')

var checkboxcontrols = function (_Interstellar$moduleB) {
    _inherits(checkboxcontrols, _Interstellar$moduleB);

    function checkboxcontrols(app, dom, value, addMode) {
        _classCallCheck(this, checkboxcontrols);

        var _this = _possibleConstructorReturn(this, (checkboxcontrols.__proto__ || Object.getPrototypeOf(checkboxcontrols)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(776);
        _this.name = "checkboxcontrols";
        return _this;
    }

    _createClass(checkboxcontrols, [{
        key: 'complete',
        value: function complete() {
            var that = this;
            this.bindcheckboxli();
            this.addevent();
            this.hasinput = {};
            console.log(this.nowParam, 'fffff');
            this.dom.find('.inputBox').on('change', function () {
                that.hasinput[ES.selctorDoc(this).attr('class')] = ES.selctorDoc(this).val();
            });
        }
    }, {
        key: 'addevent',
        value: function addevent() {
            var that = this;
            that.dom.find('.labelsinput').on('keydown', function (e) {
                var keyCode = e.keyCode;
                if (event.keyCode === 13) {
                    if (ES.selctorDoc(this).val() != '') {
                        that.createlabel(ES.selctorDoc(this).val());
                    }
                }
            });
            that.dom.find('.labelsarea').on('blur', function () {
                if (ES.selctorDoc(this).val() != '') {
                    that.createlabel(ES.selctorDoc(this).val());
                }
            });
            that.dom.find('.labelsarea').on('click', function () {
                // that.dom.find('.labelsinput').focus();
                $('.labelsinput').focus();
            });
            that.dom.find('.labelsinput').on('input', function () {
                that.dom.find('.labelitem .icon-guanbi').off('click');
                that.event._dispatch('controls.inputlabel', { val: ES.selctorDoc(this).val() });
            });
            that.dom.find('.check-box').on('click', function () {
                if (ES.selctorDoc(this).hasClass('choose')) {
                    ES.selctorDoc(this).removeClass('choose');
                } else {
                    ES.selctorDoc(this).addClass('choose');
                }
            });
        }
    }, {
        key: 'createlabel',
        value: function createlabel(value, value2) {
            var that = this;
            that.hasinput.tagList = '';
            if (that.dom.find('.mask').dom) that.dom.find('.mask').addClass('hide');
            that.dom.find('.labelul').html('');
            that.dom.find('.tips').css({ 'color': '#666' });
            if (that.dom.find('.labelitem').dom && that.dom.find('.labelitem').dom.length >= 10) {
                that.dom.find('.tips').css({ 'color': 'red' });
                that.dom.find('.labelsinput').val('');
            } else {
                var label = '<span class="labelitem" dataid="' + value2 + '">\n' + '                            <label>' + value + '</label>\n' + '                            <span><i class="iconfont icon-guanbi"></i></span>\n' + '                        </span>';
                that.dom.find('.labelsinput').before(label);
                if (!value2) {
                    that.event._dispatch('controls.createlabel', { val: that.dom.find('.labelsinput').val() });
                }
                that.dom.find('.labelitem .icon-guanbi').off('click');
                that.bindlabeldelete();
                that.dom.find('.labelsinput').val('');
                that.event._dispatch('controls.heightchange');
                that.hasinput.tagList = 'yes';
            }
        }
    }, {
        key: 'bindlabeldelete',
        value: function bindlabeldelete() {
            var that = this;
            that.dom.find('.labelitem .icon-guanbi').on('click', function () {
                ES.selctorDoc(this).parent().parent().remove();
            });
        }
    }, {
        key: 'bindcheckboxli',
        value: function bindcheckboxli() {
            var that = this;
            that.dom.find('.icon-tianjia').on('click', function () {
                that.dom.find('.itemarea').append('<li class="item">\n' + '<p class="inputLine" redlabel="inputBox">' + '                    <label class="redstar">*</label>' + '                    <span class="num">选项<label>' + (that.dom.find('.checkboxmain .item').dom.length + 1) + '</label></span>\n' + '                    <input type="text" class="item' + (that.dom.find('.checkboxmain .item').dom.length + 1) + 'value inputBox" redlabel="inputBox" check="empty" api="value"/>\n' + '</p>' + '<p class="inputLine" redlabel="inputBox">' + '<label class="redstar">*</label>\n' + '                <span>默认值</span>\n' + '                <input type="text" class="item' + (that.dom.find('.checkboxmain .item').dom.length + 1) + 'code inputBox" check="empty|num" api="code" reg ="/^[0-9]*$/" error="请输入大于等于0的整数"/>' + '                    <i class="iconfont icon-shanchu"></i>\n' + '                </p>' + '</li>');
                that.dom.find('.icon-tianjia').off('click');
                that.dom.find('.itemarea .check-box').off('click');
                that.dom.find('.itemarea .check-box').on('click', function () {
                    if (ES.selctorDoc(this).hasClass('choose')) {
                        ES.selctorDoc(this).removeClass('choose');
                    } else {
                        ES.selctorDoc(this).addClass('choose');
                    }
                });
                if (that.dom.find('.item').dom.length > 1 && that.nowParam.type !== 'correct') {
                    that.dom.find('.icon-shanchu').removeClass('hide');
                }
                that.bindcheckboxli();
                that.event._dispatch('controls.heightchange');
            });
            that.dom.find('.icon-shanchu').on('click', function () {
                ES.selctorDoc(this).parent().parent().remove();
                if (that.dom.find('.item').dom.length < 2) {
                    that.dom.find('.icon-shanchu').addClass('hide');
                }
                that.dom.find('.item').dom.forEach(function (val, idx) {
                    console.log(ES.selctorDoc(val).dom, 'number');
                    ES.selctorDoc(val).dom.find('.num label').html(idx + 1 + '');
                });
                that.event._dispatch('controls.heightchange');
            });
        }
    }, {
        key: 'checkrequired',
        value: function checkrequired() {
            var that = this;
            console.log(that.dom.find('.inputLine').dom.length);
            that.dom.find('.inputLine').dom.forEach(function (val, idx) {
                val.find('.' + val.attr('redlabel')).removeClass('redborder');
                val.find('.required').remove();
                console.log(Tool.checkForm(ES.selctorDoc(val).dom, 'red'));
                if (Tool.checkForm(ES.selctorDoc(val).dom, 'red') !== '') {
                    val.find('.' + val.attr('redlabel')).addClass('redborder');
                    val.find('.' + val.attr('redlabel')).after('<span class="required">' + Tool.checkForm(ES.selctorDoc(val).dom, 'red') + '</span>');
                }
            });
            if (that.dom.find('.redborder').dom) {
                return false;
            } else {
                var result = that.returndata();
                if (result) {
                    return result;
                } else {
                    return false;
                }
            }
        }
    }, {
        key: 'returndata',
        value: function returndata() {
            var that = this;
            var obj = {};
            obj.type = 'checkbox';
            obj.name = that.dom.find('.checkboxname').val();
            var arr = [];
            if (that.dom.find('.labelsarea .labelitem').dom) {
                that.dom.find('.labelsarea .labelitem').dom.forEach(function (val, idx) {
                    if (val.attr('dataid')) {
                        arr.push(parseInt(val.attr('dataid')));
                    }
                });
            }
            obj.tagIdList = arr;
            obj.data = [];
            obj.parameter = {};
            obj.parameter.hasnull = that.dom.find('.nullarea i').hasClass('choose');
            obj.parameter = JSON.stringify(obj.parameter);
            var tempStr = ',';
            var tempStr1 = ',';
            var flag = true;
            that.dom.find('.itemarea li').dom.forEach(function (val, idx) {
                if (tempStr.lastIndexOf(',' + val.find('input[api=code]').val() + ',') != -1) {
                    val.find('input[api=code]').addClass('redborder');
                    val.find('input[api=code]').val('');
                    val.find('input[api=code]').after('<span class="required">重复</span>');
                    flag = false;
                    return;
                }
                if (tempStr1.lastIndexOf(',' + val.find('input[api=value]').val() + ',') != -1) {
                    val.find('input[api=value]').addClass('redborder');
                    val.find('input[api=value]').val('');
                    val.find('input[api=value]').after('<span class="required">重复</span>');
                    flag = false;
                    return;
                }
                tempStr += val.find('input[api=code]').val() + ',';
                tempStr1 += val.find('input[api=value]').val() + ',';
                var obj1 = {};
                obj1.text = val.find('input[api=value]').val();
                obj1.code = val.find('input[api=code]').val();
                obj.data.push(obj1);
            });
            obj.data = JSON.stringify(obj.data);
            if (flag) {
                return obj;
            } else {
                return false;
            }
        }
    }, {
        key: 'render',
        value: function render(value) {
            var that = this;
            that.dom.find('.checkboxname').val(value.name);
            JSON.parse(value.data).forEach(function (val, idx) {
                if (idx != JSON.parse(value.data).length - 1) {
                    that.dom.find('.icon-tianjia').click();
                }
                that.dom.find('.item' + (idx * 1 + 1) + 'value').val(val.text);
                that.dom.find('.item' + (idx * 1 + 1) + 'code').val(val.code);
            });
            if (JSON.parse(value.parameter).hasnull) {
                that.dom.find('.nullarea i').addClass('choose');
            }
            value.tagList.forEach(function (val, idx) {
                var label = '<span class="labelitem" dataid="' + val.id + '">\n' + '                            <label>' + val.text + '</label>\n' + '                            <span><i class="iconfont icon-guanbi"></i></span>\n' + '                        </span>';
                that.dom.find('.labelsinput').before(label);
            });
            that.bindlabeldelete();
        }
    }, {
        key: 'labelul',
        value: function labelul(value) {
            var that = this;
            var html = '';
            if (value) {
                value.forEach(function (val, idx) {
                    html += '<li class="labelli" dataid="' + val.id + '">' + val.text + '</li>';
                });
                that.dom.find('.labelul').html(html);
                that.dom.find('.labelli').on('click', function () {
                    ES.selctorDoc(this).parent().html('');
                    that.createlabel(ES.selctorDoc(this).html(), ES.selctorDoc(this).attr('dataid'));
                });
            } else {
                that.dom.find('.labelul').html('');
            }
        }
    }, {
        key: 'setid',
        value: function setid(value1, value2) {
            var that = this;
            that.dom.find('.labelitem').dom.forEach(function (val, idx) {
                if (val.find('label').html() == value2) {
                    val.attr('dataid', value1);
                }
            });
        }
    }, {
        key: 'getisinput',
        value: function getisinput() {
            return this.hasinput;
        }
    }]);

    return checkboxcontrols;
}(Interstellar.moduleBase);

//原型链一定要有的


module.exports = checkboxcontrols;

/***/ }),

/***/ 774:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(775);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./checkboxcontrols.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./checkboxcontrols.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 775:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".checkboxarea {\n  margin-bottom: 50px;\n  margin-left: 60px;\n}\n.checkboxarea .inputLine {\n  margin-left: 60px;\n  margin-bottom: 20px;\n}\n.checkboxarea .inputLine > span {\n  width: 50px;\n  white-space: nowrap;\n}\n.checkboxarea .inputLine > input {\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n  height: 35px;\n  line-height: 35px;\n  width: 100px;\n  padding-left: 20px;\n  margin-right: 10px;\n}\n.checkboxarea .inputLine .texttype {\n  display: inline-block;\n}\n.checkboxarea .inputLine .texttype .xlk {\n  height: 35px;\n  line-height: 35px;\n  width: 270px;\n}\n.checkboxarea .inputLine .tips {\n  width: 150px;\n  margin-left: 20px;\n}\n.checkboxarea .inputLine .wspan {\n  width: 100px;\n}\n.checkboxarea .inputLine .winput {\n  width: 250px;\n}\n.checkboxarea .labelsarea {\n  width: 400px;\n  min-height: 100px;\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n  display: inline-block;\n  padding: 10px;\n  position: relative;\n}\n.checkboxarea .labelsarea > span {\n  height: 22px;\n  line-height: 22px;\n  border: 1px solid red;\n  border-radius: 4px;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n.checkboxarea .labelsarea > span label {\n  padding: 0 5px 0 10px;\n  font-size: 15px;\n  vertical-align: top;\n}\n.checkboxarea .labelsarea > span i {\n  color: #fff;\n  font-size: 14px;\n  cursor: pointer;\n}\n.checkboxarea .labelsarea > span span {\n  width: 22px;\n  height: 22px;\n  text-align: center;\n  background: red;\n  position: relative;\n}\n.checkboxarea .labelsarea > span span:hover {\n  color: darkred;\n}\n.checkboxarea .labelsarea > span span .icon-guanbi {\n  top: 0px;\n  right: 4px;\n}\n.checkboxarea .labelsarea > input {\n  border: none;\n  margin-top: 10px;\n}\n.checkboxarea .labelsarea .labelul {\n  position: absolute;\n  width: 95%;\n  background: #fff;\n  border-left: 1px solid #e8e8e8;\n  border-right: 1px solid #e8e8e8;\n}\n.checkboxarea .labelsarea .labelul .labelli {\n  height: 30px;\n  line-height: 30px;\n  border-bottom: 1px solid #e8e8e8;\n  cursor: pointer;\n}\n.checkboxarea .labelsarea .labelul .labelli:hover {\n  background: #ECF3F4;\n}\n.checkboxarea .remarkline {\n  margin-top: 60px;\n}\n.checkboxarea .remarkline > span {\n  vertical-align: top;\n}\n.checkboxparam {\n  margin-left: 63px;\n  margin-top: 40px;\n}\n.checkboxparam > span {\n  margin-right: 20px;\n}\n.checkboxarea {\n  position: relative;\n}\n.checkboxarea .icon-tianjia {\n  color: #4c9fa9;\n  position: absolute;\n  left: 560px;\n  bottom: 30px;\n  cursor: pointer;\n  z-index: 1000;\n}\n.checkboxarea .icon-shanchu {\n  color: red;\n  cursor: pointer;\n  margin-left: 100px;\n}\n.checkboxarea .itemarea {\n  position: relative;\n}\n.checkboxarea .itemarea .item > p {\n  display: inline-block;\n}\n.checkboxarea .itemarea .item > p:nth-child(2n+1) {\n  margin-left: 80px;\n}\n.checkboxarea .itemarea .item > p:nth-child(2n) {\n  margin-left: 20px;\n}\n.checkboxarea .ishuchi {\n  display: inline-block;\n  margin-left: 80px;\n}\n.checkboxarea .nullarea {\n  margin-left: 60px;\n  margin-top: 30px;\n}\n.checkboxarea .required {\n  left: 400px;\n  top: 8px;\n}\n.checkboxarea .item .required {\n  left: 65px;\n  top: 36px;\n}\n", ""]);

// exports


/***/ }),

/***/ 776:
/***/ (function(module, exports) {

module.exports = "<div class=\"checkboxarea checkboxcontrols hide\"> <div class=inputLine redlabel=inputBox> <label class=redstar>*</label> <span class=wspan>复选组标题：</span> <input type=text class=\"checkboxname inputBox winput\" check=empty /> </div> <div class=checkboxmain> <ul class=itemarea> <i class=\"iconfont icon-tianjia\"></i> <li class=item> <p class=inputLine redlabel=inputBox> <label class=redstar>*</label> <span>选项1</span> <input type=text class=\"item1value inputBox\" check=empty api=value /> </p> <p class=inputLine redlabel=inputBox> <label class=redstar>*</label> <span>默认值</span> <input type=text class=\"item1code inputBox\" check=empty|num api=code reg=/^[0-9]*$/ error=请输入大于等于0的整数 /> <i class=\"iconfont icon-shanchu hide\"></i> </p> </li> </ul> <div class=nullarea> <i class=\"check-box mutex\"></i> <span>是否设置“无”选项&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此选项为互斥效果</span> </div> <div class=\"inputLine remarkline\"> <span>标签：</span> <div class=labelsarea> <input type=text class=labelsinput /> <ul class=labelul> </ul> </div> <span class=tips>最多可添加10个标签</span> </div> </div> </div>";

/***/ }),

/***/ 787:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(788);

var createcomponent = function (_Interstellar$modalBa) {
    _inherits(createcomponent, _Interstellar$modalBa);

    function createcomponent(app, dom, value, addMode) {
        _classCallCheck(this, createcomponent);

        var _this = _possibleConstructorReturn(this, (createcomponent.__proto__ || Object.getPrototypeOf(createcomponent)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(790);
        _this.name = 'createcomponent';
        return _this;
    }

    _createClass(createcomponent, [{
        key: 'complete',
        value: function complete() {
            var that = this;
            this.flag = true;
            this.yymcdata = [{
                val: '医院1',
                idx: '1'
            }, {
                val: '医院2',
                idx: '2'
            }];
            console.log(this.api, 'this.api');
            this.type = this.api.type;
            this.componentId = this.api.componentid;
            this.apiData = {};
            this.nowcontrols = null;
            this.dom.find('.component').on('click', function () {
                if (ES.selctorDoc(this).hasClass('disabled')) return;
                var textcontrol = __webpack_require__(765);
                var selectcontrol = __webpack_require__(769);
                var checkboxcontrol = __webpack_require__(773);
                var obj = {
                    text: textcontrol,
                    select: selectcontrol,
                    radiobox: selectcontrol,
                    checkbox: checkboxcontrol
                };
                that.nowcontrols = that.app.loadModule(obj[ES.selctorDoc(this).attr('type')], that.dom.find('.mainarea'), { type: that.type, controlType: ES.selctorDoc(this).attr('type') });
                if (that.type !== 'view') {
                    that.dom.find('.save').removeClass('hide');
                }
                that.nowcontrols.event._addEvent('controls.heightchange', function () {
                    that.initscroll();
                });
                that.nowcontrols.event._addEvent('controls.createlabel', function (value) {
                    that.event._dispatch('component.createlabel', { data: value });
                });
                that.nowcontrols.event._addEvent('controls.inputlabel', function (value) {
                    setTimeout(function () {
                        that.event._dispatch('component.inputlabel', { data: value });
                    }, 1000);
                });
                that.flag = false;
                that.dom.find('.component').addClass('hide');
                ES.selctorDoc(this).removeClass('hide');
                that.apiData = {};
                that.apiData.type = ES.selctorDoc(this).attr('type');
                that.dom.find('.' + ES.selctorDoc(this).attr('type') + 'area').removeClass('hide');
                that.dom.find('.component').addClass('disabled');
                that.initscroll();
            });
            that.dom.find('.mask').on('click', function () {
                that.nowcontrols.labelul('');
                that.dom.find('.mask').addClass('hide');
            });
            that.dom.find('.icon-guanbi').on('click', function () {
                that.close();
            });
            this.dom.find('.cancel').on('click', function () {
                that.dom.find('.mask').addClass('hide');
                that.dom.find('.component').removeClass('disabled');
                if (that.type == 'edit' || that.type == 'view' || that.type == 'correct') {
                    that.close();
                } else {
                    if (that.nowcontrols !== null) {
                        var data = that.getisinput();
                        for (var i in data) {
                            console.log(data);
                            if (data[i] !== '' && data[i] != undefined) {
                                that.app.alert.show({
                                    title: ' ',
                                    msg: '内容有更新，返回将不做保存。',
                                    close: true,
                                    sure: function sure() {
                                        that.dom.find('.mainarea').html('');
                                        that.dom.find('.component').removeClass('hide');
                                        that.initscroll();
                                        that.nowcontrols = null;
                                        that.dom.find('.save').addClass('hide');
                                    }
                                });
                                return false;
                            } else {
                                continue;
                            }
                        }
                        that.dom.find('.mainarea').html('');
                        that.dom.find('.component').removeClass('hide');
                        that.initscroll();
                        that.nowcontrols = null;
                        that.dom.find('.save').addClass('hide');
                    } else {
                        that.close();
                    }
                }
            });
            that.dom.find('.save').on('click', function () {
                that.apiData = that.nowcontrols.checkrequired();
                if (that.apiData) {
                    if (that.type == 'new') {
                        that.event._dispatch('component.new', { data: that.apiData });
                    } else {
                        console.log(that.apiData, 'that.apiData', that.componentId);
                        that.apiData.id = that.componentId;
                        that.event._dispatch('component.edit', { data: that.apiData });
                    }
                }
            });
            switch (this.type) {
                case 'edit':
                    that.dom.find('.bigtitle').html('编辑标注字段');
                    that.dom.find('.stitle').addClass('hide');
                    that.setData(that.api.data);
                    break;
                case 'view':
                    that.dom.find('.bigtitle').html('查看标注字段');
                    that.dom.find('.save').addClass('hide');
                    that.dom.find('.cancel').html('关闭');
                    that.dom.find('.stitle').addClass('hide');
                    that.setData(that.api.data);
                    break;
                case 'editlabel':
                    that.dom.find('.bigtitle').html('编辑标签');
                    that.dom.find('.stitle').addClass('hide');
                    that.setData(that.api.data);
                    break;
                case 'correct':
                    that.dom.find('.bigtitle').html('修正标注');
                    that.dom.find('.stitle').addClass('hide');
                    that.setData(that.api.data);
                    break;
            }
        }
    }, {
        key: 'createlabel',
        value: function createlabel(res, value) {
            var that = this;
            that.nowcontrols.setid(res.data.id, value.data.val);
        }
    }, {
        key: 'showlabel',
        value: function showlabel(res) {
            var that = this;
            if (res.data.list.length > 0) {
                that.nowcontrols.labelul(res.data.list);
                that.dom.find('.mask').removeClass('hide');
            } else {
                that.nowcontrols.labelul('');
                that.dom.find('.mask').addClass('hide');
            }
        }
    }, {
        key: 'setData',
        value: function setData(value) {
            var that = this;
            var json = {
                id: parseInt(that.componentId)
            };
            that.dom.find('.component[type="' + value.type + '"]').click();
            that.nowcontrols.render(value);
            that.dom.find('.component').off('click');
            switch (that.type) {
                case 'view':
                    if (that.dom.find('.iconfont').dom) {
                        that.dom.find('.mainarea .iconfont').addClass('hide');
                    }
                    that.dom.find('.labelitem span').css({ 'background': '#fff' });
                    if (that.dom.find('.check-box').dom) {
                        that.dom.find('.check-box').dom.forEach(function (val, idx) {
                            if (val.hasClass('choose')) {
                                val.removeClass('choose');
                                that.dom.find('.check-box').off('click');
                                val.addClass('choose');
                            } else {
                                that.dom.find('.check-box').off('click');
                            }
                        });
                    }
                    that.dom.find('.isdefault').off('click');
                    that.dom.find('input').attr('disabled', 'disabled');
                    that.nowcontrols.drop.disable();
                    break;
                case 'edit':
                    break;
                case 'editlabel':
                    that.dom.find('.inputLine').addClass('hide');
                    that.dom.find('.remarkline').removeClass('hide');
                    that.dom.find('.selectparam').addClass('hide');
                    that.dom.find('.itemarea').addClass('hide');
                    that.dom.find('.nullarea').addClass('hide');
                    that.initscroll();
                    break;
                case 'correct':
                    if (that.dom.find('input[api="code"]').dom) {
                        that.dom.find('input[api="code"]').attr('disabled', 'disabled');
                    }
                    that.dom.find('.icon-shanchu').addClass('hide');
                    break;
            }
        }
    }, {
        key: 'initscroll',
        value: function initscroll() {
            if (this.myScroll) {
                this.myScroll.refresh();
                return;
            }
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            ES.selctorDoc('.createcomponent').attr('id', rid);
            this.myScroll = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }, {
        key: 'getisinput',
        value: function getisinput() {
            return this.nowcontrols.getisinput();
        }
    }]);

    return createcomponent;
}(Interstellar.modalBase);

module.exports = createcomponent;

/***/ }),

/***/ 788:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(789);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./createcomponent.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./createcomponent.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 789:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".createcom {\n  background: #fff;\n  height: 500px;\n  font-size: 14px;\n  overflow: hidden;\n  position: relative;\n  width: 850px;\n  margin-left: -400px;\n  margin-top: -250px;\n}\n.createcom .icon-guanbi {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  cursor: pointer;\n}\n.createcom .createcomponent {\n  height: 340px;\n  overflow: hidden;\n  position: relative;\n}\n.createcom .createcomponent > .scroll {\n  width: 100%;\n  overflow: hidden;\n  position: relative;\n  padding-bottom: 50px;\n}\n.createcom .bigtitle {\n  font-size: 18px;\n  margin: 30px;\n}\n.createcom .componentmain {\n  margin-left: 60px;\n  font-size: 16px;\n}\n.createcom .componentmain .component {\n  cursor: pointer;\n  display: inline-block;\n  margin: 30px 50px;\n}\n.createcom .componentmain .component i {\n  color: #4c9fa9;\n  font-size: 16px;\n}\n.createcom .details {\n  margin-bottom: 50px;\n  margin-left: 60px;\n}\n.createcom .details .inputLine {\n  margin-left: 60px;\n  margin-bottom: 10px;\n}\n.createcom .details .inputLine > span {\n  width: 100px;\n}\n.createcom .details .inputLine > input {\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n  height: 35px;\n  line-height: 35px;\n  width: 250px;\n  padding-left: 20px;\n}\n.createcom .details .inputLine .texttype {\n  display: inline-block;\n}\n.createcom .details .inputLine .texttype .xlk {\n  height: 35px;\n  line-height: 35px;\n  width: 270px;\n}\n.createcom .details .inputLine .tips {\n  width: 150px;\n  margin-left: 20px;\n}\n.createcom .details .labelsarea {\n  width: 400px;\n  min-height: 100px;\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n  display: inline-block;\n  padding: 10px;\n}\n.createcom .details .labelsarea > span {\n  height: 22px;\n  line-height: 22px;\n  border: 1px solid red;\n  border-radius: 4px;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n.createcom .details .labelsarea > span label {\n  padding: 0 5px 0 10px;\n  font-size: 15px;\n  vertical-align: top;\n}\n.createcom .details .labelsarea > span i {\n  color: #fff;\n  font-size: 14px;\n  cursor: pointer;\n}\n.createcom .details .labelsarea > span span {\n  width: 22px;\n  text-align: center;\n  background: red;\n  height: 22px;\n}\n.createcom .details .labelsarea > span span:hover {\n  color: darkred;\n}\n.createcom .details .labelsarea > input {\n  border: none;\n  margin-top: 10px;\n}\n.createcom .details .remarkline {\n  margin-top: 60px;\n}\n.createcom .details .remarkline > span {\n  vertical-align: top;\n}\n.createcom .btnarea {\n  height: 40px;\n  bottom: 30px;\n  text-align: center;\n}\n.createcom .btnarea .biaozhubtn {\n  height: 40px;\n  width: 120px;\n  line-height: 40px;\n  margin-right: 30px;\n}\n.createcom .btnarea .save {\n  background: #4c9fa9;\n  color: #fff;\n}\n.createcom .btnarea .cancel {\n  border: 1px solid #4c9fa9;\n  color: #4c9fa9;\n}\n.createcom .mask {\n  position: fixed;\n  width: 2000px;\n  height: 2000px;\n  top: 0;\n  left: 0;\n  z-index: 10;\n}\n.createcom .labelul {\n  z-index: 11;\n}\n.createcom input {\n  background: #fff;\n}\n", ""]);

// exports


/***/ }),

/***/ 790:
/***/ (function(module, exports) {

module.exports = "<div class=\"modal createcom\"> <div class=bigtitle>创建标注字段</div> <i class=\"iconfont icon-guanbi\"></i> <div class=createcomponent> <div class=scroll> <div class=componentmain> <p class=stitle>添加选择控件</p> <div class=\"text component\" type=text> <i class=\"iconfont icon-wenbenkuang\"></i> <span>文本框</span> </div> <div class=\"select component\" type=select> <i class=\"iconfont icon-xialacaidan\"></i> <span>下拉菜单</span> </div> <div class=\"radiobox component\" type=radiobox> <i class=\"iconfont icon-xuanzhong\"></i> <span>单选框</span> </div> <div class=\"checkbox component\" type=checkbox> <i class=\"iconfont icon-duoxuankuang\"></i> <span>复选组</span> </div> </div> <div class=mainarea> </div> <div class=\"mask hide\"></div> </div> </div> <div class=btnarea> <a class=\"biaozhubtn save hide\">保存</a> <a class=\"biaozhubtn cancel\">取消</a> </div> </div> ";

/***/ }),

/***/ 845:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(846);
// var html = require('./tpl.html')

var showcomplist = function (_Interstellar$modalBa) {
    _inherits(showcomplist, _Interstellar$modalBa);

    function showcomplist(app, dom, value, addMode) {
        _classCallCheck(this, showcomplist);

        var _this = _possibleConstructorReturn(this, (showcomplist.__proto__ || Object.getPrototypeOf(showcomplist)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(848);
        _this.name = 'showcomplist';
        _this.apidata = [];
        return _this;
    }

    _createClass(showcomplist, [{
        key: 'complete',
        value: function complete() {
            var that = this;
            console.log(that.api);
            that.render();
            that.bindevent();
            if (that.api.type == 'audittask') {
                this.dom.find('.bottomArea').removeClass('hide');
                this.dom.find('.scroll').css({ height: '290px' });
                this.dom.find('.scrollmenu').css({ height: '290px' });
                if (this.api.remark) {
                    this.dom.find('.bottomArea .remark .check-box').addClass('choose');
                }
                this.dom.find('.bottomArea .remark .check-box').on('click', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                    var dom;
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    dom = ES.selctorDoc(this);

                                    if (dom.hasClass('choose')) {
                                        dom.removeClass('choose');
                                    } else {
                                        dom.addClass('choose');
                                    }
                                    that.event._dispatch('showcomplist.remark', { remark: dom.hasClass('choose') });

                                case 3:
                                case 'end':
                                    return _context.stop();
                            }
                        }
                    }, _callee, this);
                })));
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var that = this;
            that.dom.find('.modal-title').html(that.api.config.title);
            console.log(that.api.config.menudata);
            if (that.api.config.data) {
                var html = '';
                that.api.config.data.forEach(function (val, idx) {
                    if (that.api.config.check) {
                        var cn = val.selected ? "check-box choose" : "check-box";
                        if (val.selected) {
                            that.apidata.push(val.id);
                        }
                        html += '<li><i class="' + cn + '"></i> <span class="choosecomp" data-id="' + val.id + '" form-id="' + (val.formid ? val.formid : val.id) + '">' + val.name + '</span></li>';
                    } else {
                        html += '<li><span class="choosecomp" data-id="' + val.id + '" form-id="' + (val.formid ? val.formid : val.id) + '">' + val.name + '</span></li>';
                    }
                });
                console.log(html);
                that.dom.find('.componentlist').append(html);
                if (!that.api.config.disable) {
                    that.bindcheckchoose();
                }
                that.dom.find('.choosecomp').on('click', function () {
                    that.event._dispatch('showcomplist.choosecomp', { id: ES.selctorDoc(this).attr('form-id') });
                });
                that.initscroll_right();
            }
            if (that.api.config.menudata) {
                that.dom.find('.scrollmenu').removeClass('hide');
                var _html = '';

                var _loop = function _loop(i) {
                    var cn = that.api.config.menudata[i].selected ? "check-box choose" : "check-box";
                    if (that.api.config.type == 'project') {
                        _html += '<li class="choosetype" data-id="' + i + '"><span title="' + that.api.config.menudata[i].name + '"> ' + that.api.config.menudata[i].name + '</span></li>';
                    } else {
                        if (that.api.config.check) {
                            _html += '<li class="choosetype" data-id="' + i + '"><i class="' + cn + '"></i><span title="' + that.api.config.menudata[i].name + '"> ' + that.api.config.menudata[i].name + '</span></li>';
                        } else {
                            if (that.api.config.menudata[i].selected) {
                                _html += '<li class="choosetype" data-id="' + i + '"><span title="' + that.api.config.menudata[i].name + '"> ' + that.api.config.menudata[i].name + '</span></li>';
                            }
                        }
                    }
                    var obj = {
                        imageAnnotationId: i,
                        annotationItemIdList: [],
                        selected: that.api.config.menudata[i].selected ? that.api.config.menudata[i].selected : false
                    };
                    that.api.config.menudata[i].data.forEach(function (val, idx) {
                        if (val.selected) {
                            obj.annotationItemIdList.push(val.id);
                        }
                    });
                    that.apidata.push(obj);
                };

                for (var i in that.api.config.menudata) {
                    _loop(i);
                }
                console.log(that.apidata, 'that.apidata');
                that.dom.find('.menudata').append(_html);
                that.initscroll_left();
                that.dom.find('.choosetype').on('click', function () {
                    that.dom.find('.choosed').removeClass('choosed');
                    var html1 = '';
                    that.dom.find('.componentlist').html('');
                    if (that.api.config.menudata[ES.selctorDoc(this).attr('data-id')].data.length > 0) {
                        that.api.config.menudata[ES.selctorDoc(this).attr('data-id')].data.forEach(function (val, idx) {
                            if (that.api.config.check) {
                                var _cn = val.selected ? "check-box choose" : "check-box";
                                html1 += '<li><i class="' + _cn + '"></i><span class="choosecomp" data-id="' + val.id + '" form-id="' + (val.formid ? val.formid : val.id) + '">' + val.name + '</span></li>';
                            } else {
                                html1 += '<li><span class="choosecomp" data-id="' + val.id + '" form-id="' + (val.formid ? val.formid : val.id) + '">' + val.name + '</span></li>';
                            }
                        });
                    } else {
                        html1 += '<p style="height: 200px;line-height: 200px; text-align: center;font-size: 18px;">经过交集对比没有相同的影像征象</p>';
                    }
                    that.dom.find('.componentlist').append(html1);
                    if (!that.api.config.disable) {
                        that.bindcheckchoose();
                    }
                    that.dom.find('.choosecomp').on('click', function () {
                        that.event._dispatch('showcomplist.choosecomp', { id: ES.selctorDoc(this).attr('form-id') });
                    });
                    ES.selctorDoc(this).addClass('choosed');
                    that.initscroll_right();
                });
                if (!that.api.config.disable) {
                    that.dom.find('.choosetype .check-box').on('click', function () {
                        var dom = ES.selctorDoc(this);
                        if (dom.hasClass('choose')) {
                            console.log(that.apidata);
                            dom.removeClass('choose');
                            console.log(that.dom.find('.componentlist .choose'));
                            that.dom.find('.componentlist .choose').removeClass('choose');
                            that.apidata.forEach(function (val, idx) {
                                if (val.imageAnnotationId == dom.parent().attr('data-id')) {
                                    val.selected = false;
                                    val.annotationItemIdList = [];
                                }
                            });
                        } else {
                            dom.addClass('choose');
                            that.apidata.forEach(function (val, idx) {
                                if (val.imageAnnotationId == dom.parent().attr('data-id')) {
                                    val.selected = true;
                                }
                            });
                        }
                        that.event._dispatch('showcomplist.datachange', that.apidata);
                    });
                }
                that.dom.find('.choosetype').eq(0).click();
            }
        }
    }, {
        key: 'bindcheckchoose',
        value: function bindcheckchoose() {
            var that = this;
            that.dom.find('.componentlist .check-box').on('click', function () {
                var dom = ES.selctorDoc(this);
                if (dom.hasClass('choose')) {
                    dom.removeClass('choose');
                    if (that.api.config.menudata) {
                        that.apidata.forEach(function (val) {
                            that.apidata = that.apidata.filter(function (item) {
                                return item.imageAnnotationId !== that.dom.find('.menudata .choosed').attr('data-id');
                            });
                            var obj = {
                                imageAnnotationId: that.dom.find('.menudata .choosed').attr('data-id'),
                                annotationItemIdList: [],
                                selected: true
                            };
                            console.log(that.api.config.menudata, 'that.api.config.menudata');
                            that.api.config.menudata[that.dom.find('.menudata .choosed').attr('data-id')].data.forEach(function (va, dix) {
                                if (va.id == dom.parent().find('.choosecomp').attr('data-id')) {
                                    va.selected = false;
                                }
                            });
                            if (that.dom.find('.componentlist li .choose').dom) {
                                that.dom.find('.componentlist li .choose').dom.forEach(function (val, idx) {
                                    obj.annotationItemIdList.push(val.parent().find('.choosecomp').attr('data-id'));
                                });
                            }
                            that.apidata.push(obj);
                        });
                    } else {
                        that.apidata = that.apidata.filter(function (item) {
                            console.log(item, parseInt(dom.parent().find('.choosecomp').attr('data-id')));
                            return parseInt(item) !== parseInt(dom.parent().find('.choosecomp').attr('data-id'));
                        });
                    }
                } else {
                    dom.addClass('choose');
                    if (that.api.config.menudata) {
                        that.apidata = that.apidata.filter(function (item) {
                            return item.imageAnnotationId !== that.dom.find('.menudata .choosed').attr('data-id');
                        });
                        var _obj = {
                            imageAnnotationId: that.dom.find('.menudata .choosed').attr('data-id'),
                            annotationItemIdList: [],
                            selected: true
                        };
                        that.dom.find('.menudata .choosed .check-box').addClass('choose');
                        that.api.config.menudata[that.dom.find('.menudata .choosed').attr('data-id')].data.forEach(function (va, dix) {
                            if (va.id == dom.parent().find('.choosecomp').attr('data-id')) {
                                va.selected = true;
                            }
                        });
                        if (that.dom.find('.componentlist li .choose').dom) {
                            that.dom.find('.componentlist li .choose').dom.forEach(function (val, idx) {
                                _obj.annotationItemIdList.push(val.parent().find('.choosecomp').attr('data-id'));
                            });
                            that.apidata.push(_obj);
                        }
                        console.log(that.apidata);
                    } else {
                        if (that.apidata.toString().lastIndexOf(dom.parent().find('.choosecomp').attr('data-id') == -1)) {
                            that.apidata.push(parseInt(dom.parent().find('.choosecomp').attr('data-id')));
                        }
                    }
                }
                that.event._dispatch('showcomplist.datachange', that.apidata);
            });
        }
    }, {
        key: 'bindevent',
        value: function bindevent() {
            var that = this;
            that.dom.find('.icon-guanbi').on('click', function () {
                that.close();
            });
        }
    }, {
        key: 'initscroll_left',
        value: function initscroll_left() {
            if (this.myScroll1) {
                this.myScroll1.refresh();
                return;
            }
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            this.dom.find('.scrollmenu').attr('id', rid);
            this.myScroll1 = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
        // nodata(){
        //     this.dom.find('.nodata').removeClass('hide')
        // }

    }, {
        key: 'showloading',
        value: function showloading() {}
    }, {
        key: 'initscroll_right',
        value: function initscroll_right() {
            if (this.myScroll1) {
                this.myScroll1.refresh();
                return;
            }
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            this.dom.find('.scroll').attr('id', rid);
            this.myScroll1 = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }]);

    return showcomplist;
}(Interstellar.modalBase);

//原型链一定要有的


module.exports = showcomplist;

/***/ }),

/***/ 846:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(847);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./showcomplist.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./showcomplist.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 847:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".showcomplist {\n  width: 600px;\n  height: 400px;\n  margin-left: -300px;\n  margin-top: -200px;\n}\n.showcomplist .modal-header {\n  position: relative;\n  border-bottom: 1px solid #e8e8e8;\n}\n.showcomplist .modal-header .icon-guanbi {\n  position: absolute;\n  right: 20px;\n  top: 20px;\n  cursor: pointer;\n}\n.showcomplist .scrollmenu {\n  display: inline-block;\n  width: 25%;\n  height: 340px;\n  border-right: 1px solid #e8e8e8;\n  overflow: hidden;\n}\n.showcomplist .scrollmenu .menudata li {\n  height: 35px;\n  line-height: 35px;\n  cursor: pointer;\n  position: relative;\n}\n.showcomplist .scrollmenu .menudata li span {\n  overflow: hidden;\n  white-space: nowrap;\n  width: 100px;\n  margin-left: 25px;\n  text-overflow: ellipsis;\n}\n.showcomplist .scrollmenu .menudata li i {\n  top: 11px;\n  position: absolute;\n  left: 5px;\n}\n.showcomplist .scrollmenu .menudata li:hover {\n  background: #d9e2e9;\n}\n.showcomplist .scrollmenu .menudata .choosed {\n  background: #ECF3F4;\n  color: #448E97;\n}\n.showcomplist .scroll {\n  display: inline-block;\n  width: 73%;\n  height: 340px;\n  overflow: hidden;\n}\n.showcomplist .scroll .componentlist li {\n  display: inline-block;\n  height: 35px;\n  line-height: 35px;\n  position: relative;\n  padding-left: 20px;\n}\n.showcomplist .scroll .componentlist li > span {\n  color: #4c9fa9;\n  text-decoration: underline;\n  margin-left: 20px;\n  width: 160px;\n  font-size: 14px;\n  cursor: pointer;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n.showcomplist .scroll .componentlist li > .check-box {\n  position: absolute;\n  top: 11px;\n}\n.showcomplist .bottomArea {\n  border-top: 1px solid #e8e8e8;\n}\n.showcomplist .bottomArea p {\n  padding: 15px;\n}\n", ""]);

// exports


/***/ }),

/***/ 848:
/***/ (function(module, exports) {

module.exports = "<div class=\"showcomplist modal\"> <div class=modal-header> <p class=modal-title></p> <i class=\"iconfont icon-guanbi\"></i> </div> <div class=\"scrollmenu hide\"> <ul class=menudata></ul> </div> <div class=scroll> <ul class=componentlist> </ul> <div class=\"nodata hide\"> 暂无数据 </div> </div> <div class=\"bottomArea hide\"> <p class=remark> <i class=check-box></i> <span>是否有备注</span> </p> </div> </div> ";

/***/ }),

/***/ 849:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(850);
// var html = require('./tpl.html')

var addauditsource = function (_Interstellar$modalBa) {
    _inherits(addauditsource, _Interstellar$modalBa);

    function addauditsource(app, dom, value, addMode) {
        _classCallCheck(this, addauditsource);

        var _this = _possibleConstructorReturn(this, (addauditsource.__proto__ || Object.getPrototypeOf(addauditsource)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(852);
        _this.name = 'addauditsource';
        _this.refreshPage = true;
        _this.apidata = {};

        return _this;
    }

    _createClass(addauditsource, [{
        key: 'complete',
        value: function complete() {
            var that = this;
            console.log(that.api, 'that.api');
            that.idlist = [];
            that.api.chooseddata.forEach(function (val, idx) {
                if (val.id) val.taskId = val.id;
            });
            that.datalist = that.api.chooseddata ? JSON.parse(JSON.stringify(that.api.chooseddata)) : [];
            if (that.api.chooseddata.length > 0) {
                that.api.chooseddata.forEach(function (val, idx) {
                    that.idlist.push(val.taskId);
                });
            }
            this.dom.find('.icon-guanbi').on('click', function () {
                that.close();
            });
            this.dom.find('.cancel').on('click', function () {
                that.close();
            });
            that.dom.find('.searchbtn').on('click', function () {
                that.event._dispatch('addauditsource.search', that.apidata);
            });
            that.dom.find('.add').on('click', function () {
                // that.datalist = that.datalist.filter((val) => {
                //     return val.taskId !== null || val._action !== 3
                // })
                console.log(that.datalist);
                that.event._dispatch('addauditsource.adddata', { data: that.idlist, list: that.datalist });
            });
            if (that.api.config) {
                that.dom.find('.modal-title').html(that.api.config.title);
            }
            this.render();
        }
    }, {
        key: 'render',
        value: function render(value) {
            var that = this;
            new Promise(function(resolve) { resolve(); }).then((function () {
                var dropdown = __webpack_require__(638);
                that.xmmc = that.app.loadModule(dropdown, that.dom.find('.xmmc'), {
                    className: 'xlk',
                    firstSelect: {
                        val: '请选择项目名称',
                        idx: ''
                    },
                    data: that.api.projectList ? that.api.projectList : []
                });
                that.xmmc.event._addEvent('option.click', function (value) {
                    that.apidata.projectId = value.idx;
                });
                that.xmmc.event._addEvent('dropDown.clear', function (value) {
                    that.apidata.projectId = '';
                });
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
            that.dom.find('.filterarea input').on('change', function () {
                that.apidata[ES.selctorDoc(this).attr('class')] = ES.selctorDoc(this).val();
            });
            that.setTitle();
        }
    }, {
        key: 'setxlk',
        value: function setxlk(value) {
            var that = this;
            console.log(value);
            that.xmmc.renderHtml(value);
        }
    }, {
        key: 'setTitle',
        value: function setTitle() {
            var obj = {};
            var that = this;
            obj['icon'] = {
                "taskId": { name: '<span>任务ID</span>', type: 'text', code: 'checkid', w: '15%', ww: '15%', n: "40" },
                "taskName": { name: '<span>任务名称</span>', type: 'text', code: 'checkid', w: '25%', ww: '25%' },
                "type": { name: '<span>任务类型</span>', type: 'text', code: 'pid', w: '25%', ww: '25%' },
                "projectName": { name: '<span>所属项目名称</span>', type: 'text', code: 'pname', w: '35%', ww: '35%' }
            };
            obj['type'] = 'center';
            obj['chose'] = 'all';
            obj['chosew'] = '30px';
            obj['initPagina'] = false;
            obj['pagesizeSet'] = false;
            obj['tablewidth'] = ES.selctorDoc('.tasktable').box().clientWidth - 60;
            __webpack_require__.e/* require.ensure */(55/* duplicate */).then((function () {
                var cont_table = __webpack_require__(640);
                that.table = that.app.loadModule(cont_table, that.dom.find('.tasktable'), {
                    id: 'tasktable',
                    header: obj
                });
                that.table.event._addEvent('table.check', function (value) {
                    var temp = value;
                    if (temp.type == 'add') {
                        if (that.datalist.toString().lastIndexOf(temp.id) == -1) {
                            that.datalist.push(temp.data);
                            that.idlist.push(temp.id);
                        }
                    }
                    if (temp.type == 'del') {
                        console.log(that.datalist, that.idlist, temp);
                        that.datalist = that.datalist.filter(function (item) {
                            return parseInt(item.id) !== parseInt(temp.id);
                        });
                        that.idlist = that.idlist.filter(function (item) {
                            return parseInt(item) !== parseInt(temp.id);
                        });
                    }
                });
                that.table.event._addEvent('table.allcheck', function (value) {
                    if (value.type == 'add') {
                        var temp = that.idlist.toString();
                        value.id.forEach(function (val, idx) {
                            if (temp.lastIndexOf(val) == -1) {
                                that.idlist.push(val);
                            }
                        });
                        value.data.forEach(function (val, idx) {
                            if (temp.lastIndexOf(val.id) == -1) {
                                that.datalist.push(val);
                            }
                        });
                    }
                    if (value.type == 'del') {
                        var _temp = value.id.toString();
                        that.idlist = that.idlist.filter(function (item) {
                            return _temp.lastIndexOf(item) == -1;
                        });
                        that.datalist = that.datalist.filter(function (item) {
                            return _temp.lastIndexOf(item.id) == -1;
                        });
                    }
                });
                that.dom.find('.list-content').removeClass('hide');
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
        }
    }, {
        key: 'setMain',
        value: function setMain(value) {
            console.log(value, 'cacc');
            var that = this;
            var data2 = [];
            var res = '';
            if (value) {
                res = value;
            }
            if (res.code == 0) {
                if (res.data.list.length > 0) {
                    res.data.list.forEach(function (val, idx) {
                        val.id = val.taskId;
                        switch (val.taskType) {
                            case 1:
                                val.type = '人工标注任务';
                                break;
                            case 2:
                                val.type = '审核任务';
                                break;
                            case 3:
                                val.type = '回流任务';
                                break;
                        }
                        console.log(that.idlist, val);
                        if (that.idlist.some(function (item) {
                            return item == val.taskId;
                        })) {
                            val.choosed = true;
                        }
                    });
                    that.table.setData(res.data.list);
                } else {
                    that.table.noData();
                }
            }
            that.initscrollmenu();
        }
    }, {
        key: 'initscrollmenu',
        value: function initscrollmenu() {
            if (this.myScroll) {
                this.myScroll.refresh();
                return;
            }

            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            this.dom.find('.tasktable').attr('id', rid);
            this.myScroll = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }]);

    return addauditsource;
}(Interstellar.modalBase);

//原型链一定要有的


module.exports = addauditsource;

/***/ }),

/***/ 850:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(851);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./addauditsource.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./addauditsource.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 851:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".addauditsource {\n  box-sizing: border-box;\n  background: #fff;\n  border-radius: 4px;\n  font-family: \"Microsoft YaHei\";\n  font-size: 16px;\n  width: 800px;\n  height: 500px;\n  margin-left: -400px;\n  position: relative;\n}\n.addauditsource .icon-guanbi {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  cursor: pointer;\n}\n.addauditsource .filterarea {\n  margin: 0 0 20px 20px;\n}\n.addauditsource .filterarea > input {\n  padding-left: 10px;\n  border-radius: 4px;\n  width: 170px;\n  border: 1px solid #e8e8e8;\n  height: 30px;\n  margin-right: 10px;\n}\n.addauditsource .filterarea > div {\n  display: inline-block;\n  margin-right: 10px;\n}\n.addauditsource .filterarea .xlk {\n  height: 30px;\n  line-height: 30px;\n  width: 150px;\n}\n.addauditsource .filterarea .xlk .nowname {\n  width: 93%;\n}\n.addauditsource .modal-body {\n  padding: 10px 0 20px 10px;\n  font-size: 14px;\n}\n.addauditsource .modal-body .searchbtn {\n  width: 100px;\n  height: 30px;\n  border: 1px solid #4c9fa9;\n  line-height: 30px;\n  color: #4c9fa9;\n  float: right;\n  margin-right: 40px;\n}\n.addauditsource .modal-body .tasktable {\n  height: 310px;\n  overflow: hidden;\n  position: relative;\n}\n.addauditsource .modal-body .tasktable .table {\n  padding-bottom: 20px;\n  position: relative;\n}\n.addauditsource .modal-body span {\n  font-size: 16px;\n}\n.addauditsource .modal-body .btnarea {\n  height: 30px;\n  text-align: right;\n  margin-right: 20px;\n  margin-top: 20px;\n}\n.addauditsource .modal-body .btnarea .biaozhubtn {\n  width: 100px;\n  height: 30px;\n  line-height: 30px;\n  background: #4c9fa9;\n  border: 1px solid #4c9fa9;\n  color: #fff;\n  margin-left: 20px;\n}\n.addauditsource .modal-body .btnarea .cancel {\n  background: #fff;\n  border: 1px solid #4c9fa9;\n  color: #4c9fa9;\n}\n", ""]);

// exports


/***/ }),

/***/ 852:
/***/ (function(module, exports) {

module.exports = "<div class=\"addauditsource modal\"> <div class=modal-header> <p class=modal-title>添加审核源</p> <i class=\"icon-guanbi iconfont\"></i> </div> <div class=modal-body> <div class=filterarea> <div class=xmmc></div> <input class=taskName type=text placeholder=请输入任务名称 /> <a class=\"searchbtn biaozhubtn\">查询</a> </div> <div class=tasktable> </div> <div class=btnarea> <a class=\"biaozhubtn add\">添加</a> <a class=\"biaozhubtn cancel\">取消</a> </div> </div> </div>";

/***/ }),

/***/ 958:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".createauditpro3 {\n  margin: 20px;\n  background: #fff;\n  height: 100%;\n  font-size: 14px;\n  overflow: hidden;\n  border: 1px solid #fff;\n  position: relative;\n}\n.createauditpro3 .title {\n  font-size: 16px;\n  height: 60px;\n  line-height: 60px;\n  padding-left: 66px;\n  margin-bottom: 20px;\n}\n.createauditpro3 > div {\n  line-height: 40px;\n}\n.createauditpro3 .showpro {\n  margin-left: 70px;\n}\n.createauditpro3 .showpro > span {\n  vertical-align: top;\n}\n.createauditpro3 .showpro > p {\n  margin-left: 75px;\n}\n.createauditpro3 .showpro .project {\n  display: inline-block;\n}\n.createauditpro3 .showpro .project .inputarea {\n  min-height: 100px;\n}\n.createauditpro3 .showpro .project .inputarea .contentarea {\n  min-height: 100px;\n}\n.createauditpro3 .showpro .linkarea a {\n  text-decoration: underline;\n  color: #4c9fa9;\n  margin: 0 50px;\n}\n.createauditpro3 .auditsource {\n  margin-left: 70px;\n  margin-top: 20px;\n}\n.createauditpro3 .auditsource .icon-tianjia {\n  color: #4c9fa9;\n  cursor: pointer;\n  margin-left: 10px;\n}\n.createauditpro3 .auditsource .tasklist li {\n  width: 80%;\n  height: 40px;\n  line-height: 40px;\n  margin-bottom: 10px;\n  position: relative;\n}\n.createauditpro3 .auditsource .tasklist li > span {\n  overflow: hidden;\n}\n.createauditpro3 .auditsource .tasklist li .taskname {\n  width: 300px;\n  text-overflow: ellipsis;\n}\n.createauditpro3 .auditsource .tasklist li .icon-shanchu {\n  color: #ff0000;\n  cursor: pointer;\n  margin: 0 20px;\n  position: absolute;\n  left: 300px;\n}\n.createauditpro3 .auditsource .tasklist li .seriesnum {\n  margin-left: 40px;\n}\n", ""]);

// exports


/***/ })

});
//# sourceMappingURL=e752d3c5ddf00475763c.22.min.js.map