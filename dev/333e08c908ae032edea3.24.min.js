webpackJsonp([24],{

/***/ 143:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(832);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./createtask2.less", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./createtask2.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 144:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//这边基本上引入需要使用的资源less，api，需要使用的模块等等。

var createtask2 = function (_Interstellar$modelBa) {
    _inherits(createtask2, _Interstellar$modelBa);

    function createtask2(app) {
        _classCallCheck(this, createtask2);

        var _this = _possibleConstructorReturn(this, (createtask2.__proto__ || Object.getPrototypeOf(createtask2)).call(this, app));

        _this.proseriesdata = { page: 1, pageSize: 10, assigned: false };
        _this.querytask = { page: 1, pageSize: 10 };
        return _this;
    }

    return createtask2;
}(Interstellar.modelBase);

module.exports = createtask2;

/***/ }),

/***/ 159:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//这边基本上引入需要使用的资源less，api，需要使用的模块等等。

var createbackflowtask2 = function (_Interstellar$pagesBa) {
  _inherits(createbackflowtask2, _Interstellar$pagesBa);

  function createbackflowtask2() {
    _classCallCheck(this, createbackflowtask2);

    return _possibleConstructorReturn(this, (createbackflowtask2.__proto__ || Object.getPrototypeOf(createbackflowtask2)).apply(this, arguments));
  }

  _createClass(createbackflowtask2, [{
    key: "complete",
    value: function complete() {
      var _this4 = this;

      var that = this;
      this.apidata = {};
      this.apidata.condition = null;
      this.apidata.remark = '';
      this.type = this.app.parpam.type;
      this.taskId = this.app.parpam.taskid;
      this.projectId = this.app.parpam.projectid;
      this.status = this.app.parpam.status;
      this.uploadalgdata = __webpack_require__(806);
      this.alglist = __webpack_require__(833);
      this.formsubmit = __webpack_require__(783);
      this.prodata = __webpack_require__(779);
      this.app.header.openControl('backflowtask');
      this.app.header.changeselected(2);
      this.styleModel(1);
      this.alg_sar_list_tool();
      this.user_searchAlgUser();
      this.task_series_count();
      this.taskDetail();
      this.initscroll('createtask2');
      this.dom.find('.exportres .yrdata').on('click', function () {
        var _this2 = this;

        if (!ES.selctorDoc(this).hasClass('disabled')) {
          that.uploadalg = that.app.loadModal(that.uploadalgdata, { adv: true }, { toolList: that.toolList ? that.toolList : [], type: 'project' });
          that.uploadalg.event._addEvent('uploadalgdata.upload', function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(value) {
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      that.choosePerson(value);

                    case 1:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, _this2);
            }));

            return function (_x) {
              return _ref.apply(this, arguments);
            };
          }());
        }
      });
      this.dom.find('.addseries .yrdata').on('click', function () {
        var _this3 = this;

        if (!ES.selctorDoc(this).hasClass('disabled')) {
          that.prodatapoll = that.app.loadModal(that.prodata, { adv: true }, { type: 'add', id: that.taskId });
          that.resetPage = true;
          that.prodatapoll.event._addEvent('projectdata.addall', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(value) {
              var res;
              return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      that.apidata.condition = value.query;
                      that.apidata.operation = 1;
                      that.apidata.taskId = that.taskId;
                      that.apidata.randomAddNum = parseInt(value.randomAddNum);
                      that.apidata.currentSearchReqId = value.currentSearchReqId;
                      delete that.apidata.condition.page;
                      delete that.apidata.condition.pageSize;
                      that.app.loading.show();
                      _context2.next = 10;
                      return that.api.updateseries(that.apidata);

                    case 10:
                      res = _context2.sent;

                      that.app.loading.hide();
                      if (res.code == 0) {
                        that.task_series_count();
                      }
                      if (value.total > 0) {
                        that.dom.find('.addseries .yyrarea').removeClass('hide');
                        that.dom.find('.addseries .yyr .num').html(value.total);
                      }
                      that.prodatapoll.close();

                    case 15:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2, _this3);
            }));

            return function (_x2) {
              return _ref2.apply(this, arguments);
            };
          }());
          that.prodatapoll.event._addEvent('projectdata.search', function (value) {
            that.resetPage = true;
            that.model.setData('proseriesdata', value.data);
          });
          that.prodatapoll.event._addEvent('projectdata.datachange', function () {
            that.resetPage = true;
            that.task_series_count();
          });
          that.prodatapoll.event._addEvent('hospital.input', function (value) {
            that.getxlvalue(value);
          });
          that.prodatapoll.event._addEvent('projectdata.taskinput', function (value) {
            that.gettask(value);
          });
          that.prodatapoll.event._addEvent('prodata.pagenumber', function (value) {
            that.resetPage = false;
            that.model.setData('proseriesdata', value.data);
          });
          that.prodatapoll.event._addEvent('prodata.pagesize', function (value) {
            that.resetPage = true;
            that.model.setData('proseriesdata', value.data);
          });
          that.getxlvalue('');
          that.model.setData('proseriesdata', { page: 1, pageSize: 10, assigned: false, needCache: true });
        }
      });
      this.model._event._addEvent('proseriesdata.change', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var json, res;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                json = _this4.model.getData('proseriesdata');

                json['projectId'] = _this4.projectId;
                json['needCache'] = true;
                _this4.app.loading.show();
                _context3.next = 6;
                return _this4.api.getproseries(json);

              case 6:
                res = _context3.sent;

                _this4.app.loading.hide();
                if (res.code == 0) {
                  if (_this4.resetPage) {
                    _this4.prodatapoll.setMain(res, true);
                  } else {
                    _this4.prodatapoll.setMain(res);
                  }
                }

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, _this4);
      })));
      this.model._event._addEvent('querytask.change', function () {
        _this4.gettaskseries();
      });
      this.dom.find('.addseries .yyr').on('click', function () {
        _this4.prodatapoll = _this4.app.loadModal(_this4.prodata, { adv: true }, {
          type: 'view',
          candel: _this4.type === 'view' ? false : true
        });
        _this4.prodatapoll.event._addEvent('prodata.pagenumber', function (value) {
          _this4.resetPage = false;
          _this4.model.setData('querytask', value.data);
        });
        _this4.prodatapoll.event._addEvent('prodata.pagesize', function (value) {
          _this4.resetPage = true;
          _this4.model.setData('querytask', value.data);
        });
        _this4.prodatapoll.event._addEvent('hospital.input', function (value) {
          _this4.getxlvalue(value);
        });
        _this4.prodatapoll.event._addEvent('projectdata.search', function (value) {
          delete value.data.assigned;
          delete value.data.taskIdList;
          value.data.seriesSubmitCount = value.data.seriSubmitCount;
          //delete value.data.seriSubmitCount;
          value.data.taskId = _this4.taskId;
          value.data.needCache = true;
          _this4.resetPage = true;
          _this4.model.setData('querytask', value.data);
        });
        _this4.prodatapoll.event._addEvent('projectdata.deleteresult', function () {
          var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(value) {
            var json, res;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    if (!(value.totalnum == 0)) {
                      _context4.next = 4;
                      break;
                    }

                    _this4.app.alert.show({
                      title: ' ',
                      msg: '查询结果为空',
                      close: true,
                      footer: true
                    });
                    _context4.next = 15;
                    break;

                  case 4:
                    _this4.apidata.condition = null;
                    delete value.data.page;
                    delete value.data.pageSize;
                    json = {
                      taskId: _this4.taskId,
                      condition: value.data,
                      currentSearchReqId: value.currentSearchReqId
                    };

                    _this4.app.loading.show();
                    _context4.next = 11;
                    return _this4.api.searchresult_remove(json);

                  case 11:
                    res = _context4.sent;

                    _this4.app.loading.hide();
                    if (res.code == 0) {
                      _this4.task_series_count();
                    } else {
                      alert('清空失败');
                    }
                    _this4.model.setData('proseriesdata', { page: 1, pageSize: 10, assigned: false });

                  case 15:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, _this4);
          }));

          return function (_x3) {
            return _ref4.apply(this, arguments);
          };
        }());
        _this4.prodatapoll.event._addEvent('projectdata.exportresult', function (value) {
          if (value.totalnum == 0) {
            _this4.app.alert.show({
              title: ' ',
              msg: '查询结果为空，不支持导出。',
              close: true,
              footer: true
            });
          } else {
            delete value.data.assigned;
            delete value.data.taskIdList;
            delete value.data.page;
            delete value.data.pageSize;
            var json = {
              taskId: _this4.taskId,
              condition: value.data,
              currentSearchReqId: value.currentSearchReqId,
              operation: 'URL'
            };
            var url = _this4.app.domain1 + 'v1/task/series/searchresult/export?param=' + encodeURI(JSON.stringify(json) + '&accessToken=' + window.localStorage.accessToken);
            _this4.api.HttpRequest.downLoadFile(url);
          }
        });
        _this4.getxlvalue('');
        _this4.resetPage = true;
        _this4.model.setData('querytask', { page: 1, pageSize: 10 });
      });
      this.dom.find('.exportres .yyr').on('click', function () {
        _this4.queryImportedData(1, false, true);
        _this4.alglistModal = _this4.app.loadModal(_this4.alglist, { adv: true }, { data: _this4.listRes.data });
        _this4.alglistModal.event._addEvent('alglist.listaction', function () {
          var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(value) {
            var param;
            return regeneratorRuntime.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _context5.t0 = value.classname;
                    _context5.next = _context5.t0 === 'delete' ? 3 : _context5.t0 === 'viewfail' ? 4 : 7;
                    break;

                  case 3:
                    return _context5.abrupt("break", 7);

                  case 4:
                    param = encodeURI(JSON.stringify({ resourceId: value.id.split(',')[1] }));

                    _this4.api.HttpRequest.downLoadFile(_this4.app.domain1 + "v1/base/fileResource/download?param=" + param + "&&accessToken=" + window.localStorage.accessToken);
                    return _context5.abrupt("break", 7);

                  case 7:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, _this4);
          }));

          return function (_x4) {
            return _ref5.apply(this, arguments);
          };
        }());
        _this4.alglistModal.event._addEvent('alglist.pagenumber', function () {
          var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(value) {
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    _this4.queryImportedData(value, true, false);

                  case 1:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, _this4);
          }));

          return function (_x5) {
            return _ref6.apply(this, arguments);
          };
        }());
      });
      this.dom.find('.donetask').on('click', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
        var res;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if (!(_this4.projectStatus == 2)) {
                  _context7.next = 7;
                  break;
                }

                _context7.next = 3;
                return _this4.api.data_backwash_complete({ taskId: _this4.taskId });

              case 3:
                res = _context7.sent;

                if (res.code == 0) {
                  _this4.app.changePage('backflowtask', { type: 'fs' });
                } else {
                  _this4.app.alert.show({
                    title: ' ',
                    msg: res.msg,
                    close: true,
                    footer: true
                  });
                }
                _context7.next = 8;
                break;

              case 7:
                _this4.app.alert.show({
                  title: ' ',
                  msg: '请先开启项目',
                  close: true
                });

              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, _this4);
      })));
      this.dom.find('.choosePart .radio-box').on('click', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
        var _this5 = this;

        var dom, res;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                dom = ES.selctorDoc(this);

                if (!dom.hasClass('choose')) {
                  _context9.next = 5;
                  break;
                }

                that.app.alert.show({
                  title: '',
                  template: '<span style="font-size: 18px;margin-left:20px;">确认取消部分标注吗</span>',
                  sure: function () {
                    var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                      var res;
                      return regeneratorRuntime.wrap(function _callee8$(_context8) {
                        while (1) {
                          switch (_context8.prev = _context8.next) {
                            case 0:
                              dom.removeClass('choose');
                              that.dom.find('.exportArea').addClass('hide');
                              _context8.next = 4;
                              return that.api.task_portionAnno({ taskId: that.taskId * 1, portionAnno: false });

                            case 4:
                              res = _context8.sent;

                              if (res.code == 0) {} else {
                                alert('更新失败');
                              }

                            case 6:
                            case "end":
                              return _context8.stop();
                          }
                        }
                      }, _callee8, _this5);
                    }));

                    function sure() {
                      return _ref9.apply(this, arguments);
                    }

                    return sure;
                  }(),
                  close: true
                });
                _context9.next = 11;
                break;

              case 5:
                dom.addClass('choose');
                that.dom.find('.exportArea').removeClass('hide');
                _context9.next = 9;
                return that.api.task_portionAnno({ taskId: that.taskId * 1, portionAnno: true });

              case 9:
                res = _context9.sent;

                if (res.code == 0) {} else {
                  alert('更新失败');
                }

              case 11:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      })));
      this.dom.find('.choosePart .export').on('click', function () {
        _this4.exportData = _this4.app.loadModal(_this4.exportdata, { adv: true }, {});
        _this4.exportData.event._addEvent('uploadalgdata.upload', function (value) {
          if (_this4.seriesCount <= 0) {
            that.app.alert.show({
              title: '',
              template: '<span style="font-size: 18px;margin-left:20px;">请先引入影像文件</span>',
              sure: false,
              close: true,
              footer: true
            });
            return;
          }
          var filePath = ES.selctorDoc("#file1").val();
          var fileType = Tool.getFileType(filePath);
          if ('xlsx' !== fileType && 'xls' !== fileType) {
            ES.selctorDoc("#filechoose").val("");
            _this4.app.alert.show({
              title: '',
              template: '<span style="font-size: 18px;margin-left:20px;">格式错误，上传失败。</span>',
              close: false,
              sure: function sure() {
                _this4.app.alert.hide();
              }
            });
          } else {
            _this4.app.loading.show();
            $.ajaxFileUpload({
              url: '/aaa/v1/task/series/import/needAnno', // that.app.domain+'/ccc/user/import',
              secureuri: false,
              dataType: "JSON",
              async: false,
              data: {
                taskId: _this4.taskId * 1,
                accessToken: window.localStorage.accessToken
              },
              type: 'post',
              fileElementId: 'file1',
              success: function success(data, status, e) {
                _this4.app.loading.hide();
                var jsonArr = JSON.parse(data.match(/{.+}/g)[0]);
                that.exportData.close();
                if (jsonArr.code == 0) {
                  _this4.app.alert.show({
                    title: '',
                    template: '<span style="font-size: 18px;margin-left:20px;">成功导入' + jsonArr.data.successCount + '条序列，有' + jsonArr.data.errorCount + '条序列未被匹配到</span>',
                    sure: false,
                    close: true,
                    footer: true
                  });
                  _this4.event._dispatch('projectdata.datachange');
                } else {
                  var msg = jsonArr.code == -1 ? '繁忙' : jsonArr.msg;
                  _this4.app.alert.show({
                    title: '',
                    template: '<span style="font-size: 18px;margin-left:20px;">' + msg + '</span>',
                    sure: false,
                    close: true,
                    footer: true
                  });
                }
                _this4.close();
                _this4.dom.find('.file').remove();
                _this4.dom.find('.btnarea').append('<input class="file" type="file" id="file" name="file"/>');
                // that.bindchangefile();
              }
            });
          }
        });
      });
      var config = {
        icon: {
          "seriesTotalCount": { name: '<span data-i18n="age" data-name="年龄">总序列数</span>', type: 'text', code: 'checkid', w: '20%', ww: '20%', n: "40" },
          "successCount": { name: '<span data-i18n="age" data-name="年龄">匹配序列数</span>', type: 'text', code: 'checkid', w: '20%', ww: '20%' },
          "errorCount": { name: '<span data-i18n="age" data-name="年龄">未匹配序列数</span>', type: 'text', code: 'pid', w: '20%', ww: '20%' },
          "importTime": { name: '<span data-i18n="age" data-name="年龄">导入时间</span>', type: 'text', code: 'pname', w: '20%', ww: '20%' },
          "action": { name: '<span data-i18n="age" data-name="年龄">操作</span>', type: 'action', code: 'pname', w: '20%', ww: '20%' }
        },
        type: 'center',
        tablewidth: 800,
        operation: {
          export: { dis: 'inline', link: 'noLink', content: '导出' }
        }
      };
      this.dom.find('.choosePart .viewexported').on('click', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
        var res;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _this4.listShow = _this4.app.loadModal(_this4.listshow, { adv: true }, { headerconfig: config, title: '查看指定序列' });
                _context12.next = 3;
                return _this4.api.task_series_import_infoList({ taskId: that.taskId, page: 1, pageSize: 10 });

              case 3:
                res = _context12.sent;

                _this4.listShow.setMain(res, true);
                _this4.listShow.event._addEvent('listshow.change', function () {
                  var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(value) {
                    var res;
                    return regeneratorRuntime.wrap(function _callee10$(_context10) {
                      while (1) {
                        switch (_context10.prev = _context10.next) {
                          case 0:
                            _context10.next = 2;
                            return _this4.api.task_series_import_infoList({ taskId: that.taskId, page: value.page, pageSize: value.pageSize });

                          case 2:
                            res = _context10.sent;

                            _this4.listShow.setMain(res, value.refreshPage);

                          case 4:
                          case "end":
                            return _context10.stop();
                        }
                      }
                    }, _callee10, _this4);
                  }));

                  return function (_x6) {
                    return _ref11.apply(this, arguments);
                  };
                }());
                _this4.listShow.event._addEvent('listshow.action', function () {
                  var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(value) {
                    return regeneratorRuntime.wrap(function _callee11$(_context11) {
                      while (1) {
                        switch (_context11.prev = _context11.next) {
                          case 0:
                            console.log(value, 'value');
                            that.api.HttpRequest.downLoadFile(that.app.domain1 + "v1/task/series/import/infoList/export?id=" + value.id + "&accessToken=" + window.localStorage.accessToken);

                          case 2:
                          case "end":
                            return _context11.stop();
                        }
                      }
                    }, _callee11, _this4);
                  }));

                  return function (_x7) {
                    return _ref12.apply(this, arguments);
                  };
                }());

              case 7:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, _this4);
      })));
      if (this.type == 'view') {
        this.dom.find('.yrdata').addClass('hide');
        this.dom.find('.exportArea .export').addClass('hide');
        this.dom.find('.choosePart .radio-box').off('click');
      }
    }
  }, {
    key: "choosePerson",
    value: function choosePerson(data) {
      var _this6 = this;

      var config = [{ name: 'importUserId', type: 'dropdown', title: '选择医生', value: '', 'check': 'empty', remark: '', data: this.userList }];
      var choosePerson = this.app.loadModal(this.formsubmit, { adv: true }, { title: '选择医生', config: config });
      choosePerson.event._addEvent('formsubmit.submit', function (value) {
        _this6.importUserId = value.importUserId;
        choosePerson.close();
        _this6.upload(data);
      });
    }
  }, {
    key: "upload",
    value: function upload(value) {
      var _this7 = this;

      var that = this;
      var filePath = ES.selctorDoc("#file1").val();
      var fileType = that.getFileType(filePath);
      if ("csv" != fileType && 'xlsx' !== fileType && 'xls' !== fileType) {
        ES.selctorDoc("#filechoose").val("");
        that.app.alert.show({
          title: '',
          template: '<span style="font-size: 18px;margin-left:20px;">格式错误，上传失败。</span>',
          close: false,
          sure: function sure() {
            _this7.app.alert.hide();
          }
        });
      } else {
        that.app.loading.show();
        $.ajaxFileUpload({
          url: '/aaa/v1/alg/sar/import', // that.app.domain+'/ccc/user/import',
          secureuri: false,
          dataType: "JSON",
          async: false,
          data: {
            taskId: JSON.parse(that.taskId),
            type: value.data.type,
            accessToken: window.localStorage.accessToken,
            transferNii: value.data.transferNii ? 1 : 0,
            toolType: value.data.toolType ? value.data.toolType.split(',')[1] : '',
            toolId: value.data.toolType ? value.data.toolType.split(',')[0] : '',
            importUserId: this.importUserId,
            dataType: value.data.dataType ? value.data.dataType : ''
          },
          type: 'post',
          fileElementId: 'file1',
          success: function success(data, status, e) {
            that.app.loading.hide();
            var jsonArr = JSON.parse(data.match(/{.+}/g)[0]);
            that.uploadalg.close();
            if (jsonArr.code == 0) {
              // that.listInfo()
              // that.app.alert.show({
              //   title: '',
              //   template: '<span style="font-size: 18px;margin-left:20px;">成功导入' + jsonArr.data.successCount + '条，失败' + jsonArr.data.errorCount + '条</span>',
              //   sure: false,
              //   close: true,
              //   footer: true
              // })
              that.queryImportedData();
            } else {
              var msg = jsonArr.code == -1 ? '繁忙' : jsonArr.msg;
              that.app.alert.show({
                title: '',
                template: '<span style="font-size: 18px;margin-left:20px;">' + msg + '</span>',
                sure: false,
                close: true,
                footer: true
              });
            }
            that.close();
            that.dom.find('.file').remove();
            that.dom.find('.btnarea').append('<input class="file" type="file" id="file" name="file"/>');
            // that.bindchangefile();
          }
        });
      }
    }
  }, {
    key: "taskDetail",
    value: function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
        var res;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return this.api.taskDetail({ id: parseInt(this.app.parpam.taskid) });

              case 2:
                res = _context13.sent;

                if (res.code == 0) {
                  if (res.data.status !== 1) {
                    this.dom.find('.exportres .yrdata').addClass('hide');
                    this.dom.find('.donetask').addClass('hide');
                  }
                  if (res.data.portionAnno) {
                    this.dom.find('.choosePart .radio-box').addClass('choose');
                    this.dom.find('.exportArea').removeClass('hide');
                  }
                  if (!res.data.studyAnno) {
                    this.dom.find('.choosePart').addClass('hide');
                  }
                  this.projectStatus = res.data.projectStatus;
                }
                this.queryImportedData();

              case 5:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function taskDetail() {
        return _ref13.apply(this, arguments);
      }

      return taskDetail;
    }()
  }, {
    key: "queryImportedData",
    value: function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
        var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var setList = arguments[1];
        var resetPage = arguments[2];
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return this.api.get_data_backwash_result_list({ taskId: this.taskId, page: page, pageSize: 10 });

              case 2:
                this.listRes = _context14.sent;

                if (this.listRes.code == 0) {
                  if (this.listRes.data.list.length > 0) {
                    this.dom.find('.exportres .yyrarea').removeClass('hide');
                  } else {
                    this.dom.find('.exportres .yyrarea').addClass('hide');
                  }
                  if (setList) {
                    this.alglistModal.setList(this.listRes.data, resetPage);
                  }
                }

              case 4:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function queryImportedData() {
        return _ref14.apply(this, arguments);
      }

      return queryImportedData;
    }()
  }, {
    key: "user_searchAlgUser",
    value: function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
        var res;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                this.userList = [];
                _context15.next = 3;
                return this.api.user_searchAlgUser({});

              case 3:
                res = _context15.sent;

                if (res.code == 0) {
                  this.userList = res.data.map(function (v) {
                    return {
                      val: v.name,
                      idx: v.id
                    };
                  });
                }

              case 5:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function user_searchAlgUser() {
        return _ref15.apply(this, arguments);
      }

      return user_searchAlgUser;
    }()
  }, {
    key: "alg_sar_list_tool",
    value: function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
        var _this8 = this;

        var json, res;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                json = {
                  projectId: this.projectId
                };

                this.toolList = [];
                _context16.next = 4;
                return this.api.alg_sar_list_tool(json);

              case 4:
                res = _context16.sent;

                if (res.code == 0) {
                  res.data.forEach(function (val) {
                    _this8.toolList.push({ val: val.type, idx: val.id + ',' + val.type });
                  });
                }

              case 6:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function alg_sar_list_tool() {
        return _ref16.apply(this, arguments);
      }

      return alg_sar_list_tool;
    }()
  }, {
    key: "gettaskseries",
    value: function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
        var json, res;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                json = this.model.getData('querytask');

                json.taskId = parseInt(this.taskId);
                this.app.loading.show();
                _context17.next = 5;
                return this.api.querytaskseries(json);

              case 5:
                res = _context17.sent;

                this.app.loading.hide();
                if (res.code == 0) {
                  if (this.resetPage) {
                    this.prodatapoll.setMain(res, true);
                  } else {
                    this.prodatapoll.setMain(res);
                  }
                }

              case 8:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function gettaskseries() {
        return _ref17.apply(this, arguments);
      }

      return gettaskseries;
    }()
  }, {
    key: "task_series_count",
    value: function () {
      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
        var res;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                this.app.loading.show();
                _context18.next = 3;
                return this.api.task_series_count({ taskId: parseInt(this.taskId) });

              case 3:
                res = _context18.sent;

                this.app.loading.hide();
                if (res.code == 0) {
                  this.seriesCount = res.data.count;
                  if (res.data.count > 0) {
                    this.dom.find('.addseries .yyrarea').removeClass('hide');
                    this.dom.find('.addseries .yyr .num').html(res.data.count);
                  } else {
                    this.dom.find('.addseries .yyrarea').addClass('hide');
                  }
                }

              case 6:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function task_series_count() {
        return _ref18.apply(this, arguments);
      }

      return task_series_count;
    }()
  }, {
    key: "getxlvalue",
    value: function () {
      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(value) {
        var _this9 = this;

        var json1, res;
        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                json1 = { service: 'DR', method: '/v1/hospital/search', params: JSON.stringify({ code: value }) };

                if (this.prodatapoll.yymc) {
                  this.prodatapoll.yymc.loading(true);
                }
                _context19.next = 4;
                return this.api.hospitalName(json1);

              case 4:
                res = _context19.sent;

                this.prodatapoll.yymc.loading(false);
                this.hospital = [];
                res.data.list.forEach(function (val) {
                  var obj = {};
                  obj.idx = val['code'];
                  obj.val = val['code'];
                  _this9.hospital.push(obj);
                });
                this.prodatapoll.resetxlk(this.hospital);

              case 9:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function getxlvalue(_x9) {
        return _ref19.apply(this, arguments);
      }

      return getxlvalue;
    }()
  }, {
    key: "gettask",
    value: function () {
      var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(value) {
        var json, res;
        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                json = {
                  taskNameKey: value,
                  projectId: parseInt(this.projectId),
                  type: 3
                };
                _context20.next = 3;
                return this.api.task_like_query(json);

              case 3:
                res = _context20.sent;

                if (res.code == 0) {
                  this.prodatapoll.tasklist(res.data.list);
                }

              case 5:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function gettask(_x10) {
        return _ref20.apply(this, arguments);
      }

      return gettask;
    }()
  }, {
    key: "setData",
    value: function () {
      var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {
        var json, res;
        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                json = {
                  id: parseInt(this.taskId)
                };
                _context21.next = 3;
                return this.api.querytaskseries(json);

              case 3:
                res = _context21.sent;

                if (res.code == 0) {}
                this.model.setData('querytask', this.model.getData('querytask'));

              case 6:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function setData() {
        return _ref21.apply(this, arguments);
      }

      return setData;
    }()
  }, {
    key: "getFileType",
    value: function getFileType(filePath) {
      var startIndex = filePath.lastIndexOf(".");
      if (startIndex != -1) return filePath.substring(startIndex + 1, filePath.length).toLowerCase();else return "";
    }
  }, {
    key: "resize",
    value: function resize() {
      var ch = ES.selctorDoc(window).box().clientHeight - 100;
      var cw = ES.selctorDoc(window).box().clientWidth - 40;
      ES.selctorDoc('.createtask').css({ 'height': ch, 'width': cw });
      this.initscroll('createtask');
    }
  }, {
    key: "initscroll",
    value: function initscroll(val) {
      if (this.myScroll) {
        this.myScroll.refresh();
        return;
      }
      var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
      ES.selctorDoc('.' + val).attr('id', rid);
      this.myScroll = new IScroll('#' + rid, {
        scrollbars: true,
        mouseWheel: true,
        scrollX: true,
        interactiveScrollbars: true,
        hideScrollbar: false,
        vScrollbar: true,
        shrinkScrollbars: 'scale',
        fadeScrollbars: false,
        disableMouse: true,
        disablePointer: true
      });
    }
  }]);

  return createbackflowtask2;
}(Interstellar.pagesBase);

module.exports = createbackflowtask2;

/***/ }),

/***/ 487:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var urlDict = {
  get_data_backwash_result_list: '/alg/sar/get_data_backwash_result_list/search',
  data_backwash_complete: '/alg/sar/data_backwash_complete',
  alg_sar_list_tool: '/alg/sar/list_tool',
  taskDetail: '/task/read',
  user_searchAlgUser: '/user/searchAlgUser',
  updateseries: '/task/series/update',
  searchresult_remove: '/task/series/searchresult/remove',
  projectdetail: '/project/basic/read',
  getproseries: '/project/series/search',
  querytaskseries: '/task/series/search',
  hospitalName: '/sys/transfer',
  task_search: '/task/search',
  task_like_query: '/task/like/query',
  task_series_count: '/task/series/count',
  task_portionAnno: '/task/portionAnno',
  task_series_import_infoList: '/task/series/import/infoList',
  task_read: '/task/read'
};
var api = {
  get_data_backwash_result_list: function get_data_backwash_result_list(value) {
    return this.HttpRequest.POST(urlDict.get_data_backwash_result_list, value);
  },
  data_backwash_complete: function data_backwash_complete(value) {
    return this.HttpRequest.POST(urlDict.data_backwash_complete, value);
  },
  alg_sar_list_tool: function alg_sar_list_tool(value) {
    return this.HttpRequest.POST(urlDict.alg_sar_list_tool, value);
  },
  taskDetail: function taskDetail(value) {
    return this.HttpRequest.POST(urlDict.taskDetail, value);
  },
  user_searchAlgUser: function user_searchAlgUser(value) {
    return this.HttpRequest.POST(urlDict.user_searchAlgUser, value);
  },
  updateseries: function updateseries(value) {
    return this.HttpRequest.POST(urlDict.updateseries, value);
  },
  searchresult_remove: function searchresult_remove(value) {
    return this.HttpRequest.POST(urlDict.searchresult_remove, value);
  },
  projectdetail: function projectdetail(value) {
    return this.HttpRequest.POST(urlDict.projectdetail, value);
  },
  getproseries: function getproseries(value) {
    return this.HttpRequest.POST(urlDict.getproseries, value);
  },
  querytaskseries: function querytaskseries(value) {
    return this.HttpRequest.POST(urlDict.querytaskseries, value);
  },
  hospitalName: function hospitalName(value) {
    return this.HttpRequest.POST(urlDict.hospitalName, value);
  },
  task_search: function task_search(value) {
    return this.HttpRequest.POST(urlDict.task_search, value);
  },
  task_like_query: function task_like_query(value) {
    return this.HttpRequest.POST(urlDict.task_like_query, value);
  },
  task_series_count: function task_series_count(value) {
    return this.HttpRequest.POST(urlDict.task_series_count, value);
  },
  task_portionAnno: function task_portionAnno(value) {
    return this.HttpRequest.POST(urlDict.task_portionAnno, value);
  },
  task_series_import_infoList: function task_series_import_infoList(value) {
    return this.HttpRequest.POST(urlDict.task_series_import_infoList, value);
  },
  task_read: function task_read(value) {
    return this.HttpRequest.POST(urlDict.task_read, value);
  }
};
module.exports = api;

/***/ }),

/***/ 488:
/***/ (function(module, exports) {

module.exports = "<div class=createtask2> <div class=btnline> <div class=addseries> <a class=\"biaozhubtn yrdata\">点击引入影像数据</a> <div class=\"yyrarea hide\"> <a class=yyr>已引入<label class=num></label>个影像文件</a> </div> </div> <div class=exportres> <a class=\"biaozhubtn yrdata\">点击导入数据</a> <div class=\"yyrarea hide\"> <a class=yyr>点击查看导入结果</a> </div> </div> <a class=\"biaozhubtn donetask\">完成任务</a> </div> <div class=choosePart> <i class=radio-box></i>只允许部分序列进行标注 <div class=\"exportArea hide\"> <a class=\"biaozhubtn export\">导入指定序列</a> <a class=viewexported>查看已导入序列</a> </div> </div> </div> ";

/***/ }),

/***/ 761:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(762);

var addpart = function (_Interstellar$modalBa) {
    _inherits(addpart, _Interstellar$modalBa);

    function addpart(app, dom, value, addMode) {
        _classCallCheck(this, addpart);

        var _this = _possibleConstructorReturn(this, (addpart.__proto__ || Object.getPrototypeOf(addpart)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(764);
        _this.name = 'addpart';
        _this.apidata = {};
        return _this;
    }

    _createClass(addpart, [{
        key: 'complete',
        value: function complete() {
            var that = this;
            this.initView();
            if (that.api.title) {
                that.dom.find('.modal-title').html(that.api.title);
            }
        }
    }, {
        key: 'initView',
        value: function initView() {
            var that = this;
            that.dom.find('.inputBox').on('change', function () {
                that.apidata[ES.selctorDoc(this).attr('api')] = ES.selctorDoc(this).val();
                console.log(that.apidata, 'that.apidata');
            });
            this.dom.find('.icon-guanbi').on('click', function () {
                that.close();
            });
            this.dom.find('.btn-cancel').on('click', function () {
                that.close();
            });
            this.dom.find('.btn-confirm').on('click', function () {
                that.dom.find('.tips').css({ color: '#666' });
                that.dom.find('.inputLine').dom.forEach(function (val, idx) {
                    val.find('.' + val.attr('redlabel')).removeClass('redborder');
                    val.find('.required').remove();
                    if (Tool.checkForm(ES.selctorDoc(val).dom, 'red') !== '') {
                        val.find('.' + val.attr('redlabel')).addClass('redborder');
                        val.find('.' + val.attr('redlabel')).after('<span class="required">' + Tool.checkForm(ES.selctorDoc(val).dom, 'red') + '</span>');
                    }
                });
                if (that.dom.find('.redborder').dom) {
                    return false;
                } else {
                    console.log(that.apidata.number, that.api.total, 'that.api.total');
                    if (that.apidata.number > that.api.total) {
                        that.dom.find('.tips').css({ color: 'red' });
                        return false;
                    }
                    that.event._dispatch('addpart.submit', that.apidata);
                }
            });
        }
    }]);

    return addpart;
}(Interstellar.modalBase);
//原型链一定要有的


module.exports = addpart;

/***/ }),

/***/ 762:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(763);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./addpart.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./addpart.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 763:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".addpart {\n  margin-left: -250px;\n  width: 500px;\n  height: 300px;\n  font-size: 16px;\n}\n.addpart .modal-header {\n  padding: 40px 0 40px 30px;\n}\n.addpart .modal-header .modal-title {\n  font-family: MicrosoftYaHei;\n  font-weight: bold;\n  font-size: 18px;\n  color: #333333;\n  letter-spacing: 0;\n}\n.addpart .modal-header i {\n  font-size: 15px;\n  position: absolute;\n  right: 20px;\n  top: 20px;\n  cursor: pointer;\n}\n.addpart .modal-body {\n  padding: 0px !important;\n  margin: 0 30px;\n}\n.addpart .modal-body span {\n  margin-left: 0px;\n}\n.addpart .modal-body .inputLine {\n  position: relative;\n  height: 70px;\n}\n.addpart .modal-body .inputLine > div {\n  display: inline-block;\n}\n.addpart .modal-body .inputLine .confirm {\n  margin-right: 0;\n}\n.addpart .modal-body .inputLine .inputBox {\n  width: 305px;\n  height: 38px;\n  line-height: 38px;\n  border: 1px solid #E8E8E8;\n  border-radius: 4px;\n  outline: none;\n  padding-left: 5px;\n}\n.addpart .modal-body .inputLine .names {\n  font-family: \"MicrosoftYaHei\";\n  font-size: 14px;\n  color: #333333;\n  letter-spacing: 0;\n  margin-right: 17px;\n  width: 100px;\n}\n.addpart .modal-body .inputLine .tips {\n  margin-left: 123px;\n  font-size: 14px;\n  margin-top: 8px;\n}\n.addpart .modal-body .inputLine .forget {\n  color: #448E97;\n}\n.addpart .modal-body .inputLine .errorMessage {\n  color: red;\n}\n.addpart .modal-footer {\n  margin: 40px 20px 0 0;\n}\n.addpart .btn:hover {\n  background: #1F474C !important;\n  color: #fff;\n  border-color: #1F474C !important;\n}\n.addpart .required {\n  position: relative;\n  margin-left: 120px!important;\n}\n", ""]);

// exports


/***/ }),

/***/ 764:
/***/ (function(module, exports) {

module.exports = "<div class=\"modal addpart\"> <div class=modal-header> <i class=\"iconfont icon-guanbi\"></i> </div> <div class=modal-body> <div class=inputLine redlabel=inputBox> <span class=names>请填写序列数量</span> <input type=text class=inputBox check=empty|int api=number /> <span class=tips>该数量必须小于等于查询结果数量</span> </div> </div> <div class=modal-footer> <a class=\"btn btn-confirm\" data-i18n=qd data-name=继续添加>确认数量添加</a> <a class=\"btn btn-cancel\" data-i18n=qx data-name=保存>取消</a> </div> </div>";

/***/ }),

/***/ 779:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(780);
// var html = require('./tpl.html')
//type:custom   createprothree页面查看序列列表弹窗
//type:add      createtask2页面添加序列弹窗
//type:view     createtask2页面查看序列弹窗

var projectdata = function (_Interstellar$modalBa) {
    _inherits(projectdata, _Interstellar$modalBa);

    function projectdata(app, dom, value, addMode) {
        _classCallCheck(this, projectdata);

        var _this = _possibleConstructorReturn(this, (projectdata.__proto__ || Object.getPrototypeOf(projectdata)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(782);
        _this.name = 'biaozhulist';
        _this.flag = true;
        _this.code = '';
        return _this;
    }

    _createClass(projectdata, [{
        key: 'complete',
        value: function complete() {
            var that = this;
            that.apidata = {
                hospitalCode: '',
                studyDateBegin: '',
                studyDateEnd: '',
                assigned: '',
                taskIdList: [],
                page: 1,
                pageSize: 10
            };
            that.finalquery = {};
            //this.bodypart=[{idx:'LUNG',val:'肺部'},{idx:'RIB',val:'肋骨'},{idx:'KNEE_JOINT',val:'膝关节'},{idx:'COXA_JOINT',val:'髋关节'},{idx:'HAND',val:'手'},{idx:'FOOT',val:'足'},{idx:'SKULL_BRAIN',val:'颅脑'},{idx:'HEART',val:'心脏'},{val:'眼底',idx:'EYEGROUND'}]
            this.bodypart = Tool.configxlkformat(that.app.constmap['BODY_PART']);
            that.totalnum = 0;
            switch (that.api.type) {
                case 'view':
                    that.dom.find('.isselected').addClass('hide');
                    that.dom.find('.usecondition').addClass('hide');
                    that.dom.find('.btnarea').addClass('hide');
                    that.dom.find('.modelArea').addClass('hide');
                    that.dom.find('.title').html('已引入项目序列池');
                    that.setTitle('view');
                    that.dom.find('.viewdelete').removeClass('hide');
                    if (that.api.candel == true) {
                        that.dom.find('.deleteresult').removeClass('hide');
                    }
                    that.dom.find('.deleteresult').on('click', function () {
                        that.app.alert.show({
                            title: ' ',
                            msg: '确认要删除序列？',
                            close: true,
                            sure: function sure() {
                                that.event._dispatch('projectdata.deleteresult', { data: that.apidata, total: that.totalnum, currentSearchReqId: that.currentSearchReqId });
                                that.close();
                            }
                        });
                    });
                    this.dom.find('.exportresult').on('click', function () {
                        that.event._dispatch('projectdata.exportresult', { data: that.apidata, total: that.totalnum, currentSearchReqId: that.currentSearchReqId });
                    });
                    break;
                case 'add':
                    that.firstSelect = { val: '否', idx: '0' };
                    that.apidata['assigned'] = false;
                    that.setTitle('add');
                    break;
                case 'custom':
                    that.setTitle('custom');
                    that.dom.find('.btnarea').html(that.api.html);
                    that.dom.find('.modelArea').addClass('hide');
                    if (that.api.del == 'view') {
                        that.dom.find('.deleteres').addClass('hide');
                    }
                    that.dom.find('.deleteres').on('click', function () {
                        that.event._dispatch('projectdata.deleteres', { condition: that.finalquery, currentSearchReqId: that.currentSearchReqId });
                    });
                    that.dom.find('.exportname').on('click', function () {
                        that.event._dispatch('projectdata.export', { condition: that.finalquery, currentSearchReqId: that.currentSearchReqId });
                    });
                    break;
            }
            this.dom.find('.icon-guanbi').on('click', function () {
                that.close();
            });
            this.dom.find('.addcustom').on('click', function () {
                that.exportData = {
                    url: '/aaa/v1/task/series/import',
                    data: {
                        taskId: that.api.id,
                        accessToken: window.localStorage.accessToken
                    }
                };
                that.dom.find('.file').click();
            });
            this.dom.find('.addImageID').on('click', function () {
                that.exportData = {
                    url: '/aaa/v1/task/series/import/seriesImageID',
                    data: {
                        taskId: that.api.id,
                        accessToken: window.localStorage.accessToken
                    }
                };
                that.dom.find('.file').click();
            });
            this.dom.find('.inputBox').on('change', function () {
                that.apidata['seriSubmitCount'] = ES.selctorDoc(this).val();
            });
            this.dom.find('.downmodel').on('click', function () {
                that.app.loading.show();
                setTimeout(function () {
                    that.app.loading.hide();
                }, 1000);
                var a = document.createElement("a");
                // var url = '/images/page/任务添加项目序列模板.xlsx';
                var url = ES.selctorDoc(this).attr('url');
                a.href = url;
                a.download = '模板.xlsx';
                a.click();
            });
            that.dom.find('.file').on('change', function () {
                console.log(that.api.id, 'that.api.id');
                var filePath = ES.selctorDoc("#file").val();
                var fileType = that.getFileType(filePath);
                if ("xls" != fileType && "xlsx" != fileType) {
                    ES.selctorDoc("#filechoose").val("");
                    that.app.alert.show({
                        title: '',
                        template: '<span style="font-size: 18px;margin-left:20px;">格式错误，上传失败。</span>',
                        close: false,
                        sure: function sure() {
                            that.app.alert.hide();
                        }
                    });
                } else {
                    that.app.loading.show();
                    $.ajaxFileUpload({
                        url: that.exportData.url, // that.app.domain+'/ccc/user/import',
                        secureuri: false,
                        dataType: "JSON",
                        async: false,
                        data: that.exportData.data,
                        type: 'post',
                        fileElementId: 'file',
                        success: function success(data, status, e) {
                            that.app.loading.hide();
                            var jsonArr = JSON.parse(data.match(/{.+}/g)[0]);
                            if (jsonArr.code == 0) {
                                console.log('success');
                                that.app.alert.show({
                                    title: '',
                                    template: '<span style="font-size: 18px;margin-left:20px;">成功导入' + jsonArr.data.successCount + '条，' + jsonArr.data.errorCount + '条不在此项目影像数据中或未被识别或重复</span>',
                                    sure: false,
                                    close: true,
                                    footer: true
                                });
                                that.event._dispatch('projectdata.datachange');
                            } else {
                                that.app.alert.show({
                                    title: '',
                                    template: '<span style="font-size: 18px;margin-left:20px;">上传失败</span>',
                                    sure: false,
                                    close: true,
                                    footer: true
                                });
                            }
                            that.close();
                            that.dom.find('.file').remove();
                            that.dom.find('.btnarea').append('<input class="file" type="file" id="file" name="file"/>');
                            // that.bindchangefile();
                        }
                    });
                }
            });
            this.dom.find('.addall').on('click', function () {
                that.event._dispatch('projectdata.addall', { query: that.finalquery, total: that.totalnum, currentSearchReqId: that.currentSearchReqId });
            });
            this.dom.find('.addpartbtn').on('click', function () {
                var addpart = __webpack_require__(761);
                that.addpart1 = that.app.loadModal(addpart, { adv: true }, { total: that.totalnum });
                that.addpart1.event._addEvent('addpart.submit', function (value) {
                    that.addpart1.close();
                    that.event._dispatch('projectdata.addall', { query: that.finalquery, total: that.totalnum, randomAddNum: value.number, currentSearchReqId: that.currentSearchReqId });
                });
            });

            this.dom.find('.searchbtn').on('click', function () {
                console.log(that.apidata, 'that.apidata');
                if (that.apidata.seriSubmitCount != 0) {
                    if (that.apidata.compareSymbol && !that.apidata.seriSubmitCount) {
                        that.dom.find('.seriSubmitCount').css({ border: '1px solid red' });
                        that.dom.find('.seriSubmitCount').after('<span class="required">请输入大于等于0的整数</span>');
                        return;
                    } else if (!/^[0-9]\d*$/.test(that.apidata.seriSubmitCount) && that.apidata.seriSubmitCount) {
                        that.dom.find('.seriSubmitCount').css({ border: '1px solid red' });
                        that.dom.find('.seriSubmitCount').after('<span class="required">请输入大于等于0的整数</span>');
                        return;
                    }
                }
                that.dom.find('.seriSubmitCount').css({ border: '1px solid #e8e8e8' });
                that.dom.find('.required').remove();
                that.apidata.page = 1;
                if (that.apidata.seriSubmitCount != 0) {
                    that.apidata.seriSubmitCount = that.apidata.seriSubmitCount ? parseInt(that.apidata.seriSubmitCount) : '';
                } else {
                    that.apidata.seriSubmitCount = 0;
                }
                that.event._dispatch('projectdata.search', { data: that.apidata });
            });
            this.render();
        }
    }, {
        key: 'render',
        value: function render() {
            var that = this;
            __webpack_require__.e/* require.ensure */(52/* duplicate */).then((function () {
                var dropdown = __webpack_require__(638);
                that.yymc = that.app.loadModule(dropdown, that.dom.find('.yymc'), {
                    className: 'xlk',
                    firstSelect: {
                        val: '医院名称',
                        idx: ''
                    },
                    data: [],
                    input: true
                });
                that.yymc.event._addEvent('option.click', function (value) {
                    that.apidata['hospitalCode'] = value.idx;
                    console.log(that.apidata, 'apidata');
                });
                that.yymc.event._addEvent('drop.input', function (value) {
                    setTimeout(function () {
                        that.event._dispatch('hospital.input', value.data);
                    }, 1500);
                });
                that.yymc.event._addEvent('dropDown.clear', function (value) {
                    that.apidata['hospitalCode'] = '';
                    that.event._dispatch('hospital.input', '');
                });
                that.rwxq = that.app.loadModule(dropdown, that.dom.find('.rwxq'), {
                    className: 'xlk',
                    firstSelect: { val: '', idx: '' },
                    data: [{ val: '是', idx: '1' }, { val: '否', idx: '0' }]
                });
                that.rwxq.event._addEvent('option.click', function (value) {
                    that.apidata['assigned'] = value.idx == 1 ? true : false;
                });
                that.rwxq.event._addEvent('dropDown.clear', function (value) {
                    that.apidata['assigned'] = '';
                });
                if (that.api.type === 'add') {
                    that.dom.find('.rwxq .option[data-idx="0"]').click();
                }
                that.compareSymbol = that.app.loadModule(dropdown, that.dom.find('.times'), {
                    className: 'kxlk',
                    firstSelect: { val: '', idx: '' },
                    data: [{ val: '大于', idx: '2' }, { val: '小于', idx: '3' }, { val: '等于', idx: '1' }]
                });
                that.compareSymbol.event._addEvent('option.click', function (value) {
                    that.apidata['compareSymbol'] = parseInt(value.idx);
                });
                that.compareSymbol.event._addEvent('dropDown.clear', function (value) {
                    that.apidata['compareSymbol'] = '';
                    that.apidata['seriSubmitCount'] = '';
                });
                that.exist = that.app.loadModule(dropdown, that.dom.find('.exist'), {
                    className: 'kxlk',
                    firstSelect: { val: '', idx: '' },
                    data: [{ val: '存在', idx: '1' }, { val: '不存在', idx: '0' }]
                });
                that.exist.event._addEvent('option.click', function (value) {
                    that.apidata['exist'] = value.idx == 1 ? true : false;
                });
                that.exist.event._addEvent('dropDown.clear', function (value) {
                    that.apidata['exist'] = '';
                });
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
            __webpack_require__.e/* require.ensure */(61).then((function () {
                var calendar = __webpack_require__(644);
                that.startTime = that.app.loadModule(calendar, that.dom.find('.timefilter'), { titleShow: false, defaultword: '查询检查时间段' });
                that.startTime.event._addEvent('times1.day', function (value) {
                    if (value.st) that.apidata.studyDateBegin = value.st + " 00:00:00";
                    if (value.et) that.apidata.studyDateEnd = value.et + " 23:59:59";
                    console.log(that.apidata);
                });
                that.startTime.event._addEvent('times.dele', function (value) {
                    if (value.dom.hasClass('day_left')) {
                        that.apidata.studyDateBegin = '';
                    } else {
                        that.apidata.studyDateEnd = '';
                    }
                    console.log(that.apidata);
                });
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
            __webpack_require__.e/* require.ensure */(57/* duplicate */).then((function () {
                var inputarea1 = __webpack_require__(751);
                that.inputarea = that.app.loadModule(inputarea1, that.dom.find('.usedtask'), {});
                that.inputarea.event._addEvent('inputarea.input', function (value) {
                    that.event._dispatch('projectdata.taskinput', value);
                });
                that.inputarea.event._addEvent('inputarea.createitem', function (value) {
                    that.apidata.taskIdList.push(parseInt(value));
                });
                that.inputarea.event._addEvent('inputarea.deleteitem', function (value) {
                    that.apidata.taskIdList = that.apidata.taskIdList.filter(function (item) {
                        return item !== parseInt(value);
                    });
                });
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
        }
    }, {
        key: 'tasklist',
        value: function tasklist(value) {
            var that = this;
            value.forEach(function (val, idx) {
                val.id = val.taskId;
                val.name = val.taskName;
            });
            that.inputarea.setlist(value);
        }
    }, {
        key: 'resetxlk',
        value: function resetxlk(value) {
            var that = this;
            that.yymc.renderHtml(value);
        }
        //判断文件类型

    }, {
        key: 'getFileType',
        value: function getFileType(filePath) {
            var startIndex = filePath.lastIndexOf(".");
            if (startIndex != -1) return filePath.substring(startIndex + 1, filePath.length).toLowerCase();else return "";
        }
    }, {
        key: 'setTitle',
        value: function setTitle(type) {
            var obj = {};
            var that = this;
            that.obj = {};
            switch (type) {
                case 'add':
                    that.obj['icon'] = {
                        "hospitalCode": { name: '<span>医院名称</span>', type: 'text', code: 'checkid', w: '12%', ww: '12%', n: "40" },
                        "bodyPart": { name: '<span>部位</span>', type: 'text', code: 'pid', w: '3%', ww: '3%' },
                        "modality": { name: '<span>检查机型</span>', type: 'text', code: 'pname', w: '3%', ww: '3%' },
                        "studyDate": { name: '<span>检查时间</span>', type: 'text', code: 'psex', w: '6%', ww: '6%' },
                        "studyInstanceUID": { name: '<span>检查号</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "seriesInstanceUID": { name: '<span>序列号</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "assigned": { name: '<span>是否曾被任务选取</span>', type: 'text', code: 'age', w: '6%', ww: '6%' },
                        "tasksubmit": { name: '<span style="line-height: 20px;">&nbsp;曾存在任务<br>（已提交次数：废片次数）</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "prosubmit": { name: '<span style="line-height: 20px;">项目下被提交次<br>数：废片次数</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "keyword": { name: '<span>关键字</span>', type: 'text', code: 'age', w: '12%', ww: '12%' },
                        "finding": { name: '<span>检查所见</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "conclusion": { name: '<span>诊断</span>', type: 'text', code: 'age', w: '10%', ww: '10%' }
                    };
                    break;
                case 'custom':
                    that.obj['icon'] = {
                        "hospitalCode": { name: '<span>医院名称</span>', type: 'text', code: 'checkid', w: '8%', ww: '8%', n: "40" },
                        "bodyPart": { name: '<span>部位</span>', type: 'text', code: 'pid', w: '4%', ww: '4%' },
                        "modality": { name: '<span>检查机型</span>', type: 'text', code: 'pname', w: '5%', ww: '5%' },
                        "studyDate": { name: '<span>检查时间</span>', type: 'text', code: 'psex', w: '6%', ww: '6%' },
                        "studyInstanceUID": { name: '<span>检查号</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "seriesInstanceUID": { name: '<span>序列号</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "patientAge": { name: '<span data-i18n="handler" data-name="状态">年龄</span>', type: 'text', code: 'handler', w: '3%', ww: '3%' },
                        "patientSex": { name: '<span data-i18n="action" data-name="操作">性别</span>', type: 'text', code: 'action', w: '3%', ww: '3%' },
                        "importDate": { name: '<span data-i18n="action" data-name="操作">上传时间</span>', type: 'text', code: 'action', w: '6%', ww: '6%' },
                        "tasksubmit": { name: '<span style="line-height: 20px;">&nbsp;曾存在任务<br>（已提交次数：废片次数）</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "prosubmit": { name: '<span style="line-height: 20px;">项目下被提交次<br>数：废片次数</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "assigned": { name: '<span>是否曾被任务选取</span>', type: 'text', code: 'age', w: '7%', ww: '7%' },
                        "keyword": { name: '<span>关键字</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "finding": { name: '<span>检查所见</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "conclusion": { name: '<span>诊断</span>', type: 'text', code: 'age', w: '8%', ww: '8%' }
                    };
                    break;
                case 'view':
                    that.obj['icon'] = {
                        "hospitalCode": { name: '<span>医院名称</span>', type: 'text', code: 'checkid', w: '12%', ww: '12%', n: "40" },
                        "bodyPart": { name: '<span>部位</span>', type: 'text', code: 'pid', w: '7%', ww: '7%' },
                        "modality": { name: '<span>检查机型</span>', type: 'text', code: 'pname', w: '7%', ww: '7%' },
                        "studyDate": { name: '<span>检查时间</span>', type: 'text', code: 'psex', w: '8%', ww: '8%' },
                        "studyInstanceUID": { name: '<span>检查号</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "seriesInstanceUID": { name: '<span>序列号</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "imageIdStr": { name: '<span>层数</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "prosubmit": { name: '<span style="line-height: 20px;">项目下被提交次<br>数：废片次数</span>', type: 'text', code: 'age', w: '6%', ww: '6%' },
                        "keyword": { name: '<span>关键字</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "finding": { name: '<span>检查所见</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "conclusion": { name: '<span>诊断</span>', type: 'text', code: 'age', w: '10%', ww: '10%' }
                    };
                    break;
            }
            that.obj['type'] = 'center';
            that.obj['minwidth'] = 1900;
            that.obj['tablewidth'] = ES.selctorDoc('.projectdata').box().clientWidth - 60;
            __webpack_require__.e/* require.ensure */(53/* duplicate */).then((function () {
                var cont_table = __webpack_require__(640);
                that.table = that.app.loadModule(cont_table, that.dom.find('.projecttable'), {
                    id: 'biaozhutable',
                    header: that.obj
                });
                that.table.event._addEvent('table.pagenumber', function (value) {
                    that.apidata.page = parseInt(value);
                    that.table.changenum(that.apidata.page);
                    that.event._dispatch('prodata.pagenumber', { data: that.apidata });
                });
                that.table.event._addEvent('table.pagesize', function (value) {
                    that.apidata.pageSize = value.num;
                    that.apidata.page = 1;
                    that.event._dispatch('prodata.pagesize', { data: that.apidata });
                });
                that.initscrollmenu();
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
        }
    }, {
        key: 'setMain',
        value: function setMain(value, bool) {
            var that = this;
            that.finalquery = that.apidata;
            that.currentSearchReqId = value.data.currentSearchReqId;
            var data2 = [];
            if (value.data.list && value.data.list.length > 0) {
                that.totalnum = value.data.total;
                value.data.list.forEach(function (val, idx) {
                    for (var i in val) {
                        val[i] = val[i] == null ? '' : val[i];
                    }
                    for (var _i in that.obj.icon) {
                        val[_i] = val[_i] ? val[_i] : '';
                    }
                    var prosub = 0;
                    var prodiscurd = 0;
                    that.bodypart.forEach(function (a, b) {
                        if (a.idx == val.bodyPart) {
                            val.bodyPart = a.val;
                        }
                    });
                    Tool.configxlkformat(that.app.constmap['MODALITY']).forEach(function (a, b) {
                        if (a.idx == val.modality) {
                            val.modality = a.val;
                        }
                    });
                    if (val.seriesAnnoStatusHistory) {
                        val.tasksubmit = '';
                        val.seriesAnnoStatusHistory.forEach(function (val1, idx) {
                            val.tasksubmit += val1.taskName + '(' + (val1.submitCount + val1.discardCount) + ':' + val1.discardCount + ')<br>';
                            prosub += val1.submitCount + val1.discardCount;
                            prodiscurd += val1.discardCount;
                        });
                        val.prosubmit = prosub + ':' + prodiscurd;
                    }
                    switch (val.patientSex) {
                        case 'M':
                            val.patientSex = '男';
                            break;
                        case 'F':
                            val.patientSex = '女';
                            break;
                        default:
                            val.patientSex = '';
                    }
                    if (val.createDate) val.createDate = Tool.time(val.createDate, 'yyyy-mm-dd');
                    if (val.importDate) val.importDate = Tool.time(val.importDate, 'yyyy-mm-dd');
                    if (val.studyDate) val.studyDate = Tool.time(val.studyDate, 'yyyy-mm-dd');
                    if (val.patientAge) val.patientAge = Math.floor(val.patientAge / 12);
                    val.assigned = val.assigned == false ? '否' : '是';
                    val.id = val.taskId;
                });
                that.table.setData(value.data.list);
                that.dom.find('.addall').removeClass('hide');
                that.dom.find('.addpartbtn').removeClass('hide');
            } else {
                that.totalnum = 0;
                that.table.noData();
                that.dom.find('.addall').addClass('hide');
                that.dom.find('.addpartbtn').addClass('hide');
            }
            if (bool) {
                that.table.getTotal(value.data.pages, 2, value.data.total);
            }
            that.initscroll_vertical();
        }
    }, {
        key: 'initscrollmenu',
        value: function initscrollmenu() {
            if (this.myScroll) {
                this.myScroll.refresh();
                return;
            }
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            this.dom.find('.maintable').attr('id', rid);
            this.myScroll = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                scrollX: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }, {
        key: 'initscroll_vertical',
        value: function initscroll_vertical() {
            if (this.myScroll1) {
                this.myScroll1.refresh();
                return;
            }
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            this.dom.find('.projectdata').attr('id', rid);
            this.myScroll1 = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }]);

    return projectdata;
}(Interstellar.modalBase);

//原型链一定要有的


module.exports = projectdata;

/***/ }),

/***/ 780:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(781);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./projectdata.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./projectdata.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 781:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".projectdata {\n  box-sizing: border-box;\n  background: #fff;\n  border-radius: 4px;\n  font-family: \"Microsoft YaHei\";\n  font-size: 16px;\n  width: 1000px;\n  min-height: 300px;\n  height: 600px;\n  margin-left: -500px;\n  margin-top: -300px;\n  position: relative;\n  overflow: hidden;\n}\n.projectdata .title {\n  font-size: 20px;\n}\n.projectdata .icon-guanbi {\n  position: absolute;\n  right: 20px;\n  top: 20px;\n  cursor: pointer;\n}\n.projectdata .filterarea {\n  margin: 10px 0 20px 20px;\n  position: relative;\n}\n.projectdata .filterarea > div {\n  display: inline-block;\n  position: relative;\n}\n.projectdata .filterarea .rwxq {\n  display: inline-block;\n}\n.projectdata .filterarea .showData {\n  width: 130px;\n  height: 30px;\n  line-height: 30px;\n  border-radius: 4px;\n  font-size: 12px;\n}\n.projectdata .filterarea .xlk {\n  width: 160px;\n  height: 30px;\n  line-height: 30px;\n  font-size: 12px;\n  margin: 0 10px;\n}\n.projectdata .filterarea .xlk input {\n  width: 93%;\n}\n.projectdata .filterarea .submittimes {\n  width: 600px;\n  margin-top: 10px;\n}\n.projectdata .filterarea .submittimes > div {\n  display: inline-block;\n}\n.projectdata .filterarea .submittimes > input {\n  border: 1px solid #e8e8e8;\n  border-radius: 4px;\n  height: 30px;\n}\n.projectdata .filterarea .usecondition {\n  margin-top: 10px;\n}\n.projectdata .filterarea .usecondition > div {\n  display: inline-block;\n}\n.projectdata .filterarea .usecondition .usedtask {\n  vertical-align: top;\n}\n.projectdata .projectmain {\n  padding: 30px 0 20px 10px;\n  font-size: 14px;\n}\n.projectdata .projectmain .searchbtn {\n  width: 100px;\n  height: 30px;\n  border: 1px solid #4c9fa9;\n  line-height: 30px;\n  color: #4c9fa9;\n  position: absolute;\n  top: 0;\n  right: 40px;\n}\n.projectdata .projectmain .bzmc {\n  border-radius: 4px;\n  width: 170px;\n  border: 1px solid #e8e8e8;\n  height: 30px;\n}\n.projectdata .projectmain .projecttable {\n  clear: both;\n  overflow: hidden;\n  position: relative;\n}\n.projectdata .projectmain > span {\n  font-size: 16px;\n}\n.projectdata .projectmain .btnarea {\n  height: 30px;\n  margin: 20px 0;\n  margin-right: 20px;\n  text-align: right;\n}\n.projectdata .projectmain .btnarea .biaozhubtn {\n  padding: 0 10px;\n  height: 30px;\n  line-height: 30px;\n  background: #4c9fa9;\n  color: #fff;\n  margin-right: 20px;\n}\n.projectdata .projectmain .btnarea .cancel {\n  background: #fff;\n  border: 1px solid #4c9fa9;\n  color: #4c9fa9;\n}\n.projectdata .projectmain .btnarea .file {\n  position: fixed;\n  left: 4000px;\n  top: 3000px;\n}\n.projectdata .projectmain .modelArea {\n  position: absolute;\n  right: 30px;\n}\n.projectdata .projectmain .modelArea .downmodel {\n  color: #4c9fa9;\n  text-decoration: underline;\n  margin-left: 20px;\n}\n.projectdata .projectmain .viewdelete {\n  text-align: right;\n  margin-right: 20px;\n}\n.projectdata .projectmain .viewdelete a {\n  height: 30px;\n  line-height: 30px;\n  background: #4c9fa9;\n  color: #fff;\n  padding: 0 20px;\n}\n.projectdata .w145 {\n  width: 145px;\n}\n.projectdata .kxlk {\n  width: 100px;\n  height: 30px;\n  line-height: 30px;\n}\n.projectdata .kxlk input {\n  width: 89% !important;\n}\n", ""]);

// exports


/***/ }),

/***/ 782:
/***/ (function(module, exports) {

module.exports = "<div class=\"modal projectdata\"> <div class=projectmain> <div class=title>项目序列池</div> <i class=\"iconfont icon-guanbi\"></i> <div class=filterarea> <div class=yymc></div> <div class=timefilter></div> <div class=isselected>是否曾被任务选取：<div class=rwxq></div></div> <br> <div class=submittimes> <span class=w145>项目下序列被提交次数</span> <div class=times></div> <input type=text class=\"seriSubmitCount inputBox\" api=seriSubmitCount /> </div> <br> <div class=usecondition> <span class=w145>序列使用情况</span> <div class=exist></div> <div class=usedtask></div> </div> <a class=\"searchbtn biaozhubtn\">查询</a> </div> <div class=\"viewdelete hide\"> <a class=\"biaozhubtn deleteresult hide\">一键删除查询结果中序列</a> <a class=\"biaozhubtn exportresult\">导出结果序列名</a> </div> <div class=projecttable> </div> <div class=btnarea> <a class=\"biaozhubtn addall\">一键添加查询结果</a> <a class=\"biaozhubtn addpartbtn\">从查询结果中选取部分</a> <a class=\"biaozhubtn addcustom\">序列号导入</a> <a class=\"biaozhubtn addImageID\">imageID导入</a> <input class=file type=file id=file name=file /> </div> <div class=modelArea> <a class=\"downmodel seriesDown\" url=/images/page/任务添加项目序列模板.xlsx>序列号导入模板</a> <a class=\"downmodel imageidDown\" url=/images/page/imageID.xlsx>imageID导入模板</a> </div> </div> </div> ";

/***/ }),

/***/ 783:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(784);

var formsubmit = function (_Interstellar$modalBa) {
  _inherits(formsubmit, _Interstellar$modalBa);

  function formsubmit(app, dom, value, addMode) {
    _classCallCheck(this, formsubmit);

    var _this = _possibleConstructorReturn(this, (formsubmit.__proto__ || Object.getPrototypeOf(formsubmit)).call(this, app, dom, value, addMode));

    _this.html = __webpack_require__(786);
    _this.name = 'formsubmit';
    _this.apidata = {};
    _this.allobj = {};
    return _this;
  }

  _createClass(formsubmit, [{
    key: 'complete',
    value: function complete() {
      var that = this;
      this.render();
      this.initView();
    }
  }, {
    key: 'render',
    value: function render() {
      var that = this;
      console.log(that.api.config);
      that.api.config.forEach(function (val, idx) {
        var html = '';
        switch (val.type) {
          case 'input':
            var inputtype = val.inputtype ? val.inputtype : 'text';
            html += '<div class="inputLine" redlabel="inputBox">\n' + '                <span class="names">' + val.title + '</span>\n' + '                <input type=' + inputtype + ' class="inputBox ' + val.name + '" check="' + val.check + '" api="' + val.name + '"/>' + '                <p class="remark">' + val.remark + '</p>' + '            </div>';
            that.dom.find('.modal-body').append(html);
            if (val.value) {
              that.dom.find('.' + val.name).val(val.value);
              that.apidata[val.name] = val.value;
            }
            break;
          case 'dropdown':
            html += '<div class="inputLine" redlabel="xlk">\n' + '                <span class="names">' + val.title + '</span>\n' + '                <div class="' + val.name + '" check="' + val.check + '"></div>' + '                <p class="remark">' + val.remark + '</p>' + '            </div>';
            that.dom.find('.modal-body').append(html);
            __webpack_require__.e/* require.ensure */(52/* duplicate */).then((function () {
              var dropdown = __webpack_require__(638);
              var temp = that.app.loadModule(dropdown, that.dom.find('.' + val.name), {
                className: 'xlk',
                firstSelect: { val: '', idx: '' },
                data: val.data,
                datatype: val.datatype
              });
              temp.event._addEvent('option.click', function (value) {
                console.log(that.apidata, 'that.apidata', value, val.name);
                that.apidata[val.name] = value.idx;
              });
              temp.event._addEvent('dropDown.clear', function (value) {
                that.apidata[val.name] = '';
              });
              that.allobj[val.name] = temp;
              if (val.value) {
                that.dom.find('.' + val.name + ' .option[data-idx="' + val.value + '"]').click();
              }
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
            break;
          case 'radio':
            var temp = '';
            val.data.forEach(function (item) {
              temp += '<div class="item" data-id="' + item.idx + '">\n' + '                <i class="radio-box"></i>\n' + '                <span>' + item.val + '</span>\n' + '            </div>';
            });
            html += '<div class="inputLine radioArea" redlabel="names" check="empty" title="">\n' + '                <span class="names">' + val.title + '</span>\n' + temp + '                <p class="remark">' + val.remark + '</p>' + '            </div>';
            that.dom.find('.modal-body').append(html);
            that.dom.find('.radioArea .radio-box').on('click', function () {
              ES.selctorDoc(this).parents('radioArea').find('.choose').removeClass('choose');
              ES.selctorDoc(this).addClass('choose');
              that.apidata[val.name] = ES.selctorDoc(this).parent().attr('data-id');
            });
            break;
        }
      });
      that.dom.find('.modal-title').html(that.api.title);
    }
  }, {
    key: 'initView',
    value: function initView() {
      var that = this;
      that.dom.find('.inputBox').on('change', function () {
        that.apidata[ES.selctorDoc(this).attr('api')] = ES.selctorDoc(this).val();
      });
      this.dom.find('.icon-guanbi').on('click', function () {
        that.close();
      });
      this.dom.find('.btn-cancel').on('click', function () {
        that.close();
      });
      this.dom.find('.btn-confirm').on('click', function () {
        that.dom.find('.tips').remove();
        that.dom.find('.inputLine').dom.forEach(function (val, idx) {
          val.find('.' + val.attr('redlabel')).removeClass('redborder');
          val.find('.required').remove();
          if (Tool.checkForm(ES.selctorDoc(val).dom, 'red') !== '') {
            val.find('.' + val.attr('redlabel')).addClass('redborder');
            val.find('.' + val.attr('redlabel')).after('<span class="required">' + Tool.checkForm(ES.selctorDoc(val).dom, 'red') + '</span>');
          }
        });
        if (that.dom.find('.redborder').dom) {
          return false;
        } else {
          that.event._dispatch('formsubmit.submit', that.apidata);
        }
      });
    }
  }, {
    key: 'showerror',
    value: function showerror(value) {
      var that = this;
      Object.keys(value).forEach(function (val) {
        that.dom.find('.' + val).after('<span class="tips">' + value[val] + '</span>');
      });
    }
  }]);

  return formsubmit;
}(Interstellar.modalBase);
//原型链一定要有的


module.exports = formsubmit;

/***/ }),

/***/ 784:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(785);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./formsubmit.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./formsubmit.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 785:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".formsubmit {\n  margin-left: -250px;\n  width: 500px;\n}\n.formsubmit .modal-header {\n  padding: 20px 0 20px 30px;\n}\n.formsubmit .modal-header .modal-title {\n  font-family: MicrosoftYaHei;\n  font-weight: bold;\n  font-size: 18px;\n  color: #333333;\n  letter-spacing: 0;\n}\n.formsubmit .modal-header i {\n  font-size: 15px;\n  position: absolute;\n  right: 20px;\n  top: 20px;\n  cursor: pointer;\n}\n.formsubmit .modal-body {\n  padding: 0px !important;\n  margin: 0 30px;\n}\n.formsubmit .modal-body span {\n  margin-left: 0px;\n}\n.formsubmit .modal-body .inputLine {\n  position: relative;\n  height: 70px;\n  margin-top: 10px;\n}\n.formsubmit .modal-body .inputLine > div {\n  display: inline-block;\n}\n.formsubmit .modal-body .inputLine .confirm {\n  margin-right: 0;\n}\n.formsubmit .modal-body .inputLine .inputBox {\n  width: 300px;\n  height: 38px;\n  line-height: 38px;\n  border: 1px solid #E8E8E8;\n  border-radius: 4px;\n  outline: none;\n  padding-left: 5px;\n}\n.formsubmit .modal-body .inputLine .xlk {\n  width: 300px;\n  height: 38px;\n  line-height: 38px;\n}\n.formsubmit .modal-body .inputLine .names {\n  width: 115px;\n  font-size: 14px;\n}\n.formsubmit .modal-body .inputLine .remark {\n  margin-left: 100px;\n}\n.formsubmit .modal-body .inputLine .tips {\n  position: absolute;\n  color: red;\n  top: 40px;\n  left: 105px;\n}\n.formsubmit .modal-body .radioArea {\n  position: relative;\n}\n.formsubmit .modal-body .radioArea .item {\n  position: relative;\n  margin-right: 10px;\n}\n.formsubmit .modal-body .radioArea .item .radio-box {\n  vertical-align: sub;\n}\n.formsubmit .modal-body .radioArea .required {\n  position: absolute;\n  top: 25px;\n  left: 0;\n}\n.formsubmit .modal-footer {\n  margin-top: 15px;\n}\n", ""]);

// exports


/***/ }),

/***/ 786:
/***/ (function(module, exports) {

module.exports = "<div class=\"formsubmit modal\"> <div class=modal-header> <p class=modal-title></p> <i class=\"iconfont icon-guanbi\"></i> </div> <div class=modal-body> </div> <div class=modal-footer> <a class=\"btn btn-confirm\">确认</a> <a class=\"btn btn-cancel\">取消</a> </div> </div>";

/***/ }),

/***/ 806:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(807);

var uploadalgdata = function (_Interstellar$modalBa) {
  _inherits(uploadalgdata, _Interstellar$modalBa);

  function uploadalgdata(app, dom, value, addMode) {
    _classCallCheck(this, uploadalgdata);

    var _this = _possibleConstructorReturn(this, (uploadalgdata.__proto__ || Object.getPrototypeOf(uploadalgdata)).call(this, app, dom, value, addMode));

    _this.html = __webpack_require__(809);
    _this.name = 'uploadalgdata';
    _this.flag = true;
    _this.code = '';
    _this.data = value;
    _this.apiData = { transferNii: false };
    _this.api.toolList.forEach(function (item) {
      _this.app.toolList.forEach(function (cn) {
        if (item.val == cn.idx) {
          item.val = cn.val;
        }
      });
    });
    return _this;
  }

  _createClass(uploadalgdata, [{
    key: 'complete',
    value: function complete() {
      var that = this;
      this.dom.find('.icon-guanbi').on('click', function () {
        that.close();
      });
      this.dom.find('.cancel').on('click', function () {
        that.close();
      });
      this.dom.find('.filechoose').on('click', function () {
        that.dom.find('.file').click();
      });
      that.dom.find('.file').on('change', function () {
        var filePath = ES.selctorDoc("#file1").val();
        that.dom.find('.filename').val(filePath);
      });
      that.dom.find('.catelog .check-box').on('click', function () {
        if (!ES.selctorDoc(this).hasClass('choose')) {
          ES.selctorDoc(this).addClass('choose');
          that.apiData.transferNii = true;
        } else {
          ES.selctorDoc(this).removeClass('choose');
          that.apiData.transferNii = false;
        }
      });
      this.dom.find('.upload').on('click', function () {
        that.dom.find('.inputLine').dom.forEach(function (val, idx) {
          val.find('.' + val.attr('redlabel')).removeClass('redborder');
          val.find('.required').remove();
          if (Tool.checkForm(ES.selctorDoc(val).dom, 'red') !== '') {
            val.find('.' + val.attr('redlabel')).addClass('redborder');
            val.find('.' + val.attr('redlabel')).after('<span class="required">' + Tool.checkForm(ES.selctorDoc(val).dom, 'red') + '</span>');
          }
        });
        if (that.dom.find('.redborder').dom && that.dom.find('.redborder').dom.some(function (item) {
          return item.box().clientHeight !== 0;
        })) {
          return false;
        } else {
          that.event._dispatch('uploadalgdata.upload', { data: that.apiData });
        }
      });
      this.render();
    }
  }, {
    key: 'render',
    value: function render(value) {
      var _this2 = this;

      var dropConfig = [{ name: 'type', className: 'xlk', firstSelect: { val: '请选择标注结果类型', idx: '' }, data: [{ idx: '1', val: '序列标注结果' }, { idx: '2', val: '影像标注结果' }], maxshownum: 5 }, { name: 'toolType', className: 'xlk', firstSelect: { val: '请选择标注所需工具', idx: '' }, data: this.api.toolList, maxshownum: 5 }, { name: 'dataType', className: 'xlk', firstSelect: { val: '数据类型', idx: '' }, data: [{ idx: '1', val: 'nii' }, { idx: '2', val: '点位' }], maxshownum: 5 }];
      __webpack_require__.e/* require.ensure */(52/* duplicate */).then((function () {
        var dropdown = __webpack_require__(638);
        var dropObj = {};
        dropConfig.forEach(function (val, idx) {
          dropObj[val.name] = _this2.app.loadModule(dropdown, _this2.dom.find('.' + val.name), {
            className: 'xlk',
            firstSelect: val.firstSelect,
            data: val.data,
            maxshownum: val.maxshownum
          });
          dropObj[val.name].event._addEvent('dropDown.clear', function () {
            _this2.apiData[val.name] = null;
          });
          dropObj[val.name].event._addEvent('option.click', function (value) {
            _this2.apiData[val.name] = value.idx;
          });
        });
        dropObj['type'].event._addEvent('option.click', function (value) {
          if (value.idx == 1) {
            _this2.dom.find('.tool').addClass('hide');
            _this2.dom.find('.mask').addClass('hide');
            if (_this2.api.type == 'project') {
              _this2.dom.find('.dataType').parent().addClass('hide');
            }
          } else {
            _this2.dom.find('.tool').removeClass('hide');
            _this2.dom.find('.mask').removeClass('hide');
            if (_this2.api.type == 'project') {
              _this2.dom.find('.dataType').parent().removeClass('hide');
            }
          }
          _this2.apiData['type'] = parseInt(value.idx);
        });
        if (_this2.api.type == 'project') {
          dropObj['dataType'].event._addEvent('option.click', function (value) {
            _this2.apiData['dataType'] = parseInt(value.idx);
          });
        }
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
    }
  }]);

  return uploadalgdata;
}(Interstellar.modalBase);

//原型链一定要有的


module.exports = uploadalgdata;

/***/ }),

/***/ 807:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(808);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./uploadalgdata.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./uploadalgdata.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 808:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".uploadalgdata {\n  box-sizing: border-box;\n  background: #fff;\n  border-radius: 4px;\n  font-family: \"Microsoft YaHei\";\n  font-size: 16px;\n  width: 600px;\n  height: 450px;\n  margin-left: -300px;\n  position: relative;\n}\n.uploadalgdata .toparea .title {\n  margin: 20px;\n}\n.uploadalgdata .toparea .icon-guanbi {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  cursor: pointer;\n}\n.uploadalgdata .catelog {\n  position: relative;\n  margin-top: 20px;\n}\n.uploadalgdata .catelog .inputLine {\n  margin-bottom: 10px;\n}\n.uploadalgdata .catelog .inputLine > .names {\n  width: 180px;\n  text-align: left;\n  margin-left: 40px;\n}\n.uploadalgdata .catelog .inputLine .check-box {\n  margin: 10px 10px 0 50px;\n}\n.uploadalgdata .catelog input {\n  width: 240px;\n  padding-left: 10px;\n  height: 32px;\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n}\n.uploadalgdata .catelog .required {\n  left: 230px;\n  top: 50px;\n  font-size: 14px;\n}\n.uploadalgdata .catelog .type,\n.uploadalgdata .catelog .toolType,\n.uploadalgdata .catelog .dataType {\n  display: inline-block;\n}\n.uploadalgdata .catelog .xlk {\n  width: 180px;\n  height: 32px;\n  line-height: 32px;\n}\n.uploadalgdata .catelog .filechoose {\n  padding: 0 20px;\n  background: #4c9fa9;\n  color: #fff;\n  height: 32px;\n  line-height: 32px;\n}\n.uploadalgdata .catelog .file {\n  position: fixed;\n  top: 2000px;\n  left: 3000px;\n}\n.uploadalgdata .catelog .check-box {\n  margin-left: 40px;\n}\n.uploadalgdata .btnarea {\n  text-align: center;\n  margin-top: 55px;\n}\n.uploadalgdata .btnarea .biaozhubtn {\n  padding: 0 20px;\n  height: 32px;\n  line-height: 32px;\n  text-align: center;\n}\n.uploadalgdata .btnarea .upload {\n  background: #4c9fa9;\n  color: #fff;\n  margin-right: 20px;\n}\n.uploadalgdata .btnarea .cancel {\n  border: 1px solid #4c9fa9;\n}\n", ""]);

// exports


/***/ }),

/***/ 809:
/***/ (function(module, exports) {

module.exports = "<div class=\"uploadalgdata modal\"> <div class=toparea> <span class=title>导入算法标注结果</span> <i class=\"iconfont icon-guanbi\"></i> </div> <div class=catelog> <div class=inputLine redlabel=xlk> <span class=names><label class=redstar>*</label>请选择标注结果类型：</span> <div class=type check=empty></div> </div> <div class=\"inputLine hide\" redlabel=xlk> <span class=names><label class=redstar>*</label>数据类型：</span> <div class=dataType check=empty></div> </div> <div class=inputLine redlabel=inputBox> <span class=names><label class=redstar>*</label>指定上传文件：</span> <input class=\"filename inputBox\" type=text check=empty readonly=readonly /> <a class=\"biaozhubtn filechoose\">浏览</a> <input class=file type=file id=file1 name=file /> </div> <div class=\"inputLine tool hide\" redlabel=xlk> <span class=names><label class=redstar>*</label>标注所需的工具：</span> <div class=toolType check=empty></div> </div> <div class=\"mask hide\"> <i class=check-box></i> <span>是否转换成mask</span> </div> </div> <div class=btnarea> <a class=\"upload biaozhubtn\">导入</a> <a class=\"cancel biaozhubtn\">取消</a> </div> </div> ";

/***/ }),

/***/ 832:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".createtask2 .btnline span .disabled {\n  background: #ccc;\n  cursor: not-allowed;\n  border: 1px solid #ccc;\n  color: #fff;\n}\n.createtask2 .btnline {\n  margin: 40px 0px 20px 70px;\n}\n.createtask2 .btnline > span {\n  width: 457px;\n}\n.createtask2 .btnline .biaozhubtn {\n  color: #4c9fa9;\n  border: 1px solid #4c9fa9;\n  height: 35px;\n  line-height: 35px;\n  padding: 0 20px;\n  margin-right: 10px;\n}\n.createtask2 .btnline .yyr {\n  text-decoration: underline;\n  color: #4c9fa9;\n}\n.createtask2 .btnline .yyrarea {\n  display: inline-block;\n}\n.createtask2 .btnline > div {\n  margin: 70px 0;\n  width: 457px;\n}\n.createtask2 .btnline .donetask {\n  background: #4c9fa9;\n  color: #fff;\n  position: absolute;\n  top: 0;\n  right: 30px;\n}\n.createtask2 .choosePart {\n  margin-left: 70px;\n}\n.createtask2 .choosePart .exportArea .export {\n  color: #4c9fa9;\n  border: 1px solid #4c9fa9;\n  height: 35px;\n  line-height: 35px;\n  padding: 0 20px;\n  margin: 20px 0 0 0px;\n}\n.createtask2 .choosePart .exportArea .viewexported {\n  text-decoration: underline;\n  color: #4c9fa9;\n}\n", ""]);

// exports


/***/ }),

/***/ 833:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(834);
// var html = require('./tpl.html')

var alglist = function (_Interstellar$modalBa) {
  _inherits(alglist, _Interstellar$modalBa);

  function alglist(app, dom, value, addMode) {
    _classCallCheck(this, alglist);

    var _this = _possibleConstructorReturn(this, (alglist.__proto__ || Object.getPrototypeOf(alglist)).call(this, app, dom, value, addMode));

    _this.html = __webpack_require__(836);
    _this.name = 'alglist';
    return _this;
  }

  _createClass(alglist, [{
    key: 'complete',
    value: function complete() {
      var that = this;
      this.action = {
        // view: {dis: 'inline', link: 'noLink', content: '删除'},
        viewfail: { dis: 'inline', link: 'noLink', content: '查看失败' }
      };
      this.action1 = {
        // view: {dis: 'inline', link: 'noLink', content: '删除'}
      };
      this.dom.find('.icon-guanbi').on('click', function () {
        that.close();
      });
      this.render();
      that.dom.find('.close').on('click', function () {
        that.close();
      });
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.api.data) {
        this.showlist(this.api.data, true);
      }
    }
  }, {
    key: 'showlist',
    value: function showlist(value, bool) {
      var that = this;
      var obj = {};
      obj['icon'] = {
        "resultType": { name: '<span>结果类型</span>', type: 'text', code: 'checkid', w: '12%', ww: '12%', n: "40" },
        "toolType": { name: '<span>工具类型</span>', type: 'text', code: 'pid', w: '13%', ww: '13%' },
        "transferNii": { name: '<span>是否转换成mask</span>', type: 'text', code: 'pid', w: '12%', ww: '12%' },
        "totalSeriesNum": { name: '<span>总序列数</span>', type: 'text', code: 'pid', w: '9%', ww: '9%' },
        "totalResultNum": { name: '<span>总结果数</span>', type: 'text', code: 'pid', w: '9%', ww: '9%' },
        "successResultNum": { name: '<span>成功结果数</span>', type: 'text', code: 'pid', w: '10%', ww: '10%' },
        "importTime": { name: '<span>导入时间</span>', type: 'text', code: 'pid', w: '13%', ww: '13%' },
        "importUserId": { name: '<span>导入人ID</span>', type: 'text', code: 'pid', w: '10%', ww: '10%' },
        "operation": { name: '<span>操作</span>', type: 'action', code: 'pid', w: '12%', ww: '12%' }
      };
      obj['tablewidth'] = ES.selctorDoc('.alglist').box().clientWidth - 40;
      obj['type'] = 'center';
      obj['pagesizeSet'] = false;
      __webpack_require__.e/* require.ensure */(53/* duplicate */).then((function () {
        that.myScroll = null;
        var cont_table = __webpack_require__(640);
        that.table = that.app.loadModule(cont_table, that.dom.find('.tablearea'), {
          id: 'alglist',
          header: obj
        });
        that.table.event._addEvent('table.pagenumber', function (value) {
          var page = parseInt(value);
          that.event._dispatch('alglist.pagenumber', page);
        });
        that.table.event._addEvent('table.action', function (value) {
          that.event._dispatch('alglist.listaction', value);
        });
        that.setList(value, bool);
        that.initscrollmenu();
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
    }
  }, {
    key: 'setList',
    value: function setList(value, bool) {
      var _this2 = this;

      if (value.list.length > 0) {
        value.list.forEach(function (val) {
          val.id = val.id + ',' + val.fileResourceId;
          if (val.successResultNum === val.totalResultNum) {
            val.operation = _this2.action1;
          } else {
            val.operation = _this2.action;
          }
          _this2.app.toolList.forEach(function (item, idx) {
            if (val.toolType == item.idx) {
              val.toolType = item.val;
            }
          });
          val.resultType = val.resultType === 1 ? '序列标注' : '影像标注';
          val.transferNii = val.transferNii ? '是' : '否';
          if (val.importTime) val.importTime = Tool.time(val.importTime, 'yyyy-mm-dd');
        });
        this.table.setData(value.list);
      } else {
        this.table.noData('当前无已导入的结果!');
      }
      if (bool) {
        this.table.getTotal(value.pages, 2, value.total);
      }
    }
  }, {
    key: 'initscrollmenu',
    value: function initscrollmenu() {
      if (this.myScroll) {
        this.myScroll.refresh();
        return;
      }

      var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
      this.dom.find('.maintable').attr('id', rid);
      this.myScroll = new IScroll('#' + rid, {
        scrollbars: true,
        mouseWheel: true,
        interactiveScrollbars: true,
        hideScrollbar: false,
        vScrollbar: true,
        shrinkScrollbars: 'scale',
        fadeScrollbars: false,
        disableMouse: true,
        disablePointer: true
      });
    }
  }]);

  return alglist;
}(Interstellar.modalBase);

//原型链一定要有的


module.exports = alglist;

/***/ }),

/***/ 834:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(835);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./alglist.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./alglist.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 835:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".alglist {\n  box-sizing: border-box;\n  background: #fff;\n  border-radius: 4px;\n  font-family: \"Microsoft YaHei\";\n  font-size: 16px;\n  width: 900px;\n  margin-left: -450px;\n  height: 500px;\n}\n.alglist .modal-header {\n  text-align: left;\n  height: 56px;\n  line-height: 56px;\n  background: #599BA2;\n  padding: 0px;\n}\n.alglist .modal-header .modal-title {\n  line-height: unset;\n}\n.alglist .modal-header .modal-title span {\n  font-family: MicrosoftYaHei;\n  font-size: 14px;\n  color: #FFFFFF;\n  letter-spacing: 0;\n  margin: 0;\n  margin-left: 20px;\n}\n.alglist .modal-header .modal-title .total {\n  margin-left: 16px;\n}\n.alglist .modal-header i {\n  font-size: 12px;\n  right: 7px;\n  position: absolute;\n  top: -13px;\n  color: #fff;\n  cursor: pointer;\n}\n.alglist .modal-body {\n  margin: 0px;\n  padding: 0px;\n}\n.alglist .modal-body .maintable {\n  height: 380px;\n  overflow: hidden;\n}\n.alglist .modal-body span {\n  margin: 0;\n}\n.alglist .modal-body .summarytop {\n  background: #F2F2F2;\n  letter-spacing: 0;\n  line-height: 40px;\n  padding-left: 20px;\n}\n.alglist .modal-body .summarytop span {\n  line-height: 23px;\n  color: #333333;\n  font-family: MicrosoftYaHei;\n  font-size: 16px;\n}\n.alglist .modal-body .summarytop .failnum {\n  color: red;\n}\n.alglist .modal-body .summarytop span:first-child {\n  margin-left: 20px;\n}\n.alglist .modal-body .errorLine {\n  overflow: hidden;\n  text-align: center;\n}\n.alglist .modal-body .errorLine .errordetail {\n  margin-top: 60px;\n}\n.alglist .modal-body .errorLine .srocll {\n  height: 300px;\n  overflow: hidden;\n  position: relative;\n}\n.alglist .modal-body .errorLine .srocll .maintable {\n  overflow: hidden;\n  height: 250px;\n}\n", ""]);

// exports


/***/ }),

/***/ 836:
/***/ (function(module, exports) {

module.exports = "<div class=\"modal alglist\"> <div class=modal-header> <p class=\"modal-title _title\"> <span>查看导入结果</span> </p> <i class=\"iconfont icon-guanbi\"></i> </div> <div class=modal-body> <div class=tablearea> </div> </div> </div> ";

/***/ })

});
//# sourceMappingURL=333e08c908ae032edea3.24.min.js.map