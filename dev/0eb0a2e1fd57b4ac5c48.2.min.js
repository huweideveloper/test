webpackJsonp([2],{

/***/ 184:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(937);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./createprothree.less", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./createprothree.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 185:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var urlDict = {
  querycomponent: '/component/query',
  getcomponentdetail: '/component/read',
  createproject: '/project/create',
  project_anno_read: '/project/anno/read',
  project_basic_read: '/project/basic/read',
  getimage: '/sys/transfer',
  gethospital: '/sys/transfer',
  getmodality: '/series/modality/all',
  isrepeat: '/project/findByName',
  task_stayClone_search: '/task/stayClone/search',
  task_cloneList: '/task/cloneList',
  task_like_query: '/task/like/query',
  getproimage: '/project/series/search',
  updateproimage: '/project/series/update',
  clearseries: '/project/series/empty',
  series_count: '/project/series/count',
  searchresult_remove: '/project/series/searchresult/remove',
  get_import_result_list_search: '/alg/sar/get_import_result_list/search',
  alg_sar_list_tool: '/alg/sar/list_tool',
  project_edit_algResultType: '/project/edit/algResultType',
  sar_get_last_import_log: '/alg/sar/get_last_import_log',
  heartSegment_resultRead: '/heartSegment/resultRead',
  heartSegment_start: '/heartSegment/start',
  joinAlg: '/project/edit/joinAlg'

};
var api = {
  querycomponent: function querycomponent(value) {
    return this.HttpRequest.POST(urlDict.querycomponent, value);
  },
  getcomponentdetail: function getcomponentdetail(value) {
    return this.HttpRequest.POST(urlDict.getcomponentdetail, value);
  },
  createproject: function createproject(value) {
    return this.HttpRequest.POST(urlDict.createproject, value);
  },
  project_anno_read: function project_anno_read(value) {
    return this.HttpRequest.POST(urlDict.project_anno_read, value);
  },
  project_basic_read: function project_basic_read(value) {
    return this.HttpRequest.POST(urlDict.project_basic_read, value);
  },
  getimage: function getimage(value) {
    return this.HttpRequest.POST(urlDict.getimage, value);
  },
  gethospital: function gethospital(value) {
    return this.HttpRequest.POST(urlDict.gethospital, value);
  },
  getmodality: function getmodality(value) {
    return this.HttpRequest.POST(urlDict.getmodality, value);
  },
  isrepeat: function isrepeat(value) {
    return this.HttpRequest.POST(urlDict.isrepeat, value);
  },
  task_stayClone_search: function task_stayClone_search(value) {
    return this.HttpRequest.POST(urlDict.task_stayClone_search, value);
  },
  task_cloneList: function task_cloneList(value) {
    return this.HttpRequest.POST(urlDict.task_cloneList, value);
  },
  task_like_query: function task_like_query(value) {
    return this.HttpRequest.POST(urlDict.task_like_query, value);
  },
  getproimage: function getproimage(value) {
    return this.HttpRequest.POST(urlDict.getproimage, value);
  },
  updateproimage: function updateproimage(value) {
    return this.HttpRequest.POST(urlDict.updateproimage, value);
  },
  clearseries: function clearseries(value) {
    return this.HttpRequest.POST(urlDict.clearseries, value);
  },
  series_count: function series_count(value) {
    return this.HttpRequest.POST(urlDict.series_count, value);
  },
  searchresult_remove: function searchresult_remove(value) {
    return this.HttpRequest.POST(urlDict.searchresult_remove, value);
  },
  get_import_result_list_search: function get_import_result_list_search(value) {
    return this.HttpRequest.POST(urlDict.get_import_result_list_search, value);
  },
  alg_sar_list_tool: function alg_sar_list_tool(value) {
    return this.HttpRequest.POST(urlDict.alg_sar_list_tool, value);
  },
  project_edit_algResultType: function project_edit_algResultType(value) {
    return this.HttpRequest.POST(urlDict.project_edit_algResultType, value);
  },
  heartSegment_resultRead: function heartSegment_resultRead(value) {
    return this.HttpRequest.POST(urlDict.heartSegment_resultRead, value);
  },
  heartSegment_start: function heartSegment_start(value) {
    return this.HttpRequest.POST(urlDict.heartSegment_start, value);
  },
  project_joinAlg: function project_joinAlg(value) {
    return this.HttpRequest.POST(urlDict.joinAlg, value);
  },
  sar_get_last_import_log: function sar_get_last_import_log(value) {
    return this.HttpRequest.POST(urlDict.sar_get_last_import_log, value);
  }
};
module.exports = api;

/***/ }),

/***/ 186:
/***/ (function(module, exports) {

module.exports = "<div class=createprothree> <div class=scroll> <div class=bigtitle>标注影像文件选取</div> <a class=\"propreview biaozhubtn\">标注预览试用</a> <p class=title>第三步：添加数据</p> <div class=imagedata> <a class=\"biaozhubtn addimage1\">添加/追加标注影像</a> <a class=\"biaozhubtn upload\">上传影像序列</a> <a class=downtemplete>下载上传模板</a> <br> <a class=\"viewimage hide\">点击查看已添加影像数据</a> <input class=file type=file id=file name=file /> </div> <div class=suanfadata> <a class=\"biaozhubtn addsfdata\">导入标注结果</a> <br> <a class=viewsfdata>点击查看已导入结果</a> </div> <div class=isgetalgres> <a class=\"start fillBtn startalg hide\" algtype=1>开始生成心脏冠脉</a> </div> <div class=copd> <a class=\"startcopd fillBtn startalg hide\" algtype=2>开始生成COPD</a> </div> <div class=fjj> <a class=\"startcopd fillBtn startalg hide\" algtype=3>开始生成肺结节检出</a> </div> <div class=\"yyytask hide\"> <span class=listtitle>已引用任务区域</span> <div class=\"fillBtn copytask\">复制任务</div> <div class=yyytasklist></div> </div> </div> </div> ";

/***/ }),

/***/ 187:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//这边基本上引入需要使用的资源less，api，需要使用的模块等等。

var createprothree = function (_Interstellar$modelBa) {
    _inherits(createprothree, _Interstellar$modelBa);

    function createprothree(app) {
        _classCallCheck(this, createprothree);

        var _this = _possibleConstructorReturn(this, (createprothree.__proto__ || Object.getPrototypeOf(createprothree)).call(this, app));

        _this.___auto = true;
        _this.apiData = { "name": "", "remark": "" };
        _this.count = 0;
        return _this;
    }

    return createprothree;
}(Interstellar.modelBase);

module.exports = createprothree;

/***/ }),

/***/ 740:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(741);

var tab = function (_Interstellar$moduleB) {
    _inherits(tab, _Interstellar$moduleB);

    function tab(app, dom, value, addMode) {
        _classCallCheck(this, tab);

        var _this = _possibleConstructorReturn(this, (tab.__proto__ || Object.getPrototypeOf(tab)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(743);
        return _this;
    }

    _createClass(tab, [{
        key: 'complete',
        value: function complete() {
            this.btn();
        }
    }, {
        key: 'btn',
        value: function btn(value) {
            var that = this;
            this.dom.find('.tab .option').on('click', function () {
                that.dom.find('.tab .option').removeClass('selected');
                var dom = ES.selctorDoc(this);
                dom.addClass('selected');
                var sdata = { id: dom.attr('node_id'), name: dom.find('p').html(), pid: that.nowParam.id };
                that.event._dispatch('tab.change', sdata);
            });
        }
    }]);

    return tab;
}(Interstellar.moduleBase);

//原型链一定要有的


module.exports = tab;

/***/ }),

/***/ 741:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(742);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./tab.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./tab.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 742:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".tab .option {\n  float: left;\n  width: 100px;\n  text-align: center;\n  font-size: 14px;\n  color: #333333;\n  line-height: 40px;\n  cursor: pointer;\n}\n.tab .selected {\n  border-bottom: 1px solid #448E97;\n  font-weight: bold;\n}\n", ""]);

// exports


/***/ }),

/***/ 743:
/***/ (function(module, exports) {

module.exports = "<ul class=tab> <%=for(var w = 0;w < p.data.length; w++){\nvar stu=p.data[w];\nvar sel=\"\";\nif(p.default==stu.id){\n\tsel='selected';\n}\n=%> <li class=\"option <%==sel=%>\" node_id=\"<%==stu.id=%>\"> <p> <%==stu.name=%> </p> </li> <%=}=%> </ul> <div style=clear:both></div>";

/***/ }),

/***/ 744:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(745);
// var html = require('./tpl.html')

var bztoollist = function (_Interstellar$moduleB) {
    _inherits(bztoollist, _Interstellar$moduleB);

    function bztoollist(app, dom, value, addMode) {
        _classCallCheck(this, bztoollist);

        var _this = _possibleConstructorReturn(this, (bztoollist.__proto__ || Object.getPrototypeOf(bztoollist)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(747);
        _this.name = "datacondition";
        _this.data = {};
        _this.needCompent = {};

        _this.moduleobj = {};

        return _this;
    }

    _createClass(bztoollist, [{
        key: 'complete',
        value: function complete() {
            var _this2 = this;

            var that = this;
            this.dom.find('.btnarea .searchbtn').on('click', function (item) {
                _this2.event._dispatch('datacondition.search');
            });
            this.dom.find('.btnarea .exportlink').on('click', function (item) {
                _this2.event._dispatch('datacondition.export');
            });
            __webpack_require__.e/* require.ensure */(59).then((function () {
                var dropdown = __webpack_require__(638);
                that.needCompent['dropdown'] = dropdown;
                var duoxuanxlk = __webpack_require__(647);
                that.needCompent['duoxuanxlk'] = duoxuanxlk;
                var calendar = __webpack_require__(644);
                that.needCompent['calendar'] = calendar;
                that.setData();
                that.event._dispatch('datacondition.moduledone');
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
        }
    }, {
        key: 'setData',
        value: function setData(refreshdata) {
            var _this3 = this;

            this.dom.find('.condition').html('');
            if (refreshdata) {
                refreshdata.map(function (item) {
                    _this3.part(item);
                });
            } else {
                this.initDate.data.map(function (item) {
                    _this3.part(item);
                });
            }
        }
    }, {
        key: 'part',
        value: function part(value) {
            this.dom.find('.condition').append('<div class="content ' + value[0].name + '"></div>');
            this.data[value[0].name] = [];
            for (var i = 0; i < value.length; i++) {
                this.allControl(value[i], i);
            }
        }
    }, {
        key: 'allControl',
        value: function allControl(value, pos) {
            this.dom.find('.condition .' + value.name).append('<div class="signlecontent' + pos + ' fl"></div>');
            eval('this.' + value.type + '(value,pos)');
        }
    }, {
        key: 'dobuledropdown',
        value: function dobuledropdown(value, pos) {
            //console.log(value, 'dobuledropdowndobuledropdown')
            var that = this;
            var inputSt = value.input;
            var myname = this.app.loadModule(this.needCompent['duoxuanxlk'], this.dom.find('.condition .' + value.name + ' .signlecontent' + pos), {
                showname: value.showname,
                data: value.data,
                datatype: value.datatype,
                input: value.input ? value.input : false,
                code: value.name,
                pos: pos
            });
            myname.event._addEvent('duoxuan.select', function (value) {
                that.data[myname.initDate.code][myname.initDate.pos] = value.name;
            });
            myname.event._addEvent('duoxuan.input', function (value) {
                // if (inputSt) {
                //     that.data[myname.initDate.code]['key'] = value.data
                //     that.event._dispatch('datacondition.duoxuanInput')
                // }
                that.event._dispatch('datacondition.dropinput', { data: value, name: myname.initDate.code });
            });
            myname.event._addEvent('duoxuanxlk.clear', function (value) {
                that.data[myname.initDate.code][myname.initDate.pos] = '';
                that.event._dispatch('datacondition.dropinput', { data: '', name: myname.initDate.code });
            });
            that.moduleobj[myname.initDate.code] = myname;
        }
    }, {
        key: 'dropdown',
        value: function dropdown(item, pos) {
            var that = this;
            var myname = this.app.loadModule(this.needCompent['dropdown'], this.dom.find('.condition .' + item.name + ' .signlecontent' + pos), {
                className: 'xlk',
                firstSelect: { val: item.showname, idx: '' },
                data: item.data,
                code: item.name,
                datatype: item.datatype,
                input: item.input ? item.input : false

            });
            myname.event._addEvent('option.click', function (value) {
                that.data[myname.initDate.code][pos] = value.idx;
            });
            myname.event._addEvent('dropDown.clear', function (value) {
                that.data[myname.initDate.code][pos] = '';
                that.event._dispatch('datacondition.dropinput', { data: '', name: myname.initDate.code });
            });

            myname.event._addEvent('drop.input', function (value) {
                that.event._dispatch('datacondition.dropinput', { data: value, name: myname.initDate.code });
            });
            that.moduleobj[myname.initDate.code] = myname;
        }
    }, {
        key: 'dropdownS',
        value: function dropdownS(item, pos) {
            var that = this;
            this.dom.find('.condition .' + item.name + ' .signlecontent' + pos).append('<span class="radioonly" style="margin:0 10px 0 5px">' + item.showname + '</span>');
            this.dom.find('.condition .' + item.name + ' .signlecontent' + pos).append('<div class="dropdownContent" style="display: inline-block;"></div>');
            var fname = item.showname;
            if (item.name == "check" || item.name == "inspect") {
                fname = item.data[0].val;
            }
            var myname = this.app.loadModule(this.needCompent['dropdown'], this.dom.find('.condition .' + item.name + ' .signlecontent' + pos + ' .dropdownContent'), {
                className: 'xlk',
                firstSelect: { val: fname, idx: '' },
                data: item.data,
                code: item.name,

                datatype: item.datatype,
                input: item.input ? item.input : false

            });
            myname.event._addEvent('option.click', function (value) {
                console.log(myname.initDate.code);
                that.data[myname.initDate.code][pos] = value.idx;
            });
            myname.event._addEvent('dropDown.clear', function (value) {
                that.data[myname.initDate.code][pos] = '';
            });
            myname.event._addEvent('drop.input', function (value) {
                that.event._dispatch('datacondition.dropinput', { data: value, name: myname.initDate.code });
            });
            that.moduleobj[myname.initDate.code] = myname;
        }
    }, {
        key: 'dTexts',
        value: function dTexts(value, pos) {
            var _this4 = this;

            var str = '<span>' + value.showname + '</span> \n                <input type="text" class="lower dText" check="num"> \n                <label>-</label> \n            <input type="text" class="upper dText" check="num">';
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append(str);
            this.data[value.name].push({});
            this.dom.find('.condition .' + value.name + ' .lower').on('blur', function () {
                console.log(_this4.data, value.name);
                _this4.data[value.name][pos]['lower'] = _this4.dom.find('.condition .' + value.name + ' .lower').val();
            });
            this.dom.find('.condition .' + value.name + ' .upper').on('blur', function () {
                _this4.data[value.name][pos]['upper'] = _this4.dom.find('.condition .' + value.name + ' .upper').val();
            });
        }
    }, {
        key: 'dText',
        value: function dText(value, pos) {
            var _this5 = this;

            var str = '<input type="text" class="lower dText" check="num"> \n                <label>-</label> \n            <input type="text" class="upper dText" check="num">';
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append(str);
            this.data[value.name][pos] = {};
            console.log(this.data);
            this.dom.find('.condition .' + value.name + ' .lower').on('blur', function () {
                console.log(_this5.data, 'value.name');
                _this5.data[value.name][pos]['lower'] = _this5.dom.find('.condition .' + value.name + ' .lower').val();
            });
            this.dom.find('.condition .' + value.name + ' .upper').on('blur', function () {
                _this5.data[value.name][pos]['upper'] = _this5.dom.find('.condition .' + value.name + ' .upper').val();
            });
        }
    }, {
        key: 'texts',
        value: function texts(value, pos) {
            var _this6 = this;

            var str = '<span>' + value.showname + ('</span> \n        <input type="text" class="inputtext textData" style="display:inline-block" value="' + (value.data ? value.data : '') + '" ' + (value.input === false ? 'readonly' : '') + '>');
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append(str);
            this.dom.find('.condition .' + value.name + ' .textData').on('blur', function () {
                console.log(pos, value.name);
                _this6.data[value.name][pos] = _this6.data[value.name][pos] ? _this6.data[value.name][pos] : {};
                _this6.data[value.name][pos] = _this6.dom.find('.condition .' + value.name + ' .textData').val();
            });
        }
    }, {
        key: 'time',
        value: function time(value, pos) {
            var that = this;
            var code = value.name;
            that.data[code].push({});
            var todayTime = new Date();
            var Month = todayTime.getMonth() + 1 < 10 ? '0' + (todayTime.getMonth() + 1) : todayTime.getMonth() + 1;
            var today = todayTime.getFullYear() + '-' + Month + '-' + todayTime.getDate();
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append('<span class="radioonly">' + value.showname + '</span>');
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append('<div class="timefilter" style="display: inline-block;"></div>');
            var timeCotrol = this.app.loadModule(this.needCompent['calendar'], this.dom.find('.condition .' + value.name + ' .signlecontent' + pos + ' .timefilter'), { titleShow: false, defaultword: '请选择时间' });
            timeCotrol.event._addEvent('times1.day', function (value) {
                console.log(value, 'valuetime', that.data);
                that.data[code][pos]['startTime'] = value.st ? value.st + " 00:00:00" : '';
                that.data[code][pos]['endTime'] = value.et ? value.et + " 23:59:59" : '';
                console.log(that.apidata);
            });
            timeCotrol.event._addEvent('times.dele', function (value) {
                if (value.dom.hasClass('day_left')) {
                    that.data[code][pos]['startTime'] = '';
                } else {
                    that.data[code][pos]['endTime'] = '';
                }
            });
        }
    }, {
        key: 'text',
        value: function text(value, pos) {
            var _this7 = this;

            var str = '<input type="text" class="inputtext textData">';
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append(str);
            this.data[value.name][pos] = '';
            this.dom.find('.condition .' + value.name + ' .textData').on('blur', function () {
                console.log(_this7.dom.find('.condition .' + value.name + ' .signlecontent' + pos + ' .textData').val(), value.name);
                _this7.data[value.name][pos] = _this7.dom.find('.condition .' + value.name + ' .signlecontent' + pos + ' .textData').val();
            });
        }
    }, {
        key: 'editdone',
        value: function editdone(value, pos) {
            var _this8 = this;

            var str = '<a class="iconfont icon-bianji radioonly"></a>';
            var code = value.name;
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos).append(str);
            this.dom.find('.condition .' + value.name + ' .signlecontent' + pos + ' .icon-bianji').on('click', function () {
                _this8.event._dispatch('datacondition.editor', { code: code });
            });
        }
        //渲染下拉框内容

    }, {
        key: 'renderHtml',
        value: function renderHtml(value, type) {
            this.moduleobj[type].renderHtml(value);
        }
    }]);

    return bztoollist;
}(Interstellar.moduleBase);

//原型链一定要有的


module.exports = bztoollist;

/***/ }),

/***/ 745:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(746);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./datacondition.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./datacondition.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 746:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".datacondition {\n  position: relative;\n}\n.datacondition .condition .content {\n  float: left;\n  padding: 5px 0;\n}\n.datacondition .condition .content .textData,\n.datacondition .condition .content .dText {\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n}\n.datacondition .condition .icon-bianji {\n  margin: 0px 10px;\n  line-height: 30px;\n}\n.datacondition .condition .patientAgetype > div {\n  margin-right: 5px;\n}\n.datacondition .condition .check > div,\n.datacondition .condition .inspect > div {\n  margin-right: 5px;\n}\n.datacondition .condition .check .xlk,\n.datacondition .condition .inspect .xlk {\n  width: 80px;\n  height: 30px;\n  line-height: 30px;\n}\n.datacondition .condition .check .xlk .nowname,\n.datacondition .condition .inspect .xlk .nowname {\n  width: 60px;\n}\n.datacondition .btnarea {\n  position: absolute;\n  bottom: 20px;\n  transform: translate(-120px, 0px);\n  right: 0px;\n}\n.datacondition .btnarea .showData {\n  width: 110px;\n  height: 40px;\n  line-height: 40px;\n  border-radius: 4px;\n}\n.datacondition .btnarea .biaozhubtn {\n  display: inline-block;\n  padding: 0 20px;\n  height: 40px;\n  color: #fff;\n  line-height: 40px;\n  background: #4c9fa9;\n  border-radius: 4px;\n  text-align: center;\n}\n.datacondition .btnarea .searchbtn {\n  margin: 0 20px 0 30px;\n}\n.datacondition .btnarea .dwdiv {\n  position: relative;\n  display: inline-block;\n}\n.datacondition .btnarea .dwdiv > label {\n  width: 280px;\n  color: red;\n  position: absolute;\n  text-align: left;\n  left: 0;\n}\n", ""]);

// exports


/***/ }),

/***/ 747:
/***/ (function(module, exports) {

module.exports = "<div class=datacondition> <div class=condition></div> <div style=clear:both></div> </div>";

/***/ }),

/***/ 76:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var createprothree = function (_Interstellar$pagesBa) {
    _inherits(createprothree, _Interstellar$pagesBa);

    function createprothree() {
        _classCallCheck(this, createprothree);

        return _possibleConstructorReturn(this, (createprothree.__proto__ || Object.getPrototypeOf(createprothree)).apply(this, arguments));
    }

    _createClass(createprothree, [{
        key: 'complete',
        value: function complete() {
            var _this2 = this;

            var that = this;
            this.hideBtn = window.location.hash.indexOf('createprothree') !== -1;
            this.projectType = window.location.hash.indexOf('createprothree') !== -1 ? 1 : 3;
            if (this.projectType == 1) {
                this.app.header.openControl('projectmanage');
            } else {
                this.app.header.openControl('backflowproject');
            }
            if (this.hideBtn == true) {
                this.dom.find('.isgetalgres').addClass('hide');
                this.dom.find('.copd').addClass('hide');
                this.dom.find('.fjj').addClass('hide');
            } else {
                this.dom.find('.isgetalgres').removeClass('hide');
                this.dom.find('.copd').removeClass('hide');
                this.dom.find('.fjj').removeClass('hide');
            }
            this.app.header.changeselected(3);
            this.styleModel(1);
            this.resize();
            this.type = this.app.parpam.type;
            this.projectId = parseInt(this.app.parpam.projectid);
            this.render();
            this.apiData = {
                seriesInstanceUidList: [],
                condition: {},
                projectId: parseInt(this.projectId)
            };
            this.get_last_import_log();
            this.alg_sar_list_tool();
            this.heartSegment_resultRead();
            this.viewData = { type: this.projectType };
            this.component = {};
            this.prodata = __webpack_require__(779);
            var addimage = __webpack_require__(932);
            this.uploadalgdata = __webpack_require__(806);
            this.alglist = __webpack_require__(833);
            this.formsubmit = __webpack_require__(783);
            if (this.type != 'new' && !this.projectId) {
                this.app.changePage('projectmanage');
                return;
            }
            if (this.type == 'new') {
                this.app.changePage('projectmanage');
                return;
            }
            if (this.type == 'view') {
                this.dom.find('.biaozhubtn').addClass('hide');
                this.dom.find('.yyytask').removeClass('hide');
                this.setTitle();
            }
            if (this.type == 'edit') {
                if (!this.projectId) {
                    this.app.changePage('projectmanage');
                }
            }
            //数据调用
            this.model._event._addEvent('totalInfo.change', function () {
                if (_this2.model.getData('hospitalInfo').length > 0 && _this2.model.getData('listInfo').list) {
                    var timestamp = new Date().getTime();
                    _this2.addmodel = _this2.app.loadModal(addimage, { adv: true }, {
                        data: _this2.model.getData('listInfo'),
                        hospital: _this2.model.getData('hospitalInfo'),
                        modality: _this2.model.getData('modalityInfo')
                    });
                    _this2.addmodel.event._addEvent('addimage.search', function (value) {
                        _this2.getlist(value.data);
                    });
                    _this2.addmodel.event._addEvent('hospital.input', function (value) {
                        _this2.gethospital(value.data.data);
                        _this2.model._event._addEvent('hospitalInfo.change', function () {
                            _this2.addmodel.setxlk(_this2.model.getData('hospitalInfo'));
                        });
                    });
                    _this2.addmodel.event._addEvent('addimage.all', function (value) {
                        if (value.data !== undefined) {
                            _this2.apiData.condition = value.data;
                            delete _this2.apiData.condition.page;
                            delete _this2.apiData.condition.pageSize;
                        } else {
                            _this2.apiData.condition = {};
                        }
                        _this2.addimage(1);
                        _this2.addmodel.close();
                        _this2.addmodel = null;
                    });
                    _this2.addmodel.event._addEvent('addimage.new', function (value) {
                        if (value.data !== undefined) {
                            _this2.apiData.condition = value.data;
                            delete _this2.apiData.condition.page;
                            delete _this2.apiData.condition.pageSize;
                        } else {
                            _this2.apiData.condition = {};
                        }
                        _this2.clearandnew();
                    });
                }
            });
            this.model._event._addEvent('listInfo.change', function () {
                _this2.addmodel.setMain(true, _this2.model.getData('listInfo'));
            });
            this.dom.find('.addimage1').on('click', function () {
                _this2.model.hospitalInfo = [];
                _this2.model.listInfo = [];
                _this2.gethospital('', true);
                _this2.getlist({
                    category: 'RADIOLOGY',
                    valid: true,
                    jpgValid: true,
                    page: 1,
                    pageSize: 10
                }, true);
            });
            this.dom.find('.viewimage').on('click', function () {
                var temphtml = '<a class="biaozhubtn deleteres">删除查询结果</a>\n' + '            <a class="biaozhubtn exportname">导出结果序列名</a>';
                _this2.prodatapoll = _this2.app.loadModal(_this2.prodata, { adv: true }, { type: 'custom', html: temphtml, del: _this2.type });
                _this2.gethospital('');
                _this2.prodatapoll.event._addEvent('prodata.pagenumber', function (value) {
                    _this2.resetPage = false;
                    _this2.getseries(value.data);
                });
                _this2.prodatapoll.event._addEvent('hospital.input', function (value) {
                    _this2.gethospital(value);
                });
                _this2.prodatapoll.event._addEvent('projectdata.taskinput', function (value) {
                    _this2.gettask(value);
                });
                _this2.prodatapoll.event._addEvent('projectdata.search', function (value) {
                    _this2.resetPage = true;
                    _this2.getseries(value.data);
                });
                _this2.prodatapoll.event._addEvent('prodata.pagesize', function (value) {
                    _this2.resetPage = true;
                    _this2.getseries(value.data);
                });
                _this2.prodatapoll.event._addEvent('projectdata.deleteres', function (value) {
                    _this2.app.alert.show({
                        title: ' ',
                        msg: '如有已关联到任务的序列不支持删除',
                        close: true,
                        sure: function () {
                            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                                var json, res;
                                return regeneratorRuntime.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                _this2.app.loading.show();
                                                delete value.condition.page;
                                                delete value.condition.pageSize;
                                                json = {
                                                    condition: value.condition,
                                                    operation: 'ID',
                                                    projectId: _this2.projectId,
                                                    currentSearchReqId: value.currentSearchReqId
                                                };
                                                _context.next = 6;
                                                return _this2.api.searchresult_remove(json);

                                            case 6:
                                                res = _context.sent;

                                                _this2.app.loading.hide();
                                                if (res.code == 0) {
                                                    _this2.series_count();
                                                    _this2.prodatapoll.close();
                                                    _this2.prodatapoll = null;
                                                }

                                            case 9:
                                            case 'end':
                                                return _context.stop();
                                        }
                                    }
                                }, _callee, _this2);
                            }));

                            function sure() {
                                return _ref.apply(this, arguments);
                            }

                            return sure;
                        }()
                    });
                });
                _this2.prodatapoll.event._addEvent('projectdata.export', function (value) {
                    var json = {
                        condition: value.condition,
                        operation: 'ID',
                        projectId: _this2.projectId,
                        currentSearchReqId: value.currentSearchReqId
                    };
                    var url = _this2.app.domain1 + 'v1/project/series/searchresult/export?param=' + encodeURI(JSON.stringify(json) + '&accessToken=' + window.localStorage.accessToken);
                    //let token = this.app.local.get('accessToken')
                    _this2.api.HttpRequest.downLoadFile(url, { "key": "accessToken", 'val': _this2.app.local.get('accessToken') });
                });
                _this2.resetPage = true;
                _this2.getseries();
            });
            this.dom.find('.addsfdata').on('click', function () {
                var algdata = _this2.app.loadModal(_this2.uploadalgdata, { adv: true }, { toolList: _this2.toolList, type: 'project' });
                algdata.event._addEvent('uploadalgdata.upload', function (value) {
                    var filePath = ES.selctorDoc("#file1").val();
                    var fileType = _this2.getFileType(filePath);
                    if ("csv" != fileType && 'xlsx' !== fileType && 'xls' !== fileType) {
                        ES.selctorDoc("#filechoose").val("");
                        _this2.app.alert.show({
                            title: '',
                            template: '<span style="font-size: 18px;margin-left:20px;">格式错误，上传失败。</span>',
                            close: false,
                            sure: function sure() {
                                _this2.app.alert.hide();
                            }
                        });
                    } else {
                        $.ajaxFileUpload({
                            url: '/aaa/v1/alg/sar/import', // that.app.domain+'/ccc/user/import',
                            secureuri: false,
                            dataType: "JSON",
                            async: false,
                            data: {
                                projectId: _this2.app.parpam['projectid'],
                                type: value.data.type,
                                accessToken: window.localStorage.accessToken,
                                transferNii: value.data.transferNii ? 1 : 0,
                                toolType: value.data.toolType ? value.data.toolType.split(',')[1] : '',
                                toolId: value.data.toolType ? value.data.toolType.split(',')[0] : '',
                                dataType: value.data.dataType ? value.data.dataType : ''
                            },
                            type: 'post',
                            fileElementId: 'file1',
                            success: function success(data, status, e) {
                                var jsonArr = JSON.parse(data.match(/{.+}/g)[0]);
                                algdata.close();
                                if (jsonArr.code == 0) {
                                    _this2.listInfo();
                                    _this2.app.alert.show({
                                        title: '',
                                        template: '<span style="font-size: 18px;margin-left:20px;">成功导入' + jsonArr.data.successCount + '条，失败' + jsonArr.data.errorCount + '条</span>',
                                        sure: false,
                                        close: true,
                                        footer: true
                                    });
                                    _this2.event._dispatch('projectdata.datachange');
                                } else {
                                    var msg = jsonArr.code == -1 ? '繁忙' : jsonArr.msg;
                                    _this2.app.alert.show({
                                        title: '',
                                        template: '<span style="font-size: 18px;margin-left:20px;">' + msg + '</span>',
                                        sure: false,
                                        close: true,
                                        footer: true
                                    });
                                }
                                _this2.close();
                                _this2.dom.find('.file').remove();
                                _this2.dom.find('.btnarea').append('<input class="file" type="file" id="file" name="file"/>');
                                // that.bindchangefile();
                            }
                        });
                    }
                });
            });
            this.dom.find('.viewsfdata').on('click', function () {
                _this2.queryImportResult();
            });
            this.dom.find('.propreview').on('click', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                var json, res;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                json = {
                                    projectId: _this2.projectId
                                };

                                _this2.app.loading.show();
                                _context2.next = 4;
                                return _this2.api.project_anno_read(json);

                            case 4:
                                res = _context2.sent;

                                _this2.app.loading.hide();
                                if (res.code == 0) {
                                    if (res.data.annotationItemList.length == 0 && res.data.imageAnnotationList.length == 0) {
                                        _this2.app.alert.show({
                                            title: ' ',
                                            msg: '请先设置影像标注信息后预览试用',
                                            close: true,
                                            footer: true
                                        });
                                    } else {
                                        _this2.bigPic = res.data.largeFigure;
                                        _this2.series_count(true);
                                    }
                                }

                            case 7:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, _this2);
            })));
            this.dom.find('.upload').on('click', function () {
                _this2.dom.find('.file').click();
            });
            this.dom.find('.downtemplete').on('click', function () {
                _this2.app.loading.show();
                setTimeout(function () {
                    _this2.app.loading.hide();
                }, 1000);
                var a = document.createElement("a");
                var url = '/images/page/s.csv';
                a.href = url;
                a.download = '模板.csv';
                a.click();
            });
            this.dom.find('.copytask').on('click', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                var taskIdList, res, msg;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                taskIdList = [];

                                if (!_this2.dom.find('.list-content .choose').dom) {
                                    _context3.next = 13;
                                    break;
                                }

                                _this2.dom.find('.list-content .choose').dom.forEach(function (val) {
                                    console.log(val.parent().parent());
                                    taskIdList.push(val.parent().parent().attr('nowid'));
                                });
                                _this2.app.loading.show();
                                _context3.next = 6;
                                return _this2.api.task_cloneList({ projectId: _this2.projectId, taskIdList: taskIdList });

                            case 6:
                                res = _context3.sent;

                                _this2.app.loading.hide();
                                msg = '';

                                if (res.code == 0) {
                                    msg = '复制成功';
                                    _this2.dom.find('.yyytasklist .choose').removeClass('choose');
                                } else {
                                    msg = '复制失败';
                                }
                                _this2.app.alert.show({
                                    title: '',
                                    template: '<span style="font-size: 18px">' + msg + '</span>',
                                    close: false,
                                    sure: function sure() {}
                                });
                                _context3.next = 14;
                                break;

                            case 13:
                                _this2.app.alert.show({
                                    title: '',
                                    template: '<span style="font-size: 18px;margin-left:20px;">请先选择需要复制的任务</span>',
                                    close: false,
                                    sure: function sure() {}
                                });

                            case 14:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, _this2);
            })));
            this.dom.find('.isgetalgres .radio-box').on('click', function () {
                var dom = ES.selctorDoc(this);
                if (dom.hasClass('choose')) {
                    dom.removeClass('choose');
                    that.dom.find('.toolChoose').addClass('hide');
                    that.dom.find('.toolChoose .choose').removeClass('choose');
                } else {
                    dom.addClass('choose');
                    that.dom.find('.toolChoose').removeClass('hide');
                }
            });
            this.dom.find('.isgetalgres .check-box').on('click', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                var algResultType, dom, res;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                algResultType = '';
                                dom = ES.selctorDoc(this);

                                if (dom.hasClass('choose')) {
                                    dom.removeClass('choose');
                                } else {
                                    dom.addClass('choose');
                                }
                                that.dom.find('.toolChoose .choose').dom.forEach(function (val) {
                                    algResultType += val.parent().attr('data-id') + ',';
                                });
                                _context4.next = 6;
                                return that.api.project_edit_algResultType({ projectId: that.projectId, algResultType: algResultType });

                            case 6:
                                res = _context4.sent;

                                if (res.code == 0) {} else {
                                    alert('更新失败');
                                }

                            case 8:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            })));
            this.binduploadevent();
            this.project_basic_read();
        }
    }, {
        key: 'render',
        value: function render() {
            this.series_count();
        }
    }, {
        key: 'gettask',
        value: function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(value) {
                var json, res;
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                json = {
                                    projectId: this.projectId,
                                    taskNameKey: value,
                                    type: 1
                                };

                                this.prodatapoll.inputarea.loading(true);
                                _context5.next = 4;
                                return this.api.task_like_query(json);

                            case 4:
                                res = _context5.sent;

                                this.prodatapoll.inputarea.loading(false);
                                if (res.code == 0) {
                                    this.prodatapoll.tasklist(res.data.list);
                                }

                            case 7:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            function gettask(_x) {
                return _ref5.apply(this, arguments);
            }

            return gettask;
        }()
    }, {
        key: 'binduploadevent',
        value: function binduploadevent() {
            var _this3 = this;

            this.dom.find('.file').on('change', function () {
                var filePath = ES.selctorDoc("#file").val();
                var fileType = _this3.getFileType(filePath);
                if ("csv" != fileType) {
                    ES.selctorDoc("#filechoose").val("");
                    _this3.app.alert.show({
                        title: '',
                        template: '<span style="font-size: 18px;margin-left:20px;">格式错误，上传失败。</span>',
                        close: false,
                        sure: function sure() {
                            _this3.app.alert.hide();
                            _this3.dom.find('.file').remove();
                            _this3.dom.find('.imagedata').append('<input class="file" type="file" id="file" name="file"/>');
                            _this3.binduploadevent();
                        }
                    });
                } else {
                    _this3.app.loading.show();
                    $.ajaxFileUpload({
                        url: '/aaa/v1/project/series/import', // that.app.domain+'/ccc/user/import',
                        secureuri: false,
                        dataType: "JSON",
                        timeout: 60000,
                        async: false,
                        data: {
                            projectId: _this3.projectId,
                            accessToken: window.localStorage.accessToken
                        },
                        type: 'post',
                        fileElementId: 'file',
                        sequentialUploads: true,
                        beforeSend: function beforeSend(xhr, data) {
                            xhr.setRequestHeader('accessToken', window.localStorage.accessToken);
                        },
                        success: function success(data, status, e) {
                            console.log(data, 'data', status, e);
                            console.log(data.match(/{.+}/g));
                            var jsonArr = JSON.parse(data.match(/{.+}/g)[0]);
                            _this3.app.loading.hide();
                            if (jsonArr.code == 0) {
                                console.log('success');
                                _this3.app.alert.show({
                                    title: '',
                                    template: '<span style="font-size: 18px;margin-left:20px;">成功导入' + jsonArr.data.successNumber + '条，' + jsonArr.data.failNumber + '条不在影像数据中或未被识别或重复</span>',
                                    sure: false,
                                    close: function close() {},
                                    footer: true
                                });
                            } else {
                                _this3.app.alert.show({
                                    title: '',
                                    template: '<span style="font-size: 18px;margin-left:20px;">上传失败</span>',
                                    sure: false,
                                    close: true,
                                    footer: true
                                });
                            }
                            _this3.dom.find('.file').remove();
                            _this3.dom.find('.imagedata').append('<input class="file" type="file" id="file" name="file"/>');
                            _this3.binduploadevent();
                            _this3.getseries();
                        }
                    });
                }
            });
        }
    }, {
        key: 'heartSegment_resultRead',
        value: function () {
            var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                var _this4 = this;

                var res, algType, temp;
                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                _context8.next = 2;
                                return this.api.heartSegment_resultRead({ projectId: this.projectId });

                            case 2:
                                res = _context8.sent;
                                algType = null;

                                if (res.code == 0) {
                                    if (res.data.algType == 1) {
                                        algType = 'isgetalgres';
                                    } else if (res.data.algType == 2) {
                                        algType = 'copd';
                                    } else if (res.data.algType == 3) {
                                        algType = 'fjj';
                                    }
                                    if (this.type == 'edit') {
                                        if (algType) {
                                            this.dom.find('.' + algType + ' .startalg').removeClass('hide');
                                        } else {
                                            this.dom.find('.startalg').removeClass('hide');
                                        }
                                    }
                                    if (algType) {
                                        this.dom.find('.' + algType).append('<p>\u6210\u529F\u6570\u91CF\uFF1A' + res.data.successCount + ',\u5931\u8D25\u6570\u91CF\uFF1A' + res.data.failCount + ',\u5904\u7406\u4E2D\u6570\u91CF\uFF1A' + res.data.processCount + ',\u672A\u5F00\u59CB\u6570\u91CF\uFF1A' + res.data.notStartCount + '</p>');
                                    }
                                    temp = '';

                                    if (algType) {
                                        temp = algType + ' .startalg';
                                    } else {
                                        temp = 'startalg';
                                    }
                                    console.log(temp, 'temp');
                                    this.dom.find('.' + temp).on('click', function () {
                                        var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(e) {
                                            return regeneratorRuntime.wrap(function _callee7$(_context7) {
                                                while (1) {
                                                    switch (_context7.prev = _context7.next) {
                                                        case 0:
                                                            _this4.app.alert.show({
                                                                title: ' ',
                                                                msg: '确认开启吗？',
                                                                close: true,
                                                                sure: function sure() {
                                                                    var config = [{
                                                                        name: 'taskType',
                                                                        type: 'radio',
                                                                        title: '请选择类型',
                                                                        'check': 'empty',
                                                                        remark: '',
                                                                        data: [{ val: '强制重跑', idx: '3' }, { val: '处理失败', idx: '2' }, { val: '新增序列', idx: '1' }]
                                                                    }];
                                                                    _this4.editconclusion = _this4.app.loadModal(_this4.formsubmit, { adv: true }, { title: '选择类型', config: config });
                                                                    _this4.editconclusion.event._addEvent('formsubmit.submit', function () {
                                                                        var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(data) {
                                                                            var msg, resjson, _res;

                                                                            return regeneratorRuntime.wrap(function _callee6$(_context6) {
                                                                                while (1) {
                                                                                    switch (_context6.prev = _context6.next) {
                                                                                        case 0:
                                                                                            msg = '';

                                                                                            _this4.app.loading.show();
                                                                                            _context6.next = 4;
                                                                                            return _this4.api.project_joinAlg({ projectId: _this4.projectId, joinAlg: true });

                                                                                        case 4:
                                                                                            resjson = _context6.sent;

                                                                                            _this4.app.loading.hide();

                                                                                            if (!(resjson.code == 0)) {
                                                                                                _context6.next = 16;
                                                                                                break;
                                                                                            }

                                                                                            _this4.app.loading.show();
                                                                                            _context6.next = 10;
                                                                                            return _this4.api.heartSegment_start({ projectId: _this4.projectId, taskType: data.taskType, algType: ES.selctorDoc(e.target).attr('algType') });

                                                                                        case 10:
                                                                                            _res = _context6.sent;

                                                                                            _this4.app.loading.hide();
                                                                                            if (_res.code == 0) {
                                                                                                msg = '开启成功';
                                                                                                _this4.dom.find('.startalg').addClass('hide');
                                                                                                ES.selctorDoc(e.target).parent().find('p').remove();
                                                                                                ES.selctorDoc(e.target).parent().append('<p>结果正在处理中</p>');
                                                                                            } else {
                                                                                                msg = _res.msg;
                                                                                            }
                                                                                            _this4.editconclusion.close();
                                                                                            _context6.next = 17;
                                                                                            break;

                                                                                        case 16:
                                                                                            msg = resjson.msg;

                                                                                        case 17:
                                                                                            _this4.app.alert.show({
                                                                                                title: ' ',
                                                                                                msg: msg,
                                                                                                close: true,
                                                                                                footer: true
                                                                                            });

                                                                                        case 18:
                                                                                        case 'end':
                                                                                            return _context6.stop();
                                                                                    }
                                                                                }
                                                                            }, _callee6, _this4);
                                                                        }));

                                                                        return function (_x3) {
                                                                            return _ref8.apply(this, arguments);
                                                                        };
                                                                    }());
                                                                }
                                                            });

                                                        case 1:
                                                        case 'end':
                                                            return _context7.stop();
                                                    }
                                                }
                                            }, _callee7, _this4);
                                        }));

                                        return function (_x2) {
                                            return _ref7.apply(this, arguments);
                                        };
                                    }());
                                }

                            case 5:
                            case 'end':
                                return _context8.stop();
                        }
                    }
                }, _callee8, this);
            }));

            function heartSegment_resultRead() {
                return _ref6.apply(this, arguments);
            }

            return heartSegment_resultRead;
        }()
    }, {
        key: 'project_basic_read',
        value: function () {
            var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                var _this5 = this;

                var res, toolArr;
                return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:
                                _context9.next = 2;
                                return this.api.project_basic_read({ id: this.projectId });

                            case 2:
                                res = _context9.sent;

                                if (res.code == 0) {
                                    toolArr = [];

                                    toolArr = res.data.algResultType.split(',');
                                    if (toolArr.length > 0) {
                                        this.dom.find('.isgetalgres .radio-box').click();
                                        toolArr.forEach(function (val) {
                                            _this5.dom.find('.toolChoose p[data-id="' + val + '"').find('.check-box').addClass('choose');
                                        });
                                    }
                                }

                            case 4:
                            case 'end':
                                return _context9.stop();
                        }
                    }
                }, _callee9, this);
            }));

            function project_basic_read() {
                return _ref9.apply(this, arguments);
            }

            return project_basic_read;
        }()
    }, {
        key: 'getFileType',
        value: function getFileType(filePath) {
            var startIndex = filePath.lastIndexOf(".");
            if (startIndex != -1) return filePath.substring(startIndex + 1, filePath.length).toLowerCase();else return "";
        }
    }, {
        key: 'download',
        value: function download(value) {
            var sting1 = encodeURI(JSON.stringify(this.apidata));
            var url = this.app.domain1 + 'v1/project/series/export?projectId=' + this.projectId + '&operation=' + value + '';
            Tool.downfile(url, this.app);
        }
        //清空序列

    }, {
        key: 'clearandnew',
        value: function () {
            var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                var json, res;
                return regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                json = {
                                    projectId: this.projectId
                                };

                                this.app.loading.show();
                                _context10.next = 4;
                                return this.api.clearseries(json);

                            case 4:
                                res = _context10.sent;

                                this.app.loading.hide();
                                if (res.code == 0) {
                                    this.addimage(1);
                                    this.addmodel.close();
                                    this.addmodel = null;
                                }

                            case 7:
                            case 'end':
                                return _context10.stop();
                        }
                    }
                }, _callee10, this);
            }));

            function clearandnew() {
                return _ref10.apply(this, arguments);
            }

            return clearandnew;
        }()
        //添加序列

    }, {
        key: 'addimage',
        value: function () {
            var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(value) {
                var res;
                return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                        switch (_context11.prev = _context11.next) {
                            case 0:
                                if (!(this.model.getData('listInfo').list.length > 0)) {
                                    _context11.next = 11;
                                    break;
                                }

                                this.dom.find('.viewimage').removeClass('hide');
                                // that.model.getData('listInfo').list.forEach(function (val,idx) {
                                //     that.apiData.seriesInstanceUidList.push(val.seriesInstanceUID);
                                // })
                                this.apiData.operation = value;
                                this.app.loading.show();
                                _context11.next = 6;
                                return this.api.updateproimage(this.apiData);

                            case 6:
                                res = _context11.sent;

                                this.app.loading.hide();
                                if (res.code == 0) {
                                    this.addmodel.close();
                                    this.addmodel = null;
                                }
                                _context11.next = 12;
                                break;

                            case 11:
                                //this.dom.find('.viewimage').addClass('hide')
                                this.getseries();

                            case 12:
                            case 'end':
                                return _context11.stop();
                        }
                    }
                }, _callee11, this);
            }));

            function addimage(_x4) {
                return _ref11.apply(this, arguments);
            }

            return addimage;
        }()
        //获取医院列表

    }, {
        key: 'gethospital',
        value: function () {
            var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(value, value2) {
                var json1, res, list;
                return regeneratorRuntime.wrap(function _callee12$(_context12) {
                    while (1) {
                        switch (_context12.prev = _context12.next) {
                            case 0:
                                if (this.prodatapoll && this.prodatapoll.yymc) {
                                    this.prodatapoll.yymc.loading(true);
                                }
                                if (this.addmodel && this.addmodel.duoxuanobj && this.addmodel.duoxuanobj.hospitalCode) {
                                    this.addmodel.duoxuanobj.hospitalCode.loading(true);
                                }
                                json1 = { service: 'DR', method: '/v1/hospital/search', params: JSON.stringify({ code: value }) };
                                _context12.next = 5;
                                return this.api.gethospital(json1);

                            case 5:
                                res = _context12.sent;

                                if (this.prodatapoll && this.prodatapoll.yymc) {
                                    this.prodatapoll.yymc.loading(false);
                                }
                                if (this.addmodel && this.addmodel.duoxuanobj && this.addmodel.duoxuanobj.hospitalCode) {
                                    this.addmodel.duoxuanobj.hospitalCode.loading(false);
                                }
                                if (res.code == 0) {
                                    list = [];

                                    res.data.list.forEach(function (val, idx) {
                                        var obj = {
                                            idx: val.code,
                                            val: val.code
                                        };
                                        list.push(obj);
                                    });
                                    this.model.setData('hospitalInfo', list);
                                    if (this.prodatapoll) {
                                        this.prodatapoll.resetxlk(list);
                                    }
                                    if (value2) {
                                        this.model.setData('totalInfo', res.data);
                                    }
                                }

                            case 9:
                            case 'end':
                                return _context12.stop();
                        }
                    }
                }, _callee12, this);
            }));

            function gethospital(_x5, _x6) {
                return _ref12.apply(this, arguments);
            }

            return gethospital;
        }()
        //查询可添加的序列

    }, {
        key: 'getlist',
        value: function () {
            var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(value, value2) {
                var json, res;
                return regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                        switch (_context13.prev = _context13.next) {
                            case 0:
                                this.app.loading.show();
                                json = { service: 'DR', method: '/v1/series/search', params: JSON.stringify(value) };
                                _context13.next = 4;
                                return this.api.getimage(json);

                            case 4:
                                res = _context13.sent;

                                this.app.loading.hide();
                                if (res.code == 0) {
                                    if (value2) {
                                        this.model.listInfo = res.data;
                                        this.model.setData('totalInfo', res.data);
                                    } else {
                                        this.model.setData('listInfo', res.data);
                                    }
                                }

                            case 7:
                            case 'end':
                                return _context13.stop();
                        }
                    }
                }, _callee13, this);
            }));

            function getlist(_x7, _x8) {
                return _ref13.apply(this, arguments);
            }

            return getlist;
        }()
        //查询项目下配置的所有工具

    }, {
        key: 'alg_sar_list_tool',
        value: function () {
            var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
                var _this6 = this;

                var json, res;
                return regeneratorRuntime.wrap(function _callee14$(_context14) {
                    while (1) {
                        switch (_context14.prev = _context14.next) {
                            case 0:
                                json = {
                                    projectId: this.projectId
                                };

                                this.toolList = [];
                                _context14.next = 4;
                                return this.api.alg_sar_list_tool(json);

                            case 4:
                                res = _context14.sent;

                                if (res.code == 0) {
                                    res.data.forEach(function (val) {
                                        _this6.toolList.push({ val: val.type, idx: val.id + ',' + val.type });
                                    });
                                }

                            case 6:
                            case 'end':
                                return _context14.stop();
                        }
                    }
                }, _callee14, this);
            }));

            function alg_sar_list_tool() {
                return _ref14.apply(this, arguments);
            }

            return alg_sar_list_tool;
        }()
        //查询已导入算法数据

    }, {
        key: 'queryImportResult',
        value: function () {
            var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
                var _this7 = this;

                var res, alglist;
                return regeneratorRuntime.wrap(function _callee17$(_context17) {
                    while (1) {
                        switch (_context17.prev = _context17.next) {
                            case 0:
                                _context17.next = 2;
                                return this.api.get_import_result_list_search({ projectId: this.projectId, page: 1, pageSize: 10 });

                            case 2:
                                res = _context17.sent;
                                alglist = this.app.loadModal(this.alglist, { adv: true }, { data: res.data });

                                alglist.event._addEvent('alglist.listaction', function () {
                                    var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(value) {
                                        var param;
                                        return regeneratorRuntime.wrap(function _callee15$(_context15) {
                                            while (1) {
                                                switch (_context15.prev = _context15.next) {
                                                    case 0:
                                                        console.log(value);
                                                        _context15.t0 = value.classname;
                                                        _context15.next = _context15.t0 === 'delete' ? 4 : _context15.t0 === 'viewfail' ? 5 : 8;
                                                        break;

                                                    case 4:
                                                        return _context15.abrupt('break', 8);

                                                    case 5:
                                                        param = encodeURI(JSON.stringify({ resourceId: value.id.split(',')[1] }));

                                                        _this7.api.HttpRequest.downLoadFile(_this7.app.domain1 + 'v1/base/fileResource/download?param=' + param + '&&accessToken=' + window.localStorage.accessToken);
                                                        return _context15.abrupt('break', 8);

                                                    case 8:
                                                    case 'end':
                                                        return _context15.stop();
                                                }
                                            }
                                        }, _callee15, _this7);
                                    }));

                                    return function (_x9) {
                                        return _ref16.apply(this, arguments);
                                    };
                                }());
                                alglist.event._addEvent('alglist.pagenumber', function () {
                                    var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(value) {
                                        var res;
                                        return regeneratorRuntime.wrap(function _callee16$(_context16) {
                                            while (1) {
                                                switch (_context16.prev = _context16.next) {
                                                    case 0:
                                                        console.log(value, 'page');
                                                        _context16.next = 3;
                                                        return _this7.api.get_import_result_list_search({ projectId: _this7.projectId, page: value, pageSize: 10 });

                                                    case 3:
                                                        res = _context16.sent;

                                                        alglist.setList(res.data, false);

                                                    case 5:
                                                    case 'end':
                                                        return _context16.stop();
                                                }
                                            }
                                        }, _callee16, _this7);
                                    }));

                                    return function (_x10) {
                                        return _ref17.apply(this, arguments);
                                    };
                                }());

                            case 6:
                            case 'end':
                                return _context17.stop();
                        }
                    }
                }, _callee17, this);
            }));

            function queryImportResult() {
                return _ref15.apply(this, arguments);
            }

            return queryImportResult;
        }()
        //渲染已引用该项目的任务列表头部

    }, {
        key: 'setTitle',
        value: function setTitle() {
            var _this8 = this;

            var obj = {};
            var obj1 = {};
            obj['icon'] = {
                "taskName": {
                    name: '<span data-i18n="age" data-name="年龄">任务名称</span>',
                    type: 'text',
                    code: 'checkid',
                    w: '20%',
                    ww: '20%',
                    n: "40"
                },
                "startTime": {
                    name: '<span data-i18n="age" data-name="年龄">任务发布时间</span>',
                    type: 'text',
                    code: 'pid',
                    w: '20%',
                    ww: '20%'
                },
                "endTime": {
                    name: '<span data-i18n="age" data-name="年龄">任务到期时间</span>',
                    type: 'text',
                    code: 'pname',
                    w: '20%',
                    ww: '20%'
                },
                "studyTotalCount": {
                    name: '<span data-i18n="age" data-name="年龄">样本数量</span>',
                    type: 'text',
                    code: 'psex',
                    w: '20%',
                    ww: '20%'
                },
                "vendors": {
                    name: '<span data-i18n="age" data-name="年龄">派发公司</span>',
                    type: 'text',
                    code: 'age',
                    w: '20%',
                    ww: '20%'
                }
            };
            obj['type'] = 'center';
            obj['chose'] = 'all';
            obj['chosew'] = '30px';
            obj['initPagina'] = false;
            obj['pagesizeSet'] = false;
            obj['tablewidth'] = ES.selctorDoc('.yyytasklist').box().clientWidth - 40;
            __webpack_require__.e/* require.ensure */(53/* duplicate */).then((function () {
                var cont_table = __webpack_require__(640);
                _this8.table = _this8.app.loadModule(cont_table, _this8.dom.find('.yyytasklist'), {
                    id: 'yyytasklist',
                    header: obj
                });
                _this8.table.event._addEvent('table.pagenumber', function (value) {
                    _this8.viewData.page = parseInt(value);
                    _this8.table.changenum(_this8.viewData.page);
                    _this8.setMain();
                });
                _this8.table.event._addEvent('table.pagesize', function (value) {
                    _this8.viewData.pageSize = value.num;
                    _this8.viewData.page = 1;
                    _this8.setMain(true);
                });
                _this8.dom.find('.list-content').removeClass('hide');
                _this8.viewData.page = 1;
                _this8.viewData.projectIdList = [];
                _this8.viewData.projectIdList.push(parseInt(_this8.projectId));
                _this8.viewData.pagesize = 10;
                _this8.setMain(true);
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
        }
        //渲染已引用该项目的任务列表

    }, {
        key: 'setMain',
        value: function () {
            var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(bool) {
                var data2, res;
                return regeneratorRuntime.wrap(function _callee18$(_context18) {
                    while (1) {
                        switch (_context18.prev = _context18.next) {
                            case 0:
                                data2 = [];

                                this.table.showloading();
                                _context18.next = 4;
                                return this.api.task_stayClone_search({ projectId: this.projectId });

                            case 4:
                                res = _context18.sent;

                                if (res.code == 0) {
                                    if (res.data.length > 0) {
                                        res.data.forEach(function (val, idx) {
                                            var obj = {};
                                            obj.id = val.taskId;
                                            val.id = val.taskId;
                                            val.vendors = '';
                                            if (val.venderNameList.length && val.venderNameList.length > 0) {
                                                val.venderNameList.forEach(function (v, i) {
                                                    val.vendors += v;
                                                    if (i != val.venderNameList.length - 1) {
                                                        val.vendors += '、';
                                                    }
                                                });
                                            }
                                            data2.push(obj);
                                            val.startTime = Tool.time(val.startTime, 'yyyy-mm-dd');
                                            val.endTime = Tool.time(val.endTime, 'yyyy-mm-dd');
                                        });
                                        this.table.setData(res.data, data2);
                                    } else {
                                        this.table.noData();
                                        this.dom.find('.copytask').addClass('hide');
                                    }
                                }
                                if (bool) {
                                    this.table.getTotal(res.data.pages, 2, res.data.total);
                                }
                                this.resize();
                                this.initscroll();

                            case 9:
                            case 'end':
                                return _context18.stop();
                        }
                    }
                }, _callee18, this);
            }));

            function setMain(_x11) {
                return _ref18.apply(this, arguments);
            }

            return setMain;
        }()
        //获取序列列表

    }, {
        key: 'getseries',
        value: function () {
            var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(value) {
                var res;
                return regeneratorRuntime.wrap(function _callee19$(_context19) {
                    while (1) {
                        switch (_context19.prev = _context19.next) {
                            case 0:
                                if (value) {
                                    value.projectId = this.projectId;
                                } else {
                                    value = {
                                        projectId: this.projectId,
                                        page: 1,
                                        pageSize: 10
                                    };
                                }
                                this.app.loading.show();
                                _context19.next = 4;
                                return this.api.getproimage(value);

                            case 4:
                                res = _context19.sent;

                                this.app.loading.hide();
                                if (res.code == 0) {
                                    this.projectseries = res.data.list;
                                    if (res.data.list && res.data.list.length > 0) {
                                        this.dom.find('.viewimage').removeClass('hide');
                                    }
                                    this.prodatapoll.setMain(res, this.resetPage);
                                }

                            case 7:
                            case 'end':
                                return _context19.stop();
                        }
                    }
                }, _callee19, this);
            }));

            function getseries(_x12) {
                return _ref19.apply(this, arguments);
            }

            return getseries;
        }()
        //查询该项目下序列数

    }, {
        key: 'series_count',
        value: function () {
            var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(change) {
                var res;
                return regeneratorRuntime.wrap(function _callee20$(_context20) {
                    while (1) {
                        switch (_context20.prev = _context20.next) {
                            case 0:
                                this.app.loading.show();
                                _context20.next = 3;
                                return this.api.series_count({ projectId: this.projectId });

                            case 3:
                                res = _context20.sent;

                                this.app.loading.hide();
                                if (res.data.count > 0) {
                                    this.dom.find('.viewimage').removeClass('hide');
                                } else {
                                    this.dom.find('.viewimage').addClass('hide');
                                }
                                if (change) {
                                    this.model.setData('count', res.data.count);
                                }

                            case 7:
                            case 'end':
                                return _context20.stop();
                        }
                    }
                }, _callee20, this);
            }));

            function series_count(_x13) {
                return _ref20.apply(this, arguments);
            }

            return series_count;
        }()
        //项目预览时判断是否有序列

    }, {
        key: 'count',
        value: function count() {
            if (this.model.count > 0) {
                var page = this.bigPic ? 'drapCanvasView' : 'markpreview';
                window.location.href = 'http://' + window.location.host + '/#!/' + page + '/1/' + this.projectId + '/preview/' + this.app.parpam.status + '/' + this.projectType;
                window.location.reload();
            } else {
                this.app.alert.show({
                    title: ' ',
                    msg: '项目下不存在影像序列，请先添加',
                    close: true,
                    footer: true
                });
            }
        }
    }, {
        key: 'get_last_import_log',
        value: function () {
            var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {
                return regeneratorRuntime.wrap(function _callee21$(_context21) {
                    while (1) {
                        switch (_context21.prev = _context21.next) {
                            case 0:
                            case 'end':
                                return _context21.stop();
                        }
                    }
                }, _callee21, this);
            }));

            function get_last_import_log() {
                return _ref21.apply(this, arguments);
            }

            return get_last_import_log;
        }()
    }, {
        key: 'resize',
        value: function resize() {
            var ch = ES.selctorDoc(window).box().clientHeight - 100;
            var cw = ES.selctorDoc(window).box().clientWidth - 40;
            ES.selctorDoc('.createprothree').css({ 'height': ch, 'width': cw });
            // ES.selctorDoc('.yyytasklist .maintable').css({ 'height': ch - 350 });
        }
    }, {
        key: 'initscroll',
        value: function initscroll() {
            if (this.myScroll) {
                this.myScroll.refresh();
                return;
            }
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            ES.selctorDoc('.createprothree').attr('id', rid);
            this.myScroll = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }]);

    return createprothree;
}(Interstellar.pagesBase);

module.exports = createprothree;

/***/ }),

/***/ 761:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(762);

var addpart = function (_Interstellar$modalBa) {
    _inherits(addpart, _Interstellar$modalBa);

    function addpart(app, dom, value, addMode) {
        _classCallCheck(this, addpart);

        var _this = _possibleConstructorReturn(this, (addpart.__proto__ || Object.getPrototypeOf(addpart)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(764);
        _this.name = 'addpart';
        _this.apidata = {};
        return _this;
    }

    _createClass(addpart, [{
        key: 'complete',
        value: function complete() {
            var that = this;
            this.initView();
            if (that.api.title) {
                that.dom.find('.modal-title').html(that.api.title);
            }
        }
    }, {
        key: 'initView',
        value: function initView() {
            var that = this;
            that.dom.find('.inputBox').on('change', function () {
                that.apidata[ES.selctorDoc(this).attr('api')] = ES.selctorDoc(this).val();
                console.log(that.apidata, 'that.apidata');
            });
            this.dom.find('.icon-guanbi').on('click', function () {
                that.close();
            });
            this.dom.find('.btn-cancel').on('click', function () {
                that.close();
            });
            this.dom.find('.btn-confirm').on('click', function () {
                that.dom.find('.tips').css({ color: '#666' });
                that.dom.find('.inputLine').dom.forEach(function (val, idx) {
                    val.find('.' + val.attr('redlabel')).removeClass('redborder');
                    val.find('.required').remove();
                    if (Tool.checkForm(ES.selctorDoc(val).dom, 'red') !== '') {
                        val.find('.' + val.attr('redlabel')).addClass('redborder');
                        val.find('.' + val.attr('redlabel')).after('<span class="required">' + Tool.checkForm(ES.selctorDoc(val).dom, 'red') + '</span>');
                    }
                });
                if (that.dom.find('.redborder').dom) {
                    return false;
                } else {
                    console.log(that.apidata.number, that.api.total, 'that.api.total');
                    if (that.apidata.number > that.api.total) {
                        that.dom.find('.tips').css({ color: 'red' });
                        return false;
                    }
                    that.event._dispatch('addpart.submit', that.apidata);
                }
            });
        }
    }]);

    return addpart;
}(Interstellar.modalBase);
//原型链一定要有的


module.exports = addpart;

/***/ }),

/***/ 762:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(763);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./addpart.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./addpart.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 763:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".addpart {\n  margin-left: -250px;\n  width: 500px;\n  height: 300px;\n  font-size: 16px;\n}\n.addpart .modal-header {\n  padding: 40px 0 40px 30px;\n}\n.addpart .modal-header .modal-title {\n  font-family: MicrosoftYaHei;\n  font-weight: bold;\n  font-size: 18px;\n  color: #333333;\n  letter-spacing: 0;\n}\n.addpart .modal-header i {\n  font-size: 15px;\n  position: absolute;\n  right: 20px;\n  top: 20px;\n  cursor: pointer;\n}\n.addpart .modal-body {\n  padding: 0px !important;\n  margin: 0 30px;\n}\n.addpart .modal-body span {\n  margin-left: 0px;\n}\n.addpart .modal-body .inputLine {\n  position: relative;\n  height: 70px;\n}\n.addpart .modal-body .inputLine > div {\n  display: inline-block;\n}\n.addpart .modal-body .inputLine .confirm {\n  margin-right: 0;\n}\n.addpart .modal-body .inputLine .inputBox {\n  width: 305px;\n  height: 38px;\n  line-height: 38px;\n  border: 1px solid #E8E8E8;\n  border-radius: 4px;\n  outline: none;\n  padding-left: 5px;\n}\n.addpart .modal-body .inputLine .names {\n  font-family: \"MicrosoftYaHei\";\n  font-size: 14px;\n  color: #333333;\n  letter-spacing: 0;\n  margin-right: 17px;\n  width: 100px;\n}\n.addpart .modal-body .inputLine .tips {\n  margin-left: 123px;\n  font-size: 14px;\n  margin-top: 8px;\n}\n.addpart .modal-body .inputLine .forget {\n  color: #448E97;\n}\n.addpart .modal-body .inputLine .errorMessage {\n  color: red;\n}\n.addpart .modal-footer {\n  margin: 40px 20px 0 0;\n}\n.addpart .btn:hover {\n  background: #1F474C !important;\n  color: #fff;\n  border-color: #1F474C !important;\n}\n.addpart .required {\n  position: relative;\n  margin-left: 120px!important;\n}\n", ""]);

// exports


/***/ }),

/***/ 764:
/***/ (function(module, exports) {

module.exports = "<div class=\"modal addpart\"> <div class=modal-header> <i class=\"iconfont icon-guanbi\"></i> </div> <div class=modal-body> <div class=inputLine redlabel=inputBox> <span class=names>请填写序列数量</span> <input type=text class=inputBox check=empty|int api=number /> <span class=tips>该数量必须小于等于查询结果数量</span> </div> </div> <div class=modal-footer> <a class=\"btn btn-confirm\" data-i18n=qd data-name=继续添加>确认数量添加</a> <a class=\"btn btn-cancel\" data-i18n=qx data-name=保存>取消</a> </div> </div>";

/***/ }),

/***/ 779:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(780);
// var html = require('./tpl.html')
//type:custom   createprothree页面查看序列列表弹窗
//type:add      createtask2页面添加序列弹窗
//type:view     createtask2页面查看序列弹窗

var projectdata = function (_Interstellar$modalBa) {
    _inherits(projectdata, _Interstellar$modalBa);

    function projectdata(app, dom, value, addMode) {
        _classCallCheck(this, projectdata);

        var _this = _possibleConstructorReturn(this, (projectdata.__proto__ || Object.getPrototypeOf(projectdata)).call(this, app, dom, value, addMode));

        _this.html = __webpack_require__(782);
        _this.name = 'biaozhulist';
        _this.flag = true;
        _this.code = '';
        return _this;
    }

    _createClass(projectdata, [{
        key: 'complete',
        value: function complete() {
            var that = this;
            that.apidata = {
                hospitalCode: '',
                studyDateBegin: '',
                studyDateEnd: '',
                assigned: '',
                taskIdList: [],
                page: 1,
                pageSize: 10
            };
            that.finalquery = {};
            //this.bodypart=[{idx:'LUNG',val:'肺部'},{idx:'RIB',val:'肋骨'},{idx:'KNEE_JOINT',val:'膝关节'},{idx:'COXA_JOINT',val:'髋关节'},{idx:'HAND',val:'手'},{idx:'FOOT',val:'足'},{idx:'SKULL_BRAIN',val:'颅脑'},{idx:'HEART',val:'心脏'},{val:'眼底',idx:'EYEGROUND'}]
            this.bodypart = Tool.configxlkformat(that.app.constmap['BODY_PART']);
            that.totalnum = 0;
            switch (that.api.type) {
                case 'view':
                    that.dom.find('.isselected').addClass('hide');
                    that.dom.find('.usecondition').addClass('hide');
                    that.dom.find('.btnarea').addClass('hide');
                    that.dom.find('.modelArea').addClass('hide');
                    that.dom.find('.title').html('已引入项目序列池');
                    that.setTitle('view');
                    that.dom.find('.viewdelete').removeClass('hide');
                    if (that.api.candel == true) {
                        that.dom.find('.deleteresult').removeClass('hide');
                    }
                    that.dom.find('.deleteresult').on('click', function () {
                        that.app.alert.show({
                            title: ' ',
                            msg: '确认要删除序列？',
                            close: true,
                            sure: function sure() {
                                that.event._dispatch('projectdata.deleteresult', { data: that.apidata, total: that.totalnum, currentSearchReqId: that.currentSearchReqId });
                                that.close();
                            }
                        });
                    });
                    this.dom.find('.exportresult').on('click', function () {
                        that.event._dispatch('projectdata.exportresult', { data: that.apidata, total: that.totalnum, currentSearchReqId: that.currentSearchReqId });
                    });
                    break;
                case 'add':
                    that.firstSelect = { val: '否', idx: '0' };
                    that.apidata['assigned'] = false;
                    that.setTitle('add');
                    break;
                case 'custom':
                    that.setTitle('custom');
                    that.dom.find('.btnarea').html(that.api.html);
                    that.dom.find('.modelArea').addClass('hide');
                    if (that.api.del == 'view') {
                        that.dom.find('.deleteres').addClass('hide');
                    }
                    that.dom.find('.deleteres').on('click', function () {
                        that.event._dispatch('projectdata.deleteres', { condition: that.finalquery, currentSearchReqId: that.currentSearchReqId });
                    });
                    that.dom.find('.exportname').on('click', function () {
                        that.event._dispatch('projectdata.export', { condition: that.finalquery, currentSearchReqId: that.currentSearchReqId });
                    });
                    break;
            }
            this.dom.find('.icon-guanbi').on('click', function () {
                that.close();
            });
            this.dom.find('.addcustom').on('click', function () {
                that.exportData = {
                    url: '/aaa/v1/task/series/import',
                    data: {
                        taskId: that.api.id,
                        accessToken: window.localStorage.accessToken
                    }
                };
                that.dom.find('.file').click();
            });
            this.dom.find('.addImageID').on('click', function () {
                that.exportData = {
                    url: '/aaa/v1/task/series/import/seriesImageID',
                    data: {
                        taskId: that.api.id,
                        accessToken: window.localStorage.accessToken
                    }
                };
                that.dom.find('.file').click();
            });
            this.dom.find('.inputBox').on('change', function () {
                that.apidata['seriSubmitCount'] = ES.selctorDoc(this).val();
            });
            this.dom.find('.downmodel').on('click', function () {
                that.app.loading.show();
                setTimeout(function () {
                    that.app.loading.hide();
                }, 1000);
                var a = document.createElement("a");
                // var url = '/images/page/任务添加项目序列模板.xlsx';
                var url = ES.selctorDoc(this).attr('url');
                a.href = url;
                a.download = '模板.xlsx';
                a.click();
            });
            that.dom.find('.file').on('change', function () {
                console.log(that.api.id, 'that.api.id');
                var filePath = ES.selctorDoc("#file").val();
                var fileType = that.getFileType(filePath);
                if ("xls" != fileType && "xlsx" != fileType) {
                    ES.selctorDoc("#filechoose").val("");
                    that.app.alert.show({
                        title: '',
                        template: '<span style="font-size: 18px;margin-left:20px;">格式错误，上传失败。</span>',
                        close: false,
                        sure: function sure() {
                            that.app.alert.hide();
                        }
                    });
                } else {
                    that.app.loading.show();
                    $.ajaxFileUpload({
                        url: that.exportData.url, // that.app.domain+'/ccc/user/import',
                        secureuri: false,
                        dataType: "JSON",
                        async: false,
                        data: that.exportData.data,
                        type: 'post',
                        fileElementId: 'file',
                        success: function success(data, status, e) {
                            that.app.loading.hide();
                            var jsonArr = JSON.parse(data.match(/{.+}/g)[0]);
                            if (jsonArr.code == 0) {
                                console.log('success');
                                that.app.alert.show({
                                    title: '',
                                    template: '<span style="font-size: 18px;margin-left:20px;">成功导入' + jsonArr.data.successCount + '条，' + jsonArr.data.errorCount + '条不在此项目影像数据中或未被识别或重复</span>',
                                    sure: false,
                                    close: true,
                                    footer: true
                                });
                                that.event._dispatch('projectdata.datachange');
                            } else {
                                that.app.alert.show({
                                    title: '',
                                    template: '<span style="font-size: 18px;margin-left:20px;">上传失败</span>',
                                    sure: false,
                                    close: true,
                                    footer: true
                                });
                            }
                            that.close();
                            that.dom.find('.file').remove();
                            that.dom.find('.btnarea').append('<input class="file" type="file" id="file" name="file"/>');
                            // that.bindchangefile();
                        }
                    });
                }
            });
            this.dom.find('.addall').on('click', function () {
                that.event._dispatch('projectdata.addall', { query: that.finalquery, total: that.totalnum, currentSearchReqId: that.currentSearchReqId });
            });
            this.dom.find('.addpartbtn').on('click', function () {
                var addpart = __webpack_require__(761);
                that.addpart1 = that.app.loadModal(addpart, { adv: true }, { total: that.totalnum });
                that.addpart1.event._addEvent('addpart.submit', function (value) {
                    that.addpart1.close();
                    that.event._dispatch('projectdata.addall', { query: that.finalquery, total: that.totalnum, randomAddNum: value.number, currentSearchReqId: that.currentSearchReqId });
                });
            });

            this.dom.find('.searchbtn').on('click', function () {
                console.log(that.apidata, 'that.apidata');
                if (that.apidata.seriSubmitCount != 0) {
                    if (that.apidata.compareSymbol && !that.apidata.seriSubmitCount) {
                        that.dom.find('.seriSubmitCount').css({ border: '1px solid red' });
                        that.dom.find('.seriSubmitCount').after('<span class="required">请输入大于等于0的整数</span>');
                        return;
                    } else if (!/^[0-9]\d*$/.test(that.apidata.seriSubmitCount) && that.apidata.seriSubmitCount) {
                        that.dom.find('.seriSubmitCount').css({ border: '1px solid red' });
                        that.dom.find('.seriSubmitCount').after('<span class="required">请输入大于等于0的整数</span>');
                        return;
                    }
                }
                that.dom.find('.seriSubmitCount').css({ border: '1px solid #e8e8e8' });
                that.dom.find('.required').remove();
                that.apidata.page = 1;
                if (that.apidata.seriSubmitCount != 0) {
                    that.apidata.seriSubmitCount = that.apidata.seriSubmitCount ? parseInt(that.apidata.seriSubmitCount) : '';
                } else {
                    that.apidata.seriSubmitCount = 0;
                }
                that.event._dispatch('projectdata.search', { data: that.apidata });
            });
            this.render();
        }
    }, {
        key: 'render',
        value: function render() {
            var that = this;
            __webpack_require__.e/* require.ensure */(52/* duplicate */).then((function () {
                var dropdown = __webpack_require__(638);
                that.yymc = that.app.loadModule(dropdown, that.dom.find('.yymc'), {
                    className: 'xlk',
                    firstSelect: {
                        val: '医院名称',
                        idx: ''
                    },
                    data: [],
                    input: true
                });
                that.yymc.event._addEvent('option.click', function (value) {
                    that.apidata['hospitalCode'] = value.idx;
                    console.log(that.apidata, 'apidata');
                });
                that.yymc.event._addEvent('drop.input', function (value) {
                    setTimeout(function () {
                        that.event._dispatch('hospital.input', value.data);
                    }, 1500);
                });
                that.yymc.event._addEvent('dropDown.clear', function (value) {
                    that.apidata['hospitalCode'] = '';
                    that.event._dispatch('hospital.input', '');
                });
                that.rwxq = that.app.loadModule(dropdown, that.dom.find('.rwxq'), {
                    className: 'xlk',
                    firstSelect: { val: '', idx: '' },
                    data: [{ val: '是', idx: '1' }, { val: '否', idx: '0' }]
                });
                that.rwxq.event._addEvent('option.click', function (value) {
                    that.apidata['assigned'] = value.idx == 1 ? true : false;
                });
                that.rwxq.event._addEvent('dropDown.clear', function (value) {
                    that.apidata['assigned'] = '';
                });
                if (that.api.type === 'add') {
                    that.dom.find('.rwxq .option[data-idx="0"]').click();
                }
                that.compareSymbol = that.app.loadModule(dropdown, that.dom.find('.times'), {
                    className: 'kxlk',
                    firstSelect: { val: '', idx: '' },
                    data: [{ val: '大于', idx: '2' }, { val: '小于', idx: '3' }, { val: '等于', idx: '1' }]
                });
                that.compareSymbol.event._addEvent('option.click', function (value) {
                    that.apidata['compareSymbol'] = parseInt(value.idx);
                });
                that.compareSymbol.event._addEvent('dropDown.clear', function (value) {
                    that.apidata['compareSymbol'] = '';
                    that.apidata['seriSubmitCount'] = '';
                });
                that.exist = that.app.loadModule(dropdown, that.dom.find('.exist'), {
                    className: 'kxlk',
                    firstSelect: { val: '', idx: '' },
                    data: [{ val: '存在', idx: '1' }, { val: '不存在', idx: '0' }]
                });
                that.exist.event._addEvent('option.click', function (value) {
                    that.apidata['exist'] = value.idx == 1 ? true : false;
                });
                that.exist.event._addEvent('dropDown.clear', function (value) {
                    that.apidata['exist'] = '';
                });
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
            __webpack_require__.e/* require.ensure */(61).then((function () {
                var calendar = __webpack_require__(644);
                that.startTime = that.app.loadModule(calendar, that.dom.find('.timefilter'), { titleShow: false, defaultword: '查询检查时间段' });
                that.startTime.event._addEvent('times1.day', function (value) {
                    if (value.st) that.apidata.studyDateBegin = value.st + " 00:00:00";
                    if (value.et) that.apidata.studyDateEnd = value.et + " 23:59:59";
                    console.log(that.apidata);
                });
                that.startTime.event._addEvent('times.dele', function (value) {
                    if (value.dom.hasClass('day_left')) {
                        that.apidata.studyDateBegin = '';
                    } else {
                        that.apidata.studyDateEnd = '';
                    }
                    console.log(that.apidata);
                });
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
            __webpack_require__.e/* require.ensure */(57/* duplicate */).then((function () {
                var inputarea1 = __webpack_require__(751);
                that.inputarea = that.app.loadModule(inputarea1, that.dom.find('.usedtask'), {});
                that.inputarea.event._addEvent('inputarea.input', function (value) {
                    that.event._dispatch('projectdata.taskinput', value);
                });
                that.inputarea.event._addEvent('inputarea.createitem', function (value) {
                    that.apidata.taskIdList.push(parseInt(value));
                });
                that.inputarea.event._addEvent('inputarea.deleteitem', function (value) {
                    that.apidata.taskIdList = that.apidata.taskIdList.filter(function (item) {
                        return item !== parseInt(value);
                    });
                });
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
        }
    }, {
        key: 'tasklist',
        value: function tasklist(value) {
            var that = this;
            value.forEach(function (val, idx) {
                val.id = val.taskId;
                val.name = val.taskName;
            });
            that.inputarea.setlist(value);
        }
    }, {
        key: 'resetxlk',
        value: function resetxlk(value) {
            var that = this;
            that.yymc.renderHtml(value);
        }
        //判断文件类型

    }, {
        key: 'getFileType',
        value: function getFileType(filePath) {
            var startIndex = filePath.lastIndexOf(".");
            if (startIndex != -1) return filePath.substring(startIndex + 1, filePath.length).toLowerCase();else return "";
        }
    }, {
        key: 'setTitle',
        value: function setTitle(type) {
            var obj = {};
            var that = this;
            that.obj = {};
            switch (type) {
                case 'add':
                    that.obj['icon'] = {
                        "hospitalCode": { name: '<span>医院名称</span>', type: 'text', code: 'checkid', w: '12%', ww: '12%', n: "40" },
                        "bodyPart": { name: '<span>部位</span>', type: 'text', code: 'pid', w: '3%', ww: '3%' },
                        "modality": { name: '<span>检查机型</span>', type: 'text', code: 'pname', w: '3%', ww: '3%' },
                        "studyDate": { name: '<span>检查时间</span>', type: 'text', code: 'psex', w: '6%', ww: '6%' },
                        "studyInstanceUID": { name: '<span>检查号</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "seriesInstanceUID": { name: '<span>序列号</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "assigned": { name: '<span>是否曾被任务选取</span>', type: 'text', code: 'age', w: '6%', ww: '6%' },
                        "tasksubmit": { name: '<span style="line-height: 20px;">&nbsp;曾存在任务<br>（已提交次数：废片次数）</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "prosubmit": { name: '<span style="line-height: 20px;">项目下被提交次<br>数：废片次数</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "keyword": { name: '<span>关键字</span>', type: 'text', code: 'age', w: '12%', ww: '12%' },
                        "finding": { name: '<span>检查所见</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "conclusion": { name: '<span>诊断</span>', type: 'text', code: 'age', w: '10%', ww: '10%' }
                    };
                    break;
                case 'custom':
                    that.obj['icon'] = {
                        "hospitalCode": { name: '<span>医院名称</span>', type: 'text', code: 'checkid', w: '8%', ww: '8%', n: "40" },
                        "bodyPart": { name: '<span>部位</span>', type: 'text', code: 'pid', w: '4%', ww: '4%' },
                        "modality": { name: '<span>检查机型</span>', type: 'text', code: 'pname', w: '5%', ww: '5%' },
                        "studyDate": { name: '<span>检查时间</span>', type: 'text', code: 'psex', w: '6%', ww: '6%' },
                        "studyInstanceUID": { name: '<span>检查号</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "seriesInstanceUID": { name: '<span>序列号</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "patientAge": { name: '<span data-i18n="handler" data-name="状态">年龄</span>', type: 'text', code: 'handler', w: '3%', ww: '3%' },
                        "patientSex": { name: '<span data-i18n="action" data-name="操作">性别</span>', type: 'text', code: 'action', w: '3%', ww: '3%' },
                        "importDate": { name: '<span data-i18n="action" data-name="操作">上传时间</span>', type: 'text', code: 'action', w: '6%', ww: '6%' },
                        "tasksubmit": { name: '<span style="line-height: 20px;">&nbsp;曾存在任务<br>（已提交次数：废片次数）</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "prosubmit": { name: '<span style="line-height: 20px;">项目下被提交次<br>数：废片次数</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "assigned": { name: '<span>是否曾被任务选取</span>', type: 'text', code: 'age', w: '7%', ww: '7%' },
                        "keyword": { name: '<span>关键字</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "finding": { name: '<span>检查所见</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "conclusion": { name: '<span>诊断</span>', type: 'text', code: 'age', w: '8%', ww: '8%' }
                    };
                    break;
                case 'view':
                    that.obj['icon'] = {
                        "hospitalCode": { name: '<span>医院名称</span>', type: 'text', code: 'checkid', w: '12%', ww: '12%', n: "40" },
                        "bodyPart": { name: '<span>部位</span>', type: 'text', code: 'pid', w: '7%', ww: '7%' },
                        "modality": { name: '<span>检查机型</span>', type: 'text', code: 'pname', w: '7%', ww: '7%' },
                        "studyDate": { name: '<span>检查时间</span>', type: 'text', code: 'psex', w: '8%', ww: '8%' },
                        "studyInstanceUID": { name: '<span>检查号</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "seriesInstanceUID": { name: '<span>序列号</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "imageIdStr": { name: '<span>层数</span>', type: 'text', code: 'age', w: '8%', ww: '8%' },
                        "prosubmit": { name: '<span style="line-height: 20px;">项目下被提交次<br>数：废片次数</span>', type: 'text', code: 'age', w: '6%', ww: '6%' },
                        "keyword": { name: '<span>关键字</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "finding": { name: '<span>检查所见</span>', type: 'text', code: 'age', w: '10%', ww: '10%' },
                        "conclusion": { name: '<span>诊断</span>', type: 'text', code: 'age', w: '10%', ww: '10%' }
                    };
                    break;
            }
            that.obj['type'] = 'center';
            that.obj['minwidth'] = 1900;
            that.obj['tablewidth'] = ES.selctorDoc('.projectdata').box().clientWidth - 60;
            __webpack_require__.e/* require.ensure */(53/* duplicate */).then((function () {
                var cont_table = __webpack_require__(640);
                that.table = that.app.loadModule(cont_table, that.dom.find('.projecttable'), {
                    id: 'biaozhutable',
                    header: that.obj
                });
                that.table.event._addEvent('table.pagenumber', function (value) {
                    that.apidata.page = parseInt(value);
                    that.table.changenum(that.apidata.page);
                    that.event._dispatch('prodata.pagenumber', { data: that.apidata });
                });
                that.table.event._addEvent('table.pagesize', function (value) {
                    that.apidata.pageSize = value.num;
                    that.apidata.page = 1;
                    that.event._dispatch('prodata.pagesize', { data: that.apidata });
                });
                that.initscrollmenu();
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
        }
    }, {
        key: 'setMain',
        value: function setMain(value, bool) {
            var that = this;
            that.finalquery = that.apidata;
            that.currentSearchReqId = value.data.currentSearchReqId;
            var data2 = [];
            if (value.data.list && value.data.list.length > 0) {
                that.totalnum = value.data.total;
                value.data.list.forEach(function (val, idx) {
                    for (var i in val) {
                        val[i] = val[i] == null ? '' : val[i];
                    }
                    for (var _i in that.obj.icon) {
                        val[_i] = val[_i] ? val[_i] : '';
                    }
                    var prosub = 0;
                    var prodiscurd = 0;
                    that.bodypart.forEach(function (a, b) {
                        if (a.idx == val.bodyPart) {
                            val.bodyPart = a.val;
                        }
                    });
                    Tool.configxlkformat(that.app.constmap['MODALITY']).forEach(function (a, b) {
                        if (a.idx == val.modality) {
                            val.modality = a.val;
                        }
                    });
                    if (val.seriesAnnoStatusHistory) {
                        val.tasksubmit = '';
                        val.seriesAnnoStatusHistory.forEach(function (val1, idx) {
                            val.tasksubmit += val1.taskName + '(' + (val1.submitCount + val1.discardCount) + ':' + val1.discardCount + ')<br>';
                            prosub += val1.submitCount + val1.discardCount;
                            prodiscurd += val1.discardCount;
                        });
                        val.prosubmit = prosub + ':' + prodiscurd;
                    }
                    switch (val.patientSex) {
                        case 'M':
                            val.patientSex = '男';
                            break;
                        case 'F':
                            val.patientSex = '女';
                            break;
                        default:
                            val.patientSex = '';
                    }
                    if (val.createDate) val.createDate = Tool.time(val.createDate, 'yyyy-mm-dd');
                    if (val.importDate) val.importDate = Tool.time(val.importDate, 'yyyy-mm-dd');
                    if (val.studyDate) val.studyDate = Tool.time(val.studyDate, 'yyyy-mm-dd');
                    if (val.patientAge) val.patientAge = Math.floor(val.patientAge / 12);
                    val.assigned = val.assigned == false ? '否' : '是';
                    val.id = val.taskId;
                });
                that.table.setData(value.data.list);
                that.dom.find('.addall').removeClass('hide');
                that.dom.find('.addpartbtn').removeClass('hide');
            } else {
                that.totalnum = 0;
                that.table.noData();
                that.dom.find('.addall').addClass('hide');
                that.dom.find('.addpartbtn').addClass('hide');
            }
            if (bool) {
                that.table.getTotal(value.data.pages, 2, value.data.total);
            }
            that.initscroll_vertical();
        }
    }, {
        key: 'initscrollmenu',
        value: function initscrollmenu() {
            if (this.myScroll) {
                this.myScroll.refresh();
                return;
            }
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            this.dom.find('.maintable').attr('id', rid);
            this.myScroll = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                scrollX: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }, {
        key: 'initscroll_vertical',
        value: function initscroll_vertical() {
            if (this.myScroll1) {
                this.myScroll1.refresh();
                return;
            }
            var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
            this.dom.find('.projectdata').attr('id', rid);
            this.myScroll1 = new IScroll('#' + rid, {
                scrollbars: true,
                mouseWheel: true,
                interactiveScrollbars: true,
                hideScrollbar: false,
                vScrollbar: true,
                shrinkScrollbars: 'scale',
                fadeScrollbars: false,
                disableMouse: true,
                disablePointer: true
            });
        }
    }]);

    return projectdata;
}(Interstellar.modalBase);

//原型链一定要有的


module.exports = projectdata;

/***/ }),

/***/ 780:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(781);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./projectdata.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./projectdata.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 781:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".projectdata {\n  box-sizing: border-box;\n  background: #fff;\n  border-radius: 4px;\n  font-family: \"Microsoft YaHei\";\n  font-size: 16px;\n  width: 1000px;\n  min-height: 300px;\n  height: 600px;\n  margin-left: -500px;\n  margin-top: -300px;\n  position: relative;\n  overflow: hidden;\n}\n.projectdata .title {\n  font-size: 20px;\n}\n.projectdata .icon-guanbi {\n  position: absolute;\n  right: 20px;\n  top: 20px;\n  cursor: pointer;\n}\n.projectdata .filterarea {\n  margin: 10px 0 20px 20px;\n  position: relative;\n}\n.projectdata .filterarea > div {\n  display: inline-block;\n  position: relative;\n}\n.projectdata .filterarea .rwxq {\n  display: inline-block;\n}\n.projectdata .filterarea .showData {\n  width: 130px;\n  height: 30px;\n  line-height: 30px;\n  border-radius: 4px;\n  font-size: 12px;\n}\n.projectdata .filterarea .xlk {\n  width: 160px;\n  height: 30px;\n  line-height: 30px;\n  font-size: 12px;\n  margin: 0 10px;\n}\n.projectdata .filterarea .xlk input {\n  width: 93%;\n}\n.projectdata .filterarea .submittimes {\n  width: 600px;\n  margin-top: 10px;\n}\n.projectdata .filterarea .submittimes > div {\n  display: inline-block;\n}\n.projectdata .filterarea .submittimes > input {\n  border: 1px solid #e8e8e8;\n  border-radius: 4px;\n  height: 30px;\n}\n.projectdata .filterarea .usecondition {\n  margin-top: 10px;\n}\n.projectdata .filterarea .usecondition > div {\n  display: inline-block;\n}\n.projectdata .filterarea .usecondition .usedtask {\n  vertical-align: top;\n}\n.projectdata .projectmain {\n  padding: 30px 0 20px 10px;\n  font-size: 14px;\n}\n.projectdata .projectmain .searchbtn {\n  width: 100px;\n  height: 30px;\n  border: 1px solid #4c9fa9;\n  line-height: 30px;\n  color: #4c9fa9;\n  position: absolute;\n  top: 0;\n  right: 40px;\n}\n.projectdata .projectmain .bzmc {\n  border-radius: 4px;\n  width: 170px;\n  border: 1px solid #e8e8e8;\n  height: 30px;\n}\n.projectdata .projectmain .projecttable {\n  clear: both;\n  overflow: hidden;\n  position: relative;\n}\n.projectdata .projectmain > span {\n  font-size: 16px;\n}\n.projectdata .projectmain .btnarea {\n  height: 30px;\n  margin: 20px 0;\n  margin-right: 20px;\n  text-align: right;\n}\n.projectdata .projectmain .btnarea .biaozhubtn {\n  padding: 0 10px;\n  height: 30px;\n  line-height: 30px;\n  background: #4c9fa9;\n  color: #fff;\n  margin-right: 20px;\n}\n.projectdata .projectmain .btnarea .cancel {\n  background: #fff;\n  border: 1px solid #4c9fa9;\n  color: #4c9fa9;\n}\n.projectdata .projectmain .btnarea .file {\n  position: fixed;\n  left: 4000px;\n  top: 3000px;\n}\n.projectdata .projectmain .modelArea {\n  position: absolute;\n  right: 30px;\n}\n.projectdata .projectmain .modelArea .downmodel {\n  color: #4c9fa9;\n  text-decoration: underline;\n  margin-left: 20px;\n}\n.projectdata .projectmain .viewdelete {\n  text-align: right;\n  margin-right: 20px;\n}\n.projectdata .projectmain .viewdelete a {\n  height: 30px;\n  line-height: 30px;\n  background: #4c9fa9;\n  color: #fff;\n  padding: 0 20px;\n}\n.projectdata .w145 {\n  width: 145px;\n}\n.projectdata .kxlk {\n  width: 100px;\n  height: 30px;\n  line-height: 30px;\n}\n.projectdata .kxlk input {\n  width: 89% !important;\n}\n", ""]);

// exports


/***/ }),

/***/ 782:
/***/ (function(module, exports) {

module.exports = "<div class=\"modal projectdata\"> <div class=projectmain> <div class=title>项目序列池</div> <i class=\"iconfont icon-guanbi\"></i> <div class=filterarea> <div class=yymc></div> <div class=timefilter></div> <div class=isselected>是否曾被任务选取：<div class=rwxq></div></div> <br> <div class=submittimes> <span class=w145>项目下序列被提交次数</span> <div class=times></div> <input type=text class=\"seriSubmitCount inputBox\" api=seriSubmitCount /> </div> <br> <div class=usecondition> <span class=w145>序列使用情况</span> <div class=exist></div> <div class=usedtask></div> </div> <a class=\"searchbtn biaozhubtn\">查询</a> </div> <div class=\"viewdelete hide\"> <a class=\"biaozhubtn deleteresult hide\">一键删除查询结果中序列</a> <a class=\"biaozhubtn exportresult\">导出结果序列名</a> </div> <div class=projecttable> </div> <div class=btnarea> <a class=\"biaozhubtn addall\">一键添加查询结果</a> <a class=\"biaozhubtn addpartbtn\">从查询结果中选取部分</a> <a class=\"biaozhubtn addcustom\">序列号导入</a> <a class=\"biaozhubtn addImageID\">imageID导入</a> <input class=file type=file id=file name=file /> </div> <div class=modelArea> <a class=\"downmodel seriesDown\" url=/images/page/任务添加项目序列模板.xlsx>序列号导入模板</a> <a class=\"downmodel imageidDown\" url=/images/page/imageID.xlsx>imageID导入模板</a> </div> </div> </div> ";

/***/ }),

/***/ 783:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(784);

var formsubmit = function (_Interstellar$modalBa) {
  _inherits(formsubmit, _Interstellar$modalBa);

  function formsubmit(app, dom, value, addMode) {
    _classCallCheck(this, formsubmit);

    var _this = _possibleConstructorReturn(this, (formsubmit.__proto__ || Object.getPrototypeOf(formsubmit)).call(this, app, dom, value, addMode));

    _this.html = __webpack_require__(786);
    _this.name = 'formsubmit';
    _this.apidata = {};
    _this.allobj = {};
    return _this;
  }

  _createClass(formsubmit, [{
    key: 'complete',
    value: function complete() {
      var that = this;
      this.render();
      this.initView();
    }
  }, {
    key: 'render',
    value: function render() {
      var that = this;
      console.log(that.api.config);
      that.api.config.forEach(function (val, idx) {
        var html = '';
        switch (val.type) {
          case 'input':
            var inputtype = val.inputtype ? val.inputtype : 'text';
            html += '<div class="inputLine" redlabel="inputBox">\n' + '                <span class="names">' + val.title + '</span>\n' + '                <input type=' + inputtype + ' class="inputBox ' + val.name + '" check="' + val.check + '" api="' + val.name + '"/>' + '                <p class="remark">' + val.remark + '</p>' + '            </div>';
            that.dom.find('.modal-body').append(html);
            if (val.value) {
              that.dom.find('.' + val.name).val(val.value);
              that.apidata[val.name] = val.value;
            }
            break;
          case 'dropdown':
            html += '<div class="inputLine" redlabel="xlk">\n' + '                <span class="names">' + val.title + '</span>\n' + '                <div class="' + val.name + '" check="' + val.check + '"></div>' + '                <p class="remark">' + val.remark + '</p>' + '            </div>';
            that.dom.find('.modal-body').append(html);
            __webpack_require__.e/* require.ensure */(52/* duplicate */).then((function () {
              var dropdown = __webpack_require__(638);
              var temp = that.app.loadModule(dropdown, that.dom.find('.' + val.name), {
                className: 'xlk',
                firstSelect: { val: '', idx: '' },
                data: val.data,
                datatype: val.datatype
              });
              temp.event._addEvent('option.click', function (value) {
                console.log(that.apidata, 'that.apidata', value, val.name);
                that.apidata[val.name] = value.idx;
              });
              temp.event._addEvent('dropDown.clear', function (value) {
                that.apidata[val.name] = '';
              });
              that.allobj[val.name] = temp;
              if (val.value) {
                that.dom.find('.' + val.name + ' .option[data-idx="' + val.value + '"]').click();
              }
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
            break;
          case 'radio':
            var temp = '';
            val.data.forEach(function (item) {
              temp += '<div class="item" data-id="' + item.idx + '">\n' + '                <i class="radio-box"></i>\n' + '                <span>' + item.val + '</span>\n' + '            </div>';
            });
            html += '<div class="inputLine radioArea" redlabel="names" check="empty" title="">\n' + '                <span class="names">' + val.title + '</span>\n' + temp + '                <p class="remark">' + val.remark + '</p>' + '            </div>';
            that.dom.find('.modal-body').append(html);
            that.dom.find('.radioArea .radio-box').on('click', function () {
              ES.selctorDoc(this).parents('radioArea').find('.choose').removeClass('choose');
              ES.selctorDoc(this).addClass('choose');
              that.apidata[val.name] = ES.selctorDoc(this).parent().attr('data-id');
            });
            break;
        }
      });
      that.dom.find('.modal-title').html(that.api.title);
    }
  }, {
    key: 'initView',
    value: function initView() {
      var that = this;
      that.dom.find('.inputBox').on('change', function () {
        that.apidata[ES.selctorDoc(this).attr('api')] = ES.selctorDoc(this).val();
      });
      this.dom.find('.icon-guanbi').on('click', function () {
        that.close();
      });
      this.dom.find('.btn-cancel').on('click', function () {
        that.close();
      });
      this.dom.find('.btn-confirm').on('click', function () {
        that.dom.find('.tips').remove();
        that.dom.find('.inputLine').dom.forEach(function (val, idx) {
          val.find('.' + val.attr('redlabel')).removeClass('redborder');
          val.find('.required').remove();
          if (Tool.checkForm(ES.selctorDoc(val).dom, 'red') !== '') {
            val.find('.' + val.attr('redlabel')).addClass('redborder');
            val.find('.' + val.attr('redlabel')).after('<span class="required">' + Tool.checkForm(ES.selctorDoc(val).dom, 'red') + '</span>');
          }
        });
        if (that.dom.find('.redborder').dom) {
          return false;
        } else {
          that.event._dispatch('formsubmit.submit', that.apidata);
        }
      });
    }
  }, {
    key: 'showerror',
    value: function showerror(value) {
      var that = this;
      Object.keys(value).forEach(function (val) {
        that.dom.find('.' + val).after('<span class="tips">' + value[val] + '</span>');
      });
    }
  }]);

  return formsubmit;
}(Interstellar.modalBase);
//原型链一定要有的


module.exports = formsubmit;

/***/ }),

/***/ 784:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(785);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./formsubmit.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./formsubmit.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 785:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".formsubmit {\n  margin-left: -250px;\n  width: 500px;\n}\n.formsubmit .modal-header {\n  padding: 20px 0 20px 30px;\n}\n.formsubmit .modal-header .modal-title {\n  font-family: MicrosoftYaHei;\n  font-weight: bold;\n  font-size: 18px;\n  color: #333333;\n  letter-spacing: 0;\n}\n.formsubmit .modal-header i {\n  font-size: 15px;\n  position: absolute;\n  right: 20px;\n  top: 20px;\n  cursor: pointer;\n}\n.formsubmit .modal-body {\n  padding: 0px !important;\n  margin: 0 30px;\n}\n.formsubmit .modal-body span {\n  margin-left: 0px;\n}\n.formsubmit .modal-body .inputLine {\n  position: relative;\n  height: 70px;\n  margin-top: 10px;\n}\n.formsubmit .modal-body .inputLine > div {\n  display: inline-block;\n}\n.formsubmit .modal-body .inputLine .confirm {\n  margin-right: 0;\n}\n.formsubmit .modal-body .inputLine .inputBox {\n  width: 300px;\n  height: 38px;\n  line-height: 38px;\n  border: 1px solid #E8E8E8;\n  border-radius: 4px;\n  outline: none;\n  padding-left: 5px;\n}\n.formsubmit .modal-body .inputLine .xlk {\n  width: 300px;\n  height: 38px;\n  line-height: 38px;\n}\n.formsubmit .modal-body .inputLine .names {\n  width: 115px;\n  font-size: 14px;\n}\n.formsubmit .modal-body .inputLine .remark {\n  margin-left: 100px;\n}\n.formsubmit .modal-body .inputLine .tips {\n  position: absolute;\n  color: red;\n  top: 40px;\n  left: 105px;\n}\n.formsubmit .modal-body .radioArea {\n  position: relative;\n}\n.formsubmit .modal-body .radioArea .item {\n  position: relative;\n  margin-right: 10px;\n}\n.formsubmit .modal-body .radioArea .item .radio-box {\n  vertical-align: sub;\n}\n.formsubmit .modal-body .radioArea .required {\n  position: absolute;\n  top: 25px;\n  left: 0;\n}\n.formsubmit .modal-footer {\n  margin-top: 15px;\n}\n", ""]);

// exports


/***/ }),

/***/ 786:
/***/ (function(module, exports) {

module.exports = "<div class=\"formsubmit modal\"> <div class=modal-header> <p class=modal-title></p> <i class=\"iconfont icon-guanbi\"></i> </div> <div class=modal-body> </div> <div class=modal-footer> <a class=\"btn btn-confirm\">确认</a> <a class=\"btn btn-cancel\">取消</a> </div> </div>";

/***/ }),

/***/ 806:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(807);

var uploadalgdata = function (_Interstellar$modalBa) {
  _inherits(uploadalgdata, _Interstellar$modalBa);

  function uploadalgdata(app, dom, value, addMode) {
    _classCallCheck(this, uploadalgdata);

    var _this = _possibleConstructorReturn(this, (uploadalgdata.__proto__ || Object.getPrototypeOf(uploadalgdata)).call(this, app, dom, value, addMode));

    _this.html = __webpack_require__(809);
    _this.name = 'uploadalgdata';
    _this.flag = true;
    _this.code = '';
    _this.data = value;
    _this.apiData = { transferNii: false };
    _this.api.toolList.forEach(function (item) {
      _this.app.toolList.forEach(function (cn) {
        if (item.val == cn.idx) {
          item.val = cn.val;
        }
      });
    });
    return _this;
  }

  _createClass(uploadalgdata, [{
    key: 'complete',
    value: function complete() {
      var that = this;
      this.dom.find('.icon-guanbi').on('click', function () {
        that.close();
      });
      this.dom.find('.cancel').on('click', function () {
        that.close();
      });
      this.dom.find('.filechoose').on('click', function () {
        that.dom.find('.file').click();
      });
      that.dom.find('.file').on('change', function () {
        var filePath = ES.selctorDoc("#file1").val();
        that.dom.find('.filename').val(filePath);
      });
      that.dom.find('.catelog .check-box').on('click', function () {
        if (!ES.selctorDoc(this).hasClass('choose')) {
          ES.selctorDoc(this).addClass('choose');
          that.apiData.transferNii = true;
        } else {
          ES.selctorDoc(this).removeClass('choose');
          that.apiData.transferNii = false;
        }
      });
      this.dom.find('.upload').on('click', function () {
        that.dom.find('.inputLine').dom.forEach(function (val, idx) {
          val.find('.' + val.attr('redlabel')).removeClass('redborder');
          val.find('.required').remove();
          if (Tool.checkForm(ES.selctorDoc(val).dom, 'red') !== '') {
            val.find('.' + val.attr('redlabel')).addClass('redborder');
            val.find('.' + val.attr('redlabel')).after('<span class="required">' + Tool.checkForm(ES.selctorDoc(val).dom, 'red') + '</span>');
          }
        });
        if (that.dom.find('.redborder').dom && that.dom.find('.redborder').dom.some(function (item) {
          return item.box().clientHeight !== 0;
        })) {
          return false;
        } else {
          that.event._dispatch('uploadalgdata.upload', { data: that.apiData });
        }
      });
      this.render();
    }
  }, {
    key: 'render',
    value: function render(value) {
      var _this2 = this;

      var dropConfig = [{ name: 'type', className: 'xlk', firstSelect: { val: '请选择标注结果类型', idx: '' }, data: [{ idx: '1', val: '序列标注结果' }, { idx: '2', val: '影像标注结果' }], maxshownum: 5 }, { name: 'toolType', className: 'xlk', firstSelect: { val: '请选择标注所需工具', idx: '' }, data: this.api.toolList, maxshownum: 5 }, { name: 'dataType', className: 'xlk', firstSelect: { val: '数据类型', idx: '' }, data: [{ idx: '1', val: 'nii' }, { idx: '2', val: '点位' }], maxshownum: 5 }];
      __webpack_require__.e/* require.ensure */(52/* duplicate */).then((function () {
        var dropdown = __webpack_require__(638);
        var dropObj = {};
        dropConfig.forEach(function (val, idx) {
          dropObj[val.name] = _this2.app.loadModule(dropdown, _this2.dom.find('.' + val.name), {
            className: 'xlk',
            firstSelect: val.firstSelect,
            data: val.data,
            maxshownum: val.maxshownum
          });
          dropObj[val.name].event._addEvent('dropDown.clear', function () {
            _this2.apiData[val.name] = null;
          });
          dropObj[val.name].event._addEvent('option.click', function (value) {
            _this2.apiData[val.name] = value.idx;
          });
        });
        dropObj['type'].event._addEvent('option.click', function (value) {
          if (value.idx == 1) {
            _this2.dom.find('.tool').addClass('hide');
            _this2.dom.find('.mask').addClass('hide');
            if (_this2.api.type == 'project') {
              _this2.dom.find('.dataType').parent().addClass('hide');
            }
          } else {
            _this2.dom.find('.tool').removeClass('hide');
            _this2.dom.find('.mask').removeClass('hide');
            if (_this2.api.type == 'project') {
              _this2.dom.find('.dataType').parent().removeClass('hide');
            }
          }
          _this2.apiData['type'] = parseInt(value.idx);
        });
        if (_this2.api.type == 'project') {
          dropObj['dataType'].event._addEvent('option.click', function (value) {
            _this2.apiData['dataType'] = parseInt(value.idx);
          });
        }
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
    }
  }]);

  return uploadalgdata;
}(Interstellar.modalBase);

//原型链一定要有的


module.exports = uploadalgdata;

/***/ }),

/***/ 807:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(808);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./uploadalgdata.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./uploadalgdata.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 808:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".uploadalgdata {\n  box-sizing: border-box;\n  background: #fff;\n  border-radius: 4px;\n  font-family: \"Microsoft YaHei\";\n  font-size: 16px;\n  width: 600px;\n  height: 450px;\n  margin-left: -300px;\n  position: relative;\n}\n.uploadalgdata .toparea .title {\n  margin: 20px;\n}\n.uploadalgdata .toparea .icon-guanbi {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  cursor: pointer;\n}\n.uploadalgdata .catelog {\n  position: relative;\n  margin-top: 20px;\n}\n.uploadalgdata .catelog .inputLine {\n  margin-bottom: 10px;\n}\n.uploadalgdata .catelog .inputLine > .names {\n  width: 180px;\n  text-align: left;\n  margin-left: 40px;\n}\n.uploadalgdata .catelog .inputLine .check-box {\n  margin: 10px 10px 0 50px;\n}\n.uploadalgdata .catelog input {\n  width: 240px;\n  padding-left: 10px;\n  height: 32px;\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n}\n.uploadalgdata .catelog .required {\n  left: 230px;\n  top: 50px;\n  font-size: 14px;\n}\n.uploadalgdata .catelog .type,\n.uploadalgdata .catelog .toolType,\n.uploadalgdata .catelog .dataType {\n  display: inline-block;\n}\n.uploadalgdata .catelog .xlk {\n  width: 180px;\n  height: 32px;\n  line-height: 32px;\n}\n.uploadalgdata .catelog .filechoose {\n  padding: 0 20px;\n  background: #4c9fa9;\n  color: #fff;\n  height: 32px;\n  line-height: 32px;\n}\n.uploadalgdata .catelog .file {\n  position: fixed;\n  top: 2000px;\n  left: 3000px;\n}\n.uploadalgdata .catelog .check-box {\n  margin-left: 40px;\n}\n.uploadalgdata .btnarea {\n  text-align: center;\n  margin-top: 55px;\n}\n.uploadalgdata .btnarea .biaozhubtn {\n  padding: 0 20px;\n  height: 32px;\n  line-height: 32px;\n  text-align: center;\n}\n.uploadalgdata .btnarea .upload {\n  background: #4c9fa9;\n  color: #fff;\n  margin-right: 20px;\n}\n.uploadalgdata .btnarea .cancel {\n  border: 1px solid #4c9fa9;\n}\n", ""]);

// exports


/***/ }),

/***/ 809:
/***/ (function(module, exports) {

module.exports = "<div class=\"uploadalgdata modal\"> <div class=toparea> <span class=title>导入算法标注结果</span> <i class=\"iconfont icon-guanbi\"></i> </div> <div class=catelog> <div class=inputLine redlabel=xlk> <span class=names><label class=redstar>*</label>请选择标注结果类型：</span> <div class=type check=empty></div> </div> <div class=\"inputLine hide\" redlabel=xlk> <span class=names><label class=redstar>*</label>数据类型：</span> <div class=dataType check=empty></div> </div> <div class=inputLine redlabel=inputBox> <span class=names><label class=redstar>*</label>指定上传文件：</span> <input class=\"filename inputBox\" type=text check=empty readonly=readonly /> <a class=\"biaozhubtn filechoose\">浏览</a> <input class=file type=file id=file1 name=file /> </div> <div class=\"inputLine tool hide\" redlabel=xlk> <span class=names><label class=redstar>*</label>标注所需的工具：</span> <div class=toolType check=empty></div> </div> <div class=\"mask hide\"> <i class=check-box></i> <span>是否转换成mask</span> </div> </div> <div class=btnarea> <a class=\"upload biaozhubtn\">导入</a> <a class=\"cancel biaozhubtn\">取消</a> </div> </div> ";

/***/ }),

/***/ 833:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(834);
// var html = require('./tpl.html')

var alglist = function (_Interstellar$modalBa) {
  _inherits(alglist, _Interstellar$modalBa);

  function alglist(app, dom, value, addMode) {
    _classCallCheck(this, alglist);

    var _this = _possibleConstructorReturn(this, (alglist.__proto__ || Object.getPrototypeOf(alglist)).call(this, app, dom, value, addMode));

    _this.html = __webpack_require__(836);
    _this.name = 'alglist';
    return _this;
  }

  _createClass(alglist, [{
    key: 'complete',
    value: function complete() {
      var that = this;
      this.action = {
        // view: {dis: 'inline', link: 'noLink', content: '删除'},
        viewfail: { dis: 'inline', link: 'noLink', content: '查看失败' }
      };
      this.action1 = {
        // view: {dis: 'inline', link: 'noLink', content: '删除'}
      };
      this.dom.find('.icon-guanbi').on('click', function () {
        that.close();
      });
      this.render();
      that.dom.find('.close').on('click', function () {
        that.close();
      });
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.api.data) {
        this.showlist(this.api.data, true);
      }
    }
  }, {
    key: 'showlist',
    value: function showlist(value, bool) {
      var that = this;
      var obj = {};
      obj['icon'] = {
        "resultType": { name: '<span>结果类型</span>', type: 'text', code: 'checkid', w: '12%', ww: '12%', n: "40" },
        "toolType": { name: '<span>工具类型</span>', type: 'text', code: 'pid', w: '13%', ww: '13%' },
        "transferNii": { name: '<span>是否转换成mask</span>', type: 'text', code: 'pid', w: '12%', ww: '12%' },
        "totalSeriesNum": { name: '<span>总序列数</span>', type: 'text', code: 'pid', w: '9%', ww: '9%' },
        "totalResultNum": { name: '<span>总结果数</span>', type: 'text', code: 'pid', w: '9%', ww: '9%' },
        "successResultNum": { name: '<span>成功结果数</span>', type: 'text', code: 'pid', w: '10%', ww: '10%' },
        "importTime": { name: '<span>导入时间</span>', type: 'text', code: 'pid', w: '13%', ww: '13%' },
        "importUserId": { name: '<span>导入人ID</span>', type: 'text', code: 'pid', w: '10%', ww: '10%' },
        "operation": { name: '<span>操作</span>', type: 'action', code: 'pid', w: '12%', ww: '12%' }
      };
      obj['tablewidth'] = ES.selctorDoc('.alglist').box().clientWidth - 40;
      obj['type'] = 'center';
      obj['pagesizeSet'] = false;
      __webpack_require__.e/* require.ensure */(53/* duplicate */).then((function () {
        that.myScroll = null;
        var cont_table = __webpack_require__(640);
        that.table = that.app.loadModule(cont_table, that.dom.find('.tablearea'), {
          id: 'alglist',
          header: obj
        });
        that.table.event._addEvent('table.pagenumber', function (value) {
          var page = parseInt(value);
          that.event._dispatch('alglist.pagenumber', page);
        });
        that.table.event._addEvent('table.action', function (value) {
          that.event._dispatch('alglist.listaction', value);
        });
        that.setList(value, bool);
        that.initscrollmenu();
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
    }
  }, {
    key: 'setList',
    value: function setList(value, bool) {
      var _this2 = this;

      if (value.list.length > 0) {
        value.list.forEach(function (val) {
          val.id = val.id + ',' + val.fileResourceId;
          if (val.successResultNum === val.totalResultNum) {
            val.operation = _this2.action1;
          } else {
            val.operation = _this2.action;
          }
          _this2.app.toolList.forEach(function (item, idx) {
            if (val.toolType == item.idx) {
              val.toolType = item.val;
            }
          });
          val.resultType = val.resultType === 1 ? '序列标注' : '影像标注';
          val.transferNii = val.transferNii ? '是' : '否';
          if (val.importTime) val.importTime = Tool.time(val.importTime, 'yyyy-mm-dd');
        });
        this.table.setData(value.list);
      } else {
        this.table.noData('当前无已导入的结果!');
      }
      if (bool) {
        this.table.getTotal(value.pages, 2, value.total);
      }
    }
  }, {
    key: 'initscrollmenu',
    value: function initscrollmenu() {
      if (this.myScroll) {
        this.myScroll.refresh();
        return;
      }

      var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
      this.dom.find('.maintable').attr('id', rid);
      this.myScroll = new IScroll('#' + rid, {
        scrollbars: true,
        mouseWheel: true,
        interactiveScrollbars: true,
        hideScrollbar: false,
        vScrollbar: true,
        shrinkScrollbars: 'scale',
        fadeScrollbars: false,
        disableMouse: true,
        disablePointer: true
      });
    }
  }]);

  return alglist;
}(Interstellar.modalBase);

//原型链一定要有的


module.exports = alglist;

/***/ }),

/***/ 834:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(835);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./alglist.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./alglist.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 835:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".alglist {\n  box-sizing: border-box;\n  background: #fff;\n  border-radius: 4px;\n  font-family: \"Microsoft YaHei\";\n  font-size: 16px;\n  width: 900px;\n  margin-left: -450px;\n  height: 500px;\n}\n.alglist .modal-header {\n  text-align: left;\n  height: 56px;\n  line-height: 56px;\n  background: #599BA2;\n  padding: 0px;\n}\n.alglist .modal-header .modal-title {\n  line-height: unset;\n}\n.alglist .modal-header .modal-title span {\n  font-family: MicrosoftYaHei;\n  font-size: 14px;\n  color: #FFFFFF;\n  letter-spacing: 0;\n  margin: 0;\n  margin-left: 20px;\n}\n.alglist .modal-header .modal-title .total {\n  margin-left: 16px;\n}\n.alglist .modal-header i {\n  font-size: 12px;\n  right: 7px;\n  position: absolute;\n  top: -13px;\n  color: #fff;\n  cursor: pointer;\n}\n.alglist .modal-body {\n  margin: 0px;\n  padding: 0px;\n}\n.alglist .modal-body .maintable {\n  height: 380px;\n  overflow: hidden;\n}\n.alglist .modal-body span {\n  margin: 0;\n}\n.alglist .modal-body .summarytop {\n  background: #F2F2F2;\n  letter-spacing: 0;\n  line-height: 40px;\n  padding-left: 20px;\n}\n.alglist .modal-body .summarytop span {\n  line-height: 23px;\n  color: #333333;\n  font-family: MicrosoftYaHei;\n  font-size: 16px;\n}\n.alglist .modal-body .summarytop .failnum {\n  color: red;\n}\n.alglist .modal-body .summarytop span:first-child {\n  margin-left: 20px;\n}\n.alglist .modal-body .errorLine {\n  overflow: hidden;\n  text-align: center;\n}\n.alglist .modal-body .errorLine .errordetail {\n  margin-top: 60px;\n}\n.alglist .modal-body .errorLine .srocll {\n  height: 300px;\n  overflow: hidden;\n  position: relative;\n}\n.alglist .modal-body .errorLine .srocll .maintable {\n  overflow: hidden;\n  height: 250px;\n}\n", ""]);

// exports


/***/ }),

/***/ 836:
/***/ (function(module, exports) {

module.exports = "<div class=\"modal alglist\"> <div class=modal-header> <p class=\"modal-title _title\"> <span>查看导入结果</span> </p> <i class=\"iconfont icon-guanbi\"></i> </div> <div class=modal-body> <div class=tablearea> </div> </div> </div> ";

/***/ }),

/***/ 932:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(933);

var addimage = function (_Interstellar$modalBa) {
  _inherits(addimage, _Interstellar$modalBa);

  function addimage(app, dom, value, addMode) {
    _classCallCheck(this, addimage);

    var _this = _possibleConstructorReturn(this, (addimage.__proto__ || Object.getPrototypeOf(addimage)).call(this, app, dom, value, addMode));

    _this.html = __webpack_require__(935);
    _this.name = 'addimage';
    return _this;
  }

  _createClass(addimage, [{
    key: 'complete',
    value: function complete() {
      var _this2 = this;

      var that = this;
      console.log(this.api.hospital, 'this.api.hospital');
      var config_fun = __webpack_require__(936);
      this.searchData = new config_fun(that.app.constmap);
      this.category = 'fs';
      var datacondition = __webpack_require__(744);
      var tablist = __webpack_require__(740);
      this.tablist = [{ 'id': 'fs', 'name': '放射科' }, { 'id': 'bl', 'name': '病理科' }, { 'id': 'qt', 'name': '其它' }];
      var tabListControl = this.app.loadModule(tablist, this.dom.find('.topchoose'), { data: this.tablist, default: this.category });
      tabListControl.event._addEvent('tab.change', function (value) {
        _this2.toggletab(value);
      });
      this.apidata = { page: 1, pageSize: 10, valid: true, jpgValid: true, category: 'RADIOLOGY' };
      this.chooseData = this.app.loadModule(datacondition, this.dom.find('.filterarea'), { data: this.searchData[this.category] });
      this.chooseData.event._addEvent('datacondition.moduledone', function () {
        if (_this2.category == 'fs') {
          _this2.dom.find('.inspect .drop-down .selectbox').dom.forEach(function (val, idx) {
            val.find('li').eq(0).click();
          });
          _this2.dom.find('.check .drop-down .selectbox').dom.forEach(function (val, idx) {
            val.find('li').eq(0).click();
          });
        }
        _this2.dom.find('.valid .drop-down .selectbox li[data-idx="1"]').click();
        _this2.dom.find('.jpgValid .drop-down .selectbox li[data-idx="1"]').click();
        _this2.setxlk(_this2.api.hospital);
      });
      this.chooseData.event._addEvent('datacondition.dropinput', function (value) {
        console.log(value, '111');
        _this2.event._dispatch('hospital.input', value);
      });
      this.listHeader('fs');
      this.finaldata = this.apidata;
      // this.refreshPage = true;
      // this.yymcdata = [{
      //   val: '',
      //   idx: ''
      // }]
      // this.bodypart = Tool.configxlkformat(this.app.constmap['BODY_PART'])
      // this.hospital = [];
      // this.duoxuanobj = {};
      // if (this.api.type == 'view') {
      //   this.dom.find('.filterarea').addClass('hide');
      //   this.dom.find('.sjandjl').addClass('hide');
      //   this.dom.find('.timefilter').addClass('hide');
      //   this.dom.find('.topchoose').addClass('hide');
      //   this.dom.find('.viewbtn').removeClass('hide');
      // } else {
      //   this.render();
      // }
      // this.setTitle_radio();
      // this.dom.find('.topchoose a').on('click', function () {
      //   if (!ES.selctorDoc(this).hasClass('choosed')) {
      //     that.dom.find('.topchoose a').removeClass('choosed');
      //     ES.selctorDoc(this).addClass('choosed')
      //     if (ES.selctorDoc(this).hasClass('fsk')) {
      //       that.imagetype = 'radio'
      //     } else {
      //       that.imagetype = 'other'
      //     }
      //     that.toggleimagetype()
      //   }
      // })
      this.dom.find('.icon-guanbi').on('click', function () {
        that.close();
        that.duoxuanobj = {};
      });
      // this.dom.find('.downloadall').on('click', function () {
      //   that.event._dispatch('addimage.download', 1);
      // })
      // this.dom.find('.downloadpart').on('click', function () {
      //   that.event._dispatch('addimage.download', 2);
      // })
      // this.dom.find('.sjandjl .liinput').on('change', function () {
      //   that.resetjctj();
      // })
      // this.dom.find('.addnew').on('click', function () {
      //   if (that.listdata.list.length == 0) {
      //     that.app.alert.show({
      //       title: ' ',
      //       msg: '本次查询无数据，<br>继续操作会将历史原数据做删除处理',
      //       close: true,
      //       sure: function () {
      //         that.event._dispatch('addimage.new', {data: that.finaldata})
      //       }
      //     })
      //   } else {
      //     that.event._dispatch('addimage.new', {data: that.finaldata})
      //   }
      // })
      this.dom.find('.addall').on('click', function () {
        that.event._dispatch('addimage.all', { data: that.finaldata });
      });
      this.dom.find('.searchbtn').on('click', function () {
        that.refreshPage = true;
        that.apidata.seriesCreateTimeStamp = Tool.GetDateStr(0) + " 23:59:59";
        that.searchData[that.category].forEach(function (val, idx) {
          if (val[0].name == 'inspectTime') {
            that.apidata.studyDateBegin = _this2.chooseData.data[val[0].name][0].startTime;
            that.apidata.studyDateEnd = _this2.chooseData.data[val[0].name][0].endTime;
          } else if (val[0].name == 'uploadTime') {
            that.apidata.importDateBegin = _this2.chooseData.data[val[0].name][0].startTime;
            that.apidata.importDateEnd = _this2.chooseData.data[val[0].name][0].endTime;
          } else if (val[0].type == 'dTexts') {
            that.apidata[val[0].name] = JSON.stringify(_this2.chooseData.data[val[0].name][0]) == '{}' ? null : _this2.chooseData.data[val[0].name];
          } else if (val[0].name == 'patientAgeType') {
            that.apidata[val[0].name] = _this2.chooseData.data[val[0].name][0];
            that.apidata.patientAgeLower = parseInt(_this2.chooseData.data[val[0].name][1].lower);
            that.apidata.patientAgeUpper = parseInt(_this2.chooseData.data[val[0].name][1].upper);
          } else if (val[0].name == 'check' || val[0].name == 'inspect') {
            that.apidata[val[0].name] = _this2.chooseData.data[val[0].name];
          } else {
            that.apidata[val[0].name] = _this2.chooseData.data[val[0].name].toString() == '' ? null : _this2.chooseData.data[val[0].name].toString();
          }
        });
        if (that.apidata.kernalfilter) {
          that.apidata.kernelLower = that.apidata.kernalfilter[0].lower;
          that.apidata.kernelUpper = that.apidata.kernalfilter[0].upper;
        }
        if (that.apidata.dyfilter) {
          that.apidata.kvpLower = that.apidata.dyfilter[0].lower;
          that.apidata.kvpUpper = that.apidata.dyfilter[0].upper;
        }
        if (that.apidata.csfilter) {
          that.apidata.layerCountLower = that.apidata.csfilter[0].lower;
          that.apidata.layerCountUpper = that.apidata.csfilter[0].upper;
        }
        if (that.apidata.chfilter) {
          that.apidata.sliceThicknessLower = that.apidata.chfilter[0].lower;
          that.apidata.sliceThicknessUpper = that.apidata.chfilter[0].upper;
        }
        if (that.apidata.windowWidth) {
          that.apidata.windowWidthLower = that.apidata.windowWidth[0].lower;
          that.apidata.windowWidthUpper = that.apidata.windowWidth[0].upper;
        }
        if (that.apidata.windowCenter) {
          that.apidata.windowCenterLower = that.apidata.windowCenter[0].lower;
          that.apidata.windowCenterUpper = that.apidata.windowCenter[0].upper;
        }
        that.apidata.conditions = [];
        if (that.apidata.inspect) {
          var temp = [];
          temp.push({ join: '', key: 'finding', value: that.apidata.inspect[1], operator: that.apidata.inspect[0] });
          temp.push({ join: that.apidata.inspect[2], key: 'finding', value: that.apidata.inspect[4], operator: that.apidata.inspect[3] });
          temp.push({ join: that.apidata.inspect[5], key: 'finding', value: that.apidata.inspect[7], operator: that.apidata.inspect[6] });
          that.apidata.conditions.push({ join: '', items: temp });
        }
        if (that.apidata.check) {
          var _temp = [];
          _temp.push({ join: '', key: 'conclusion', value: that.apidata.check[1], operator: that.apidata.check[0] });
          _temp.push({ join: that.apidata.check[2], key: 'conclusion', value: that.apidata.check[4], operator: that.apidata.check[3] });
          _temp.push({ join: that.apidata.check[5], key: 'conclusion', value: that.apidata.check[7], operator: that.apidata.check[6] });
          that.apidata.conditions.push({ join: that.apidata.inspect[8], items: _temp });
        }
        if (that.apidata.valid) {
          that.apidata.valid = Boolean(1 * that.apidata.valid);
        }
        if (that.apidata.mhaValid) {
          that.apidata.mhaValid = Boolean(1 * that.apidata.mhaValid);
        }
        if (that.apidata.jpgValid) {
          that.apidata.jpgValid = Boolean(1 * that.apidata.jpgValid);
        }
        if (that.apidata.jpgCompressValid) {
          that.apidata.jpgCompressValid = Boolean(1 * that.apidata.jpgCompressValid);
        }
        delete that.apidata.check;
        delete that.apidata.inspect;
        delete that.apidata.chfilter;
        delete that.apidata.kernalfilter;
        delete that.apidata.csfilter;
        delete that.apidata.dyfilter;
        that.apidata.page = 1;
        that.finaldata = that.apidata;
        that.event._dispatch('addimage.search', { data: that.apidata });
      });
    }
  }, {
    key: 'toggletab',
    value: function toggletab(value) {
      this.apidata = { page: 1, pageSize: 10, valid: true };
      switch (value.id) {
        case 'fs':
          this.apidata.category = 'RADIOLOGY';
          this.apidata.jpgValid = true;
          break;
        case 'bl':
          this.apidata.category = 'PATHOLOGY';
          break;
        case 'qt':
          this.apidata.category = 'OTHER';
          break;
      }
      this.finaldata = this.apidata;
      this.category = value.id;
      this.chooseData.setData(this.searchData[value.id]);
      this.dom.find('.valid .drop-down .selectbox li[data-idx="1"]').click();
      if (this.dom.find('.jpgValid').dom) {
        this.dom.find('.jpgValid .drop-down .selectbox li[data-idx="1"]').click();
      }
      this.setxlk(this.api.hospital);
      this.listHeader(value.id);
      this.initscroll();
    }
  }, {
    key: 'listHeader',
    value: function listHeader(type) {
      var _this3 = this;

      var obj = {
        icon: this.searchData.tableconfig[type].icon,
        type: 'center',
        tablewidth: ES.selctorDoc('.tablearea').box().clientWidth - 40,
        minwidth: 1500
      };
      __webpack_require__.e/* require.ensure */(53/* duplicate */).then((function () {
        _this3.myScroll1 = null;
        var cont_table = __webpack_require__(640);
        _this3.table = _this3.app.loadModule(cont_table, _this3.dom.find('.tablearea'), {
          id: 'datatable',
          header: obj
        });
        _this3.table.event._addEvent('table.pagenumber', function (value) {
          _this3.apidata.page = parseInt(value);
          _this3.table.changenum(_this3.apidata.page);
          _this3.refreshPage = false;
          _this3.event._dispatch('addimage.search', { data: _this3.apidata });
        });
        _this3.table.event._addEvent('table.pagesize', function (value) {
          _this3.apidata.pageSize = value.num;
          _this3.apidata.page = 1;
          _this3.refreshPage = true;
          _this3.event._dispatch('addimage.search', { data: _this3.apidata });
        });
        _this3.dom.find('.list-content').removeClass('hide');
        _this3.initscroll();
        _this3.inittable();
        _this3.refreshPage = true;
        // this.setMain(true);
        _this3.event._dispatch('addimage.search', { data: _this3.apidata });
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
    }
  }, {
    key: 'toggleimagetype',
    value: function toggleimagetype() {
      var that = this;
      for (var i in that.duoxuanobj) {
        that.duoxuanobj[i].reset();
      }
      for (var _i in that.singleobj) {
        that.singleobj[_i].reset();
      }
      that.apidata = { page: 1, pageSize: 10, valid: true };
      that.dom.find('.showData .Timers').html('请选择时间');
      that.dom.find('input').val('');
      if (that.imagetype == 'radio') {
        that.apidata.category = 'RADIOLOGY';
        that.dom.find('.radioonly').removeClass('hide');
        this.setTitle_radio();
      } else {
        delete that.apidata.valid;
        that.apidata.category = 'OTHER';
        that.dom.find('.radioonly').addClass('hide');
        this.setTitle_other();
      }
      that.finaldata = that.apidata;
      that.event._dispatch('addimage.search', { data: that.apidata });
    }
  }, {
    key: 'setxlk',
    value: function setxlk(value) {
      console.log(value, 'xlk');
      this.chooseData.renderHtml(value, 'hospitalCode');
      // that.duoxuanobj['hospitalCode'].renderHtml(value)
    }

    // tableevent(obj) {
    //   let that = this
    //   require.ensure("../../moduleslibs/table/table", function () {
    //     //that.myScroll=null;
    //     that.myScroll1 = null;
    //     let cont_table = require("../../moduleslibs/table/table")
    //     that.table = that.app.loadModule(cont_table, that.dom.find('.datatable'), {
    //       id: 'datatable',
    //       header: obj
    //     });
    //     that.table.event._addEvent('table.pagenumber', function (value) {
    //       that.dom.find('.list-header .check-box').removeClass('choose')
    //       that.apidata.page = parseInt(value);
    //       that.table.changenum(that.apidata.page);
    //       that.refreshPage = false;
    //       that.event._dispatch('addimage.search', {data: that.apidata})
    //     });
    //     that.table.event._addEvent('table.pagesize', function (value) {
    //       that.apidata.pageSize = value.num;
    //       that.apidata.page = 1;
    //       that.refreshPage = true;
    //       that.event._dispatch('addimage.search', {data: that.apidata})
    //     });
    //     that.dom.find('.list-content').removeClass('hide');
    //     that.initscroll();
    //     that.inittable();
    //     that.setMain(true);
    //   })
    // }

  }, {
    key: 'setMain',
    value: function setMain(value, value2) {
      var _this4 = this;

      var that = this;
      that.listdata = that.api.data;
      if (value2) {
        that.listdata = value2;
      }
      if (!that.listdata) {
        that.table.noData();
        return;
      }
      //console.log(that.api.data,'apidata',that.listdata)
      if (that.listdata.list.length > 0) {
        that.listdata.list.forEach(function (val, idx) {
          for (var i in val) {
            val[i] = val[i] == null ? '' : val[i];
          }
          for (var _i2 in _this4.searchData.tableconfig[_this4.category].icon) {
            val[_i2] = val[_i2] ? val[_i2] : '';
          }
          val.finding = val.finding == null ? '' : val.finding;
          val.conclusion = val.conclusion == null ? '' : val.conclusion;
          if (val.importDate) val.importDate = Tool.time(val.importDate, 'yyyy-mm-dd');
          if (val.createDate) val.createDate = Tool.time(val.createDate, 'yyyy-mm-dd');
          if (val.studyDate) val.studyDate = Tool.time(val.studyDate, 'yyyy-mm-dd');
          if (val.patientAge) val.patientAge = Math.floor(val.patientAge / 12);
          Tool.configxlkformat(that.app.constmap['MODALITY']).forEach(function (a, b) {
            if (a.idx == val.modality) {
              val.modality = a.val;
            }
          });
          val.valid = val.valid ? '是' : '否';
          switch (val.patientSex) {
            case 'M':
              val.patientSex = '男';
              break;
            case 'F':
              val.patientSex = '女';
              break;
            default:
              val.patientSex = '';
          }
          Tool.configxlkformat(_this4.app.constmap['BODY_PART']).forEach(function (a, b) {
            if (a.idx == val.bodyPart) {
              val.bodyPart = a.val;
            }
          });
        });
        that.table.setData(that.listdata.list);
        if (that.refreshPage) {
          that.table.getTotal(that.listdata.pages, 7, that.listdata.total);
        }
      } else {
        that.table.noData();
      }
      that.initscroll();
    }
  }, {
    key: 'resetjctj',
    value: function resetjctj() {
      var that = this;
      that.apidata.conditions = [];
      var obj1 = {
        join: ''
      };
      obj1.items = [];
      that.dom.find('.sj .sjli').dom.forEach(function (val, idx) {
        obj1.items.push(that.bianlili(val, 'finding'));
      });
      that.apidata.conditions.push(obj1);
      var obj2 = {
        join: that.dom.find('.middle .nowname').attr('data-idx')
      };
      obj2.items = [];
      that.dom.find('.jl .jlli').dom.forEach(function (val, idx) {
        obj2.items.push(that.bianlili(val, 'conclusion'));
      });
      that.apidata.conditions.push(obj2);
      //console.log(that.apidata)
    }
  }, {
    key: 'bianlili',
    value: function bianlili(val, value) {
      var that = this;
      var tempobj = {};
      if (val.find('.andor').dom) {
        tempobj.join = val.find('.andor .nowname').attr('data-idx');
      } else {
        tempobj.join = '';
      }
      tempobj.key = value;
      tempobj.value = val.find('.liinput').val();
      tempobj.operator = val.find('.bhxlk .nowname').attr('data-idx');
      return tempobj;
    }
  }, {
    key: 'initscroll',
    value: function initscroll() {
      if (this.myScroll) {
        this.myScroll.refresh();
        return;
      }
      var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
      this.dom.find('.scrollarea').attr('id', rid);
      this.myScroll = new IScroll('#' + rid, {
        scrollbars: true,
        mouseWheel: true,
        interactiveScrollbars: true,
        hideScrollbar: false,
        vScrollbar: true,
        shrinkScrollbars: 'scale',
        fadeScrollbars: false,
        disableMouse: true,
        disablePointer: true
      });
    }
  }, {
    key: 'inittable',
    value: function inittable() {
      if (this.myScroll1) {
        this.myScroll1.refresh();
        return;
      }
      var rid = 'aaa_' + Math.floor(new Date().getTime() * Math.random());
      ES.selctorDoc('.maintable').attr('id', rid);
      this.myScroll1 = new IScroll('#' + rid, {
        scrollbars: true,
        mouseWheel: true,
        scrollX: true,
        interactiveScrollbars: true,
        hideScrollbar: false,
        vScrollbar: true,
        shrinkScrollbars: 'scale',
        fadeScrollbars: false,
        disableMouse: true,
        disablePointer: true
      });
    }
  }, {
    key: 'string_to_name',
    value: function string_to_name(string) {
      var _name = 'var ' + string;
      eval(_name);
      return _name;
    }
  }]);

  return addimage;
}(Interstellar.modalBase);

module.exports = addimage;

/***/ }),

/***/ 933:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(934);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(471)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./addimage.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./addimage.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 934:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".addimage {\n  margin: 20px;\n  background: #fff;\n  height: 600px;\n  width: 1100px;\n  font-size: 14px;\n  overflow: hidden;\n  position: relative;\n  margin-left: -550px;\n}\n.addimage .modal-header {\n  padding-left: 20px;\n}\n.addimage .modal-header .modal-title {\n  font-size: 17px;\n  font-weight: bolder;\n}\n.addimage .modal-body {\n  padding: 0;\n}\n.addimage .icon-guanbi {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  cursor: pointer;\n}\n.addimage .topchoose {\n  border-bottom: 1px solid #ccc;\n  font-size: 0;\n}\n.addimage .topchoose a {\n  font-size: 14px;\n  height: 40px;\n  line-height: 40px;\n  width: 100px;\n  text-align: center;\n  display: inline-block;\n  cursor: pointer;\n  color: #333333;\n}\n.addimage .topchoose .choosed {\n  border-bottom: 1px solid #448E97;\n}\n.addimage .btnarea {\n  position: absolute;\n  top: 0px;\n  right: 20px;\n}\n.addimage .btnarea .biaozhubtn {\n  margin-right: 20px;\n  height: 35px;\n  line-height: 35px;\n  padding: 0 20px;\n  background: #4c9fa9;\n  color: #fff;\n}\n.addimage .scrollarea {\n  height: 500px;\n  overflow: hidden;\n  position: relative;\n}\n.addimage .scrollarea > .scroll {\n  overflow: hidden;\n  padding-bottom: 30px;\n}\n.addimage .scrollarea .title {\n  font-size: 18px;\n  height: 60px;\n  line-height: 60px;\n  margin-left: 20px;\n  font-weight: bold;\n}\n.addimage .scrollarea .filterarea {\n  width: 950px;\n  margin: 10px 20px;\n}\n.addimage .scrollarea .filterarea .content {\n  margin-right: 10px;\n}\n.addimage .scrollarea .filterarea .inspectTime {\n  display: block;\n  clear: both;\n}\n.addimage .scrollarea .filterarea > div {\n  display: inline-block;\n  margin: 5px;\n}\n.addimage .scrollarea .filterarea > div > span {\n  width: 100px;\n}\n.addimage .scrollarea .filterarea .inputfw > input {\n  height: 30px;\n  width: 80px;\n  padding: 0 10px;\n  line-height: 25px;\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n}\n.addimage .scrollarea .filterarea .inputfw label {\n  font-size: 18px;\n}\n.addimage .scrollarea .filterarea .duoxuanxlk {\n  width: 180px;\n  height: 30px;\n  line-height: 30px;\n}\n.addimage .scrollarea .filterarea .duoxuanxlk .showname {\n  width: 140px;\n}\n.addimage .scrollarea .filterarea .xlk {\n  width: 180px;\n  height: 30px;\n  line-height: 30px;\n  position: relative;\n}\n.addimage .scrollarea .filterarea .kernal,\n.addimage .scrollarea .filterarea .psxz {\n  margin: 10px;\n}\n.addimage .scrollarea .sjandjl {\n  margin-left: 20px;\n}\n.addimage .scrollarea .sjandjl .xlk {\n  width: 80px;\n  height: 30px;\n  line-height: 30px;\n}\n.addimage .scrollarea .sjandjl .sj,\n.addimage .scrollarea .sjandjl .jl {\n  margin: 10px 0;\n}\n.addimage .scrollarea .sjandjl .sj > li,\n.addimage .scrollarea .sjandjl .jl > li {\n  height: 30px;\n  line-height: 30px;\n  margin-bottom: 10px;\n  display: inline-block;\n}\n.addimage .scrollarea .sjandjl .sj > li > div,\n.addimage .scrollarea .sjandjl .jl > li > div {\n  display: inline-block;\n}\n.addimage .scrollarea .sjandjl .sj > li > input,\n.addimage .scrollarea .sjandjl .jl > li > input {\n  height: 30px;\n  line-height: 30px;\n  width: 80px;\n  padding: 0 10px;\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n  margin: 0 5px;\n}\n.addimage .scrollarea .sjandjl .sj > li > span,\n.addimage .scrollarea .sjandjl .jl > li > span {\n  width: 80px;\n}\n.addimage .scrollarea .sjandjl .middle {\n  display: inline-block;\n  position: relative;\n}\n.addimage .scrollarea .sjandjl .bhxlk .nowname,\n.addimage .scrollarea .sjandjl .andor .nowname {\n  width: 60px;\n}\n.addimage .scrollarea .timefilter {\n  padding: 0 20px;\n  position: relative;\n}\n.addimage .scrollarea .timefilter > div {\n  display: inline-block;\n}\n.addimage .scrollarea .timefilter .timefiltercont,\n.addimage .scrollarea .timefilter .timefiltercont1 {\n  position: relative;\n  margin-right: 15px;\n}\n.addimage .scrollarea .timefilter .timefiltercont .chooseData,\n.addimage .scrollarea .timefilter .timefiltercont1 .chooseData {\n  position: relative;\n}\n.addimage .scrollarea .timefilter .btnarea {\n  text-align: right;\n  display: inline-block;\n  margin-right: 80px;\n}\n.addimage .scrollarea .timefilter .showData {\n  width: 110px;\n  height: 40px;\n  line-height: 40px;\n  border-radius: 4px;\n}\n.addimage .scrollarea .timefilter .biaozhubtn {\n  display: inline-block;\n  padding: 0 20px;\n  height: 40px;\n  color: #fff;\n  line-height: 40px;\n  background: #4c9fa9;\n  border-radius: 4px;\n  text-align: center;\n}\n.addimage .scrollarea .timefilter .searchbtn {\n  margin: 0 20px 0 30px;\n}\n.addimage .scrollarea .timefilter .dwdiv {\n  position: relative;\n  display: inline-block;\n}\n.addimage .scrollarea .timefilter .dwdiv > label {\n  width: 280px;\n  color: red;\n  position: absolute;\n  text-align: left;\n  left: 0;\n}\n.addimage .scrollarea .datatable {\n  display: inline-block;\n  overflow: hidden;\n  position: relative;\n  margin-bottom: 50px;\n}\n.addimage .scrollarea .datatable .table {\n  float: left;\n  width: auto;\n  overflow: hidden;\n}\n.addimage .scrollarea .condition .content {\n  float: left;\n  padding: 5px 0;\n}\n.addimage .scrollarea .condition .content .textData,\n.addimage .scrollarea .condition .content .dText {\n  height: 30px;\n  width: 80px;\n  padding: 0 10px;\n  line-height: 25px;\n  border-radius: 4px;\n  border: 1px solid #e8e8e8;\n}\n.addimage .scrollarea .condition .icon-bianji {\n  margin: 0px 10px;\n  line-height: 30px;\n}\n.addimage .scrollarea .condition .patientAgetype > div {\n  margin-right: 5px;\n}\n.addimage .scrollarea .condition .check > div,\n.addimage .scrollarea .condition .inspect > div {\n  margin-right: 5px;\n}\n.addimage .scrollarea .condition .check .xlk,\n.addimage .scrollarea .condition .inspect .xlk {\n  width: 80px;\n  height: 30px;\n  line-height: 30px;\n}\n.addimage .scrollarea .condition .check .xlk .nowname,\n.addimage .scrollarea .condition .inspect .xlk .nowname {\n  width: 60px;\n}\n.addimage .viewbtn {\n  text-align: right;\n  margin-right: 10px;\n}\n.addimage .viewbtn .biaozhubtn {\n  background: #4c9fa9;\n  color: #fff;\n  display: inline-block;\n  padding: 0 20px;\n  height: 40px;\n  line-height: 40px;\n  border-radius: 4px;\n  text-align: center;\n  margin-right: 20px;\n}\n", ""]);

// exports


/***/ }),

/***/ 935:
/***/ (function(module, exports) {

module.exports = "<div class=\"modal addimage\"> <div class=modal-header> <p class=modal-title data-i18n=xzyh data-name=添加新成员>影像数据筛选</p> <i class=\"iconfont icon-guanbi\"></i> </div> <div class=modal-body> <div class=topchoose> </div> <div class=btnarea> <a class=\"biaozhubtn searchbtn\">查询</a> <a class=\"addall biaozhubtn\">一键添加所有结果</a> </div> <div class=scrollarea> <div class=scroll> <div class=filterarea> </div> <div class=\"viewbtn hide\"> <a class=\"biaozhubtn downloadall\">下载所有影像链接</a> <a class=\"biaozhubtn downloadpart\">下载未被任务选取影像名</a> </div> <div class=tablearea> </div> </div> </div> </div> </div> ";

/***/ }),

/***/ 936:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//任何一种配置都是2位数组
//第一维度是包含全部
//第二个维度是某个条件所要包含的组件类型
//每个组件下面的属性解释
/*
type:组件类型
name:组件的的ode
showname:组件的label名字
datatype:暂时无用，其实应该跟组件返回数据类型挂钩
input:输入框是否可以输入
data:下拉框的内容列表，后期可以跟常量表融合
key:后端对应的字段
out:代表组件是为普通搜素还是高级搜素，true代表为普通搜素，false代表为高级搜素
*/
//组件类型分为以下几种

/*dobuledropdown：多选下拉框
dTexts：两个输入框，并且前面带有文字标
texts：输入框，并且前面带有文字标签
text：输入框，并且前面无文字标签
dropdownS：下拉框，并且前面带有文字标签
dropdown：下拉框，并且前面无文字标签
time：时间控件
editdone：编辑按钮
*/
/*
依照头部列表而来
fs 代表放射，
bl 代表病理
qt 代表其他
*/
function searchcondition(value) {
  var datalist = {
    "fs": [[{ "type": "dobuledropdown", "name": "hospitalCode", "showname": "医院名称", "datatype": "obj", "input": true, "data": [], "key": "name", "out": true }], [{ "type": "dobuledropdown", "name": "bodyPart", "showname": "部位", "datatype": "obj", "data": Tool.configxlkformat(value['BODY_PART']), "key": "", "out": true }], [{ "type": "dobuledropdown", "name": "modality", "showname": "检查机型", "datatype": "obj", "data": Tool.configxlkformat(value['MODALITY']), "key": "", "out": true }], [{ "type": "dobuledropdown", "name": "fileType", "showname": "文件类型", "datatype": "obj", "data": [{ "val": "DCM", "idx": "DCM" }, { "val": "JPG", "idx": "JPG" }], "key": "", "out": true }], [{ "type": "dobuledropdown", "name": "kernelCapital", "showname": "选择重建Kernel首字母", "datatype": "obj", "data": [{ "val": "H", "idx": "H" }, { "val": "B", "idx": "B" }, { "val": "C", "idx": "C" }, { "val": "S", "idx": "S" }, { "val": "T", "idx": "T" }, { "val": "K", "idx": "K" }, { "val": "I", "idx": "I" }], "key": "", "out": true }], [{ "type": "dTexts", "name": "kernalfilter", "showname": "Kernel数值范围", "datatype": "str", "data": null, "key": "", "out": true }], [{ "type": "texts", "name": "keyword", "showname": "关键字", "datatype": "str", "data": null, "key": "", "out": true }], [{ "type": "texts", "name": "equipment", "showname": "设备", "datatype": "str", "data": null, "key": "", "out": true }], [{ "type": "dropdownS", "name": "patientAgeType", "showname": "年龄范围", "datatype": "obj", "data": [{ "val": "岁", "idx": "year" }, { "val": "月", "idx": "month" }], "key": "", "out": true }, { "type": "dText", "name": "patientAgeType", "showname": "年龄范围", "datatype": "obj", "data": null, "key": "", "out": true }], [{ "type": "dropdown", "name": "patientSex", "showname": "性别", "datatype": "obj", "data": [{ "val": "男", "idx": "M" }, { "val": "女", "idx": "F" }], "key": "", "out": true }], [{ "type": "dTexts", "name": "chfilter", "showname": "层厚区间(mm)", "datatype": "obj", "data": null, "key": "", "out": true }], [{ "type": "dropdown", "name": "row", "showname": "排数选择", "datatype": "obj", "data": [{ "val": "16", "idx": "16" }, { "val": "32", "idx": "32" }, { "val": "64", "idx": "64" }, { "val": "128", "idx": "128" }, { "val": "256", "idx": "256" }], "key": "", "out": true }], [{ "type": "texts", "name": "seriesInstanceUID", "showname": "序列号", "datatype": "obj", "data": null, "key": "", "out": true }], [{ "type": "texts", "name": "studyInstanceUID", "showname": "检查号", "datatype": "obj", "data": null, "key": "", "out": true }], [{ "type": "dTexts", "name": "csfilter", "showname": "层数范围", "datatype": "obj", "data": null, "key": "", "out": true }], [{ "type": "dTexts", "name": "dyfilter", "showname": "电压范围", "datatype": "obj", "data": null, "key": "", "out": true }], [{ "type": "dropdownS", "name": "valid", "showname": "序列是否有效", "datatype": "obj", "data": [{ "val": "是", "idx": "1" }, { "val": "否", "idx": "0" }], "key": "", "out": true }], [{ "type": "dropdownS", "name": "jpgValid", "showname": "JPG化是否成功", "datatype": "obj", "data": [{ "val": "是", "idx": "1" }, { "val": "否", "idx": "0" }], "key": "", "out": true, "input": false }], [{ "type": "dTexts", "name": "windowWidth", "showname": "窗宽范围", "datatype": "obj", "data": null, "key": "", "out": true }], [{ "type": "dTexts", "name": "windowCenter", "showname": "窗位范围", "datatype": "obj", "data": null, "key": "", "out": true }], [{ "type": "dropdownS", "name": "mhaValid", "showname": "mha是否成功", "datatype": "obj", "data": [{ "val": "是", "idx": "1" }, { "val": "否", "idx": "0" }], "key": "", "out": true }], [{ "type": "dropdownS", "name": "jpgCompressValid", "showname": "jpg压缩是否成功", "datatype": "obj", "data": [{ "val": "是", "idx": "1" }, { "val": "否", "idx": "0" }], "key": "", "out": true }], [{ "type": "dropdownS", "name": "inspect", "showname": "检查所见", "datatype": "obj", "data": [{ "val": "包含", "idx": "CONTAIN" }, { "val": "不包含", "idx": "NOT_CONTAIN" }], "key": "", "out": true }, { "type": "text", "name": "inspect", "showname": "检查所见", "datatype": "obj", "data": null, "key": "", "out": true }, { "type": "dropdown", "name": "inspect", "showname": "并且", "datatype": "obj", "data": [{ "val": "并且", "idx": "AND" }, { "val": "或者", "idx": "OR" }], "key": "", "out": true }, { "type": "dropdown", "name": "inspect", "showname": "包含", "datatype": "obj", "data": [{ "val": "包含", "idx": "CONTAIN" }, { "val": "不包含", "idx": "NOT_CONTAIN" }], "key": "", "out": true }, { "type": "text", "name": "inspect", "showname": "检查所见", "datatype": "obj", "data": null, "key": "", "out": true }, { "type": "dropdown", "name": "inspect", "showname": "并且", "datatype": "obj", "data": [{ "val": "并且", "idx": "AND" }, { "val": "或者", "idx": "OR" }], "key": "", "out": true }, { "type": "dropdown", "name": "inspect", "showname": "包含", "datatype": "obj", "data": [{ "val": "包含", "idx": "CONTAIN" }, { "val": "不包含", "idx": "NOT_CONTAIN" }], "key": "", "out": true }, { "type": "text", "name": "inspect", "showname": "检查所见", "datatype": "obj", "data": null, "key": "", "out": true }, { "type": "dropdown", "name": "inspect", "showname": "并且", "datatype": "obj", "data": [{ "val": "并且", "idx": "AND" }, { "val": "或者", "idx": "OR" }], "key": "", "out": true }], [{ "type": "dropdownS", "name": "check", "showname": "诊断所见", "datatype": "obj", "data": [{ "val": "包含", "idx": "CONTAIN" }, { "val": "不包含", "idx": "NOT_CONTAIN" }], "key": "", "out": true }, { "type": "text", "name": "check", "showname": "诊断", "datatype": "obj", "data": null, "key": "", "out": true }, { "type": "dropdown", "name": "check", "showname": "并且", "datatype": "obj", "data": [{ "val": "并且", "idx": "AND" }, { "val": "或者", "idx": "OR" }], "key": "", "out": true }, { "type": "dropdown", "name": "check", "showname": "包含", "datatype": "obj", "data": [{ "val": "包含", "idx": "CONTAIN" }, { "val": "不包含", "idx": "NOT_CONTAIN" }], "key": "", "out": true }, { "type": "text", "name": "check", "showname": "诊断", "datatype": "obj", "data": null, "key": "", "out": true }, { "type": "dropdown", "name": "check", "showname": "并且", "datatype": "obj", "data": [{ "val": "并且", "idx": "AND" }, { "val": "或者", "idx": "OR" }], "key": "", "out": true }, { "type": "dropdown", "name": "check", "showname": "包含", "datatype": "obj", "data": [{ "val": "包含", "idx": "CONTAIN" }, { "val": "不包含", "idx": "NOT_CONTAIN" }], "key": "", "out": true }, { "type": "text", "name": "check", "showname": "诊断", "datatype": "obj", "data": null, "key": "", "out": true }], [{ "type": "time", "name": "inspectTime", "showname": "检查时间", "datatype": "obj", "data": null, "key": "", "out": true }], [{ "type": "time", "name": "uploadTime", "showname": "上传时间", "datatype": "obj", "data": null, "key": "", "out": true }]],
    "bl": [[{ "type": "dobuledropdown", "name": "hospitalCode", "showname": "医院名称", "datatype": "obj", "input": true, "data": [], "key": "name", "out": true }], [{ "type": "dobuledropdown", "name": "bodyPart", "showname": "部位", "datatype": "obj", "data": Tool.configxlkformat(value['BODY_PART']), "key": "", "out": true }], [{ "type": "dobuledropdown", "name": "modality", "showname": "检查机型", "datatype": "obj", "data": Tool.configxlkformat(value['MODALITY']), "key": "", "out": true }], [{ "type": "dobuledropdown", "name": "fileType", "showname": "文件类型", "datatype": "obj", "data": [{ "val": "DCM", "idx": "DCM" }, { "val": "JPG", "idx": "JPG" }], "key": "", "out": true }], [{ "type": "texts", "name": "keyword", "showname": "关键字", "datatype": "str", "data": null, "key": "", "out": true }], [{ "type": "texts", "name": "equipment", "showname": "设备", "datatype": "str", "data": null, "key": "", "out": true }], [{ "type": "texts", "name": "seriesInstanceUID", "showname": "序列号", "datatype": "obj", "data": null, "key": "", "out": true }], [{ "type": "texts", "name": "studyInstanceUID", "showname": "检查号", "datatype": "obj", "data": null, "key": "", "out": true }], [{ "type": "dropdownS", "name": "valid", "showname": "序列是否有效", "datatype": "obj", "data": [{ "val": "是", "idx": "1" }, { "val": "否", "idx": "0" }], "key": "", "out": true }], [{ "type": "dropdownS", "name": "jpgCompressValid", "showname": "jpg压缩是否成功", "datatype": "obj", "data": [{ "val": "是", "idx": "1" }, { "val": "否", "idx": "0" }], "key": "", "out": true }], [{ "type": "dropdown", "name": "stainingMethod", "showname": "染色方法", "datatype": "obj", "data": Tool.configxlkformat(value['STAINING_METHODS']), "key": "", "out": true }], [{ "type": "dropdown", "name": "sampleClassification", "showname": "样本分类", "datatype": "obj", "data": Tool.configxlkformat(value['SAMPLE_CLASSIFICATION']), "key": "", "out": true }], [{ "type": "dropdown", "name": "sampleLocation", "showname": "采样位置", "datatype": "obj", "data": Tool.configxlkformat(value['SAMPLE_LOCATION']), "key": "", "out": true }], [{ "type": "dropdown", "name": "sampleMethod", "showname": "取样方法", "datatype": "obj", "data": Tool.configxlkformat(value['SAMPLING_METHODS']), "key": "", "out": true }], [{ "type": "time", "name": "uploadTime", "showname": "上传时间", "datatype": "obj", "data": null, "key": "", "out": true }]],
    "qt": [[{ "type": "dobuledropdown", "name": "hospitalCode", "showname": "医院名称", "datatype": "obj", "input": true, "data": [], "key": "name", "out": true }], [{ "type": "dobuledropdown", "name": "bodyPart", "showname": "部位", "datatype": "obj", "data": Tool.configxlkformat(value['BODY_PART']), "key": "", "out": true }], [{ "type": "dobuledropdown", "name": "modality", "showname": "检查机型", "datatype": "obj", "data": Tool.configxlkformat(value['MODALITY']), "key": "", "out": true }], [{ "type": "dobuledropdown", "name": "fileType", "showname": "文件类型", "datatype": "obj", "data": [{ "val": "DCM", "idx": "DCM" }, { "val": "JPG", "idx": "JPG" }], "key": "", "out": true }], [{ "type": "texts", "name": "keyword", "showname": "关键字", "datatype": "str", "data": null, "key": "", "out": true }], [{ "type": "texts", "name": "equipment", "showname": "设备", "datatype": "str", "data": null, "key": "", "out": true }], [{ "type": "texts", "name": "seriesInstanceUID", "showname": "序列号", "datatype": "obj", "data": null, "key": "", "out": true }], [{ "type": "texts", "name": "studyInstanceUID", "showname": "检查号", "datatype": "obj", "data": null, "key": "", "out": true }], [{ "type": "dropdownS", "name": "valid", "showname": "序列是否有效", "datatype": "obj", "data": [{ "val": "是", "idx": "1" }, { "val": "否", "idx": "0" }], "key": "", "out": true }], [{ "type": "dropdownS", "name": "jpgCompressValid", "showname": "jpg压缩是否成功", "datatype": "obj", "data": [{ "val": "是", "idx": "1" }, { "val": "否", "idx": "0" }], "key": "", "out": true }], [{ "type": "time", "name": "uploadTime", "showname": "上传时间", "datatype": "obj", "data": null, "key": "", "out": true }]],
    "tableconfig": {
      fs: {
        icon: {
          "seriesInstanceUID": { name: '<span data-i18n="date" data-name="检查时间">序列号</span>', type: 'text', code: 'date', w: '11%', ww: '11%', n: "40" },
          "hospitalCode": { name: '<span data-i18n="age" data-name="年龄">医院名称</span>', type: 'text', code: 'checkid', w: '7%', ww: '7%' },
          "bodyPart": { name: '<span data-i18n="age" data-name="年龄">部位</span>', type: 'text', code: 'pid', w: '4%', ww: '4%' },
          "modality": { name: '<span data-i18n="age" data-name="年龄">检查机型</span>', type: 'text', code: 'pname', w: '5%', ww: '5%' },
          "studyDate": { name: '<span data-i18n="age" data-name="年龄">检查时间</span>', type: 'text', code: 'psex', w: '7%', ww: '7%' },
          "studyInstanceUID": { name: '<span data-i18n="age" data-name="年龄">检查号</span>', type: 'text', code: 'age', w: '9%', ww: '9%' },
          "fileType": { name: '<span data-i18n="shebei" data-name="设备">文件类型</span>', type: 'text', code: 'shebei', w: '6%', ww: '6%' },
          "patientAge": { name: '<span data-i18n="handler" data-name="状态">年龄</span>', type: 'text', code: 'handler', w: '6%', ww: '6%' },
          "patientSex": { name: '<span data-i18n="action" data-name="操作">性别</span>', type: 'text', code: 'action', w: '5%', ww: '5%' },
          "importDate": { name: '<span data-i18n="action" data-name="操作">上传时间</span>', type: 'text', code: 'action', w: '6%', ww: '6%' },
          "valid": { name: '<span data-i18n="action" data-name="操作">序列是否有效</span>', type: 'text', code: 'action', w: '6%', ww: '6%' },
          "keyword": { name: '<span data-i18n="action" data-name="操作">关键字</span>', type: 'text', code: 'action', w: '8%', ww: '8%' },
          "finding": { name: '<span data-i18n="action" data-name="操作">检查所见</span>', type: 'text', code: 'action', w: '10%', ww: '10%' },
          "conclusion": { name: '<span data-i18n="action" data-name="操作">诊断</span>', type: 'text', code: 'action', w: '10%', ww: '10%' }
        },
        actionicon: {
          "operation": { name: '<span data-i18n="action" data-name="操作">操作</span>', type: 'action', code: 'action', w: '100%', ww: '100%' }
        }
      },
      qt: {
        icon: {
          "seriesInstanceUID": { name: '<span data-i18n="date" data-name="检查时间">序列号</span>', type: 'text', code: 'date', w: '11%', ww: '11%', n: "40" },
          "hospitalCode": { name: '<span data-i18n="age" data-name="年龄">医院名称</span>', type: 'text', code: 'checkid', w: '10%', ww: '10%' },
          "bodyPart": { name: '<span data-i18n="age" data-name="年龄">部位</span>', type: 'text', code: 'pid', w: '10%', ww: '10%' },
          "studyInstanceUID": { name: '<span data-i18n="age" data-name="年龄">检查号</span>', type: 'text', code: 'age', w: '9%', ww: '9%' },
          "modality": { name: '<span data-i18n="age" data-name="年龄">检查设备</span>', type: 'text', code: 'pname', w: '15%', ww: '15%' },
          "fileType": { name: '<span data-i18n="shebei" data-name="设备">文件类型</span>', type: 'text', code: 'shebei', w: '15%', ww: '15%' },
          "importDate": { name: '<span data-i18n="action" data-name="操作">上传时间</span>', type: 'text', code: 'action', w: '15%', ww: '15%' },
          "keyword": { name: '<span data-i18n="action" data-name="操作">关键字</span>', type: 'text', code: 'action', w: '15%', ww: '15%' }
        },
        actionicon: {
          "operation": { name: '<span data-i18n="action" data-name="操作">操作</span>', type: 'action', code: 'action', w: '100%', ww: '100%' }
        }
      },
      bl: {
        icon: {
          "seriesInstanceUID": { name: '<span data-i18n="date" data-name="检查时间">序列号</span>', type: 'text', code: 'date', w: '9%', ww: '9%', n: "40" },
          "hospitalCode": { name: '<span data-i18n="age" data-name="年龄">医院名称</span>', type: 'text', code: 'checkid', w: '9%', ww: '9%' },
          "bodyPart": { name: '<span data-i18n="age" data-name="年龄">部位</span>', type: 'text', code: 'pid', w: '6%', ww: '6%' },
          "modality": { name: '<span data-i18n="age" data-name="年龄">检查设备</span>', type: 'text', code: 'pname', w: '7%', ww: '7%' },
          "fileType": { name: '<span data-i18n="shebei" data-name="设备">文件类型</span>', type: 'text', code: 'shebei', w: '8%', ww: '8%' },
          "studyInstanceUID": { name: '<span data-i18n="age" data-name="年龄">检查号</span>', type: 'text', code: 'age', w: '9%', ww: '9%' },
          "stainingMethod": { name: '<span data-i18n="shebei" data-name="设备">染色方法</span>', type: 'text', code: 'shebei', w: '8%', ww: '8%' },
          "sampleClassification": { name: '<span data-i18n="shebei" data-name="设备">样本分类</span>', type: 'text', code: 'shebei', w: '8%', ww: '8%' },
          "sampleLocation": { name: '<span data-i18n="shebei" data-name="设备">采样位置</span>', type: 'text', code: 'shebei', w: '8%', ww: '8%' },
          "sampleMethod": { name: '<span data-i18n="shebei" data-name="设备">取样方法</span>', type: 'text', code: 'shebei', w: '8%', ww: '8%' },
          "importDate": { name: '<span data-i18n="action" data-name="操作">上传时间</span>', type: 'text', code: 'action', w: '10%', ww: '10%' },
          "keyword": { name: '<span data-i18n="action" data-name="操作">关键字</span>', type: 'text', code: 'action', w: '10%', ww: '10%' }
        },
        actionicon: {
          "operation": { name: '<span data-i18n="action" data-name="操作">操作</span>', type: 'action', code: 'action', w: '100%', ww: '100%' }
        }
      }
    }
  };
  return datalist;
}
module.exports = searchcondition;

/***/ }),

/***/ 937:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(470)(false);
// imports


// module
exports.push([module.i, ".createprothree {\n  margin: 20px;\n  background: #fff;\n  height: 100%;\n  font-size: 14px;\n  overflow: hidden;\n  border: 1px solid #fff;\n  position: relative;\n}\n.createprothree .propreview {\n  float: right;\n  margin-right: 20px;\n  background: #4c9fa9;\n  color: #FFF;\n  height: 40px;\n  line-height: 40px;\n  padding: 0 20px;\n}\n.createprothree .bigtitle {\n  padding: 20px;\n  font-size: 17px;\n}\n.createprothree .title {\n  font-size: 16px;\n  height: 40px;\n  line-height: 40px;\n  padding-left: 66px;\n  margin-bottom: 20px;\n}\n.createprothree .imagedata,\n.createprothree .suanfadata {\n  margin: 30px 0 50px 60px;\n}\n.createprothree .imagedata .biaozhubtn,\n.createprothree .suanfadata .biaozhubtn {\n  height: 30px;\n  line-height: 30px;\n  width: 160px;\n  margin-right: 50px;\n  border: 1px solid #4c9fa9;\n  color: #333;\n}\n.createprothree .imagedata .viewimage,\n.createprothree .suanfadata .viewimage,\n.createprothree .imagedata .viewsfdata,\n.createprothree .suanfadata .viewsfdata {\n  margin-top: 20px;\n  display: inline-block;\n  color: #4c9fa9;\n}\n.createprothree .imagedata .upload,\n.createprothree .suanfadata .upload {\n  margin-top: 20px;\n}\n.createprothree .file {\n  position: absolute;\n  margin-left: 2000px;\n  margin-top: 2000px;\n}\n.createprothree .yyytask {\n  margin: 0 60px;\n  position: relative;\n}\n.createprothree .yyytask .listtitle {\n  line-height: 50px;\n}\n.createprothree .copytask {\n  position: absolute;\n  right: 20px;\n  top: 0;\n}\n.createprothree .isgetalgres,\n.createprothree .copd,\n.createprothree .fjj {\n  margin-left: 60px;\n  margin-bottom: 20px;\n}\n.createprothree .isgetalgres .toolChoose p,\n.createprothree .copd .toolChoose p,\n.createprothree .fjj .toolChoose p {\n  display: inline-block;\n  margin: 10px 20px;\n}\n.createprothree .isgetalgres p,\n.createprothree .copd p,\n.createprothree .fjj p {\n  margin-top: 20px;\n}\n", ""]);

// exports


/***/ })

});
//# sourceMappingURL=0eb0a2e1fd57b4ac5c48.2.min.js.map